
C:\stm32_workspace\synth_02\Debug\synth_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080d4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  08008260  08008260  00018260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008cd8  08008cd8  00018cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008cdc  08008cdc  00018cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000005a4  20000000  08008ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000205a4  2**0
                  CONTENTS
  7 .bss          0000653c  200005a4  200005a4  000205a4  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20006ae0  20006ae0  000205a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000205a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c10f  00000000  00000000  000205d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ead  00000000  00000000  0002c6e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000eb8  00000000  00000000  0002e590  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d58  00000000  00000000  0002f448  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005686  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004c5c  00000000  00000000  00035826  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000ee  00000000  00000000  0003a482  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000044b4  00000000  00000000  0003a570  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000000c8  00000000  00000000  0003ea24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000001c5  00000000  00000000  0003eaec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200005a4 	.word	0x200005a4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008244 	.word	0x08008244

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200005a8 	.word	0x200005a8
 80001c4:	08008244 	.word	0x08008244

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73bb      	strb	r3, [r7, #14]
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	78db      	ldrb	r3, [r3, #3]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d038      	beq.n	8000bea <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <NVIC_Init+0xbc>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b82:	0a1b      	lsrs	r3, r3, #8
 8000b84:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	f1c3 0304 	rsb	r3, r3, #4
 8000b8c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000b8e:	7b7a      	ldrb	r2, [r7, #13]
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	fa42 f303 	asr.w	r3, r2, r3
 8000b96:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	785b      	ldrb	r3, [r3, #1]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	789a      	ldrb	r2, [r3, #2]
 8000baa:	7b7b      	ldrb	r3, [r7, #13]
 8000bac:	4013      	ands	r3, r2
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000bbc:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <NVIC_Init+0xc0>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	7bfa      	ldrb	r2, [r7, #15]
 8000bc6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bca:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <NVIC_Init+0xc0>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	095b      	lsrs	r3, r3, #5
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	f003 031f 	and.w	r3, r3, #31
 8000bde:	2101      	movs	r1, #1
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000be4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000be8:	e00f      	b.n	8000c0a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bea:	490c      	ldr	r1, [pc, #48]	; (8000c1c <NVIC_Init+0xc0>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	095b      	lsrs	r3, r3, #5
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	f003 031f 	and.w	r3, r3, #31
 8000bfe:	2201      	movs	r2, #1
 8000c00:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c02:	f100 0320 	add.w	r3, r0, #32
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000c24:	2101      	movs	r1, #1
 8000c26:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c2a:	f001 f973 	bl	8001f14 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c34:	f001 f96e 	bl	8001f14 <RCC_APB2PeriphResetCmd>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000c5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c5e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	791b      	ldrb	r3, [r3, #4]
 8000c64:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <ADC_Init+0xa8>)
 8000c82:	4013      	ands	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c8e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000c94:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	795b      	ldrb	r3, [r3, #5]
 8000c9a:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cae:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000cb6:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	7d1b      	ldrb	r3, [r3, #20]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	7afb      	ldrb	r3, [r7, #11]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000cc6:	7afb      	ldrb	r3, [r7, #11]
 8000cc8:	051b      	lsls	r3, r3, #20
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	c0fff7fd 	.word	0xc0fff7fd

08000ce8 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	751a      	strb	r2, [r3, #20]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <ADC_CommonInit+0x48>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <ADC_CommonInit+0x4c>)
 8000d3e:	4013      	ands	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000d4a:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000d50:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000d56:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <ADC_CommonInit+0x48>)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	6053      	str	r3, [r2, #4]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	40012300 	.word	0x40012300
 8000d74:	fffc30e0 	.word	0xfffc30e0

08000d78 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d006      	beq.n	8000dc4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f043 0201 	orr.w	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000dc2:	e005      	b.n	8000dd0 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f023 0201 	bic.w	r2, r3, #1
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	609a      	str	r2, [r3, #8]
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	4608      	mov	r0, r1
 8000de6:	4611      	mov	r1, r2
 8000de8:	461a      	mov	r2, r3
 8000dea:	4603      	mov	r3, r0
 8000dec:	70fb      	strb	r3, [r7, #3]
 8000dee:	460b      	mov	r3, r1
 8000df0:	70bb      	strb	r3, [r7, #2]
 8000df2:	4613      	mov	r3, r2
 8000df4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	2b09      	cmp	r3, #9
 8000e02:	d923      	bls.n	8000e4c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	f1a3 020a 	sub.w	r2, r3, #10
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	2207      	movs	r2, #7
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	4013      	ands	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000e28:	7879      	ldrb	r1, [r7, #1]
 8000e2a:	78fb      	ldrb	r3, [r7, #3]
 8000e2c:	f1a3 020a 	sub.w	r2, r3, #10
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	e01e      	b.n	8000e8a <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000e52:	78fa      	ldrb	r2, [r7, #3]
 8000e54:	4613      	mov	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	2207      	movs	r2, #7
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000e6c:	7879      	ldrb	r1, [r7, #1]
 8000e6e:	78fa      	ldrb	r2, [r7, #3]
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000e8a:	78bb      	ldrb	r3, [r7, #2]
 8000e8c:	2b06      	cmp	r3, #6
 8000e8e:	d821      	bhi.n	8000ed4 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e94:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000e96:	78bb      	ldrb	r3, [r7, #2]
 8000e98:	1e5a      	subs	r2, r3, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	221f      	movs	r2, #31
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000eb2:	78f9      	ldrb	r1, [r7, #3]
 8000eb4:	78bb      	ldrb	r3, [r7, #2]
 8000eb6:	1e5a      	subs	r2, r3, #1
 8000eb8:	4613      	mov	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000ed2:	e047      	b.n	8000f64 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000ed4:	78bb      	ldrb	r3, [r7, #2]
 8000ed6:	2b0c      	cmp	r3, #12
 8000ed8:	d821      	bhi.n	8000f1e <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000ee0:	78bb      	ldrb	r3, [r7, #2]
 8000ee2:	1fda      	subs	r2, r3, #7
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	221f      	movs	r2, #31
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000efc:	78f9      	ldrb	r1, [r7, #3]
 8000efe:	78bb      	ldrb	r3, [r7, #2]
 8000f00:	1fda      	subs	r2, r3, #7
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000f1c:	e022      	b.n	8000f64 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f22:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000f24:	78bb      	ldrb	r3, [r7, #2]
 8000f26:	f1a3 020d 	sub.w	r2, r3, #13
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	221f      	movs	r2, #31
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000f42:	78f9      	ldrb	r1, [r7, #3]
 8000f44:	78bb      	ldrb	r3, [r7, #2]
 8000f46:	f1a3 020d 	sub.w	r2, r3, #13
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d006      	beq.n	8000f90 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000f8e:	e005      	b.n	8000f9c <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8000fc6:	e005      	b.n	8000fd4 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	0a1b      	lsrs	r3, r3, #8
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	601a      	str	r2, [r3, #0]
}                    
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <DAC_Init+0x64>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8001024:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4013      	ands	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001044:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800104a:	4313      	orrs	r3, r2
 800104c:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <DAC_Init+0x64>)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6013      	str	r3, [r2, #0]
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40007400 	.word	0x40007400

08001074 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d009      	beq.n	800109a <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <DAC_Cmd+0x48>)
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <DAC_Cmd+0x48>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2001      	movs	r0, #1
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	fa00 f303 	lsl.w	r3, r0, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8001098:	e009      	b.n	80010ae <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <DAC_Cmd+0x48>)
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <DAC_Cmd+0x48>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2001      	movs	r0, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	fa00 f303 	lsl.w	r3, r0, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	4013      	ands	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]
  }
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40007400 	.word	0x40007400

080010c0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <DAC_SetChannel1Data+0x34>)
 80010d2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	3308      	adds	r3, #8
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	461a      	mov	r2, r3
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	6013      	str	r3, [r2, #0]
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40007400 	.word	0x40007400

080010f8 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f023 0201 	bic.w	r2, r3, #1
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2221      	movs	r2, #33	; 0x21
 800112e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a46      	ldr	r2, [pc, #280]	; (800124c <DMA_DeInit+0x154>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d103      	bne.n	8001140 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8001138:	4b45      	ldr	r3, [pc, #276]	; (8001250 <DMA_DeInit+0x158>)
 800113a:	223d      	movs	r2, #61	; 0x3d
 800113c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800113e:	e07e      	b.n	800123e <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a44      	ldr	r2, [pc, #272]	; (8001254 <DMA_DeInit+0x15c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d104      	bne.n	8001152 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8001148:	4b41      	ldr	r3, [pc, #260]	; (8001250 <DMA_DeInit+0x158>)
 800114a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800114e:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001150:	e075      	b.n	800123e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a40      	ldr	r2, [pc, #256]	; (8001258 <DMA_DeInit+0x160>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d104      	bne.n	8001164 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <DMA_DeInit+0x158>)
 800115c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001160:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001162:	e06c      	b.n	800123e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a3d      	ldr	r2, [pc, #244]	; (800125c <DMA_DeInit+0x164>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d104      	bne.n	8001176 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800116c:	4b38      	ldr	r3, [pc, #224]	; (8001250 <DMA_DeInit+0x158>)
 800116e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8001172:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001174:	e063      	b.n	800123e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a39      	ldr	r2, [pc, #228]	; (8001260 <DMA_DeInit+0x168>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d103      	bne.n	8001186 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800117e:	4b34      	ldr	r3, [pc, #208]	; (8001250 <DMA_DeInit+0x158>)
 8001180:	4a38      	ldr	r2, [pc, #224]	; (8001264 <DMA_DeInit+0x16c>)
 8001182:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001184:	e05b      	b.n	800123e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a37      	ldr	r2, [pc, #220]	; (8001268 <DMA_DeInit+0x170>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d103      	bne.n	8001196 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <DMA_DeInit+0x158>)
 8001190:	4a36      	ldr	r2, [pc, #216]	; (800126c <DMA_DeInit+0x174>)
 8001192:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001194:	e053      	b.n	800123e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a35      	ldr	r2, [pc, #212]	; (8001270 <DMA_DeInit+0x178>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d103      	bne.n	80011a6 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800119e:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <DMA_DeInit+0x158>)
 80011a0:	4a34      	ldr	r2, [pc, #208]	; (8001274 <DMA_DeInit+0x17c>)
 80011a2:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011a4:	e04b      	b.n	800123e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a33      	ldr	r2, [pc, #204]	; (8001278 <DMA_DeInit+0x180>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d104      	bne.n	80011b8 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 80011ae:	4b28      	ldr	r3, [pc, #160]	; (8001250 <DMA_DeInit+0x158>)
 80011b0:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80011b4:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011b6:	e042      	b.n	800123e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a30      	ldr	r2, [pc, #192]	; (800127c <DMA_DeInit+0x184>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d103      	bne.n	80011c8 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80011c0:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <DMA_DeInit+0x188>)
 80011c2:	223d      	movs	r2, #61	; 0x3d
 80011c4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011c6:	e03a      	b.n	800123e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a2e      	ldr	r2, [pc, #184]	; (8001284 <DMA_DeInit+0x18c>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d104      	bne.n	80011da <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <DMA_DeInit+0x188>)
 80011d2:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80011d6:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011d8:	e031      	b.n	800123e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a2a      	ldr	r2, [pc, #168]	; (8001288 <DMA_DeInit+0x190>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d104      	bne.n	80011ec <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80011e2:	4b27      	ldr	r3, [pc, #156]	; (8001280 <DMA_DeInit+0x188>)
 80011e4:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80011e8:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011ea:	e028      	b.n	800123e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a27      	ldr	r2, [pc, #156]	; (800128c <DMA_DeInit+0x194>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d104      	bne.n	80011fe <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <DMA_DeInit+0x188>)
 80011f6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80011fa:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011fc:	e01f      	b.n	800123e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a23      	ldr	r2, [pc, #140]	; (8001290 <DMA_DeInit+0x198>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d103      	bne.n	800120e <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <DMA_DeInit+0x188>)
 8001208:	4a16      	ldr	r2, [pc, #88]	; (8001264 <DMA_DeInit+0x16c>)
 800120a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800120c:	e017      	b.n	800123e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a20      	ldr	r2, [pc, #128]	; (8001294 <DMA_DeInit+0x19c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d103      	bne.n	800121e <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <DMA_DeInit+0x188>)
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <DMA_DeInit+0x174>)
 800121a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800121c:	e00f      	b.n	800123e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <DMA_DeInit+0x1a0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d103      	bne.n	800122e <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <DMA_DeInit+0x188>)
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <DMA_DeInit+0x17c>)
 800122a:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800122c:	e007      	b.n	800123e <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a1a      	ldr	r2, [pc, #104]	; (800129c <DMA_DeInit+0x1a4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d103      	bne.n	800123e <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <DMA_DeInit+0x188>)
 8001238:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800123c:	60da      	str	r2, [r3, #12]
    }
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40026010 	.word	0x40026010
 8001250:	40026000 	.word	0x40026000
 8001254:	40026028 	.word	0x40026028
 8001258:	40026040 	.word	0x40026040
 800125c:	40026058 	.word	0x40026058
 8001260:	40026070 	.word	0x40026070
 8001264:	2000003d 	.word	0x2000003d
 8001268:	40026088 	.word	0x40026088
 800126c:	20000f40 	.word	0x20000f40
 8001270:	400260a0 	.word	0x400260a0
 8001274:	203d0000 	.word	0x203d0000
 8001278:	400260b8 	.word	0x400260b8
 800127c:	40026410 	.word	0x40026410
 8001280:	40026400 	.word	0x40026400
 8001284:	40026428 	.word	0x40026428
 8001288:	40026440 	.word	0x40026440
 800128c:	40026458 	.word	0x40026458
 8001290:	40026470 	.word	0x40026470
 8001294:	40026488 	.word	0x40026488
 8001298:	400264a0 	.word	0x400264a0
 800129c:	400264b8 	.word	0x400264b8

080012a0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <DMA_Init+0xac>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80012ca:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80012d6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80012e2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80012ee:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f4:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f023 0307 	bic.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	4313      	orrs	r3, r2
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60da      	str	r2, [r3, #12]
}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	f01c803f 	.word	0xf01c803f

08001350 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop

080013c0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f043 0201 	orr.w	r2, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80013de:	e005      	b.n	80013ec <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 0201 	bic.w	r2, r3, #1
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	601a      	str	r2, [r3, #0]
  }
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a15      	ldr	r2, [pc, #84]	; (8001464 <DMA_GetFlagStatus+0x6c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d802      	bhi.n	8001418 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <DMA_GetFlagStatus+0x70>)
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	e001      	b.n	800141c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <DMA_GetFlagStatus+0x74>)
 800141a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	e002      	b.n	8001434 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800143a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800143e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	4013      	ands	r3, r2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800144a:	2301      	movs	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
 800144e:	e001      	b.n	8001454 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001454:	7dfb      	ldrb	r3, [r7, #23]
}
 8001456:	4618      	mov	r0, r3
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	4002640f 	.word	0x4002640f
 8001468:	40026000 	.word	0x40026000
 800146c:	40026400 	.word	0x40026400

08001470 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a10      	ldr	r2, [pc, #64]	; (80014c0 <DMA_ClearFlag+0x50>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d802      	bhi.n	8001488 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <DMA_ClearFlag+0x54>)
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	e001      	b.n	800148c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <DMA_ClearFlag+0x58>)
 800148a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d007      	beq.n	80014a6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800149c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80014a4:	e006      	b.n	80014b4 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80014ac:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	6093      	str	r3, [r2, #8]
  }    
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	4002640f 	.word	0x4002640f
 80014c4:	40026000 	.word	0x40026000
 80014c8:	40026400 	.word	0x40026400

080014cc <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	4613      	mov	r3, r2
 80014d8:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00f      	beq.n	8001504 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	e005      	b.n	8001504 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2b80      	cmp	r3, #128	; 0x80
 8001508:	d014      	beq.n	8001534 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d008      	beq.n	8001522 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f003 031e 	and.w	r3, r3, #30
 800151a:	431a      	orrs	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8001520:	e008      	b.n	8001534 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	f003 031e 	and.w	r3, r3, #30
 800152c:	43db      	mvns	r3, r3
 800152e:	401a      	ands	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800154c:	4b34      	ldr	r3, [pc, #208]	; (8001620 <EXTI_Init+0xe0>)
 800154e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	799b      	ldrb	r3, [r3, #6]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d04f      	beq.n	80015f8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001558:	4931      	ldr	r1, [pc, #196]	; (8001620 <EXTI_Init+0xe0>)
 800155a:	4b31      	ldr	r3, [pc, #196]	; (8001620 <EXTI_Init+0xe0>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	43db      	mvns	r3, r3
 8001564:	4013      	ands	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001568:	492d      	ldr	r1, [pc, #180]	; (8001620 <EXTI_Init+0xe0>)
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <EXTI_Init+0xe0>)
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	43db      	mvns	r3, r3
 8001574:	4013      	ands	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	791b      	ldrb	r3, [r3, #4]
 800157c:	461a      	mov	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4413      	add	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	6811      	ldr	r1, [r2, #0]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001592:	4923      	ldr	r1, [pc, #140]	; (8001620 <EXTI_Init+0xe0>)
 8001594:	4b22      	ldr	r3, [pc, #136]	; (8001620 <EXTI_Init+0xe0>)
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	43db      	mvns	r3, r3
 800159e:	4013      	ands	r3, r2
 80015a0:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80015a2:	491f      	ldr	r1, [pc, #124]	; (8001620 <EXTI_Init+0xe0>)
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <EXTI_Init+0xe0>)
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	4013      	ands	r3, r2
 80015b0:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	795b      	ldrb	r3, [r3, #5]
 80015b6:	2b10      	cmp	r3, #16
 80015b8:	d10e      	bne.n	80015d8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80015ba:	4919      	ldr	r1, [pc, #100]	; (8001620 <EXTI_Init+0xe0>)
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <EXTI_Init+0xe0>)
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80015c8:	4915      	ldr	r1, [pc, #84]	; (8001620 <EXTI_Init+0xe0>)
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <EXTI_Init+0xe0>)
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80015d6:	e01d      	b.n	8001614 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <EXTI_Init+0xe0>)
 80015da:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	795b      	ldrb	r3, [r3, #5]
 80015e0:	461a      	mov	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4413      	add	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	6811      	ldr	r1, [r2, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80015f6:	e00d      	b.n	8001614 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	791b      	ldrb	r3, [r3, #4]
 80015fc:	461a      	mov	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4413      	add	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	6811      	ldr	r1, [r2, #0]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	43d2      	mvns	r2, r2
 8001610:	400a      	ands	r2, r1
 8001612:	601a      	str	r2, [r3, #0]
  }
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40013c00 	.word	0x40013c00

08001624 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <EXTI_ClearITPendingBit+0x1c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6153      	str	r3, [r2, #20]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40013c00 	.word	0x40013c00

08001644 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e076      	b.n	800174e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001660:	2201      	movs	r2, #1
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	429a      	cmp	r2, r3
 800167a:	d165      	bne.n	8001748 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2103      	movs	r1, #3
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	401a      	ands	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	791b      	ldrb	r3, [r3, #4]
 800169a:	4619      	mov	r1, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	791b      	ldrb	r3, [r3, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d003      	beq.n	80016ba <GPIO_Init+0x76>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	791b      	ldrb	r3, [r3, #4]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d12e      	bne.n	8001718 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2103      	movs	r1, #3
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	401a      	ands	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	795b      	ldrb	r3, [r3, #5]
 80016d8:	4619      	mov	r1, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	2101      	movs	r1, #1
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	401a      	ands	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	799b      	ldrb	r3, [r3, #6]
 8001706:	4619      	mov	r1, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	b29b      	uxth	r3, r3
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	b29b      	uxth	r3, r3
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	b29b      	uxth	r3, r3
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2103      	movs	r1, #3
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	79db      	ldrb	r3, [r3, #7]
 8001738:	4619      	mov	r1, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	2b0f      	cmp	r3, #15
 8001752:	d985      	bls.n	8001660 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001754:	bf00      	nop
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800176e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	71da      	strb	r2, [r3, #7]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	887a      	ldrh	r2, [r7, #2]
 80017ae:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80017b0:	e002      	b.n	80017b8 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	887a      	ldrh	r2, [r7, #2]
 80017b6:	835a      	strh	r2, [r3, #26]
  }
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80017dc:	787a      	ldrb	r2, [r7, #1]
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	08db      	lsrs	r3, r3, #3
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	08db      	lsrs	r3, r3, #3
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3208      	adds	r2, #8
 8001800:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001804:	887b      	ldrh	r3, [r7, #2]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	210f      	movs	r1, #15
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	ea02 0103 	and.w	r1, r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f100 0208 	add.w	r2, r0, #8
 800181e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	b29b      	uxth	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3208      	adds	r2, #8
 800182e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4313      	orrs	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001838:	887b      	ldrh	r3, [r7, #2]
 800183a:	08db      	lsrs	r3, r3, #3
 800183c:	b29b      	uxth	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3208      	adds	r2, #8
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop

08001858 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a17      	ldr	r2, [pc, #92]	; (80018c0 <I2C_DeInit+0x68>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d10a      	bne.n	800187e <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001868:	2101      	movs	r1, #1
 800186a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800186e:	f000 fb31 	bl	8001ed4 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8001872:	2100      	movs	r1, #0
 8001874:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001878:	f000 fb2c 	bl	8001ed4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800187c:	e01c      	b.n	80018b8 <I2C_DeInit+0x60>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <I2C_DeInit+0x6c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d10a      	bne.n	800189c <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001886:	2101      	movs	r1, #1
 8001888:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800188c:	f000 fb22 	bl	8001ed4 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8001890:	2100      	movs	r1, #0
 8001892:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001896:	f000 fb1d 	bl	8001ed4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800189a:	e00d      	b.n	80018b8 <I2C_DeInit+0x60>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <I2C_DeInit+0x70>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d109      	bne.n	80018b8 <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80018a4:	2101      	movs	r1, #1
 80018a6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80018aa:	f000 fb13 	bl	8001ed4 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80018ae:	2100      	movs	r1, #0
 80018b0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80018b4:	f000 fb0e 	bl	8001ed4 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40005400 	.word	0x40005400
 80018c4:	40005800 	.word	0x40005800
 80018c8:	40005c00 	.word	0x40005c00

080018cc <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80018da:	2300      	movs	r3, #0
 80018dc:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80018de:	2304      	movs	r3, #4
 80018e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80018e2:	4b57      	ldr	r3, [pc, #348]	; (8001a40 <I2C_Init+0x174>)
 80018e4:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	889b      	ldrh	r3, [r3, #4]
 80018ea:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80018ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f9e1 	bl	8001cc0 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	4a4f      	ldr	r2, [pc, #316]	; (8001a44 <I2C_Init+0x178>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	0c9b      	lsrs	r3, r3, #18
 800190c:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800190e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001910:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001912:	4313      	orrs	r3, r2
 8001914:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800191a:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	b29a      	uxth	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a44      	ldr	r2, [pc, #272]	; (8001a48 <I2C_Init+0x17c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d815      	bhi.n	8001966 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8001948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800194a:	2b03      	cmp	r3, #3
 800194c:	d801      	bhi.n	8001952 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800194e:	2304      	movs	r3, #4
 8001950:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001952:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001956:	4313      	orrs	r3, r2
 8001958:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800195a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800195c:	3301      	adds	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	841a      	strh	r2, [r3, #32]
 8001964:	e040      	b.n	80019e8 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	88db      	ldrh	r3, [r3, #6]
 800196a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800196e:	4293      	cmp	r3, r2
 8001970:	d109      	bne.n	8001986 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001984:	e00e      	b.n	80019a4 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	009a      	lsls	r2, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800199c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800199e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a2:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80019a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d103      	bne.n	80019b6 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80019ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80019b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b29b      	uxth	r3, r3
 80019be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019c6:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80019c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <I2C_Init+0x180>)
 80019d4:	fb82 1203 	smull	r1, r2, r2, r3
 80019d8:	1192      	asrs	r2, r2, #6
 80019da:	17db      	asrs	r3, r3, #31
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	b29b      	uxth	r3, r3
 80019e0:	3301      	adds	r3, #1
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80019ec:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001a04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a06:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001a0a:	f023 0302 	bic.w	r3, r3, #2
 8001a0e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	889a      	ldrh	r2, [r3, #4]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	895b      	ldrh	r3, [r3, #10]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001a26:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	899a      	ldrh	r2, [r3, #12]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	891b      	ldrh	r3, [r3, #8]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	811a      	strh	r2, [r3, #8]
}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	007a1200 	.word	0x007a1200
 8001a44:	431bde83 	.word	0x431bde83
 8001a48:	000186a0 	.word	0x000186a0
 8001a4c:	10624dd3 	.word	0x10624dd3

08001a50 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8001a72:	e007      	b.n	8001a84 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	801a      	strh	r2, [r3, #0]
  }
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8001ab2:	e007      	b.n	8001ac4 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	801a      	strh	r2, [r3, #0]
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d008      	beq.n	8001af4 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8001af2:	e007      	b.n	8001b04 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	801a      	strh	r2, [r3, #0]
  }
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	70fb      	strb	r3, [r7, #3]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001b20:	78bb      	ldrb	r3, [r7, #2]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	70fb      	strb	r3, [r7, #3]
 8001b2e:	e003      	b.n	8001b38 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	f023 0301 	bic.w	r3, r3, #1
 8001b36:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	821a      	strh	r2, [r3, #16]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d008      	beq.n	8001b70 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8001b6e:	e007      	b.n	8001b80 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	801a      	strh	r2, [r3, #0]
  }
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	821a      	strh	r2, [r3, #16]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	8a1b      	ldrh	r3, [r3, #16]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001bde:	2300      	movs	r3, #0
 8001be0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	8a9b      	ldrh	r3, [r3, #20]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	8b1b      	ldrh	r3, [r3, #24]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	041b      	lsls	r3, r3, #16
 8001bf6:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c02:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	401a      	ands	r2, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d102      	bne.n	8001c16 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001c10:	2301      	movs	r3, #1
 8001c12:	75fb      	strb	r3, [r7, #23]
 8001c14:	e001      	b.n	8001c1a <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001c16:	2300      	movs	r3, #0
 8001c18:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	0f1b      	lsrs	r3, r3, #28
 8001c46:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c4e:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3314      	adds	r3, #20
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e005      	b.n	8001c6a <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3318      	adds	r3, #24
 8001c68:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001c76:	2301      	movs	r3, #1
 8001c78:	75fb      	strb	r3, [r7, #23]
 8001c7a:	e001      	b.n	8001c80 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop

08001c90 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ca4:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	829a      	strh	r2, [r3, #20]
}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop

08001cc0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001ce0:	4b48      	ldr	r3, [pc, #288]	; (8001e04 <RCC_GetClocksFreq+0x144>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d007      	beq.n	8001d00 <RCC_GetClocksFreq+0x40>
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d009      	beq.n	8001d08 <RCC_GetClocksFreq+0x48>
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d13f      	bne.n	8001d78 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a43      	ldr	r2, [pc, #268]	; (8001e08 <RCC_GetClocksFreq+0x148>)
 8001cfc:	601a      	str	r2, [r3, #0]
      break;
 8001cfe:	e03f      	b.n	8001d80 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a42      	ldr	r2, [pc, #264]	; (8001e0c <RCC_GetClocksFreq+0x14c>)
 8001d04:	601a      	str	r2, [r3, #0]
      break;
 8001d06:	e03b      	b.n	8001d80 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001d08:	4b3e      	ldr	r3, [pc, #248]	; (8001e04 <RCC_GetClocksFreq+0x144>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d10:	0d9b      	lsrs	r3, r3, #22
 8001d12:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d14:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <RCC_GetClocksFreq+0x144>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d1c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00d      	beq.n	8001d40 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001d24:	4a39      	ldr	r2, [pc, #228]	; (8001e0c <RCC_GetClocksFreq+0x14c>)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d2c:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <RCC_GetClocksFreq+0x144>)
 8001d2e:	6859      	ldr	r1, [r3, #4]
 8001d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d34:	400b      	ands	r3, r1
 8001d36:	099b      	lsrs	r3, r3, #6
 8001d38:	fb03 f302 	mul.w	r3, r3, r2
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	e00c      	b.n	8001d5a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001d40:	4a31      	ldr	r2, [pc, #196]	; (8001e08 <RCC_GetClocksFreq+0x148>)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d48:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <RCC_GetClocksFreq+0x144>)
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d50:	400b      	ands	r3, r1
 8001d52:	099b      	lsrs	r3, r3, #6
 8001d54:	fb03 f302 	mul.w	r3, r3, r2
 8001d58:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <RCC_GetClocksFreq+0x144>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d62:	0c1b      	lsrs	r3, r3, #16
 8001d64:	3301      	adds	r3, #1
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]
      break;
 8001d76:	e003      	b.n	8001d80 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a23      	ldr	r2, [pc, #140]	; (8001e08 <RCC_GetClocksFreq+0x148>)
 8001d7c:	601a      	str	r2, [r3, #0]
      break;
 8001d7e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001d80:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <RCC_GetClocksFreq+0x144>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d88:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001d90:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <RCC_GetClocksFreq+0x150>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4413      	add	r3, r2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	40da      	lsrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001da8:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <RCC_GetClocksFreq+0x144>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001db0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	0a9b      	lsrs	r3, r3, #10
 8001db6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001db8:	4a15      	ldr	r2, [pc, #84]	; (8001e10 <RCC_GetClocksFreq+0x150>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	40da      	lsrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <RCC_GetClocksFreq+0x144>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001dd8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	0b5b      	lsrs	r3, r3, #13
 8001dde:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001de0:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <RCC_GetClocksFreq+0x150>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4413      	add	r3, r2
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	40da      	lsrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	60da      	str	r2, [r3, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3724      	adds	r7, #36	; 0x24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40023800 	.word	0x40023800
 8001e08:	00f42400 	.word	0x00f42400
 8001e0c:	007a1200 	.word	0x007a1200
 8001e10:	20000000 	.word	0x20000000

08001e14 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d006      	beq.n	8001e34 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001e26:	490a      	ldr	r1, [pc, #40]	; (8001e50 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001e32:	e006      	b.n	8001e42 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001e34:	4906      	ldr	r1, [pc, #24]	; (8001e50 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	4013      	ands	r3, r2
 8001e40:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800

08001e54 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001e66:	490a      	ldr	r1, [pc, #40]	; (8001e90 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001e72:	e006      	b.n	8001e82 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001e74:	4906      	ldr	r1, [pc, #24]	; (8001e90 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4013      	ands	r3, r2
 8001e80:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800

08001e94 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d006      	beq.n	8001eb4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001ea6:	490a      	ldr	r1, [pc, #40]	; (8001ed0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001eaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001eb2:	e006      	b.n	8001ec2 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001eb4:	4906      	ldr	r1, [pc, #24]	; (8001ed0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <RCC_APB2PeriphClockCmd+0x3c>)
 8001eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800

08001ed4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001ee6:	490a      	ldr	r1, [pc, #40]	; (8001f10 <RCC_APB1PeriphResetCmd+0x3c>)
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <RCC_APB1PeriphResetCmd+0x3c>)
 8001eea:	6a1a      	ldr	r2, [r3, #32]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001ef2:	e006      	b.n	8001f02 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001ef4:	4906      	ldr	r1, [pc, #24]	; (8001f10 <RCC_APB1PeriphResetCmd+0x3c>)
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <RCC_APB1PeriphResetCmd+0x3c>)
 8001ef8:	6a1a      	ldr	r2, [r3, #32]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	4013      	ands	r3, r2
 8001f00:	620b      	str	r3, [r1, #32]
  }
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800

08001f14 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001f26:	490a      	ldr	r1, [pc, #40]	; (8001f50 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001f32:	e006      	b.n	8001f42 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001f34:	4906      	ldr	r1, [pc, #24]	; (8001f50 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <RCC_APB2PeriphResetCmd+0x3c>)
 8001f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4013      	ands	r3, r2
 8001f40:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800

08001f54 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a2e      	ldr	r2, [pc, #184]	; (8002018 <SPI_I2S_DeInit+0xc4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d10a      	bne.n	8001f7a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001f64:	2101      	movs	r1, #1
 8001f66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f6a:	f7ff ffd3 	bl	8001f14 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001f6e:	2100      	movs	r1, #0
 8001f70:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f74:	f7ff ffce 	bl	8001f14 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001f78:	e049      	b.n	800200e <SPI_I2S_DeInit+0xba>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a27      	ldr	r2, [pc, #156]	; (800201c <SPI_I2S_DeInit+0xc8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10a      	bne.n	8001f98 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001f82:	2101      	movs	r1, #1
 8001f84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f88:	f7ff ffa4 	bl	8001ed4 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f92:	f7ff ff9f 	bl	8001ed4 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001f96:	e03a      	b.n	800200e <SPI_I2S_DeInit+0xba>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a21      	ldr	r2, [pc, #132]	; (8002020 <SPI_I2S_DeInit+0xcc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d10a      	bne.n	8001fb6 <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fa6:	f7ff ff95 	bl	8001ed4 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001faa:	2100      	movs	r1, #0
 8001fac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fb0:	f7ff ff90 	bl	8001ed4 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001fb4:	e02b      	b.n	800200e <SPI_I2S_DeInit+0xba>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <SPI_I2S_DeInit+0xd0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10a      	bne.n	8001fd4 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fc4:	f7ff ffa6 	bl	8001f14 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fce:	f7ff ffa1 	bl	8001f14 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001fd2:	e01c      	b.n	800200e <SPI_I2S_DeInit+0xba>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a14      	ldr	r2, [pc, #80]	; (8002028 <SPI_I2S_DeInit+0xd4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d10a      	bne.n	8001ff2 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8001fdc:	2101      	movs	r1, #1
 8001fde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001fe2:	f7ff ff97 	bl	8001f14 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001fec:	f7ff ff92 	bl	8001f14 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001ff0:	e00d      	b.n	800200e <SPI_I2S_DeInit+0xba>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <SPI_I2S_DeInit+0xd8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d109      	bne.n	800200e <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002000:	f7ff ff88 	bl	8001f14 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8002004:	2100      	movs	r1, #0
 8002006:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800200a:	f7ff ff83 	bl	8001f14 <RCC_APB2PeriphResetCmd>
    }
  }
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40013000 	.word	0x40013000
 800201c:	40003800 	.word	0x40003800
 8002020:	40003c00 	.word	0x40003c00
 8002024:	40013400 	.word	0x40013400
 8002028:	40015000 	.word	0x40015000
 800202c:	40015400 	.word	0x40015400

08002030 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8002030:	b480      	push	{r7}
 8002032:	b08b      	sub	sp, #44	; 0x2c
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800203a:	2300      	movs	r3, #0
 800203c:	837b      	strh	r3, [r7, #26]
 800203e:	2302      	movs	r3, #2
 8002040:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002042:	2300      	movs	r3, #0
 8002044:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002046:	2301      	movs	r3, #1
 8002048:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	8b9b      	ldrh	r3, [r3, #28]
 8002062:	b29b      	uxth	r3, r3
 8002064:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002068:	f023 030f 	bic.w	r3, r3, #15
 800206c:	b29a      	uxth	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2202      	movs	r2, #2
 8002076:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	8b9b      	ldrh	r3, [r3, #28]
 800207c:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d104      	bne.n	8002090 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 8002086:	2300      	movs	r3, #0
 8002088:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800208a:	2302      	movs	r3, #2
 800208c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800208e:	e072      	b.n	8002176 <I2S_Init+0x146>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	889b      	ldrh	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8002098:	2301      	movs	r3, #1
 800209a:	847b      	strh	r3, [r7, #34]	; 0x22
 800209c:	e001      	b.n	80020a2 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800209e:	2302      	movs	r3, #2
 80020a0:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80020a2:	4b4d      	ldr	r3, [pc, #308]	; (80021d8 <I2S_Init+0x1a8>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 80020ae:	4a4a      	ldr	r2, [pc, #296]	; (80021d8 <I2S_Init+0x1a8>)
 80020b0:	4b49      	ldr	r3, [pc, #292]	; (80021d8 <I2S_Init+0x1a8>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020b8:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 80020ba:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <I2S_Init+0x1a8>)
 80020bc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020c4:	4013      	ands	r3, r2
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020cc:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 80020ce:	4b42      	ldr	r3, [pc, #264]	; (80021d8 <I2S_Init+0x1a8>)
 80020d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020d4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80020d8:	0f1b      	lsrs	r3, r3, #28
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 80020e0:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <I2S_Init+0x1a8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020e8:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 80020ea:	4a3c      	ldr	r2, [pc, #240]	; (80021dc <I2S_Init+0x1ac>)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	fb02 f203 	mul.w	r2, r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	88db      	ldrh	r3, [r3, #6]
 8002104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002108:	d10f      	bne.n	800212a <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	0a1a      	lsrs	r2, r3, #8
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	461a      	mov	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002120:	b29b      	uxth	r3, r3
 8002122:	3305      	adds	r3, #5
 8002124:	b29b      	uxth	r3, r3
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	e012      	b.n	8002150 <I2S_Init+0x120>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800212a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800212c:	015b      	lsls	r3, r3, #5
 800212e:	461a      	mov	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fbb3 f2f2 	udiv	r2, r3, r2
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	461a      	mov	r2, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	b29b      	uxth	r3, r3
 800214a:	3305      	adds	r3, #5
 800214c:	b29b      	uxth	r3, r3
 800214e:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <I2S_Init+0x1b0>)
 8002154:	fba2 2303 	umull	r2, r3, r2, r3
 8002158:	08db      	lsrs	r3, r3, #3
 800215a:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	b29b      	uxth	r3, r3
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	085b      	lsrs	r3, r3, #1
 800216e:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8002170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8002176:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002178:	2b01      	cmp	r3, #1
 800217a:	d902      	bls.n	8002182 <I2S_Init+0x152>
 800217c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800217e:	2bff      	cmp	r3, #255	; 0xff
 8002180:	d903      	bls.n	800218a <I2S_Init+0x15a>
  {
    /* Set the default values */
    i2sdiv = 2;
 8002182:	2302      	movs	r3, #2
 8002184:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	88da      	ldrh	r2, [r3, #6]
 800218e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002190:	4313      	orrs	r3, r2
 8002192:	b29a      	uxth	r2, r3
 8002194:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002196:	4313      	orrs	r3, r2
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	8859      	ldrh	r1, [r3, #2]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80021ae:	4303      	orrs	r3, r0
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	430b      	orrs	r3, r1
 80021b4:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	8b7b      	ldrh	r3, [r7, #26]
 80021bc:	4313      	orrs	r3, r2
 80021be:	b29b      	uxth	r3, r3
 80021c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021c4:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	8b7a      	ldrh	r2, [r7, #26]
 80021ca:	839a      	strh	r2, [r3, #28]
}
 80021cc:	bf00      	nop
 80021ce:	372c      	adds	r7, #44	; 0x2c
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	40023800 	.word	0x40023800
 80021dc:	007a1200 	.word	0x007a1200
 80021e0:	cccccccd 	.word	0xcccccccd

080021e4 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d008      	beq.n	8002208 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	8b9b      	ldrh	r3, [r3, #28]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002200:	b29a      	uxth	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 8002206:	e007      	b.n	8002218 <I2S_Cmd+0x34>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8b9b      	ldrh	r3, [r3, #28]
 800220c:	b29b      	uxth	r3, r3
 800220e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002212:	b29a      	uxth	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	839a      	strh	r2, [r3, #28]
  }
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	819a      	strh	r2, [r3, #12]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop

08002244 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
 8002250:	4613      	mov	r3, r2
 8002252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	889b      	ldrh	r3, [r3, #4]
 800225e:	b29a      	uxth	r2, r3
 8002260:	887b      	ldrh	r3, [r7, #2]
 8002262:	4313      	orrs	r3, r2
 8002264:	b29a      	uxth	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 800226a:	e009      	b.n	8002280 <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	889b      	ldrh	r3, [r3, #4]
 8002270:	b29a      	uxth	r2, r3
 8002272:	887b      	ldrh	r3, [r7, #2]
 8002274:	43db      	mvns	r3, r3
 8002276:	b29b      	uxth	r3, r3
 8002278:	4013      	ands	r3, r2
 800227a:	b29a      	uxth	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	809a      	strh	r2, [r3, #4]
  }
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
 8002298:	4613      	mov	r3, r2
 800229a:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800229c:	2300      	movs	r3, #0
 800229e:	81fb      	strh	r3, [r7, #14]
 80022a0:	2300      	movs	r3, #0
 80022a2:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80022ac:	89fb      	ldrh	r3, [r7, #14]
 80022ae:	2201      	movs	r2, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 80022b6:	78bb      	ldrb	r3, [r7, #2]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	889b      	ldrh	r3, [r3, #4]
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	89bb      	ldrh	r3, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 80022cc:	e009      	b.n	80022e2 <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	889b      	ldrh	r3, [r3, #4]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	89bb      	ldrh	r3, [r7, #12]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	b29b      	uxth	r3, r3
 80022da:	4013      	ands	r3, r2
 80022dc:	b29a      	uxth	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	809a      	strh	r2, [r3, #4]
  }
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop

080022f0 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	891b      	ldrh	r3, [r3, #8]
 8002304:	b29a      	uxth	r2, r3
 8002306:	887b      	ldrh	r3, [r7, #2]
 8002308:	4013      	ands	r3, r2
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	e001      	b.n	800231a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8002328:	b490      	push	{r4, r7}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	460a      	mov	r2, r1
 8002332:	71fb      	strb	r3, [r7, #7]
 8002334:	4613      	mov	r3, r2
 8002336:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800233c:	79bb      	ldrb	r3, [r7, #6]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800234c:	4916      	ldr	r1, [pc, #88]	; (80023a8 <SYSCFG_EXTILineConfig+0x80>)
 800234e:	79bb      	ldrb	r3, [r7, #6]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4618      	mov	r0, r3
 8002356:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <SYSCFG_EXTILineConfig+0x80>)
 8002358:	79bb      	ldrb	r3, [r7, #6]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	b2db      	uxtb	r3, r3
 800235e:	3302      	adds	r3, #2
 8002360:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43db      	mvns	r3, r3
 8002368:	401a      	ands	r2, r3
 800236a:	1c83      	adds	r3, r0, #2
 800236c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8002370:	480d      	ldr	r0, [pc, #52]	; (80023a8 <SYSCFG_EXTILineConfig+0x80>)
 8002372:	79bb      	ldrb	r3, [r7, #6]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461c      	mov	r4, r3
 800237a:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <SYSCFG_EXTILineConfig+0x80>)
 800237c:	79bb      	ldrb	r3, [r7, #6]
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	b2db      	uxtb	r3, r3
 8002382:	3302      	adds	r3, #2
 8002384:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002388:	79f9      	ldrb	r1, [r7, #7]
 800238a:	79bb      	ldrb	r3, [r7, #6]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	431a      	orrs	r2, r3
 8002398:	1ca3      	adds	r3, r4, #2
 800239a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc90      	pop	{r4, r7}
 80023a6:	4770      	bx	lr
 80023a8:	40013800 	.word	0x40013800

080023ac <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a29      	ldr	r2, [pc, #164]	; (8002468 <TIM_TimeBaseInit+0xbc>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d013      	beq.n	80023f0 <TIM_TimeBaseInit+0x44>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a28      	ldr	r2, [pc, #160]	; (800246c <TIM_TimeBaseInit+0xc0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00f      	beq.n	80023f0 <TIM_TimeBaseInit+0x44>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d6:	d00b      	beq.n	80023f0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a25      	ldr	r2, [pc, #148]	; (8002470 <TIM_TimeBaseInit+0xc4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d007      	beq.n	80023f0 <TIM_TimeBaseInit+0x44>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a24      	ldr	r2, [pc, #144]	; (8002474 <TIM_TimeBaseInit+0xc8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d003      	beq.n	80023f0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a23      	ldr	r2, [pc, #140]	; (8002478 <TIM_TimeBaseInit+0xcc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d108      	bne.n	8002402 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80023f0:	89fb      	ldrh	r3, [r7, #14]
 80023f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	885a      	ldrh	r2, [r3, #2]
 80023fc:	89fb      	ldrh	r3, [r7, #14]
 80023fe:	4313      	orrs	r3, r2
 8002400:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a1d      	ldr	r2, [pc, #116]	; (800247c <TIM_TimeBaseInit+0xd0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00c      	beq.n	8002424 <TIM_TimeBaseInit+0x78>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <TIM_TimeBaseInit+0xd4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d008      	beq.n	8002424 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002412:	89fb      	ldrh	r3, [r7, #14]
 8002414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002418:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	891a      	ldrh	r2, [r3, #8]
 800241e:	89fb      	ldrh	r3, [r7, #14]
 8002420:	4313      	orrs	r3, r2
 8002422:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	89fa      	ldrh	r2, [r7, #14]
 8002428:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	881a      	ldrh	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <TIM_TimeBaseInit+0xbc>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d003      	beq.n	800244a <TIM_TimeBaseInit+0x9e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a09      	ldr	r2, [pc, #36]	; (800246c <TIM_TimeBaseInit+0xc0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d104      	bne.n	8002454 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	7a9b      	ldrb	r3, [r3, #10]
 800244e:	b29a      	uxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	829a      	strh	r2, [r3, #20]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40010000 	.word	0x40010000
 800246c:	40010400 	.word	0x40010400
 8002470:	40000400 	.word	0x40000400
 8002474:	40000800 	.word	0x40000800
 8002478:	40000c00 	.word	0x40000c00
 800247c:	40001000 	.word	0x40001000
 8002480:	40001400 	.word	0x40001400

08002484 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f04f 32ff 	mov.w	r2, #4294967295
 8002492:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	729a      	strb	r2, [r3, #10]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80024da:	e007      	b.n	80024ec <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	801a      	strh	r2, [r3, #0]
  }
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	899b      	ldrh	r3, [r3, #12]
 8002512:	b29a      	uxth	r2, r3
 8002514:	887b      	ldrh	r3, [r7, #2]
 8002516:	4313      	orrs	r3, r2
 8002518:	b29a      	uxth	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800251e:	e009      	b.n	8002534 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	899b      	ldrh	r3, [r3, #12]
 8002524:	b29a      	uxth	r2, r3
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	43db      	mvns	r3, r3
 800252a:	b29b      	uxth	r3, r3
 800252c:	4013      	ands	r3, r2
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	819a      	strh	r2, [r3, #12]
  }
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800254c:	887b      	ldrh	r3, [r7, #2]
 800254e:	43db      	mvns	r3, r3
 8002550:	b29a      	uxth	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	821a      	strh	r2, [r3, #16]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop

08002564 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	889b      	ldrh	r3, [r3, #4]
 8002574:	b29b      	uxth	r3, r3
 8002576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257a:	b29a      	uxth	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	889b      	ldrh	r3, [r3, #4]
 8002584:	b29a      	uxth	r2, r3
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	4313      	orrs	r3, r2
 800258a:	b29a      	uxth	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	809a      	strh	r2, [r3, #4]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	4a06      	ldr	r2, [pc, #24]	; (80025c4 <STM_EVAL_LEDOn+0x28>)
 80025aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ae:	79fa      	ldrb	r2, [r7, #7]
 80025b0:	4905      	ldr	r1, [pc, #20]	; (80025c8 <STM_EVAL_LEDOn+0x2c>)
 80025b2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80025b6:	831a      	strh	r2, [r3, #24]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	20000010 	.word	0x20000010
 80025c8:	08008260 	.word	0x08008260

080025cc <EVAL_AUDIO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	603a      	str	r2, [r7, #0]
 80025d6:	80fb      	strh	r3, [r7, #6]
 80025d8:	460b      	mov	r3, r1
 80025da:	717b      	strb	r3, [r7, #5]
  /* Perform low layer Codec initialization */
  if (Codec_Init(OutputDevice, VOLUME_CONVERT(Volume), AudioFreq) != 0)
 80025dc:	797b      	ldrb	r3, [r7, #5]
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d80b      	bhi.n	80025fa <EVAL_AUDIO_Init+0x2e>
 80025e2:	797a      	ldrb	r2, [r7, #5]
 80025e4:	4613      	mov	r3, r2
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	4a0d      	ldr	r2, [pc, #52]	; (8002620 <EVAL_AUDIO_Init+0x54>)
 80025ec:	fb82 1203 	smull	r1, r2, r2, r3
 80025f0:	1152      	asrs	r2, r2, #5
 80025f2:	17db      	asrs	r3, r3, #31
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	e000      	b.n	80025fc <EVAL_AUDIO_Init+0x30>
 80025fa:	2364      	movs	r3, #100	; 0x64
 80025fc:	88f8      	ldrh	r0, [r7, #6]
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	f000 f8f3 	bl	80027ec <Codec_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <EVAL_AUDIO_Init+0x44>
  {
    return 1;                
 800260c:	2301      	movs	r3, #1
 800260e:	e002      	b.n	8002616 <EVAL_AUDIO_Init+0x4a>
  }
  else
  {    
    /* I2S data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    Audio_MAL_Init();
 8002610:	f000 fcb4 	bl	8002f7c <Audio_MAL_Init>
    
    /* Return 0 when all operations are OK */
    return 0;
 8002614:	2300      	movs	r3, #0
  }
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	51eb851f 	.word	0x51eb851f

08002624 <EVAL_AUDIO_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data half-words (16bits).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Play(uint16_t* pBuffer, uint32_t Size)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  /* Set the total number of data to be played (count in half-word) */
  AudioTotalSize = Size;
 800262e:	4a15      	ldr	r2, [pc, #84]	; (8002684 <EVAL_AUDIO_Play+0x60>)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6013      	str	r3, [r2, #0]

  /* Call the audio Codec Play function */
  Codec_Play();
 8002634:	f000 f986 	bl	8002944 <Codec_Play>
  
  /* Update the Media layer and enable it for play */  
  Audio_MAL_Play((uint32_t)pBuffer, (uint32_t)(DMA_MAX(Size)));
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002640:	4293      	cmp	r3, r2
 8002642:	bf28      	it	cs
 8002644:	4613      	movcs	r3, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f000 fd40 	bl	80030cc <Audio_MAL_Play>
  
  /* Update the remaining number of data to be played */
  AudioRemSize = Size - DMA_MAX(AudioTotalSize);
 800264c:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <EVAL_AUDIO_Play+0x60>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002654:	4293      	cmp	r3, r2
 8002656:	bf28      	it	cs
 8002658:	4613      	movcs	r3, r2
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <EVAL_AUDIO_Play+0x64>)
 8002660:	6013      	str	r3, [r2, #0]
  
  /* Update the current audio pointer position */
  CurrentPos = pBuffer + DMA_MAX(AudioTotalSize);
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <EVAL_AUDIO_Play+0x60>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800266a:	4293      	cmp	r3, r2
 800266c:	bf28      	it	cs
 800266e:	4613      	movcs	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <EVAL_AUDIO_Play+0x68>)
 8002678:	6013      	str	r3, [r2, #0]
  
  return 0;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000020 	.word	0x20000020
 8002688:	20000024 	.word	0x20000024
 800268c:	200049b0 	.word	0x200049b0

08002690 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
#ifndef AUDIO_MAL_MODE_NORMAL
  uint16_t *pAddr = (uint16_t *)CurrentPos;
 8002696:	4b36      	ldr	r3, [pc, #216]	; (8002770 <Audio_MAL_IRQHandler+0xe0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	603b      	str	r3, [r7, #0]
  uint32_t Size = AudioRemSize;
 800269c:	4b35      	ldr	r3, [pc, #212]	; (8002774 <Audio_MAL_IRQHandler+0xe4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	607b      	str	r3, [r7, #4]
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80026a2:	4b35      	ldr	r3, [pc, #212]	; (8002778 <Audio_MAL_IRQHandler+0xe8>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b35      	ldr	r3, [pc, #212]	; (800277c <Audio_MAL_IRQHandler+0xec>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4610      	mov	r0, r2
 80026ae:	f7fe fea3 	bl	80013f8 <DMA_GetFlagStatus>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00c      	beq.n	80026d2 <Audio_MAL_IRQHandler+0x42>
    }
    
 #elif defined(AUDIO_MAL_MODE_CIRCULAR)
    /* Manage the remaining file size and new address offset: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_TransferComplete_CallBack((uint32_t)pAddr, Size);    
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4618      	mov	r0, r3
 80026be:	f001 f811 	bl	80036e4 <EVAL_AUDIO_TransferComplete_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 80026c2:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <Audio_MAL_IRQHandler+0xe8>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4b2d      	ldr	r3, [pc, #180]	; (800277c <Audio_MAL_IRQHandler+0xec>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4619      	mov	r1, r3
 80026cc:	4610      	mov	r0, r2
 80026ce:	f7fe fecf 	bl	8001470 <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_TC_EN */

#ifdef AUDIO_MAL_DMA_IT_HT_EN
  /* Half Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT) != RESET)
 80026d2:	4b29      	ldr	r3, [pc, #164]	; (8002778 <Audio_MAL_IRQHandler+0xe8>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4b2a      	ldr	r3, [pc, #168]	; (8002780 <Audio_MAL_IRQHandler+0xf0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4619      	mov	r1, r3
 80026dc:	4610      	mov	r0, r2
 80026de:	f7fe fe8b 	bl	80013f8 <DMA_GetFlagStatus>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00c      	beq.n	8002702 <Audio_MAL_IRQHandler+0x72>
  {
    /* Manage the remaining file size and new address offset: This function
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */
    EVAL_AUDIO_HalfTransfer_CallBack((uint32_t)pAddr, Size);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 ffeb 	bl	80036c8 <EVAL_AUDIO_HalfTransfer_CallBack>

    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT);
 80026f2:	4b21      	ldr	r3, [pc, #132]	; (8002778 <Audio_MAL_IRQHandler+0xe8>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4b22      	ldr	r3, [pc, #136]	; (8002780 <Audio_MAL_IRQHandler+0xf0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4619      	mov	r1, r3
 80026fc:	4610      	mov	r0, r2
 80026fe:	f7fe feb7 	bl	8001470 <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <Audio_MAL_IRQHandler+0xe8>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <Audio_MAL_IRQHandler+0xf4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f7fe fe73 	bl	80013f8 <DMA_GetFlagStatus>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d115      	bne.n	8002744 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 8002718:	4b17      	ldr	r3, [pc, #92]	; (8002778 <Audio_MAL_IRQHandler+0xe8>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <Audio_MAL_IRQHandler+0xf8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	4610      	mov	r0, r2
 8002724:	f7fe fe68 	bl	80013f8 <DMA_GetFlagStatus>
 8002728:	4603      	mov	r3, r0
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10a      	bne.n	8002744 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <Audio_MAL_IRQHandler+0xe8>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b16      	ldr	r3, [pc, #88]	; (800278c <Audio_MAL_IRQHandler+0xfc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4619      	mov	r1, r3
 8002738:	4610      	mov	r0, r2
 800273a:	f7fe fe5d 	bl	80013f8 <DMA_GetFlagStatus>
 800273e:	4603      	mov	r3, r0
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 8002740:	2b00      	cmp	r3, #0
 8002742:	d010      	beq.n	8002766 <Audio_MAL_IRQHandler+0xd6>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
    
  {
    /* Manage the error generated on DMA FIFO: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_Error_CallBack((uint32_t*)&pAddr);    
 8002744:	463b      	mov	r3, r7
 8002746:	4618      	mov	r0, r3
 8002748:	f000 ffe4 	bl	8003714 <EVAL_AUDIO_Error_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <Audio_MAL_IRQHandler+0xe8>)
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <Audio_MAL_IRQHandler+0xf4>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <Audio_MAL_IRQHandler+0xf8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	431a      	orrs	r2, r3
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <Audio_MAL_IRQHandler+0xfc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	4619      	mov	r1, r3
 8002762:	f7fe fe85 	bl	8001470 <DMA_ClearFlag>
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200049b0 	.word	0x200049b0
 8002774:	20000024 	.word	0x20000024
 8002778:	20000034 	.word	0x20000034
 800277c:	20000040 	.word	0x20000040
 8002780:	20000044 	.word	0x20000044
 8002784:	2000004c 	.word	0x2000004c
 8002788:	20000048 	.word	0x20000048
 800278c:	20000050 	.word	0x20000050

08002790 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002794:	f7ff ff7c 	bl	8002690 <Audio_MAL_IRQHandler>
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}

0800279c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80027a0:	f7ff ff76 	bl	8002690 <Audio_MAL_IRQHandler>
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80027ac:	2102      	movs	r1, #2
 80027ae:	480d      	ldr	r0, [pc, #52]	; (80027e4 <SPI3_IRQHandler+0x3c>)
 80027b0:	f7ff fd9e 	bl	80022f0 <SPI_I2S_GetFlagStatus>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d011      	beq.n	80027de <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <SPI3_IRQHandler+0x40>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d106      	bne.n	80027d0 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80027c2:	f000 ff9f 	bl	8003704 <EVAL_AUDIO_GetSampleCallBack>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4619      	mov	r1, r3
 80027ca:	2004      	movs	r0, #4
 80027cc:	f7fe fc78 	bl	80010c0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80027d0:	f000 ff98 	bl	8003704 <EVAL_AUDIO_GetSampleCallBack>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4619      	mov	r1, r3
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <SPI3_IRQHandler+0x3c>)
 80027da:	f7ff fd23 	bl	8002224 <SPI_I2S_SendData>
  }
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40003c00 	.word	0x40003c00
 80027e8:	2000002c 	.word	0x2000002c

080027ec <Codec_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	603a      	str	r2, [r7, #0]
 80027f6:	80fb      	strh	r3, [r7, #6]
 80027f8:	460b      	mov	r3, r1
 80027fa:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Configure the Codec related IOs */
  Codec_GPIO_Init();   
 8002800:	f000 fb1a 	bl	8002e38 <Codec_GPIO_Init>
  
  /* Reset the Codec Registers */
  Codec_Reset();
 8002804:	f000 f8e2 	bl	80029cc <Codec_Reset>

  /* Initialize the Control interface of the Audio Codec */
  Codec_CtrlInterface_Init();     
 8002808:	f000 faa8 	bl	8002d5c <Codec_CtrlInterface_Init>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);  
 800280c:	2101      	movs	r1, #1
 800280e:	2002      	movs	r0, #2
 8002810:	f000 f8f0 	bl	80029f4 <Codec_WriteRegister>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4413      	add	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
      
  counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
 800281c:	21af      	movs	r1, #175	; 0xaf
 800281e:	2004      	movs	r0, #4
 8002820:	f000 f8e8 	bl	80029f4 <Codec_WriteRegister>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4413      	add	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
  OutputDev = 0xAF;
 800282c:	4b43      	ldr	r3, [pc, #268]	; (800293c <Codec_Init+0x150>)
 800282e:	22af      	movs	r2, #175	; 0xaf
 8002830:	701a      	strb	r2, [r3, #0]
  
  /* Clock configuration: Auto detection */  
  counter += Codec_WriteRegister(0x05, 0x81);
 8002832:	2181      	movs	r1, #129	; 0x81
 8002834:	2005      	movs	r0, #5
 8002836:	f000 f8dd 	bl	80029f4 <Codec_WriteRegister>
 800283a:	4602      	mov	r2, r0
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += Codec_WriteRegister(0x06, CODEC_STANDARD);
 8002842:	2104      	movs	r1, #4
 8002844:	2006      	movs	r0, #6
 8002846:	f000 f8d5 	bl	80029f4 <Codec_WriteRegister>
 800284a:	4602      	mov	r2, r0
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
      
  /* Set the Master volume */
  Codec_VolumeCtrl(Volume);
 8002852:	797b      	ldrb	r3, [r7, #5]
 8002854:	4618      	mov	r0, r3
 8002856:	f000 f87d 	bl	8002954 <Codec_VolumeCtrl>
  
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800285a:	4b39      	ldr	r3, [pc, #228]	; (8002940 <Codec_Init+0x154>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d127      	bne.n	80028b2 <Codec_Init+0xc6>
  {
    /* Enable the PassThrough on AIN1A and AIN1B */
    counter += Codec_WriteRegister(0x08, 0x01);
 8002862:	2101      	movs	r1, #1
 8002864:	2008      	movs	r0, #8
 8002866:	f000 f8c5 	bl	80029f4 <Codec_WriteRegister>
 800286a:	4602      	mov	r2, r0
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x09, 0x01);
 8002872:	2101      	movs	r1, #1
 8002874:	2009      	movs	r0, #9
 8002876:	f000 f8bd 	bl	80029f4 <Codec_WriteRegister>
 800287a:	4602      	mov	r2, r0
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
    
    /* Route the analog input to the HP line */
    counter += Codec_WriteRegister(0x0E, 0xC0);
 8002882:	21c0      	movs	r1, #192	; 0xc0
 8002884:	200e      	movs	r0, #14
 8002886:	f000 f8b5 	bl	80029f4 <Codec_WriteRegister>
 800288a:	4602      	mov	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
    
    /* Set the Passthough volume */
    counter += Codec_WriteRegister(0x14, 0x00);
 8002892:	2100      	movs	r1, #0
 8002894:	2014      	movs	r0, #20
 8002896:	f000 f8ad 	bl	80029f4 <Codec_WriteRegister>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x15, 0x00);
 80028a2:	2100      	movs	r1, #0
 80028a4:	2015      	movs	r0, #21
 80028a6:	f000 f8a5 	bl	80029f4 <Codec_WriteRegister>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
  }

  /* Power on the Codec */
  counter += Codec_WriteRegister(0x02, 0x9E);  
 80028b2:	219e      	movs	r1, #158	; 0x9e
 80028b4:	2002      	movs	r0, #2
 80028b6:	f000 f89d 	bl	80029f4 <Codec_WriteRegister>
 80028ba:	4602      	mov	r2, r0
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
      off the I2S peripheral MCLK clock (which is the operating clock for Codec).
      If this delay is not inserted, then the codec will not shut down properly and
      it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += Codec_WriteRegister(0x0A, 0x00);
 80028c2:	2100      	movs	r1, #0
 80028c4:	200a      	movs	r0, #10
 80028c6:	f000 f895 	bl	80029f4 <Codec_WriteRegister>
 80028ca:	4602      	mov	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  if (CurrAudioInterface != AUDIO_INTERFACE_DAC)
 80028d2:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <Codec_Init+0x154>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d007      	beq.n	80028ea <Codec_Init+0xfe>
  {  
    /* Disable the digital soft ramp */
    counter += Codec_WriteRegister(0x0E, 0x04);
 80028da:	2104      	movs	r1, #4
 80028dc:	200e      	movs	r0, #14
 80028de:	f000 f889 	bl	80029f4 <Codec_WriteRegister>
 80028e2:	4602      	mov	r2, r0
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }
  /* Disable the limiter attack level */
  counter += Codec_WriteRegister(0x27, 0x00);
 80028ea:	2100      	movs	r1, #0
 80028ec:	2027      	movs	r0, #39	; 0x27
 80028ee:	f000 f881 	bl	80029f4 <Codec_WriteRegister>
 80028f2:	4602      	mov	r2, r0
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  /* Adjust Bass and Treble levels */
  counter += Codec_WriteRegister(0x1F, 0x0F);
 80028fa:	210f      	movs	r1, #15
 80028fc:	201f      	movs	r0, #31
 80028fe:	f000 f879 	bl	80029f4 <Codec_WriteRegister>
 8002902:	4602      	mov	r2, r0
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  /* Adjust PCM volume level */
  counter += Codec_WriteRegister(0x1A, 0x0A);
 800290a:	210a      	movs	r1, #10
 800290c:	201a      	movs	r0, #26
 800290e:	f000 f871 	bl	80029f4 <Codec_WriteRegister>
 8002912:	4602      	mov	r2, r0
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  counter += Codec_WriteRegister(0x1B, 0x0A);
 800291a:	210a      	movs	r1, #10
 800291c:	201b      	movs	r0, #27
 800291e:	f000 f869 	bl	80029f4 <Codec_WriteRegister>
 8002922:	4602      	mov	r2, r0
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Configure the I2S peripheral */
  Codec_AudioInterface_Init(AudioFreq);  
 800292a:	6838      	ldr	r0, [r7, #0]
 800292c:	f000 fa42 	bl	8002db4 <Codec_AudioInterface_Init>
  
  /* Return communication control value */
  return counter;  
 8002930:	68fb      	ldr	r3, [r7, #12]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200005c0 	.word	0x200005c0
 8002940:	2000002c 	.word	0x2000002c

08002944 <Codec_Play>:
  * @note   For this codec no Play options are required.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Play(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* 
     No actions required on Codec level for play command
     */  

  /* Return communication control value */
  return 0;  
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <Codec_VolumeCtrl>:
  * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_VolumeCtrl(uint8_t Volume)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
  
  if (Volume > 0xE6)
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	2be6      	cmp	r3, #230	; 0xe6
 8002966:	d916      	bls.n	8002996 <Codec_VolumeCtrl+0x42>
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	3319      	adds	r3, #25
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4619      	mov	r1, r3
 8002970:	2020      	movs	r0, #32
 8002972:	f000 f83f 	bl	80029f4 <Codec_WriteRegister>
 8002976:	4602      	mov	r2, r0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	3319      	adds	r3, #25
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4619      	mov	r1, r3
 8002986:	2021      	movs	r0, #33	; 0x21
 8002988:	f000 f834 	bl	80029f4 <Codec_WriteRegister>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4413      	add	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e015      	b.n	80029c2 <Codec_VolumeCtrl+0x6e>
  }
  else
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume + 0x19); 
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	3319      	adds	r3, #25
 800299a:	b2db      	uxtb	r3, r3
 800299c:	4619      	mov	r1, r3
 800299e:	2020      	movs	r0, #32
 80029a0:	f000 f828 	bl	80029f4 <Codec_WriteRegister>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4413      	add	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume + 0x19); 
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	3319      	adds	r3, #25
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	4619      	mov	r1, r3
 80029b4:	2021      	movs	r0, #33	; 0x21
 80029b6:	f000 f81d 	bl	80029f4 <Codec_WriteRegister>
 80029ba:	4602      	mov	r2, r0
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4413      	add	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
  }

  return counter;  
 80029c2:	68fb      	ldr	r3, [r7, #12]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <Codec_Reset>:
  * @note   This function calls an external driver function: The IO Expander driver.
  * @param  None
  * @retval None
  */
static void Codec_Reset(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Power Down the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2110      	movs	r1, #16
 80029d4:	4806      	ldr	r0, [pc, #24]	; (80029f0 <Codec_Reset+0x24>)
 80029d6:	f7fe fedd 	bl	8001794 <GPIO_WriteBit>

  /* wait for a delay to insure registers erasing */
  Delay(CODEC_RESET_DELAY); 
 80029da:	f644 70ff 	movw	r0, #20479	; 0x4fff
 80029de:	f000 fabb 	bl	8002f58 <Delay>
  
  /* Power on the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_SET);
 80029e2:	2201      	movs	r2, #1
 80029e4:	2110      	movs	r1, #16
 80029e6:	4802      	ldr	r0, [pc, #8]	; (80029f0 <Codec_Reset+0x24>)
 80029e8:	f7fe fed4 	bl	8001794 <GPIO_WriteBit>
}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40020c00 	.word	0x40020c00

080029f4 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	460a      	mov	r2, r1
 80029fe:	71fb      	strb	r3, [r7, #7]
 8002a00:	4613      	mov	r3, r2
 8002a02:	71bb      	strb	r3, [r7, #6]
  uint32_t result = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002a08:	4b4c      	ldr	r3, [pc, #304]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002a0a:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002a0e:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002a10:	e00a      	b.n	8002a28 <Codec_WriteRegister+0x34>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a12:	4b4a      	ldr	r3, [pc, #296]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	1e5a      	subs	r2, r3, #1
 8002a18:	4948      	ldr	r1, [pc, #288]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002a1a:	600a      	str	r2, [r1, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d103      	bne.n	8002a28 <Codec_WriteRegister+0x34>
 8002a20:	f000 fe4a 	bl	80036b8 <Codec_TIMEOUT_UserCallback>
 8002a24:	4603      	mov	r3, r0
 8002a26:	e085      	b.n	8002b34 <Codec_WriteRegister+0x140>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002a28:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002a2c:	4844      	ldr	r0, [pc, #272]	; (8002b40 <Codec_WriteRegister+0x14c>)
 8002a2e:	f7ff f8fb 	bl	8001c28 <I2C_GetFlagStatus>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ec      	bne.n	8002a12 <Codec_WriteRegister+0x1e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4841      	ldr	r0, [pc, #260]	; (8002b40 <Codec_WriteRegister+0x14c>)
 8002a3c:	f7ff f828 	bl	8001a90 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002a40:	4b3e      	ldr	r3, [pc, #248]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002a42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a46:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002a48:	e00a      	b.n	8002a60 <Codec_WriteRegister+0x6c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a4a:	4b3c      	ldr	r3, [pc, #240]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	1e5a      	subs	r2, r3, #1
 8002a50:	493a      	ldr	r1, [pc, #232]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002a52:	600a      	str	r2, [r1, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d103      	bne.n	8002a60 <Codec_WriteRegister+0x6c>
 8002a58:	f000 fe2e 	bl	80036b8 <Codec_TIMEOUT_UserCallback>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	e069      	b.n	8002b34 <Codec_WriteRegister+0x140>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002a60:	4938      	ldr	r1, [pc, #224]	; (8002b44 <Codec_WriteRegister+0x150>)
 8002a62:	4837      	ldr	r0, [pc, #220]	; (8002b40 <Codec_WriteRegister+0x14c>)
 8002a64:	f7ff f8b0 	bl	8001bc8 <I2C_CheckEvent>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0ed      	beq.n	8002a4a <Codec_WriteRegister+0x56>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2194      	movs	r1, #148	; 0x94
 8002a72:	4833      	ldr	r0, [pc, #204]	; (8002b40 <Codec_WriteRegister+0x14c>)
 8002a74:	f7ff f84c 	bl	8001b10 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002a78:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002a7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a7e:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002a80:	e00a      	b.n	8002a98 <Codec_WriteRegister+0xa4>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a82:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	1e5a      	subs	r2, r3, #1
 8002a88:	492c      	ldr	r1, [pc, #176]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002a8a:	600a      	str	r2, [r1, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d103      	bne.n	8002a98 <Codec_WriteRegister+0xa4>
 8002a90:	f000 fe12 	bl	80036b8 <Codec_TIMEOUT_UserCallback>
 8002a94:	4603      	mov	r3, r0
 8002a96:	e04d      	b.n	8002b34 <Codec_WriteRegister+0x140>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002a98:	492b      	ldr	r1, [pc, #172]	; (8002b48 <Codec_WriteRegister+0x154>)
 8002a9a:	4829      	ldr	r0, [pc, #164]	; (8002b40 <Codec_WriteRegister+0x14c>)
 8002a9c:	f7ff f894 	bl	8001bc8 <I2C_CheckEvent>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0ed      	beq.n	8002a82 <Codec_WriteRegister+0x8e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4825      	ldr	r0, [pc, #148]	; (8002b40 <Codec_WriteRegister+0x14c>)
 8002aac:	f7ff f86e 	bl	8001b8c <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002ab0:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002ab2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ab6:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8002ab8:	e00a      	b.n	8002ad0 <Codec_WriteRegister+0xdc>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1e5a      	subs	r2, r3, #1
 8002ac0:	491e      	ldr	r1, [pc, #120]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002ac2:	600a      	str	r2, [r1, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <Codec_WriteRegister+0xdc>
 8002ac8:	f000 fdf6 	bl	80036b8 <Codec_TIMEOUT_UserCallback>
 8002acc:	4603      	mov	r3, r0
 8002ace:	e031      	b.n	8002b34 <Codec_WriteRegister+0x140>
  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8002ad0:	491e      	ldr	r1, [pc, #120]	; (8002b4c <Codec_WriteRegister+0x158>)
 8002ad2:	481b      	ldr	r0, [pc, #108]	; (8002b40 <Codec_WriteRegister+0x14c>)
 8002ad4:	f7ff f878 	bl	8001bc8 <I2C_CheckEvent>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0ed      	beq.n	8002aba <Codec_WriteRegister+0xc6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
 8002ade:	79bb      	ldrb	r3, [r7, #6]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4817      	ldr	r0, [pc, #92]	; (8002b40 <Codec_WriteRegister+0x14c>)
 8002ae4:	f7ff f852 	bl	8001b8c <I2C_SendData>
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002ae8:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002aea:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002aee:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8002af0:	e008      	b.n	8002b04 <Codec_WriteRegister+0x110>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	1e5a      	subs	r2, r3, #1
 8002af8:	4910      	ldr	r1, [pc, #64]	; (8002b3c <Codec_WriteRegister+0x148>)
 8002afa:	600a      	str	r2, [r1, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <Codec_WriteRegister+0x110>
 8002b00:	f000 fdda 	bl	80036b8 <Codec_TIMEOUT_UserCallback>
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8002b04:	4912      	ldr	r1, [pc, #72]	; (8002b50 <Codec_WriteRegister+0x15c>)
 8002b06:	480e      	ldr	r0, [pc, #56]	; (8002b40 <Codec_WriteRegister+0x14c>)
 8002b08:	f7ff f88e 	bl	8001c28 <I2C_GetFlagStatus>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0ef      	beq.n	8002af2 <Codec_WriteRegister+0xfe>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);  
 8002b12:	2101      	movs	r1, #1
 8002b14:	480a      	ldr	r0, [pc, #40]	; (8002b40 <Codec_WriteRegister+0x14c>)
 8002b16:	f7fe ffdb 	bl	8001ad0 <I2C_GenerateSTOP>
  
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (Codec_ReadRegister(RegisterAddr) == RegisterValue)? 0:1;
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f819 	bl	8002b54 <Codec_ReadRegister>
 8002b22:	4602      	mov	r2, r0
 8002b24:	79bb      	ldrb	r3, [r7, #6]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	bf14      	ite	ne
 8002b2a:	2301      	movne	r3, #1
 8002b2c:	2300      	moveq	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	60fb      	str	r3, [r7, #12]
#endif /* VERIFY_WRITTENDATA */

  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return result;  
 8002b32:	68fb      	ldr	r3, [r7, #12]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000028 	.word	0x20000028
 8002b40:	40005400 	.word	0x40005400
 8002b44:	00030001 	.word	0x00030001
 8002b48:	00070082 	.word	0x00070082
 8002b4c:	00070080 	.word	0x00070080
 8002b50:	10000004 	.word	0x10000004

08002b54 <Codec_ReadRegister>:
  * @param  RegisterAddr: Address of the register to be read.
  * @retval Value of the register to be read or dummy value if the communication
  *         fails.
  */
static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  uint32_t result = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002b62:	4b76      	ldr	r3, [pc, #472]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002b64:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002b68:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002b6a:	e00a      	b.n	8002b82 <Codec_ReadRegister+0x2e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002b6c:	4b73      	ldr	r3, [pc, #460]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	1e5a      	subs	r2, r3, #1
 8002b72:	4972      	ldr	r1, [pc, #456]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002b74:	600a      	str	r2, [r1, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <Codec_ReadRegister+0x2e>
 8002b7a:	f000 fd9d 	bl	80036b8 <Codec_TIMEOUT_UserCallback>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	e0d7      	b.n	8002d32 <Codec_ReadRegister+0x1de>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002b82:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002b86:	486e      	ldr	r0, [pc, #440]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002b88:	f7ff f84e 	bl	8001c28 <I2C_GetFlagStatus>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ec      	bne.n	8002b6c <Codec_ReadRegister+0x18>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002b92:	2101      	movs	r1, #1
 8002b94:	486a      	ldr	r0, [pc, #424]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002b96:	f7fe ff7b 	bl	8001a90 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002b9a:	4b68      	ldr	r3, [pc, #416]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002b9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ba0:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002ba2:	e00a      	b.n	8002bba <Codec_ReadRegister+0x66>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002ba4:	4b65      	ldr	r3, [pc, #404]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	1e5a      	subs	r2, r3, #1
 8002baa:	4964      	ldr	r1, [pc, #400]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002bac:	600a      	str	r2, [r1, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <Codec_ReadRegister+0x66>
 8002bb2:	f000 fd81 	bl	80036b8 <Codec_TIMEOUT_UserCallback>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	e0bb      	b.n	8002d32 <Codec_ReadRegister+0x1de>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002bba:	4962      	ldr	r1, [pc, #392]	; (8002d44 <Codec_ReadRegister+0x1f0>)
 8002bbc:	4860      	ldr	r0, [pc, #384]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002bbe:	f7ff f803 	bl	8001bc8 <I2C_CheckEvent>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ed      	beq.n	8002ba4 <Codec_ReadRegister+0x50>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2194      	movs	r1, #148	; 0x94
 8002bcc:	485c      	ldr	r0, [pc, #368]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002bce:	f7fe ff9f 	bl	8001b10 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002bd2:	4b5a      	ldr	r3, [pc, #360]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002bd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bd8:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002bda:	e00a      	b.n	8002bf2 <Codec_ReadRegister+0x9e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002bdc:	4b57      	ldr	r3, [pc, #348]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	1e5a      	subs	r2, r3, #1
 8002be2:	4956      	ldr	r1, [pc, #344]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002be4:	600a      	str	r2, [r1, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <Codec_ReadRegister+0x9e>
 8002bea:	f000 fd65 	bl	80036b8 <Codec_TIMEOUT_UserCallback>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	e09f      	b.n	8002d32 <Codec_ReadRegister+0x1de>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002bf2:	4955      	ldr	r1, [pc, #340]	; (8002d48 <Codec_ReadRegister+0x1f4>)
 8002bf4:	4852      	ldr	r0, [pc, #328]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002bf6:	f7fe ffe7 	bl	8001bc8 <I2C_CheckEvent>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0ed      	beq.n	8002bdc <Codec_ReadRegister+0x88>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	4619      	mov	r1, r3
 8002c04:	484e      	ldr	r0, [pc, #312]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002c06:	f7fe ffc1 	bl	8001b8c <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002c0a:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c10:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002c12:	e00a      	b.n	8002c2a <Codec_ReadRegister+0xd6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002c14:	4b49      	ldr	r3, [pc, #292]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	1e5a      	subs	r2, r3, #1
 8002c1a:	4948      	ldr	r1, [pc, #288]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002c1c:	600a      	str	r2, [r1, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d103      	bne.n	8002c2a <Codec_ReadRegister+0xd6>
 8002c22:	f000 fd49 	bl	80036b8 <Codec_TIMEOUT_UserCallback>
 8002c26:	4603      	mov	r3, r0
 8002c28:	e083      	b.n	8002d32 <Codec_ReadRegister+0x1de>
  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002c2a:	4948      	ldr	r1, [pc, #288]	; (8002d4c <Codec_ReadRegister+0x1f8>)
 8002c2c:	4844      	ldr	r0, [pc, #272]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002c2e:	f7fe fffb 	bl	8001c28 <I2C_GetFlagStatus>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ed      	beq.n	8002c14 <Codec_ReadRegister+0xc0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4841      	ldr	r0, [pc, #260]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002c3c:	f7fe ff28 	bl	8001a90 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002c40:	4b3e      	ldr	r3, [pc, #248]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002c42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c46:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002c48:	e00a      	b.n	8002c60 <Codec_ReadRegister+0x10c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002c4a:	4b3c      	ldr	r3, [pc, #240]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	1e5a      	subs	r2, r3, #1
 8002c50:	493a      	ldr	r1, [pc, #232]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002c52:	600a      	str	r2, [r1, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <Codec_ReadRegister+0x10c>
 8002c58:	f000 fd2e 	bl	80036b8 <Codec_TIMEOUT_UserCallback>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	e068      	b.n	8002d32 <Codec_ReadRegister+0x1de>
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002c60:	4938      	ldr	r1, [pc, #224]	; (8002d44 <Codec_ReadRegister+0x1f0>)
 8002c62:	4837      	ldr	r0, [pc, #220]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002c64:	f7fe ffb0 	bl	8001bc8 <I2C_CheckEvent>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0ed      	beq.n	8002c4a <Codec_ReadRegister+0xf6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  } 
  
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
 8002c6e:	2201      	movs	r2, #1
 8002c70:	2194      	movs	r1, #148	; 0x94
 8002c72:	4833      	ldr	r0, [pc, #204]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002c74:	f7fe ff4c 	bl	8001b10 <I2C_Send7bitAddress>
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002c78:	4b30      	ldr	r3, [pc, #192]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002c7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c7e:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002c80:	e00a      	b.n	8002c98 <Codec_ReadRegister+0x144>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002c82:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	1e5a      	subs	r2, r3, #1
 8002c88:	492c      	ldr	r1, [pc, #176]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002c8a:	600a      	str	r2, [r1, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d103      	bne.n	8002c98 <Codec_ReadRegister+0x144>
 8002c90:	f000 fd12 	bl	80036b8 <Codec_TIMEOUT_UserCallback>
 8002c94:	4603      	mov	r3, r0
 8002c96:	e04c      	b.n	8002d32 <Codec_ReadRegister+0x1de>
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002c98:	492d      	ldr	r1, [pc, #180]	; (8002d50 <Codec_ReadRegister+0x1fc>)
 8002c9a:	4829      	ldr	r0, [pc, #164]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002c9c:	f7fe ffc4 	bl	8001c28 <I2C_GetFlagStatus>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0ed      	beq.n	8002c82 <Codec_ReadRegister+0x12e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }     
  
  /*!< Disable Acknowledgment */
  I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);   
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4825      	ldr	r0, [pc, #148]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002caa:	f7fe ff4f 	bl	8001b4c <I2C_AcknowledgeConfig>
  
  /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
  (void)CODEC_I2C->SR2;
 8002cae:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002cb0:	8b1b      	ldrh	r3, [r3, #24]
  
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4822      	ldr	r0, [pc, #136]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002cb6:	f7fe ff0b 	bl	8001ad0 <I2C_GenerateSTOP>
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002cba:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002cbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cc0:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002cc2:	e00a      	b.n	8002cda <Codec_ReadRegister+0x186>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	1e5a      	subs	r2, r3, #1
 8002cca:	491c      	ldr	r1, [pc, #112]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002ccc:	600a      	str	r2, [r1, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d103      	bne.n	8002cda <Codec_ReadRegister+0x186>
 8002cd2:	f000 fcf1 	bl	80036b8 <Codec_TIMEOUT_UserCallback>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	e02b      	b.n	8002d32 <Codec_ReadRegister+0x1de>
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002cda:	491e      	ldr	r1, [pc, #120]	; (8002d54 <Codec_ReadRegister+0x200>)
 8002cdc:	4818      	ldr	r0, [pc, #96]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002cde:	f7fe ffa3 	bl	8001c28 <I2C_GetFlagStatus>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ed      	beq.n	8002cc4 <Codec_ReadRegister+0x170>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
 8002ce8:	4815      	ldr	r0, [pc, #84]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002cea:	f7fe ff5f 	bl	8001bac <I2C_ReceiveData>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	60fb      	str	r3, [r7, #12]
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cf8:	601a      	str	r2, [r3, #0]
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 8002cfa:	e00a      	b.n	8002d12 <Codec_ReadRegister+0x1be>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	1e5a      	subs	r2, r3, #1
 8002d02:	490e      	ldr	r1, [pc, #56]	; (8002d3c <Codec_ReadRegister+0x1e8>)
 8002d04:	600a      	str	r2, [r1, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <Codec_ReadRegister+0x1be>
 8002d0a:	f000 fcd5 	bl	80036b8 <Codec_TIMEOUT_UserCallback>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	e00f      	b.n	8002d32 <Codec_ReadRegister+0x1de>
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1ed      	bne.n	8002cfc <Codec_ReadRegister+0x1a8>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }  
  
  /*!< Re-Enable Acknowledgment to be ready for another reception */
  I2C_AcknowledgeConfig(CODEC_I2C, ENABLE);  
 8002d20:	2101      	movs	r1, #1
 8002d22:	4807      	ldr	r0, [pc, #28]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002d24:	f7fe ff12 	bl	8001b4c <I2C_AcknowledgeConfig>
  
  /* Clear AF flag for next communication */
  I2C_ClearFlag(CODEC_I2C, I2C_FLAG_AF); 
 8002d28:	490b      	ldr	r1, [pc, #44]	; (8002d58 <Codec_ReadRegister+0x204>)
 8002d2a:	4805      	ldr	r0, [pc, #20]	; (8002d40 <Codec_ReadRegister+0x1ec>)
 8002d2c:	f7fe ffb0 	bl	8001c90 <I2C_ClearFlag>
  
  /* Return the byte read from Codec */
  return result;
 8002d30:	68fb      	ldr	r3, [r7, #12]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000028 	.word	0x20000028
 8002d40:	40005400 	.word	0x40005400
 8002d44:	00030001 	.word	0x00030001
 8002d48:	00070082 	.word	0x00070082
 8002d4c:	10000004 	.word	0x10000004
 8002d50:	10000002 	.word	0x10000002
 8002d54:	10000040 	.word	0x10000040
 8002d58:	10000400 	.word	0x10000400

08002d5c <Codec_CtrlInterface_Init>:
  * @brief  Initializes the Audio Codec control interface (I2C).
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* Enable the CODEC_I2C peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2C_CLK, ENABLE);
 8002d62:	2101      	movs	r1, #1
 8002d64:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002d68:	f7ff f874 	bl	8001e54 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(CODEC_I2C);
 8002d6c:	480f      	ldr	r0, [pc, #60]	; (8002dac <Codec_CtrlInterface_Init+0x50>)
 8002d6e:	f7fe fd73 	bl	8001858 <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8002d72:	2300      	movs	r3, #0
 8002d74:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8002d76:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002d7a:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 8002d7c:	2333      	movs	r3, #51	; 0x33
 8002d7e:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d84:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002d86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d8a:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <Codec_CtrlInterface_Init+0x54>)
 8002d8e:	603b      	str	r3, [r7, #0]
  /* Enable the I2C peripheral */
  I2C_Cmd(CODEC_I2C, ENABLE);  
 8002d90:	2101      	movs	r1, #1
 8002d92:	4806      	ldr	r0, [pc, #24]	; (8002dac <Codec_CtrlInterface_Init+0x50>)
 8002d94:	f7fe fe5c 	bl	8001a50 <I2C_Cmd>
  I2C_Init(CODEC_I2C, &I2C_InitStructure);
 8002d98:	463b      	mov	r3, r7
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4803      	ldr	r0, [pc, #12]	; (8002dac <Codec_CtrlInterface_Init+0x50>)
 8002d9e:	f7fe fd95 	bl	80018cc <I2C_Init>
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40005400 	.word	0x40005400
 8002db0:	000186a0 	.word	0x000186a0

08002db4 <Codec_AudioInterface_Init>:
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  * @retval None
  */
static void Codec_AudioInterface_Init(uint32_t AudioFreq)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  I2S_InitTypeDef I2S_InitStructure;
  DAC_InitTypeDef  DAC_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, ENABLE);
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002dc2:	f7ff f847 	bl	8001e54 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(CODEC_I2S);
 8002dc6:	481a      	ldr	r0, [pc, #104]	; (8002e30 <Codec_AudioInterface_Init+0x7c>)
 8002dc8:	f7ff f8c4 	bl	8001f54 <SPI_I2S_DeInit>
  I2S_InitStructure.I2S_AudioFreq = AudioFreq;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	623b      	str	r3, [r7, #32]
  I2S_InitStructure.I2S_Standard = I2S_STANDARD;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	837b      	strh	r3, [r7, #26]
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	83bb      	strh	r3, [r7, #28]
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	84bb      	strh	r3, [r7, #36]	; 0x24
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterRx;
  }
  else
  {
#else
   I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 8002ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002de0:	833b      	strh	r3, [r7, #24]
#endif
#ifdef DAC_USE_I2S_DMA
  }
#endif /* DAC_USE_I2S_DMA */
#ifdef CODEC_MCLK_ENABLED
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 8002de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002de6:	83fb      	strh	r3, [r7, #30]
#else
#error "No selection for the MCLK output has been defined !"
#endif /* CODEC_MCLK_ENABLED */
  
  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(CODEC_I2S, &I2S_InitStructure);
 8002de8:	f107 0318 	add.w	r3, r7, #24
 8002dec:	4619      	mov	r1, r3
 8002dee:	4810      	ldr	r0, [pc, #64]	; (8002e30 <Codec_AudioInterface_Init+0x7c>)
 8002df0:	f7ff f91e 	bl	8002030 <I2S_Init>


  /* Configure the DAC interface */
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002df4:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <Codec_AudioInterface_Init+0x80>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d114      	bne.n	8002e26 <Codec_AudioInterface_Init+0x72>
  {    
    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002e02:	f7ff f827 	bl	8001e54 <RCC_APB1PeriphClockCmd>
    
    /* DAC channel1 Configuration */
    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
    DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 8002e12:	f107 0308 	add.w	r3, r7, #8
 8002e16:	4619      	mov	r1, r3
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7fe f8f7 	bl	800100c <DAC_Init>
    
    /* Enable DAC Channel1 */
    DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);  
 8002e1e:	2101      	movs	r1, #1
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7fe f927 	bl	8001074 <DAC_Cmd>
  }
  
  /* The I2S peripheral will be enabled only in the EVAL_AUDIO_Play() function 
       or by user functions if DMA mode not enabled */  
}
 8002e26:	bf00      	nop
 8002e28:	3728      	adds	r7, #40	; 0x28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40003c00 	.word	0x40003c00
 8002e34:	2000002c 	.word	0x2000002c

08002e38 <Codec_GPIO_Init>:
  *        interfaces).
  * @param  None
  * @retval None
  */
static void Codec_GPIO_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable Reset GPIO Clock */
  RCC_AHB1PeriphClockCmd(AUDIO_RESET_GPIO_CLK,ENABLE);
 8002e3e:	2101      	movs	r1, #1
 8002e40:	2008      	movs	r0, #8
 8002e42:	f7fe ffe7 	bl	8001e14 <RCC_AHB1PeriphClockCmd>
  
  /* Audio reset pin configuration -------------------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = AUDIO_RESET_PIN; 
 8002e46:	2310      	movs	r3, #16
 8002e48:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002e52:	2300      	movs	r3, #0
 8002e54:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4839      	ldr	r0, [pc, #228]	; (8002f44 <Codec_GPIO_Init+0x10c>)
 8002e60:	f7fe fbf0 	bl	8001644 <GPIO_Init>
  
  /* Enable I2S and I2C GPIO clocks */
  RCC_AHB1PeriphClockCmd(CODEC_I2C_GPIO_CLOCK | CODEC_I2S_GPIO_CLOCK, ENABLE);
 8002e64:	2101      	movs	r1, #1
 8002e66:	2007      	movs	r0, #7
 8002e68:	f7fe ffd4 	bl	8001e14 <RCC_AHB1PeriphClockCmd>

  /* CODEC_I2C SCL and SDA pins configuration -------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2C_SCL_PIN | CODEC_I2C_SDA_PIN; 
 8002e6c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002e70:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002e72:	2302      	movs	r3, #2
 8002e74:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e76:	2302      	movs	r3, #2
 8002e78:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2C_GPIO, &GPIO_InitStructure);     
 8002e82:	463b      	mov	r3, r7
 8002e84:	4619      	mov	r1, r3
 8002e86:	4830      	ldr	r0, [pc, #192]	; (8002f48 <Codec_GPIO_Init+0x110>)
 8002e88:	f7fe fbdc 	bl	8001644 <GPIO_Init>
  /* Connect pins to I2C peripheral */
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SCL_PINSRC, CODEC_I2C_GPIO_AF);  
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	2106      	movs	r1, #6
 8002e90:	482d      	ldr	r0, [pc, #180]	; (8002f48 <Codec_GPIO_Init+0x110>)
 8002e92:	f7fe fc97 	bl	80017c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SDA_PINSRC, CODEC_I2C_GPIO_AF);  
 8002e96:	2204      	movs	r2, #4
 8002e98:	2109      	movs	r1, #9
 8002e9a:	482b      	ldr	r0, [pc, #172]	; (8002f48 <Codec_GPIO_Init+0x110>)
 8002e9c:	f7fe fc92 	bl	80017c4 <GPIO_PinAFConfig>

  /* CODEC_I2S pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
 8002ea0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ea4:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
 8002eb6:	463b      	mov	r3, r7
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4824      	ldr	r0, [pc, #144]	; (8002f4c <Codec_GPIO_Init+0x114>)
 8002ebc:	f7fe fbc2 	bl	8001644 <GPIO_Init>
  
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, CODEC_I2S_GPIO_AF);  
 8002ec0:	2206      	movs	r2, #6
 8002ec2:	2104      	movs	r1, #4
 8002ec4:	4822      	ldr	r0, [pc, #136]	; (8002f50 <Codec_GPIO_Init+0x118>)
 8002ec6:	f7fe fc7d 	bl	80017c4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, CODEC_I2S_GPIO_AF);
 8002eca:	2206      	movs	r2, #6
 8002ecc:	210a      	movs	r1, #10
 8002ece:	481f      	ldr	r0, [pc, #124]	; (8002f4c <Codec_GPIO_Init+0x114>)
 8002ed0:	f7fe fc78 	bl	80017c4 <GPIO_PinAFConfig>

  if (CurrAudioInterface != AUDIO_INTERFACE_DAC) 
 8002ed4:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <Codec_GPIO_Init+0x11c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d00c      	beq.n	8002ef6 <Codec_GPIO_Init+0xbe>
  {
    GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 8002edc:	2310      	movs	r3, #16
 8002ede:	603b      	str	r3, [r7, #0]
    GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 8002ee0:	463b      	mov	r3, r7
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	481a      	ldr	r0, [pc, #104]	; (8002f50 <Codec_GPIO_Init+0x118>)
 8002ee6:	f7fe fbad 	bl	8001644 <GPIO_Init>
    GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, CODEC_I2S_GPIO_AF);
 8002eea:	2206      	movs	r2, #6
 8002eec:	210c      	movs	r1, #12
 8002eee:	4817      	ldr	r0, [pc, #92]	; (8002f4c <Codec_GPIO_Init+0x114>)
 8002ef0:	f7fe fc68 	bl	80017c4 <GPIO_PinAFConfig>
 8002ef4:	e00e      	b.n	8002f14 <Codec_GPIO_Init+0xdc>
  }
  else
  {
    /* GPIOA clock enable (to be used with DAC) */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f7fe ff8b 	bl	8001e14 <RCC_AHB1PeriphClockCmd>
   
    /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8002efe:	2310      	movs	r3, #16
 8002f00:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002f02:	2303      	movs	r3, #3
 8002f04:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002f0a:	463b      	mov	r3, r7
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4810      	ldr	r0, [pc, #64]	; (8002f50 <Codec_GPIO_Init+0x118>)
 8002f10:	f7fe fb98 	bl	8001644 <GPIO_Init>
  }

#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002f20:	2300      	movs	r3, #0
 8002f22:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 8002f28:	463b      	mov	r3, r7
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4807      	ldr	r0, [pc, #28]	; (8002f4c <Codec_GPIO_Init+0x114>)
 8002f2e:	f7fe fb89 	bl	8001644 <GPIO_Init>
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 8002f32:	2206      	movs	r2, #6
 8002f34:	2107      	movs	r1, #7
 8002f36:	4805      	ldr	r0, [pc, #20]	; (8002f4c <Codec_GPIO_Init+0x114>)
 8002f38:	f7fe fc44 	bl	80017c4 <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */ 
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40020c00 	.word	0x40020c00
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	40020800 	.word	0x40020800
 8002f50:	40020000 	.word	0x40020000
 8002f54:	2000002c 	.word	0x2000002c

08002f58 <Delay>:
  * @param  nCount: specifies the delay time length.
  * @retval None
  */

static void Delay( __IO uint32_t nCount)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  for (; nCount != 0; nCount--);
 8002f60:	e002      	b.n	8002f68 <Delay+0x10>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f9      	bne.n	8002f62 <Delay+0xa>
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop

08002f7c <Audio_MAL_Init>:
  *         from Media to the I2S peripheral.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Init(void)  
{ 
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
#else  
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;
#endif

  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002f82:	4b4a      	ldr	r3, [pc, #296]	; (80030ac <Audio_MAL_Init+0x130>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d16e      	bne.n	8003068 <Audio_MAL_Init+0xec>
  {
    /* Enable the DMA clock */
    RCC_AHB1PeriphClockCmd(AUDIO_MAL_DMA_CLOCK, ENABLE); 
 8002f8a:	4b49      	ldr	r3, [pc, #292]	; (80030b0 <Audio_MAL_Init+0x134>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2101      	movs	r1, #1
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe ff3f 	bl	8001e14 <RCC_AHB1PeriphClockCmd>
    
    /* Configure the DMA Stream */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 8002f96:	4b47      	ldr	r3, [pc, #284]	; (80030b4 <Audio_MAL_Init+0x138>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe fa0f 	bl	80013c0 <DMA_Cmd>
    DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 8002fa2:	4b44      	ldr	r3, [pc, #272]	; (80030b4 <Audio_MAL_Init+0x138>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe f8a6 	bl	80010f8 <DMA_DeInit>
    /* Set the parameters to be configured */
    DMA_InitStructure.DMA_Channel = AUDIO_MAL_DMA_CHANNEL;  
 8002fac:	4b42      	ldr	r3, [pc, #264]	; (80030b8 <Audio_MAL_Init+0x13c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a42      	ldr	r2, [pc, #264]	; (80030bc <Audio_MAL_Init+0x140>)
 8002fb2:	6013      	str	r3, [r2, #0]
    DMA_InitStructure.DMA_PeripheralBaseAddr = AUDIO_MAL_DMA_DREG;
 8002fb4:	4b42      	ldr	r3, [pc, #264]	; (80030c0 <Audio_MAL_Init+0x144>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a40      	ldr	r2, [pc, #256]	; (80030bc <Audio_MAL_Init+0x140>)
 8002fba:	6053      	str	r3, [r2, #4]
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 8002fbc:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <Audio_MAL_Init+0x140>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8002fc2:	4b3e      	ldr	r3, [pc, #248]	; (80030bc <Audio_MAL_Init+0x140>)
 8002fc4:	2240      	movs	r2, #64	; 0x40
 8002fc6:	60da      	str	r2, [r3, #12]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)0xFFFE;      /* This field will be configured in play function */
 8002fc8:	4b3c      	ldr	r3, [pc, #240]	; (80030bc <Audio_MAL_Init+0x140>)
 8002fca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fce:	611a      	str	r2, [r3, #16]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002fd0:	4b3a      	ldr	r3, [pc, #232]	; (80030bc <Audio_MAL_Init+0x140>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	615a      	str	r2, [r3, #20]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002fd6:	4b39      	ldr	r3, [pc, #228]	; (80030bc <Audio_MAL_Init+0x140>)
 8002fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fdc:	619a      	str	r2, [r3, #24]
    DMA_InitStructure.DMA_PeripheralDataSize = AUDIO_MAL_DMA_PERIPH_DATA_SIZE;
 8002fde:	4b37      	ldr	r3, [pc, #220]	; (80030bc <Audio_MAL_Init+0x140>)
 8002fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fe4:	61da      	str	r2, [r3, #28]
    DMA_InitStructure.DMA_MemoryDataSize = AUDIO_MAL_DMA_MEM_DATA_SIZE; 
 8002fe6:	4b35      	ldr	r3, [pc, #212]	; (80030bc <Audio_MAL_Init+0x140>)
 8002fe8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fec:	621a      	str	r2, [r3, #32]
#ifdef AUDIO_MAL_MODE_NORMAL
    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
#elif defined(AUDIO_MAL_MODE_CIRCULAR)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8002fee:	4b33      	ldr	r3, [pc, #204]	; (80030bc <Audio_MAL_Init+0x140>)
 8002ff0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error "AUDIO_MAL_MODE_NORMAL or AUDIO_MAL_MODE_CIRCULAR should be selected !!"
#endif /* AUDIO_MAL_MODE_NORMAL */  
    DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8002ff6:	4b31      	ldr	r3, [pc, #196]	; (80030bc <Audio_MAL_Init+0x140>)
 8002ff8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ffc:	629a      	str	r2, [r3, #40]	; 0x28
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 8002ffe:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <Audio_MAL_Init+0x140>)
 8003000:	2200      	movs	r2, #0
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8003004:	4b2d      	ldr	r3, [pc, #180]	; (80030bc <Audio_MAL_Init+0x140>)
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800300a:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <Audio_MAL_Init+0x140>)
 800300c:	2200      	movs	r2, #0
 800300e:	635a      	str	r2, [r3, #52]	; 0x34
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;  
 8003010:	4b2a      	ldr	r3, [pc, #168]	; (80030bc <Audio_MAL_Init+0x140>)
 8003012:	2200      	movs	r2, #0
 8003014:	639a      	str	r2, [r3, #56]	; 0x38
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);  
 8003016:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <Audio_MAL_Init+0x138>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4928      	ldr	r1, [pc, #160]	; (80030bc <Audio_MAL_Init+0x140>)
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe f93f 	bl	80012a0 <DMA_Init>
    
    /* Enable the selected DMA interrupts (selected in "stm32f4_discovery_eval_audio_codec.h" defines) */
#ifdef AUDIO_MAL_DMA_IT_TC_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TC, ENABLE);
 8003022:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <Audio_MAL_Init+0x138>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2201      	movs	r2, #1
 8003028:	2110      	movs	r1, #16
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fa4e 	bl	80014cc <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TC_EN */
#ifdef AUDIO_MAL_DMA_IT_HT_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_HT, ENABLE);
 8003030:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <Audio_MAL_Init+0x138>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2201      	movs	r2, #1
 8003036:	2108      	movs	r1, #8
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe fa47 	bl	80014cc <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
#ifdef AUDIO_MAL_DMA_IT_TE_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
 800303e:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <Audio_MAL_Init+0x138>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	2186      	movs	r1, #134	; 0x86
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fa40 	bl	80014cc <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
    
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <Audio_MAL_Init+0x148>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 8003054:	2300      	movs	r3, #0
 8003056:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 8003058:	2300      	movs	r3, #0
 800305a:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800305c:	2301      	movs	r3, #1
 800305e:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8003060:	1d3b      	adds	r3, r7, #4
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fd7a 	bl	8000b5c <NVIC_Init>
    NVIC_Init(&NVIC_InitStructure);
#endif 
  }
#endif /* DAC_USE_I2S_DMA */
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8003068:	4b10      	ldr	r3, [pc, #64]	; (80030ac <Audio_MAL_Init+0x130>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d105      	bne.n	800307c <Audio_MAL_Init+0x100>
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
 8003070:	2201      	movs	r2, #1
 8003072:	2102      	movs	r1, #2
 8003074:	4814      	ldr	r0, [pc, #80]	; (80030c8 <Audio_MAL_Init+0x14c>)
 8003076:	f7ff f8e5 	bl	8002244 <SPI_I2S_DMACmd>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 800307a:	e012      	b.n	80030a2 <Audio_MAL_Init+0x126>
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
  }
  else
  {
    /* Configure the STM32 DAC to geenrate audio analog signal */
    DAC_Config();
 800307c:	f000 f86c 	bl	8003158 <DAC_Config>
    
#ifndef DAC_USE_I2S_DMA
    /* Enable the I2S interrupt used to write into the DAC register */
    SPI_I2S_ITConfig(SPI3, SPI_I2S_IT_TXE, ENABLE);
 8003080:	2201      	movs	r2, #1
 8003082:	2171      	movs	r1, #113	; 0x71
 8003084:	4810      	ldr	r0, [pc, #64]	; (80030c8 <Audio_MAL_Init+0x14c>)
 8003086:	f7ff f901 	bl	800228c <SPI_I2S_ITConfig>
    
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = CODEC_I2S_IRQ;
 800308a:	2333      	movs	r3, #51	; 0x33
 800308c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 800308e:	2300      	movs	r3, #0
 8003090:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 8003092:	2300      	movs	r3, #0
 8003094:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003096:	2301      	movs	r3, #1
 8003098:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure); 
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd fd5d 	bl	8000b5c <NVIC_Init>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	2000002c 	.word	0x2000002c
 80030b0:	20000030 	.word	0x20000030
 80030b4:	20000034 	.word	0x20000034
 80030b8:	200005c4 	.word	0x200005c4
 80030bc:	200049f0 	.word	0x200049f0
 80030c0:	20000038 	.word	0x20000038
 80030c4:	2000003c 	.word	0x2000003c
 80030c8:	40003c00 	.word	0x40003c00

080030cc <Audio_MAL_Play>:
  * @brief  Starts playing audio stream from the audio Media.
  * @param  None
  * @retval None
  */
void Audio_MAL_Play(uint32_t Addr, uint32_t Size)
{         
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 80030d6:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <Audio_MAL_Play+0x7c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d112      	bne.n	8003104 <Audio_MAL_Play+0x38>
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 80030de:	4a1b      	ldr	r2, [pc, #108]	; (800314c <Audio_MAL_Play+0x80>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <Audio_MAL_Play+0x80>)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80030ea:	4b19      	ldr	r3, [pc, #100]	; (8003150 <Audio_MAL_Play+0x84>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4917      	ldr	r1, [pc, #92]	; (800314c <Audio_MAL_Play+0x80>)
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fe f8d5 	bl	80012a0 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);   
 80030f6:	4b16      	ldr	r3, [pc, #88]	; (8003150 <Audio_MAL_Play+0x84>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2101      	movs	r1, #1
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe f95f 	bl	80013c0 <DMA_Cmd>
 8003102:	e011      	b.n	8003128 <Audio_MAL_Play+0x5c>
  }
#ifndef DAC_USE_I2S_DMA
  else
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 8003104:	4a11      	ldr	r2, [pc, #68]	; (800314c <Audio_MAL_Play+0x80>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 800310a:	4a10      	ldr	r2, [pc, #64]	; (800314c <Audio_MAL_Play+0x80>)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8003110:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <Audio_MAL_Play+0x84>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	490d      	ldr	r1, [pc, #52]	; (800314c <Audio_MAL_Play+0x80>)
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe f8c2 	bl	80012a0 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <Audio_MAL_Play+0x84>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2101      	movs	r1, #1
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe f94c 	bl	80013c0 <DMA_Cmd>
  }
#endif /* DAC_USE_I2S_DMA */
  
  /* If the I2S peripheral is still not enabled, enable it */
  if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
 8003128:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <Audio_MAL_Play+0x88>)
 800312a:	8b9b      	ldrh	r3, [r3, #28]
 800312c:	b29b      	uxth	r3, r3
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <Audio_MAL_Play+0x72>
  {
    I2S_Cmd(CODEC_I2S, ENABLE);
 8003136:	2101      	movs	r1, #1
 8003138:	4806      	ldr	r0, [pc, #24]	; (8003154 <Audio_MAL_Play+0x88>)
 800313a:	f7ff f853 	bl	80021e4 <I2S_Cmd>
  }
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	2000002c 	.word	0x2000002c
 800314c:	200049f0 	.word	0x200049f0
 8003150:	20000034 	.word	0x20000034
 8003154:	40003c00 	.word	0x40003c00

08003158 <DAC_Config>:
  * @brief  DAC  Channel1 Configuration
  * @param  None
  * @retval None
  */
void DAC_Config(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
  DAC_InitTypeDef  DAC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;

  /* DMA1 clock and GPIOA clock enable (to be used with DAC) */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 800315e:	2101      	movs	r1, #1
 8003160:	4813      	ldr	r0, [pc, #76]	; (80031b0 <DAC_Config+0x58>)
 8003162:	f7fe fe57 	bl	8001e14 <RCC_AHB1PeriphClockCmd>

  /* DAC Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8003166:	2101      	movs	r1, #1
 8003168:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800316c:	f7fe fe72 	bl	8001e54 <RCC_APB1PeriphClockCmd>

  /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8003170:	2310      	movs	r3, #16
 8003172:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8003174:	2303      	movs	r3, #3
 8003176:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 800317c:	463b      	mov	r3, r7
 800317e:	4619      	mov	r1, r3
 8003180:	480c      	ldr	r0, [pc, #48]	; (80031b4 <DAC_Config+0x5c>)
 8003182:	f7fe fa5f 	bl	8001644 <GPIO_Init>

  /* DAC channel1 Configuration */
  DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 8003192:	f107 0308 	add.w	r3, r7, #8
 8003196:	4619      	mov	r1, r3
 8003198:	2000      	movs	r0, #0
 800319a:	f7fd ff37 	bl	800100c <DAC_Init>

  /* Enable DAC Channel1 */
  DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);
 800319e:	2101      	movs	r1, #1
 80031a0:	2000      	movs	r0, #0
 80031a2:	f7fd ff67 	bl	8001074 <DAC_Cmd>
}
 80031a6:	bf00      	nop
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	00200001 	.word	0x00200001
 80031b4:	40020000 	.word	0x40020000

080031b8 <init_adc>:
 * Initializes the ADC to work in scan mode with 13 channels for pots
 * Uses DMA to transfer data and a timer to throttle the ADC conversion
 * The conversion cycle occurs every 75ms this function starts the timer.
 */
void init_adc(volatile uint16_t ADCBuffer[NUM_CHANNELS])
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b0a0      	sub	sp, #128	; 0x80
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	DMA_InitTypeDef DMA_Init_struct;
	GPIO_InitTypeDef GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef time_base_struct;

	/* Enable timer (timer runs at 13.3 Hz)*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80031c0:	2101      	movs	r1, #1
 80031c2:	2001      	movs	r0, #1
 80031c4:	f7fe fe46 	bl	8001e54 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&time_base_struct);
 80031c8:	f107 0308 	add.w	r3, r7, #8
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff f959 	bl	8002484 <TIM_TimeBaseStructInit>
	time_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 80031d2:	2300      	movs	r3, #0
 80031d4:	823b      	strh	r3, [r7, #16]
	time_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 80031d6:	2300      	movs	r3, #0
 80031d8:	817b      	strh	r3, [r7, #10]
	time_base_struct.TIM_Period = myTIM2_PERIOD;
 80031da:	f243 1338 	movw	r3, #12600	; 0x3138
 80031de:	60fb      	str	r3, [r7, #12]
	time_base_struct.TIM_Prescaler = myTIM2_PRESCALER;
 80031e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031e4:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM2, &time_base_struct);
 80031e6:	f107 0308 	add.w	r3, r7, #8
 80031ea:	4619      	mov	r1, r3
 80031ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80031f0:	f7ff f8dc 	bl	80023ac <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM2,TIM_TRGOSource_Update);
 80031f4:	2120      	movs	r1, #32
 80031f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80031fa:	f7ff f9b3 	bl	8002564 <TIM_SelectOutputTrigger>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80031fe:	2201      	movs	r2, #1
 8003200:	2101      	movs	r1, #1
 8003202:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003206:	f7ff f977 	bl	80024f8 <TIM_ITConfig>

	/* Enable clock on DMA1 & GPIO's */
	/* Enable DMA2, thats where ADC peripheral is used */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 800320a:	2101      	movs	r1, #1
 800320c:	2001      	movs	r0, #1
 800320e:	f7fe fe01 	bl	8001e14 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 8003212:	2101      	movs	r1, #1
 8003214:	2002      	movs	r0, #2
 8003216:	f7fe fdfd 	bl	8001e14 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 800321a:	2101      	movs	r1, #1
 800321c:	2004      	movs	r0, #4
 800321e:	f7fe fdf9 	bl	8001e14 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,ENABLE);
 8003222:	2101      	movs	r1, #1
 8003224:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003228:	f7fe fdf4 	bl	8001e14 <RCC_AHB1PeriphClockCmd>
	//GPIO_Pin_1	VFO-Frequency
	//GPIO_Pin_2	LFO-Amplitude
	//GPIO_Pin_3	LFO-Frequency
	//GPIO_Pin_5	ENVELOPE-Attack
	//GPIO_Pin_7	ENVELOPE-Sustain-time
	GPIO_StructInit(&GPIO_InitStructure);
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	4618      	mov	r0, r3
 8003232:	f7fe fa95 	bl	8001760 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_5  | GPIO_Pin_7;
 8003236:	23af      	movs	r3, #175	; 0xaf
 8003238:	617b      	str	r3, [r7, #20]
	//GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_5  | GPIO_Pin_6  | GPIO_Pin_7; // MB: test - A6 doesn't seem to work
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 800323a:	2303      	movs	r3, #3
 800323c:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800323e:	2302      	movs	r3, #2
 8003240:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003242:	2300      	movs	r3, #0
 8003244:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003246:	f107 0314 	add.w	r3, r7, #20
 800324a:	4619      	mov	r1, r3
 800324c:	4879      	ldr	r0, [pc, #484]	; (8003434 <init_adc+0x27c>)
 800324e:	f7fe f9f9 	bl	8001644 <GPIO_Init>

	//B bank pins
	//GPIO_Pin_0	ENVELOPE-Release
	//GPIO_Pin_1	FILTER-FreqLow
	GPIO_StructInit(&GPIO_InitStructure);
 8003252:	f107 0314 	add.w	r3, r7, #20
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe fa82 	bl	8001760 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1;
 800325c:	2303      	movs	r3, #3
 800325e:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8003260:	2303      	movs	r3, #3
 8003262:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003264:	2302      	movs	r3, #2
 8003266:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	4619      	mov	r1, r3
 8003272:	4871      	ldr	r0, [pc, #452]	; (8003438 <init_adc+0x280>)
 8003274:	f7fe f9e6 	bl	8001644 <GPIO_Init>
	//C bank pins//GPIO_Pin_0
	//GPIO_Pin_0	ENVELOPE blsnk_len
	//GPIO_Pin_1	ENVELOPE-decay
	//GPIO_Pin_2	VC02 Amplitude
	//GPIO_Pin_4	ENVELOPE-sustain-amp
	GPIO_StructInit(&GPIO_InitStructure);
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe fa6f 	bl	8001760 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_4;
 8003282:	2317      	movs	r3, #23
 8003284:	617b      	str	r3, [r7, #20]
	// GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4;		// MB turned off C2
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8003286:	2303      	movs	r3, #3
 8003288:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800328a:	2302      	movs	r3, #2
 800328c:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003292:	f107 0314 	add.w	r3, r7, #20
 8003296:	4619      	mov	r1, r3
 8003298:	4868      	ldr	r0, [pc, #416]	; (800343c <init_adc+0x284>)
 800329a:	f7fe f9d3 	bl	8001644 <GPIO_Init>


	/*  Initialise DMA */
	DMA_StructInit(&DMA_Init_struct);							// reset struct
 800329e:	f107 031c 	add.w	r3, r7, #28
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe f854 	bl	8001350 <DMA_StructInit>

	/* config of DMA */
	DMA_Init_struct.DMA_Channel = DMA_Channel_0; 				/* See Tab 43 */
 80032a8:	2300      	movs	r3, #0
 80032aa:	61fb      	str	r3, [r7, #28]
	DMA_Init_struct.DMA_BufferSize = NUM_CHANNELS;				/*  13adc channels */
 80032ac:	230d      	movs	r3, #13
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_Init_struct.DMA_DIR = DMA_DIR_PeripheralToMemory; 		/* ADC to mem */
 80032b0:	2300      	movs	r3, #0
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_Init_struct.DMA_FIFOMode = DMA_FIFOMode_Disable; 		/* no FIFO */
 80032b4:	2300      	movs	r3, #0
 80032b6:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_Init_struct.DMA_FIFOThreshold = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_Init_struct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80032bc:	2300      	movs	r3, #0
 80032be:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_Init_struct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80032c0:	2300      	movs	r3, #0
 80032c2:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_Init_struct.DMA_Mode = DMA_Mode_Circular; 				/* circular buffer */
 80032c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c8:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_Init_struct.DMA_Priority = DMA_Priority_High; 			/* high priority */
 80032ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ce:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init_struct.DMA_Memory0BaseAddr = (uint32_t)ADCBuffer; 	/* target addr */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_Init_struct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; /* 16 bit */
 80032d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_Init_struct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 80032da:	4b59      	ldr	r3, [pc, #356]	; (8003440 <init_adc+0x288>)
 80032dc:	623b      	str	r3, [r7, #32]
	DMA_Init_struct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80032de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032e2:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_Init_struct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80032e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032e8:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_Init_struct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80032ea:	2300      	movs	r3, #0
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init(DMA2_Stream0, &DMA_Init_struct); 					/* See Table 43 for mapping */
 80032ee:	f107 031c 	add.w	r3, r7, #28
 80032f2:	4619      	mov	r1, r3
 80032f4:	4853      	ldr	r0, [pc, #332]	; (8003444 <init_adc+0x28c>)
 80032f6:	f7fd ffd3 	bl	80012a0 <DMA_Init>
	DMA_Cmd(DMA2_Stream0, ENABLE);
 80032fa:	2101      	movs	r1, #1
 80032fc:	4851      	ldr	r0, [pc, #324]	; (8003444 <init_adc+0x28c>)
 80032fe:	f7fe f85f 	bl	80013c0 <DMA_Cmd>

	/*Initialize ADC*/
	ADC_StructInit(&adc_init_struct);						//populates structs with reset defaults
 8003302:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd fcee 	bl	8000ce8 <ADC_StructInit>
	ADC_CommonStructInit(&adc_com_init_struct);
 800330c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd fd31 	bl	8000d78 <ADC_CommonStructInit>
	ADC_Cmd(ADC1, DISABLE);
 8003316:	2100      	movs	r1, #0
 8003318:	484b      	ldr	r0, [pc, #300]	; (8003448 <init_adc+0x290>)
 800331a:	f7fd fd43 	bl	8000da4 <ADC_Cmd>
	ADC_DeInit();
 800331e:	f7fd fc7f 	bl	8000c20 <ADC_DeInit>

	/* init ADC clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8003322:	2101      	movs	r1, #1
 8003324:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003328:	f7fe fdb4 	bl	8001e94 <RCC_APB2PeriphClockCmd>

	/*Initialize Common ADC */
	adc_com_init_struct.ADC_Mode = ADC_Mode_Independent;
 800332c:	2300      	movs	r3, #0
 800332e:	65bb      	str	r3, [r7, #88]	; 0x58
	adc_com_init_struct.ADC_Prescaler = ADC_Prescaler_Div2;
 8003330:	2300      	movs	r3, #0
 8003332:	65fb      	str	r3, [r7, #92]	; 0x5c
	adc_com_init_struct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8003334:	2300      	movs	r3, #0
 8003336:	663b      	str	r3, [r7, #96]	; 0x60
	adc_com_init_struct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_20Cycles;
 8003338:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800333c:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CommonInit(&adc_com_init_struct);
 800333e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd fcf0 	bl	8000d28 <ADC_CommonInit>

	/* Initialize ADC1 */
	adc_init_struct.ADC_Resolution = ADC_Resolution_12b;
 8003348:	2300      	movs	r3, #0
 800334a:	66bb      	str	r3, [r7, #104]	; 0x68
	adc_init_struct.ADC_ScanConvMode = ENABLE;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	adc_init_struct.ADC_ContinuousConvMode = DISABLE;
 8003352:	2300      	movs	r3, #0
 8003354:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	adc_init_struct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 8003358:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800335c:	673b      	str	r3, [r7, #112]	; 0x70
	adc_init_struct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;
 800335e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003362:	677b      	str	r3, [r7, #116]	; 0x74
	adc_init_struct.ADC_DataAlign = ADC_DataAlign_Right;
 8003364:	2300      	movs	r3, #0
 8003366:	67bb      	str	r3, [r7, #120]	; 0x78
	adc_init_struct.ADC_NbrOfConversion = NUM_CHANNELS;			// 5 channels in total MB: I think it's 12 now.
 8003368:	230d      	movs	r3, #13
 800336a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	ADC_Init(ADC1, &adc_init_struct);
 800336e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003372:	4619      	mov	r1, r3
 8003374:	4834      	ldr	r0, [pc, #208]	; (8003448 <init_adc+0x290>)
 8003376:	f7fd fc61 	bl	8000c3c <ADC_Init>

	/* Configure channels */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_480Cycles);		//VCO-Amplitude
 800337a:	2307      	movs	r3, #7
 800337c:	2201      	movs	r2, #1
 800337e:	2100      	movs	r1, #0
 8003380:	4831      	ldr	r0, [pc, #196]	; (8003448 <init_adc+0x290>)
 8003382:	f7fd fd2b 	bl	8000ddc <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_480Cycles);		//VCO-Frequency
 8003386:	2307      	movs	r3, #7
 8003388:	2202      	movs	r2, #2
 800338a:	2101      	movs	r1, #1
 800338c:	482e      	ldr	r0, [pc, #184]	; (8003448 <init_adc+0x290>)
 800338e:	f7fd fd25 	bl	8000ddc <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 3, ADC_SampleTime_480Cycles);		//LFO-Amplitude
 8003392:	2307      	movs	r3, #7
 8003394:	2203      	movs	r2, #3
 8003396:	2102      	movs	r1, #2
 8003398:	482b      	ldr	r0, [pc, #172]	; (8003448 <init_adc+0x290>)
 800339a:	f7fd fd1f 	bl	8000ddc <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 4, ADC_SampleTime_480Cycles);		//LFO-Frequency
 800339e:	2307      	movs	r3, #7
 80033a0:	2204      	movs	r2, #4
 80033a2:	2103      	movs	r1, #3
 80033a4:	4828      	ldr	r0, [pc, #160]	; (8003448 <init_adc+0x290>)
 80033a6:	f7fd fd19 	bl	8000ddc <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 5, ADC_SampleTime_480Cycles);		//ENVELOPE-Attack
 80033aa:	2307      	movs	r3, #7
 80033ac:	2205      	movs	r2, #5
 80033ae:	2105      	movs	r1, #5
 80033b0:	4825      	ldr	r0, [pc, #148]	; (8003448 <init_adc+0x290>)
 80033b2:	f7fd fd13 	bl	8000ddc <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 6, ADC_SampleTime_480Cycles);		//ENVELOPE-Sustain-time
 80033b6:	2307      	movs	r3, #7
 80033b8:	2206      	movs	r2, #6
 80033ba:	2107      	movs	r1, #7
 80033bc:	4822      	ldr	r0, [pc, #136]	; (8003448 <init_adc+0x290>)
 80033be:	f7fd fd0d 	bl	8000ddc <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 7, ADC_SampleTime_480Cycles);		//ENVELOPE-Release
 80033c2:	2307      	movs	r3, #7
 80033c4:	2207      	movs	r2, #7
 80033c6:	2108      	movs	r1, #8
 80033c8:	481f      	ldr	r0, [pc, #124]	; (8003448 <init_adc+0x290>)
 80033ca:	f7fd fd07 	bl	8000ddc <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 8, ADC_SampleTime_480Cycles);		//FILTER-FreqLow
 80033ce:	2307      	movs	r3, #7
 80033d0:	2208      	movs	r2, #8
 80033d2:	2109      	movs	r1, #9
 80033d4:	481c      	ldr	r0, [pc, #112]	; (8003448 <init_adc+0x290>)
 80033d6:	f7fd fd01 	bl	8000ddc <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 9, ADC_SampleTime_480Cycles);	//ENVELOPE blsnk_len
 80033da:	2307      	movs	r3, #7
 80033dc:	2209      	movs	r2, #9
 80033de:	210a      	movs	r1, #10
 80033e0:	4819      	ldr	r0, [pc, #100]	; (8003448 <init_adc+0x290>)
 80033e2:	f7fd fcfb 	bl	8000ddc <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 10, ADC_SampleTime_480Cycles);	//ENVELOPE-decay
 80033e6:	2307      	movs	r3, #7
 80033e8:	220a      	movs	r2, #10
 80033ea:	210b      	movs	r1, #11
 80033ec:	4816      	ldr	r0, [pc, #88]	; (8003448 <init_adc+0x290>)
 80033ee:	f7fd fcf5 	bl	8000ddc <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 11, ADC_SampleTime_480Cycles);	//VCO2-Amplitude (MB)
 80033f2:	2307      	movs	r3, #7
 80033f4:	220b      	movs	r2, #11
 80033f6:	210c      	movs	r1, #12
 80033f8:	4813      	ldr	r0, [pc, #76]	; (8003448 <init_adc+0x290>)
 80033fa:	f7fd fcef 	bl	8000ddc <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 12, ADC_SampleTime_480Cycles);	//ENVELOPE-sustain-amp
 80033fe:	2307      	movs	r3, #7
 8003400:	220c      	movs	r2, #12
 8003402:	210e      	movs	r1, #14
 8003404:	4810      	ldr	r0, [pc, #64]	; (8003448 <init_adc+0x290>)
 8003406:	f7fd fce9 	bl	8000ddc <ADC_RegularChannelConfig>

	/* Enable ADC1 DMA */
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);			//enables DMA request after all adc conversions
 800340a:	2101      	movs	r1, #1
 800340c:	480e      	ldr	r0, [pc, #56]	; (8003448 <init_adc+0x290>)
 800340e:	f7fd fdcb 	bl	8000fa8 <ADC_DMARequestAfterLastTransferCmd>
	ADC_DMACmd(ADC1, ENABLE);
 8003412:	2101      	movs	r1, #1
 8003414:	480c      	ldr	r0, [pc, #48]	; (8003448 <init_adc+0x290>)
 8003416:	f7fd fdab 	bl	8000f70 <ADC_DMACmd>

	/* Enable ADC1 **************************************************************/
	ADC_Cmd(ADC1, ENABLE);
 800341a:	2101      	movs	r1, #1
 800341c:	480a      	ldr	r0, [pc, #40]	; (8003448 <init_adc+0x290>)
 800341e:	f7fd fcc1 	bl	8000da4 <ADC_Cmd>

	TIM_Cmd(TIM2, ENABLE);		//This could be dine in the main however gonna leave it here
 8003422:	2101      	movs	r1, #1
 8003424:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003428:	f7ff f846 	bl	80024b8 <TIM_Cmd>
}
 800342c:	bf00      	nop
 800342e:	3780      	adds	r7, #128	; 0x80
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40020000 	.word	0x40020000
 8003438:	40020400 	.word	0x40020400
 800343c:	40020800 	.word	0x40020800
 8003440:	4001204c 	.word	0x4001204c
 8003444:	40026410 	.word	0x40026410
 8003448:	40012000 	.word	0x40012000

0800344c <init_gpios>:
/*
 * Sets up the 5 position selectors and TIM4 to be used to debounce
 * if the interrupt priorities need to be changed make sure timer is higher than EXTI
 */

void init_gpios(){
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef EXTI_init_struct;
	NVIC_InitTypeDef EXTI_NVIC_init_struct;
	NVIC_InitTypeDef TIM4_NVIC_init_struct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE); 			//This is already turned on in ADC Init function
 8003452:	2101      	movs	r1, #1
 8003454:	2004      	movs	r0, #4
 8003456:	f7fe fcdd 	bl	8001e14 <RCC_AHB1PeriphClockCmd>

	/*
	 * C bank pins
	 * PC6		lfo_other2
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 800345a:	f107 0320 	add.w	r3, r7, #32
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe f97e 	bl	8001760 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_6;
 8003464:	2340      	movs	r3, #64	; 0x40
 8003466:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 8003468:	2300      	movs	r3, #0
 800346a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;				//slow
 800346e:	2300      	movs	r3, #0
 8003470:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//no pull
 8003474:	2300      	movs	r3, #0
 8003476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 800347a:	f107 0320 	add.w	r3, r7, #32
 800347e:	4619      	mov	r1, r3
 8003480:	4829      	ldr	r0, [pc, #164]	; (8003528 <init_gpios+0xdc>)
 8003482:	f7fe f8df 	bl	8001644 <GPIO_Init>


	/*Configure Tim4 for debouncing	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8003486:	2101      	movs	r1, #1
 8003488:	2004      	movs	r0, #4
 800348a:	f7fe fce3 	bl	8001e54 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&tim4_base_struct);
 800348e:	f107 0314 	add.w	r3, r7, #20
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe fff6 	bl	8002484 <TIM_TimeBaseStructInit>
	tim4_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 8003498:	2300      	movs	r3, #0
 800349a:	83bb      	strh	r3, [r7, #28]
	tim4_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 800349c:	2300      	movs	r3, #0
 800349e:	82fb      	strh	r3, [r7, #22]
	tim4_base_struct.TIM_Period = MYTIM4_PERIOD;
 80034a0:	f643 136c 	movw	r3, #14700	; 0x396c
 80034a4:	61bb      	str	r3, [r7, #24]
	tim4_base_struct.TIM_Prescaler = myTIM4_PRESCALER;
 80034a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80034aa:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM4, &tim4_base_struct);
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	4619      	mov	r1, r3
 80034b2:	481e      	ldr	r0, [pc, #120]	; (800352c <init_gpios+0xe0>)
 80034b4:	f7fe ff7a 	bl	80023ac <TIM_TimeBaseInit>

	TIM4_NVIC_init_struct.NVIC_IRQChannel = TIM4_IRQn;
 80034b8:	231e      	movs	r3, #30
 80034ba:	713b      	strb	r3, [r7, #4]
	TIM4_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80034bc:	2301      	movs	r3, #1
 80034be:	71fb      	strb	r3, [r7, #7]
	TIM4_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x00;
 80034c0:	2300      	movs	r3, #0
 80034c2:	717b      	strb	r3, [r7, #5]
	TIM4_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x00;
 80034c4:	2300      	movs	r3, #0
 80034c6:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&TIM4_NVIC_init_struct);
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fb46 	bl	8000b5c <NVIC_Init>

	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 80034d0:	2201      	movs	r2, #1
 80034d2:	2101      	movs	r1, #1
 80034d4:	4815      	ldr	r0, [pc, #84]	; (800352c <init_gpios+0xe0>)
 80034d6:	f7ff f80f 	bl	80024f8 <TIM_ITConfig>


	/*Configure pins as EXTI*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 80034da:	2101      	movs	r1, #1
 80034dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80034e0:	f7fe fcd8 	bl	8001e94 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource6);
 80034e4:	2106      	movs	r1, #6
 80034e6:	2002      	movs	r0, #2
 80034e8:	f7fe ff1e 	bl	8002328 <SYSCFG_EXTILineConfig>
//	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource15);


	//init EXTI
	// MB EXTI_init_struct.EXTI_Line = EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9 | EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15;
	EXTI_init_struct.EXTI_Line = EXTI_Line6;
 80034ec:	2340      	movs	r3, #64	; 0x40
 80034ee:	60fb      	str	r3, [r7, #12]
	EXTI_init_struct.EXTI_LineCmd = ENABLE;
 80034f0:	2301      	movs	r3, #1
 80034f2:	74bb      	strb	r3, [r7, #18]
	EXTI_init_struct.EXTI_Mode =  EXTI_Mode_Interrupt;
 80034f4:	2300      	movs	r3, #0
 80034f6:	743b      	strb	r3, [r7, #16]
	EXTI_init_struct.EXTI_Trigger = EXTI_Trigger_Rising;
 80034f8:	2308      	movs	r3, #8
 80034fa:	747b      	strb	r3, [r7, #17]
	EXTI_Init(&EXTI_init_struct);
 80034fc:	f107 030c 	add.w	r3, r7, #12
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe f81d 	bl	8001540 <EXTI_Init>

	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI9_5_IRQn;
 8003506:	2317      	movs	r3, #23
 8003508:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800350a:	230f      	movs	r3, #15
 800350c:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 800350e:	230f      	movs	r3, #15
 8003510:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003512:	2301      	movs	r3, #1
 8003514:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8003516:	f107 0308 	add.w	r3, r7, #8
 800351a:	4618      	mov	r0, r3
 800351c:	f7fd fb1e 	bl	8000b5c <NVIC_Init>
//	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI15_10_IRQn;
//	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
//	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
//	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
//	NVIC_Init(&EXTI_NVIC_init_struct);
}
 8003520:	bf00      	nop
 8003522:	3728      	adds	r7, #40	; 0x28
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40020800 	.word	0x40020800
 800352c:	40000800 	.word	0x40000800

08003530 <init_push_buttons>:

/*
 * Initialzes the pushbutton and pushbutton interrupts and limiting timer,
 * if the interrupt priorities need to be changed make sure timer is higher than EXTI
 */
void  init_push_buttons(){
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef tim3_base_struct;
	EXTI_InitTypeDef EXTI_init_struct;
	NVIC_InitTypeDef EXTI_NVIC_init_struct, TIM3_NVIC_init_struct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE,ENABLE); 			//This is already turned on in init gpio's but turn on incase
 8003536:	2101      	movs	r1, #1
 8003538:	2010      	movs	r0, #16
 800353a:	f7fe fc6b 	bl	8001e14 <RCC_AHB1PeriphClockCmd>
	 * PE0		Menu up
	 * PE1		Menu down
	 * PE2		Menu back
	 * PE3		Menu enter
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 800353e:	f107 0320 	add.w	r3, r7, #32
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe f90c 	bl	8001760 <GPIO_StructInit>
	// GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;		// MB - to turn filter on
 8003548:	231f      	movs	r3, #31
 800354a:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 800354c:	2300      	movs	r3, #0
 800354e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;				//medium
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//pull down
 8003558:	2300      	movs	r3, #0
 800355a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 800355e:	f107 0320 	add.w	r3, r7, #32
 8003562:	4619      	mov	r1, r3
 8003564:	4843      	ldr	r0, [pc, #268]	; (8003674 <init_push_buttons+0x144>)
 8003566:	f7fe f86d 	bl	8001644 <GPIO_Init>


	/*Configure Tim3 for debouncing	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800356a:	2101      	movs	r1, #1
 800356c:	2002      	movs	r0, #2
 800356e:	f7fe fc71 	bl	8001e54 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&tim3_base_struct);
 8003572:	f107 0314 	add.w	r3, r7, #20
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe ff84 	bl	8002484 <TIM_TimeBaseStructInit>
	tim3_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 800357c:	2300      	movs	r3, #0
 800357e:	83bb      	strh	r3, [r7, #28]
	tim3_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 8003580:	2300      	movs	r3, #0
 8003582:	82fb      	strh	r3, [r7, #22]
	tim3_base_struct.TIM_Period = MYTIM3_PERIOD;
 8003584:	f643 136c 	movw	r3, #14700	; 0x396c
 8003588:	61bb      	str	r3, [r7, #24]
	tim3_base_struct.TIM_Prescaler = myTIM3_PRESCALER;
 800358a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800358e:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM3, &tim3_base_struct);
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	4619      	mov	r1, r3
 8003596:	4838      	ldr	r0, [pc, #224]	; (8003678 <init_push_buttons+0x148>)
 8003598:	f7fe ff08 	bl	80023ac <TIM_TimeBaseInit>

	TIM3_NVIC_init_struct.NVIC_IRQChannel = TIM3_IRQn;
 800359c:	231d      	movs	r3, #29
 800359e:	713b      	strb	r3, [r7, #4]
	TIM3_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	71fb      	strb	r3, [r7, #7]
	TIM3_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x00;
 80035a4:	2300      	movs	r3, #0
 80035a6:	717b      	strb	r3, [r7, #5]
	TIM3_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x00;
 80035a8:	2300      	movs	r3, #0
 80035aa:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&TIM3_NVIC_init_struct);
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd fad4 	bl	8000b5c <NVIC_Init>

	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 80035b4:	2201      	movs	r2, #1
 80035b6:	2101      	movs	r1, #1
 80035b8:	482f      	ldr	r0, [pc, #188]	; (8003678 <init_push_buttons+0x148>)
 80035ba:	f7fe ff9d 	bl	80024f8 <TIM_ITConfig>


	/*Configure pins as EXTI*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 80035be:	2101      	movs	r1, #1
 80035c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035c4:	f7fe fc66 	bl	8001e94 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource0);
 80035c8:	2100      	movs	r1, #0
 80035ca:	2004      	movs	r0, #4
 80035cc:	f7fe feac 	bl	8002328 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource1);
 80035d0:	2101      	movs	r1, #1
 80035d2:	2004      	movs	r0, #4
 80035d4:	f7fe fea8 	bl	8002328 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource2);
 80035d8:	2102      	movs	r1, #2
 80035da:	2004      	movs	r0, #4
 80035dc:	f7fe fea4 	bl	8002328 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource3);
 80035e0:	2103      	movs	r1, #3
 80035e2:	2004      	movs	r0, #4
 80035e4:	f7fe fea0 	bl	8002328 <SYSCFG_EXTILineConfig>



	//init EXTI
	EXTI_init_struct.EXTI_Line = EXTI_Line0 | EXTI_Line1 | EXTI_Line2 | EXTI_Line3;
 80035e8:	230f      	movs	r3, #15
 80035ea:	60fb      	str	r3, [r7, #12]
	EXTI_init_struct.EXTI_LineCmd = ENABLE;
 80035ec:	2301      	movs	r3, #1
 80035ee:	74bb      	strb	r3, [r7, #18]
	EXTI_init_struct.EXTI_Mode =  EXTI_Mode_Interrupt;
 80035f0:	2300      	movs	r3, #0
 80035f2:	743b      	strb	r3, [r7, #16]
	EXTI_init_struct.EXTI_Trigger = EXTI_Trigger_Rising;
 80035f4:	2308      	movs	r3, #8
 80035f6:	747b      	strb	r3, [r7, #17]
	EXTI_Init(&EXTI_init_struct);
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd ff9f 	bl	8001540 <EXTI_Init>

	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI0_IRQn;
 8003602:	2306      	movs	r3, #6
 8003604:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003606:	230f      	movs	r3, #15
 8003608:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 800360a:	230f      	movs	r3, #15
 800360c:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 800360e:	2301      	movs	r3, #1
 8003610:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8003612:	f107 0308 	add.w	r3, r7, #8
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd faa0 	bl	8000b5c <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI1_IRQn;;
 800361c:	2307      	movs	r3, #7
 800361e:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003620:	230f      	movs	r3, #15
 8003622:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8003624:	230f      	movs	r3, #15
 8003626:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003628:	2301      	movs	r3, #1
 800362a:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 800362c:	f107 0308 	add.w	r3, r7, #8
 8003630:	4618      	mov	r0, r3
 8003632:	f7fd fa93 	bl	8000b5c <NVIC_Init>
	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI2_IRQn;
 8003636:	2308      	movs	r3, #8
 8003638:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800363a:	230f      	movs	r3, #15
 800363c:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 800363e:	230f      	movs	r3, #15
 8003640:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003642:	2301      	movs	r3, #1
 8003644:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8003646:	f107 0308 	add.w	r3, r7, #8
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fa86 	bl	8000b5c <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI3_IRQn;;
 8003650:	2309      	movs	r3, #9
 8003652:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003654:	230f      	movs	r3, #15
 8003656:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8003658:	230f      	movs	r3, #15
 800365a:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 800365c:	2301      	movs	r3, #1
 800365e:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8003660:	f107 0308 	add.w	r3, r7, #8
 8003664:	4618      	mov	r0, r3
 8003666:	f7fd fa79 	bl	8000b5c <NVIC_Init>
}
 800366a:	bf00      	nop
 800366c:	3728      	adds	r7, #40	; 0x28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40021000 	.word	0x40021000
 8003678:	40000400 	.word	0x40000400

0800367c <main>:




int main(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
	*/

	/**************************** Run Initialization functions timer for tim2 started in init_adc*****************************/

	// menubutton.button=back;					//initializes menubutton state for startup
	init_gpios();								//initialize gpios
 8003680:	f7ff fee4 	bl	800344c <init_gpios>
	init_push_buttons();						//initialize menu navigation buttons
 8003684:	f7ff ff54 	bl	8003530 <init_push_buttons>
	init_adc(ADCBuffer);						//initialize ADC, do this last because it starts the timer
 8003688:	4809      	ldr	r0, [pc, #36]	; (80036b0 <main+0x34>)
 800368a:	f7ff fd95 	bl	80031b8 <init_adc>
	//init_spi();								//initialize the SPI for LCD not using SPI any more don't need this
	// init_parallel();							//initializes all the GPIO's for parallel LCD communication
	// lcd_init();								//initializes LCD screen
	// update_selector_state();					// get startup state
	init_state();								//initialize the global state variable for the menu, filterstate, secondary VCO and modlulation
 800368e:	f002 fb8d 	bl	8005dac <init_state>
	// display_new_menu();

	biquad_setup2();								// TODO: make sure filter is setup properly.
 8003692:	f001 fee3 	bl	800545c <biquad_setup2>

	EVAL_AUDIO_Init( OUTPUT_DEVICE_AUTO, VOL, SAMPLERATE);
 8003696:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800369a:	2150      	movs	r1, #80	; 0x50
 800369c:	2004      	movs	r0, #4
 800369e:	f7fe ff95 	bl	80025cc <EVAL_AUDIO_Init>
	EVAL_AUDIO_Play(buffer_output, LENGTH_BUFFER);
 80036a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036a6:	4803      	ldr	r0, [pc, #12]	; (80036b4 <main+0x38>)
 80036a8:	f7fe ffbc 	bl	8002624 <EVAL_AUDIO_Play>

	while (1)
	{

	}
 80036ac:	e7fe      	b.n	80036ac <main+0x30>
 80036ae:	bf00      	nop
 80036b0:	20004a34 	.word	0x20004a34
 80036b4:	200005c8 	.word	0x200005c8

080036b8 <Codec_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None
  * @retval None
  */
uint32_t Codec_TIMEOUT_UserCallback(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
	// TODO: See instructions in function declaration.  I've seen this LED turn on, which may signal an issue.
	STM_EVAL_LEDOn(LED5); 				/*  alert : red LED !  */
 80036bc:	2002      	movs	r0, #2
 80036be:	f7fe ff6d 	bl	800259c <STM_EVAL_LEDOn>
	return (0);
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <EVAL_AUDIO_HalfTransfer_CallBack>:
* @brief  Manages the DMA Half Transfer complete interrupt.
* @param  None
* @retval None
*/
void EVAL_AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
	the new data to the first half of buffer while DMA is transferring data from
	the second half. And when Transfer complete occurs, load the second half of
	the buffer while the DMA is transferring from the first half ...
	 */

	generate_waveforms(0, BUFF_LEN_HALF);
 80036d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036d6:	2000      	movs	r0, #0
 80036d8:	f000 f82a 	bl	8003730 <generate_waveforms>
	return;
 80036dc:	bf00      	nop
}
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
	generate_waveforms(BUFF_LEN_HALF, LENGTH_BUFFER);
 80036ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80036f6:	f000 f81b 	bl	8003730 <generate_waveforms>
	return;
 80036fa:	bf00      	nop
}
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop

08003704 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0

  // return -1;
	return 0;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <EVAL_AUDIO_Error_CallBack>:

void EVAL_AUDIO_Error_CallBack(void* pData)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	STM_EVAL_LEDOn(LED3);
 800371c:	2001      	movs	r0, #1
 800371e:	f7fe ff3d 	bl	800259c <STM_EVAL_LEDOn>
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	0000      	movs	r0, r0
	...

08003730 <generate_waveforms>:
sf_sample_st input[BUFF_LEN_HALF];
sf_sample_st output[BUFF_LEN_HALF];


void generate_waveforms(uint16_t start, uint16_t end)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	ed2d 8b02 	vpush	{d8}
 8003736:	b08b      	sub	sp, #44	; 0x2c
 8003738:	af02      	add	r7, sp, #8
 800373a:	4603      	mov	r3, r0
 800373c:	460a      	mov	r2, r1
 800373e:	80fb      	strh	r3, [r7, #6]
 8003740:	4613      	mov	r3, r2
 8003742:	80bb      	strh	r3, [r7, #4]
	osc.vco_wav = vco_wave;				// VCO wave type.
 8003744:	4ba8      	ldr	r3, [pc, #672]	; (80039e8 <generate_waveforms+0x2b8>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	b29a      	uxth	r2, r3
 800374a:	4ba8      	ldr	r3, [pc, #672]	; (80039ec <generate_waveforms+0x2bc>)
 800374c:	821a      	strh	r2, [r3, #16]
	osc.lfo_wav = lfo_wave;				// LFO wave type.
 800374e:	4ba8      	ldr	r3, [pc, #672]	; (80039f0 <generate_waveforms+0x2c0>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	b29a      	uxth	r2, r3
 8003754:	4ba5      	ldr	r3, [pc, #660]	; (80039ec <generate_waveforms+0x2bc>)
 8003756:	825a      	strh	r2, [r3, #18]

	osc.am_mod = OFF; // TODO: *** get value of pushbutton ***
 8003758:	4ba4      	ldr	r3, [pc, #656]	; (80039ec <generate_waveforms+0x2bc>)
 800375a:	2200      	movs	r2, #0
 800375c:	829a      	strh	r2, [r3, #20]
	osc.fm_mod = OFF; // TODO: *** get value of pushbutton ***
 800375e:	4ba3      	ldr	r3, [pc, #652]	; (80039ec <generate_waveforms+0x2bc>)
 8003760:	2200      	movs	r2, #0
 8003762:	82da      	strh	r2, [r3, #22]

	osc.am_mod = lfo_mod.am_mod;
 8003764:	4ba3      	ldr	r3, [pc, #652]	; (80039f4 <generate_waveforms+0x2c4>)
 8003766:	881a      	ldrh	r2, [r3, #0]
 8003768:	4ba0      	ldr	r3, [pc, #640]	; (80039ec <generate_waveforms+0x2bc>)
 800376a:	829a      	strh	r2, [r3, #20]
	osc.fm_mod = lfo_mod.fm_mod;
 800376c:	4ba1      	ldr	r3, [pc, #644]	; (80039f4 <generate_waveforms+0x2c4>)
 800376e:	885a      	ldrh	r2, [r3, #2]
 8003770:	4b9e      	ldr	r3, [pc, #632]	; (80039ec <generate_waveforms+0x2bc>)
 8003772:	82da      	strh	r2, [r3, #22]
	// osc.mod = VCOfreq;			// TODO: comment-out when adding lcd and buttons
	// osc.mod = NO_MOD;
	// osc.mod = DualMode_VCO;

	// A0
	osc.vco_amp = moving_avg(mov_avg5, &mov_avg_sum5, mov_avg_index5, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[1] & 0xfffc));
 8003774:	4ba0      	ldr	r3, [pc, #640]	; (80039f8 <generate_waveforms+0x2c8>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4ba0      	ldr	r3, [pc, #640]	; (80039fc <generate_waveforms+0x2cc>)
 800377a:	885b      	ldrh	r3, [r3, #2]
 800377c:	b29b      	uxth	r3, r3
 800377e:	f023 0303 	bic.w	r3, r3, #3
 8003782:	b29b      	uxth	r3, r3
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2320      	movs	r3, #32
 8003788:	499d      	ldr	r1, [pc, #628]	; (8003a00 <generate_waveforms+0x2d0>)
 800378a:	489e      	ldr	r0, [pc, #632]	; (8003a04 <generate_waveforms+0x2d4>)
 800378c:	f001 fda0 	bl	80052d0 <moving_avg>
 8003790:	ee07 0a90 	vmov	s15, r0
 8003794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003798:	4b94      	ldr	r3, [pc, #592]	; (80039ec <generate_waveforms+0x2bc>)
 800379a:	edc3 7a06 	vstr	s15, [r3, #24]
	mov_avg_index5++;
 800379e:	4b96      	ldr	r3, [pc, #600]	; (80039f8 <generate_waveforms+0x2c8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3301      	adds	r3, #1
 80037a4:	4a94      	ldr	r2, [pc, #592]	; (80039f8 <generate_waveforms+0x2c8>)
 80037a6:	6013      	str	r3, [r2, #0]
	if (mov_avg_index5 >= MOV_AVG_LENGTH_BUFFER)
 80037a8:	4b93      	ldr	r3, [pc, #588]	; (80039f8 <generate_waveforms+0x2c8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b1f      	cmp	r3, #31
 80037ae:	d902      	bls.n	80037b6 <generate_waveforms+0x86>
	{
		mov_avg_index5 = 0;
 80037b0:	4b91      	ldr	r3, [pc, #580]	; (80039f8 <generate_waveforms+0x2c8>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]

//	osc.volume = (float32_t) osc.volume / 2048;
//	osc.vco_amp = osc.vco_amp * osc.volume;

	// A1
	uint16_t tempf = pseudo_log(ADCBuffer[0] & 0xfffc);
 80037b6:	4b91      	ldr	r3, [pc, #580]	; (80039fc <generate_waveforms+0x2cc>)
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f023 0303 	bic.w	r3, r3, #3
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 fda8 	bl	8005318 <pseudo_log>
 80037c8:	4603      	mov	r3, r0
 80037ca:	83fb      	strh	r3, [r7, #30]
	// osc.vco_freq = moving_avg(mov_avg1, &mov_avg_sum1, mov_avg_index1, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[0] & 0xfffc)*2*PI);
	osc.vco_freq = moving_avg(mov_avg1, &mov_avg_sum1, mov_avg_index1, MOV_AVG_LENGTH_BUFFER, tempf * 2*PI);
 80037cc:	4b8e      	ldr	r3, [pc, #568]	; (8003a08 <generate_waveforms+0x2d8>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	8bfb      	ldrh	r3, [r7, #30]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	ee07 3a90 	vmov	s15, r3
 80037d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037dc:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8003a0c <generate_waveforms+0x2dc>
 80037e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037e8:	edc7 7a00 	vstr	s15, [r7]
 80037ec:	883b      	ldrh	r3, [r7, #0]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	2320      	movs	r3, #32
 80037f4:	4986      	ldr	r1, [pc, #536]	; (8003a10 <generate_waveforms+0x2e0>)
 80037f6:	4887      	ldr	r0, [pc, #540]	; (8003a14 <generate_waveforms+0x2e4>)
 80037f8:	f001 fd6a 	bl	80052d0 <moving_avg>
 80037fc:	ee07 0a90 	vmov	s15, r0
 8003800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003804:	4b79      	ldr	r3, [pc, #484]	; (80039ec <generate_waveforms+0x2bc>)
 8003806:	edc3 7a01 	vstr	s15, [r3, #4]
	mov_avg_index1++;
 800380a:	4b7f      	ldr	r3, [pc, #508]	; (8003a08 <generate_waveforms+0x2d8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	4a7d      	ldr	r2, [pc, #500]	; (8003a08 <generate_waveforms+0x2d8>)
 8003812:	6013      	str	r3, [r2, #0]
	if (mov_avg_index1 >= MOV_AVG_LENGTH_BUFFER)
 8003814:	4b7c      	ldr	r3, [pc, #496]	; (8003a08 <generate_waveforms+0x2d8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b1f      	cmp	r3, #31
 800381a:	d902      	bls.n	8003822 <generate_waveforms+0xf2>
	{
		mov_avg_index1 = 0;
 800381c:	4b7a      	ldr	r3, [pc, #488]	; (8003a08 <generate_waveforms+0x2d8>)
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
	}

	// C2
	osc.vco2_amp = moving_avg(mov_avg6, &mov_avg_sum6, mov_avg_index6, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[10] & 0xfffc));
 8003822:	4b7d      	ldr	r3, [pc, #500]	; (8003a18 <generate_waveforms+0x2e8>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4b75      	ldr	r3, [pc, #468]	; (80039fc <generate_waveforms+0x2cc>)
 8003828:	8a9b      	ldrh	r3, [r3, #20]
 800382a:	b29b      	uxth	r3, r3
 800382c:	f023 0303 	bic.w	r3, r3, #3
 8003830:	b29b      	uxth	r3, r3
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	2320      	movs	r3, #32
 8003836:	4979      	ldr	r1, [pc, #484]	; (8003a1c <generate_waveforms+0x2ec>)
 8003838:	4879      	ldr	r0, [pc, #484]	; (8003a20 <generate_waveforms+0x2f0>)
 800383a:	f001 fd49 	bl	80052d0 <moving_avg>
 800383e:	ee07 0a90 	vmov	s15, r0
 8003842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003846:	4b69      	ldr	r3, [pc, #420]	; (80039ec <generate_waveforms+0x2bc>)
 8003848:	edc3 7a07 	vstr	s15, [r3, #28]
	mov_avg_index6++;
 800384c:	4b72      	ldr	r3, [pc, #456]	; (8003a18 <generate_waveforms+0x2e8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	4a71      	ldr	r2, [pc, #452]	; (8003a18 <generate_waveforms+0x2e8>)
 8003854:	6013      	str	r3, [r2, #0]
	if (mov_avg_index6 >= MOV_AVG_LENGTH_BUFFER)
 8003856:	4b70      	ldr	r3, [pc, #448]	; (8003a18 <generate_waveforms+0x2e8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b1f      	cmp	r3, #31
 800385c:	d902      	bls.n	8003864 <generate_waveforms+0x134>
	{
		mov_avg_index6 = 0;
 800385e:	4b6e      	ldr	r3, [pc, #440]	; (8003a18 <generate_waveforms+0x2e8>)
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
	}

	// B1
	osc.vco2_freqoffset = moving_avg(mov_avg7, &mov_avg_sum7, mov_avg_index7, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[7] & 0xfffc));
 8003864:	4b6f      	ldr	r3, [pc, #444]	; (8003a24 <generate_waveforms+0x2f4>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b64      	ldr	r3, [pc, #400]	; (80039fc <generate_waveforms+0x2cc>)
 800386a:	89db      	ldrh	r3, [r3, #14]
 800386c:	b29b      	uxth	r3, r3
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	b29b      	uxth	r3, r3
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	2320      	movs	r3, #32
 8003878:	496b      	ldr	r1, [pc, #428]	; (8003a28 <generate_waveforms+0x2f8>)
 800387a:	486c      	ldr	r0, [pc, #432]	; (8003a2c <generate_waveforms+0x2fc>)
 800387c:	f001 fd28 	bl	80052d0 <moving_avg>
 8003880:	ee07 0a90 	vmov	s15, r0
 8003884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003888:	4b58      	ldr	r3, [pc, #352]	; (80039ec <generate_waveforms+0x2bc>)
 800388a:	edc3 7a02 	vstr	s15, [r3, #8]
	mov_avg_index7++;
 800388e:	4b65      	ldr	r3, [pc, #404]	; (8003a24 <generate_waveforms+0x2f4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3301      	adds	r3, #1
 8003894:	4a63      	ldr	r2, [pc, #396]	; (8003a24 <generate_waveforms+0x2f4>)
 8003896:	6013      	str	r3, [r2, #0]
	if (mov_avg_index7 >= MOV_AVG_LENGTH_BUFFER)
 8003898:	4b62      	ldr	r3, [pc, #392]	; (8003a24 <generate_waveforms+0x2f4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b1f      	cmp	r3, #31
 800389e:	d902      	bls.n	80038a6 <generate_waveforms+0x176>
	{
		mov_avg_index7 = 0;
 80038a0:	4b60      	ldr	r3, [pc, #384]	; (8003a24 <generate_waveforms+0x2f4>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
	}


	// A2
	osc.lfo_amp = moving_avg(mov_avg3, &mov_avg_sum3, mov_avg_index3, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[2] & 0xfffc));
 80038a6:	4b62      	ldr	r3, [pc, #392]	; (8003a30 <generate_waveforms+0x300>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4b54      	ldr	r3, [pc, #336]	; (80039fc <generate_waveforms+0x2cc>)
 80038ac:	889b      	ldrh	r3, [r3, #4]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f023 0303 	bic.w	r3, r3, #3
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	2320      	movs	r3, #32
 80038ba:	495e      	ldr	r1, [pc, #376]	; (8003a34 <generate_waveforms+0x304>)
 80038bc:	485e      	ldr	r0, [pc, #376]	; (8003a38 <generate_waveforms+0x308>)
 80038be:	f001 fd07 	bl	80052d0 <moving_avg>
 80038c2:	ee07 0a90 	vmov	s15, r0
 80038c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ca:	4b48      	ldr	r3, [pc, #288]	; (80039ec <generate_waveforms+0x2bc>)
 80038cc:	edc3 7a08 	vstr	s15, [r3, #32]
	mov_avg_index3++;
 80038d0:	4b57      	ldr	r3, [pc, #348]	; (8003a30 <generate_waveforms+0x300>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3301      	adds	r3, #1
 80038d6:	4a56      	ldr	r2, [pc, #344]	; (8003a30 <generate_waveforms+0x300>)
 80038d8:	6013      	str	r3, [r2, #0]
	if (mov_avg_index3 >= MOV_AVG_LENGTH_BUFFER)
 80038da:	4b55      	ldr	r3, [pc, #340]	; (8003a30 <generate_waveforms+0x300>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b1f      	cmp	r3, #31
 80038e0:	d902      	bls.n	80038e8 <generate_waveforms+0x1b8>
	{
		mov_avg_index3 = 0;
 80038e2:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <generate_waveforms+0x300>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
	}
	osc.lfo_amp_am = osc.lfo_amp*LFO_AMP_AM;
 80038e8:	4b40      	ldr	r3, [pc, #256]	; (80039ec <generate_waveforms+0x2bc>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fc fdcf 	bl	8000490 <__aeabi_f2d>
 80038f2:	a339      	add	r3, pc, #228	; (adr r3, 80039d8 <generate_waveforms+0x2a8>)
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f7fc fe1e 	bl	8000538 <__aeabi_dmul>
 80038fc:	4603      	mov	r3, r0
 80038fe:	460c      	mov	r4, r1
 8003900:	4618      	mov	r0, r3
 8003902:	4621      	mov	r1, r4
 8003904:	f7fd f8da 	bl	8000abc <__aeabi_d2f>
 8003908:	4602      	mov	r2, r0
 800390a:	4b38      	ldr	r3, [pc, #224]	; (80039ec <generate_waveforms+0x2bc>)
 800390c:	625a      	str	r2, [r3, #36]	; 0x24
	osc.lfo_amp_fm = osc.lfo_amp*LFO_AMP_FM;
 800390e:	4b37      	ldr	r3, [pc, #220]	; (80039ec <generate_waveforms+0x2bc>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fc fdbc 	bl	8000490 <__aeabi_f2d>
 8003918:	a331      	add	r3, pc, #196	; (adr r3, 80039e0 <generate_waveforms+0x2b0>)
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	f7fc fe0b 	bl	8000538 <__aeabi_dmul>
 8003922:	4603      	mov	r3, r0
 8003924:	460c      	mov	r4, r1
 8003926:	4618      	mov	r0, r3
 8003928:	4621      	mov	r1, r4
 800392a:	f7fd f8c7 	bl	8000abc <__aeabi_d2f>
 800392e:	4602      	mov	r2, r0
 8003930:	4b2e      	ldr	r3, [pc, #184]	; (80039ec <generate_waveforms+0x2bc>)
 8003932:	629a      	str	r2, [r3, #40]	; 0x28

	// A3
	tempf = pseudo_log(ADCBuffer[3] & 0xfffc);
 8003934:	4b31      	ldr	r3, [pc, #196]	; (80039fc <generate_waveforms+0x2cc>)
 8003936:	88db      	ldrh	r3, [r3, #6]
 8003938:	b29b      	uxth	r3, r3
 800393a:	f023 0303 	bic.w	r3, r3, #3
 800393e:	b29b      	uxth	r3, r3
 8003940:	4618      	mov	r0, r3
 8003942:	f001 fce9 	bl	8005318 <pseudo_log>
 8003946:	4603      	mov	r3, r0
 8003948:	83fb      	strh	r3, [r7, #30]
	// osc.lfo_freq = moving_avg(mov_avg2, &mov_avg_sum2, mov_avg_index2, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[3] & 0xfffc));
	osc.lfo_freq = moving_avg(mov_avg2, &mov_avg_sum2, mov_avg_index2, MOV_AVG_LENGTH_BUFFER, tempf);
 800394a:	4b3c      	ldr	r3, [pc, #240]	; (8003a3c <generate_waveforms+0x30c>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	8bfb      	ldrh	r3, [r7, #30]
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	2320      	movs	r3, #32
 8003954:	493a      	ldr	r1, [pc, #232]	; (8003a40 <generate_waveforms+0x310>)
 8003956:	483b      	ldr	r0, [pc, #236]	; (8003a44 <generate_waveforms+0x314>)
 8003958:	f001 fcba 	bl	80052d0 <moving_avg>
 800395c:	ee07 0a90 	vmov	s15, r0
 8003960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003964:	4b21      	ldr	r3, [pc, #132]	; (80039ec <generate_waveforms+0x2bc>)
 8003966:	edc3 7a03 	vstr	s15, [r3, #12]
	mov_avg_index2++;
 800396a:	4b34      	ldr	r3, [pc, #208]	; (8003a3c <generate_waveforms+0x30c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3301      	adds	r3, #1
 8003970:	4a32      	ldr	r2, [pc, #200]	; (8003a3c <generate_waveforms+0x30c>)
 8003972:	6013      	str	r3, [r2, #0]
	if (mov_avg_index2 >= MOV_AVG_LENGTH_BUFFER)
 8003974:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <generate_waveforms+0x30c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b1f      	cmp	r3, #31
 800397a:	d902      	bls.n	8003982 <generate_waveforms+0x252>
	{
		mov_avg_index2 = 0;
 800397c:	4b2f      	ldr	r3, [pc, #188]	; (8003a3c <generate_waveforms+0x30c>)
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
	}
	// osc.lfo_freq = pseudo_log(osc.lfo_freq, ???);

	volatile uint32_t i = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	61bb      	str	r3, [r7, #24]
	// adsr_settings.am_mod = OFF;
	// adsr_settings.fm_mod = OFF;
	// adsr_settings.am_mod = current_menu_state.adsr_mod;
	// adsr_settings.fm_mod = current_menu_state.adsr_mod;
	adsr_settings.am_mod = adsr_mod.am_mod;
 8003986:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <generate_waveforms+0x318>)
 8003988:	881a      	ldrh	r2, [r3, #0]
 800398a:	4b30      	ldr	r3, [pc, #192]	; (8003a4c <generate_waveforms+0x31c>)
 800398c:	801a      	strh	r2, [r3, #0]
	adsr_settings.fm_mod = adsr_mod.fm_mod;
 800398e:	4b2e      	ldr	r3, [pc, #184]	; (8003a48 <generate_waveforms+0x318>)
 8003990:	885a      	ldrh	r2, [r3, #2]
 8003992:	4b2e      	ldr	r3, [pc, #184]	; (8003a4c <generate_waveforms+0x31c>)
 8003994:	805a      	strh	r2, [r3, #2]
	// adsr_settings.mod = DualMode_VCO;
	// adsr_settings.mod = NO_MOD;
	// adsr_settings.mod = VCOfreq;

	//	// Calculate angle amount to increment per sample.
	volatile float32_t rads_per_sample_vco = osc.vco_freq / ONE_SECOND;		// Radians to increment for each iteration.
 8003996:	4b15      	ldr	r3, [pc, #84]	; (80039ec <generate_waveforms+0x2bc>)
 8003998:	ed93 7a01 	vldr	s14, [r3, #4]
 800399c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8003a50 <generate_waveforms+0x320>
 80039a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039a4:	edc7 7a05 	vstr	s15, [r7, #20]
	// volatile float32_t rads_per_sample_vco2 = osc.vco_freq / TWO_SECOND;
	volatile float32_t rads_per_sample_vco2 = rads_per_sample_vco + osc.vco2_freqoffset / ONE_SECOND;
 80039a8:	4b10      	ldr	r3, [pc, #64]	; (80039ec <generate_waveforms+0x2bc>)
 80039aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80039ae:	eddf 6a28 	vldr	s13, [pc, #160]	; 8003a50 <generate_waveforms+0x320>
 80039b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80039b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80039ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039be:	edc7 7a04 	vstr	s15, [r7, #16]
	//volatile float32_t rads_per_sample_vco2 = rads_per_sample_vco/2.0f;		// Radians to increment for each iteration.
	volatile float32_t rads_per_sample_lfo = osc.lfo_freq / ONE_SECOND;		// Radians to increment for each iteration.
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <generate_waveforms+0x2bc>)
 80039c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80039c8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003a50 <generate_waveforms+0x320>
 80039cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039d0:	edc7 7a03 	vstr	s15, [r7, #12]

	// Fill adsr buffer.
//	if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
//	{
		adsr(start, end);
 80039d4:	88ba      	ldrh	r2, [r7, #4]
 80039d6:	e03d      	b.n	8003a54 <generate_waveforms+0x324>
 80039d8:	eb1c432d 	.word	0xeb1c432d
 80039dc:	3f1a36e2 	.word	0x3f1a36e2
 80039e0:	47ae147b 	.word	0x47ae147b
 80039e4:	3f847ae1 	.word	0x3f847ae1
 80039e8:	20004a2d 	.word	0x20004a2d
 80039ec:	20000054 	.word	0x20000054
 80039f0:	20004a2c 	.word	0x20004a2c
 80039f4:	20004a58 	.word	0x20004a58
 80039f8:	2000485c 	.word	0x2000485c
 80039fc:	20004a34 	.word	0x20004a34
 8003a00:	20004a60 	.word	0x20004a60
 8003a04:	200047dc 	.word	0x200047dc
 8003a08:	2000464c 	.word	0x2000464c
 8003a0c:	40490fdb 	.word	0x40490fdb
 8003a10:	20004ac8 	.word	0x20004ac8
 8003a14:	200045cc 	.word	0x200045cc
 8003a18:	200048e0 	.word	0x200048e0
 8003a1c:	20006acc 	.word	0x20006acc
 8003a20:	20004860 	.word	0x20004860
 8003a24:	20004964 	.word	0x20004964
 8003a28:	20006ad8 	.word	0x20006ad8
 8003a2c:	200048e4 	.word	0x200048e4
 8003a30:	20004754 	.word	0x20004754
 8003a34:	20006ad4 	.word	0x20006ad4
 8003a38:	200046d4 	.word	0x200046d4
 8003a3c:	200046d0 	.word	0x200046d0
 8003a40:	20006ad0 	.word	0x20006ad0
 8003a44:	20004650 	.word	0x20004650
 8003a48:	20004a30 	.word	0x20004a30
 8003a4c:	20004a64 	.word	0x20004a64
 8003a50:	47bb8000 	.word	0x47bb8000
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fe91 	bl	8004780 <adsr>
		// adsr_rad(start, end);
//	}

	// No LFO
	if(osc.lfo_wav == nowave)
 8003a5e:	4baa      	ldr	r3, [pc, #680]	; (8003d08 <generate_waveforms+0x5d8>)
 8003a60:	8a5b      	ldrh	r3, [r3, #18]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d110      	bne.n	8003a88 <generate_waveforms+0x358>
	{
		for(i = start; i < end; i++)
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	e009      	b.n	8003a80 <generate_waveforms+0x350>
		{
			buffer_lfo_float[i] = 0;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	4aa7      	ldr	r2, [pc, #668]	; (8003d0c <generate_waveforms+0x5dc>)
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
//	}

	// No LFO
	if(osc.lfo_wav == nowave)
	{
		for(i = start; i < end; i++)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	88ba      	ldrh	r2, [r7, #4]
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d8f1      	bhi.n	8003a6c <generate_waveforms+0x33c>
			buffer_lfo_float[i] = 0;
		}
	}

	// Sine LFO
	if(osc.lfo_wav == sine)
 8003a88:	4b9f      	ldr	r3, [pc, #636]	; (8003d08 <generate_waveforms+0x5d8>)
 8003a8a:	8a5b      	ldrh	r3, [r3, #18]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d123      	bne.n	8003ad8 <generate_waveforms+0x3a8>
	{
		for(i = start; i < end; i++)
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	e01b      	b.n	8003ace <generate_waveforms+0x39e>
		{
			theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003a96:	4b9e      	ldr	r3, [pc, #632]	; (8003d10 <generate_waveforms+0x5e0>)
 8003a98:	ed93 7a00 	vldr	s14, [r3]
 8003a9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa4:	4b9a      	ldr	r3, [pc, #616]	; (8003d10 <generate_waveforms+0x5e0>)
 8003aa6:	edc3 7a00 	vstr	s15, [r3]
			buffer_lfo_float[i] = arm_sin_f32(theta_lfo);
 8003aaa:	69bc      	ldr	r4, [r7, #24]
 8003aac:	4b98      	ldr	r3, [pc, #608]	; (8003d10 <generate_waveforms+0x5e0>)
 8003aae:	edd3 7a00 	vldr	s15, [r3]
 8003ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab6:	f002 f99b 	bl	8005df0 <arm_sin_f32>
 8003aba:	eef0 7a40 	vmov.f32	s15, s0
 8003abe:	4a93      	ldr	r2, [pc, #588]	; (8003d0c <generate_waveforms+0x5dc>)
 8003ac0:	00a3      	lsls	r3, r4, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	edc3 7a00 	vstr	s15, [r3]
	}

	// Sine LFO
	if(osc.lfo_wav == sine)
	{
		for(i = start; i < end; i++)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	3301      	adds	r3, #1
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	88ba      	ldrh	r2, [r7, #4]
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d8df      	bhi.n	8003a96 <generate_waveforms+0x366>
 8003ad6:	e0fb      	b.n	8003cd0 <generate_waveforms+0x5a0>
			buffer_lfo_float[i] = arm_sin_f32(theta_lfo);
		}
	}

	// Square LFO
	else if(osc.lfo_wav == square)
 8003ad8:	4b8b      	ldr	r3, [pc, #556]	; (8003d08 <generate_waveforms+0x5d8>)
 8003ada:	8a5b      	ldrh	r3, [r3, #18]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d150      	bne.n	8003b82 <generate_waveforms+0x452>
	{
		// If osc modulation contains am
		if(osc.am_mod == ON)
 8003ae0:	4b89      	ldr	r3, [pc, #548]	; (8003d08 <generate_waveforms+0x5d8>)
 8003ae2:	8a9b      	ldrh	r3, [r3, #20]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d123      	bne.n	8003b30 <generate_waveforms+0x400>
		{
			// AM
			for(i = start; i < end; i++)
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	e01b      	b.n	8003b26 <generate_waveforms+0x3f6>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003aee:	4b88      	ldr	r3, [pc, #544]	; (8003d10 <generate_waveforms+0x5e0>)
 8003af0:	ed93 7a00 	vldr	s14, [r3]
 8003af4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003afc:	4b84      	ldr	r3, [pc, #528]	; (8003d10 <generate_waveforms+0x5e0>)
 8003afe:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_square_angle(theta_lfo);	// TODO: offset??
 8003b02:	69bc      	ldr	r4, [r7, #24]
 8003b04:	4b82      	ldr	r3, [pc, #520]	; (8003d10 <generate_waveforms+0x5e0>)
 8003b06:	edd3 7a00 	vldr	s15, [r3]
 8003b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0e:	f001 f9e1 	bl	8004ed4 <gen_square_angle>
 8003b12:	eef0 7a40 	vmov.f32	s15, s0
 8003b16:	4a7d      	ldr	r2, [pc, #500]	; (8003d0c <generate_waveforms+0x5dc>)
 8003b18:	00a3      	lsls	r3, r4, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	edc3 7a00 	vstr	s15, [r3]
	{
		// If osc modulation contains am
		if(osc.am_mod == ON)
		{
			// AM
			for(i = start; i < end; i++)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	3301      	adds	r3, #1
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	88ba      	ldrh	r2, [r7, #4]
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d8df      	bhi.n	8003aee <generate_waveforms+0x3be>
 8003b2e:	e0cf      	b.n	8003cd0 <generate_waveforms+0x5a0>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
				buffer_lfo_float[i] = gen_square_angle(theta_lfo);	// TODO: offset??
			}
		}
		else if(osc.fm_mod == ON)
 8003b30:	4b75      	ldr	r3, [pc, #468]	; (8003d08 <generate_waveforms+0x5d8>)
 8003b32:	8adb      	ldrh	r3, [r3, #22]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	f040 80cb 	bne.w	8003cd0 <generate_waveforms+0x5a0>
		{
			// FM
			for(i = start; i < end; i++)
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e01b      	b.n	8003b78 <generate_waveforms+0x448>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003b40:	4b73      	ldr	r3, [pc, #460]	; (8003d10 <generate_waveforms+0x5e0>)
 8003b42:	ed93 7a00 	vldr	s14, [r3]
 8003b46:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b4e:	4b70      	ldr	r3, [pc, #448]	; (8003d10 <generate_waveforms+0x5e0>)
 8003b50:	edc3 7a00 	vstr	s15, [r3]
				// Sawtooth is integral of triangle
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
 8003b54:	69bc      	ldr	r4, [r7, #24]
 8003b56:	4b6e      	ldr	r3, [pc, #440]	; (8003d10 <generate_waveforms+0x5e0>)
 8003b58:	edd3 7a00 	vldr	s15, [r3]
 8003b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b60:	f001 fac8 	bl	80050f4 <gen_triangle_angle>
 8003b64:	eef0 7a40 	vmov.f32	s15, s0
 8003b68:	4a68      	ldr	r2, [pc, #416]	; (8003d0c <generate_waveforms+0x5dc>)
 8003b6a:	00a3      	lsls	r3, r4, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		else if(osc.fm_mod == ON)
		{
			// FM
			for(i = start; i < end; i++)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	3301      	adds	r3, #1
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	88ba      	ldrh	r2, [r7, #4]
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d8df      	bhi.n	8003b40 <generate_waveforms+0x410>
 8003b80:	e0a6      	b.n	8003cd0 <generate_waveforms+0x5a0>
			}
		}
	}

	// Sawtooth LFO
	else if(osc.lfo_wav == sawtooth)
 8003b82:	4b61      	ldr	r3, [pc, #388]	; (8003d08 <generate_waveforms+0x5d8>)
 8003b84:	8a5b      	ldrh	r3, [r3, #18]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d14f      	bne.n	8003c2a <generate_waveforms+0x4fa>
	{

		if(osc.am_mod == ON)
 8003b8a:	4b5f      	ldr	r3, [pc, #380]	; (8003d08 <generate_waveforms+0x5d8>)
 8003b8c:	8a9b      	ldrh	r3, [r3, #20]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d123      	bne.n	8003bda <generate_waveforms+0x4aa>
		{
			for(i = start; i < end; i++)
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	e01b      	b.n	8003bd0 <generate_waveforms+0x4a0>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003b98:	4b5d      	ldr	r3, [pc, #372]	; (8003d10 <generate_waveforms+0x5e0>)
 8003b9a:	ed93 7a00 	vldr	s14, [r3]
 8003b9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba6:	4b5a      	ldr	r3, [pc, #360]	; (8003d10 <generate_waveforms+0x5e0>)
 8003ba8:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_sawtooth_angle(theta_lfo);
 8003bac:	69bc      	ldr	r4, [r7, #24]
 8003bae:	4b58      	ldr	r3, [pc, #352]	; (8003d10 <generate_waveforms+0x5e0>)
 8003bb0:	edd3 7a00 	vldr	s15, [r3]
 8003bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bb8:	f001 f9b4 	bl	8004f24 <gen_sawtooth_angle>
 8003bbc:	eef0 7a40 	vmov.f32	s15, s0
 8003bc0:	4a52      	ldr	r2, [pc, #328]	; (8003d0c <generate_waveforms+0x5dc>)
 8003bc2:	00a3      	lsls	r3, r4, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	edc3 7a00 	vstr	s15, [r3]
	else if(osc.lfo_wav == sawtooth)
	{

		if(osc.am_mod == ON)
		{
			for(i = start; i < end; i++)
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	88ba      	ldrh	r2, [r7, #4]
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d8df      	bhi.n	8003b98 <generate_waveforms+0x468>
 8003bd8:	e07a      	b.n	8003cd0 <generate_waveforms+0x5a0>
				buffer_lfo_float[i] = gen_sawtooth_angle(theta_lfo);
			}
		}

		// If FM mod, need integral of modulating signal.  Integral of ramp is right side of parabola.
		else if(osc.fm_mod == ON)
 8003bda:	4b4b      	ldr	r3, [pc, #300]	; (8003d08 <generate_waveforms+0x5d8>)
 8003bdc:	8adb      	ldrh	r3, [r3, #22]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d176      	bne.n	8003cd0 <generate_waveforms+0x5a0>
		{
			for(i = start; i < end; i++)
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	e01b      	b.n	8003c20 <generate_waveforms+0x4f0>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003be8:	4b49      	ldr	r3, [pc, #292]	; (8003d10 <generate_waveforms+0x5e0>)
 8003bea:	ed93 7a00 	vldr	s14, [r3]
 8003bee:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf6:	4b46      	ldr	r3, [pc, #280]	; (8003d10 <generate_waveforms+0x5e0>)
 8003bf8:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_sawtooth_integral_angle(theta_lfo);
 8003bfc:	69bc      	ldr	r4, [r7, #24]
 8003bfe:	4b44      	ldr	r3, [pc, #272]	; (8003d10 <generate_waveforms+0x5e0>)
 8003c00:	edd3 7a00 	vldr	s15, [r3]
 8003c04:	eeb0 0a67 	vmov.f32	s0, s15
 8003c08:	f001 f9ba 	bl	8004f80 <gen_sawtooth_integral_angle>
 8003c0c:	eef0 7a40 	vmov.f32	s15, s0
 8003c10:	4a3e      	ldr	r2, [pc, #248]	; (8003d0c <generate_waveforms+0x5dc>)
 8003c12:	00a3      	lsls	r3, r4, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	edc3 7a00 	vstr	s15, [r3]
		}

		// If FM mod, need integral of modulating signal.  Integral of ramp is right side of parabola.
		else if(osc.fm_mod == ON)
		{
			for(i = start; i < end; i++)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	88ba      	ldrh	r2, [r7, #4]
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d8df      	bhi.n	8003be8 <generate_waveforms+0x4b8>
 8003c28:	e052      	b.n	8003cd0 <generate_waveforms+0x5a0>
			}
		}
	}

	// Triangle LFO
	else if(osc.lfo_wav == triangle)
 8003c2a:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <generate_waveforms+0x5d8>)
 8003c2c:	8a5b      	ldrh	r3, [r3, #18]
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d14e      	bne.n	8003cd0 <generate_waveforms+0x5a0>
	{
		if(osc.am_mod == ON)
 8003c32:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <generate_waveforms+0x5d8>)
 8003c34:	8a9b      	ldrh	r3, [r3, #20]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d123      	bne.n	8003c82 <generate_waveforms+0x552>
		{
			for(i = start; i < end; i++)
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	e01b      	b.n	8003c78 <generate_waveforms+0x548>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003c40:	4b33      	ldr	r3, [pc, #204]	; (8003d10 <generate_waveforms+0x5e0>)
 8003c42:	ed93 7a00 	vldr	s14, [r3]
 8003c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c4e:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <generate_waveforms+0x5e0>)
 8003c50:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
 8003c54:	69bc      	ldr	r4, [r7, #24]
 8003c56:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <generate_waveforms+0x5e0>)
 8003c58:	edd3 7a00 	vldr	s15, [r3]
 8003c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c60:	f001 fa48 	bl	80050f4 <gen_triangle_angle>
 8003c64:	eef0 7a40 	vmov.f32	s15, s0
 8003c68:	4a28      	ldr	r2, [pc, #160]	; (8003d0c <generate_waveforms+0x5dc>)
 8003c6a:	00a3      	lsls	r3, r4, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	edc3 7a00 	vstr	s15, [r3]
	// Triangle LFO
	else if(osc.lfo_wav == triangle)
	{
		if(osc.am_mod == ON)
		{
			for(i = start; i < end; i++)
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	3301      	adds	r3, #1
 8003c76:	61bb      	str	r3, [r7, #24]
 8003c78:	88ba      	ldrh	r2, [r7, #4]
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d8df      	bhi.n	8003c40 <generate_waveforms+0x510>
 8003c80:	e026      	b.n	8003cd0 <generate_waveforms+0x5a0>
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
			}
		}

		// If FM mod, need integral of modulating signal.
		else if(osc.fm_mod == ON)
 8003c82:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <generate_waveforms+0x5d8>)
 8003c84:	8adb      	ldrh	r3, [r3, #22]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d122      	bne.n	8003cd0 <generate_waveforms+0x5a0>
		{
			for(i = start; i < end; i++)
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e01b      	b.n	8003cc8 <generate_waveforms+0x598>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003c90:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <generate_waveforms+0x5e0>)
 8003c92:	ed93 7a00 	vldr	s14, [r3]
 8003c96:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <generate_waveforms+0x5e0>)
 8003ca0:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_triangle_integral_angle(theta_lfo);
 8003ca4:	69bc      	ldr	r4, [r7, #24]
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <generate_waveforms+0x5e0>)
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb0:	f001 fa66 	bl	8005180 <gen_triangle_integral_angle>
 8003cb4:	eef0 7a40 	vmov.f32	s15, s0
 8003cb8:	4a14      	ldr	r2, [pc, #80]	; (8003d0c <generate_waveforms+0x5dc>)
 8003cba:	00a3      	lsls	r3, r4, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	edc3 7a00 	vstr	s15, [r3]
		}

		// If FM mod, need integral of modulating signal.
		else if(osc.fm_mod == ON)
		{
			for(i = start; i < end; i++)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	88ba      	ldrh	r2, [r7, #4]
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d8df      	bhi.n	8003c90 <generate_waveforms+0x560>
		}

	}

	// No VCO
	if(osc.vco_wav == nowave)
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <generate_waveforms+0x5d8>)
 8003cd2:	8a1b      	ldrh	r3, [r3, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10e      	bne.n	8003cf6 <generate_waveforms+0x5c6>
	{
		for(i = start; i < end; i++)
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	e007      	b.n	8003cee <generate_waveforms+0x5be>
		{
			buffer_output[i] = 0;
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	4a0c      	ldr	r2, [pc, #48]	; (8003d14 <generate_waveforms+0x5e4>)
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// No VCO
	if(osc.vco_wav == nowave)
	{
		for(i = start; i < end; i++)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	3301      	adds	r3, #1
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	88ba      	ldrh	r2, [r7, #4]
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d8f3      	bhi.n	8003cde <generate_waveforms+0x5ae>
			buffer_output[i] = 0;
		}
	}

	// Sine VCO
	if(osc.vco_wav == sine)
 8003cf6:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <generate_waveforms+0x5d8>)
 8003cf8:	8a1b      	ldrh	r3, [r3, #16]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	f040 810c 	bne.w	8003f18 <generate_waveforms+0x7e8>
	{
		for(i = start; i < end; i++)
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	61bb      	str	r3, [r7, #24]
 8003d04:	e102      	b.n	8003f0c <generate_waveforms+0x7dc>
 8003d06:	bf00      	nop
 8003d08:	20000054 	.word	0x20000054
 8003d0c:	200015c8 	.word	0x200015c8
 8003d10:	20004974 	.word	0x20004974
 8003d14:	200005c8 	.word	0x200005c8
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8003d18:	4b83      	ldr	r3, [pc, #524]	; (8003f28 <generate_waveforms+0x7f8>)
 8003d1a:	ed93 7a00 	vldr	s14, [r3]
 8003d1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d26:	4b80      	ldr	r3, [pc, #512]	; (8003f28 <generate_waveforms+0x7f8>)
 8003d28:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 8003d2c:	4b7f      	ldr	r3, [pc, #508]	; (8003f2c <generate_waveforms+0x7fc>)
 8003d2e:	ed93 7a00 	vldr	s14, [r3]
 8003d32:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d3a:	4b7c      	ldr	r3, [pc, #496]	; (8003f2c <generate_waveforms+0x7fc>)
 8003d3c:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 8003d40:	4b7b      	ldr	r3, [pc, #492]	; (8003f30 <generate_waveforms+0x800>)
 8003d42:	8adb      	ldrh	r3, [r3, #22]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d17c      	bne.n	8003e42 <generate_waveforms+0x712>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32(theta_vco + osc.lfo_amp_fm * buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8003d48:	69bc      	ldr	r4, [r7, #24]
 8003d4a:	4b79      	ldr	r3, [pc, #484]	; (8003f30 <generate_waveforms+0x800>)
 8003d4c:	ed93 8a06 	vldr	s16, [r3, #24]
 8003d50:	4b77      	ldr	r3, [pc, #476]	; (8003f30 <generate_waveforms+0x800>)
 8003d52:	edd3 8a06 	vldr	s17, [r3, #24]
 8003d56:	4b76      	ldr	r3, [pc, #472]	; (8003f30 <generate_waveforms+0x800>)
 8003d58:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	4a75      	ldr	r2, [pc, #468]	; (8003f34 <generate_waveforms+0x804>)
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d6c:	4b6e      	ldr	r3, [pc, #440]	; (8003f28 <generate_waveforms+0x7f8>)
 8003d6e:	edd3 7a00 	vldr	s15, [r3]
 8003d72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	4a6f      	ldr	r2, [pc, #444]	; (8003f38 <generate_waveforms+0x808>)
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	edd3 7a00 	vldr	s15, [r3]
 8003d82:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003f3c <generate_waveforms+0x80c>
 8003d86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d92:	f002 f82d 	bl	8005df0 <arm_sin_f32>
 8003d96:	eef0 7a40 	vmov.f32	s15, s0
 8003d9a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003d9e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003da6:	edc7 7a00 	vstr	s15, [r7]
 8003daa:	883b      	ldrh	r3, [r7, #0]
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	4b64      	ldr	r3, [pc, #400]	; (8003f40 <generate_waveforms+0x810>)
 8003db0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*arm_sin_f32(theta_vco2 + osc.lfo_amp_fm * buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8003db4:	69bc      	ldr	r4, [r7, #24]
 8003db6:	4b5e      	ldr	r3, [pc, #376]	; (8003f30 <generate_waveforms+0x800>)
 8003db8:	ed93 8a07 	vldr	s16, [r3, #28]
 8003dbc:	4b5c      	ldr	r3, [pc, #368]	; (8003f30 <generate_waveforms+0x800>)
 8003dbe:	edd3 8a07 	vldr	s17, [r3, #28]
 8003dc2:	4b5b      	ldr	r3, [pc, #364]	; (8003f30 <generate_waveforms+0x800>)
 8003dc4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	4a5a      	ldr	r2, [pc, #360]	; (8003f34 <generate_waveforms+0x804>)
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	edd3 7a00 	vldr	s15, [r3]
 8003dd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dd8:	4b54      	ldr	r3, [pc, #336]	; (8003f2c <generate_waveforms+0x7fc>)
 8003dda:	edd3 7a00 	vldr	s15, [r3]
 8003dde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	4a54      	ldr	r2, [pc, #336]	; (8003f38 <generate_waveforms+0x808>)
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	edd3 7a00 	vldr	s15, [r3]
 8003dee:	eddf 6a53 	vldr	s13, [pc, #332]	; 8003f3c <generate_waveforms+0x80c>
 8003df2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfe:	f001 fff7 	bl	8005df0 <arm_sin_f32>
 8003e02:	eef0 7a40 	vmov.f32	s15, s0
 8003e06:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003e0a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e12:	edc7 7a00 	vstr	s15, [r7]
 8003e16:	883b      	ldrh	r3, [r7, #0]
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	4b4a      	ldr	r3, [pc, #296]	; (8003f44 <generate_waveforms+0x814>)
 8003e1c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4946      	ldr	r1, [pc, #280]	; (8003f40 <generate_waveforms+0x810>)
 8003e26:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003e2a:	b291      	uxth	r1, r2
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4845      	ldr	r0, [pc, #276]	; (8003f44 <generate_waveforms+0x814>)
 8003e30:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8003e34:	b292      	uxth	r2, r2
 8003e36:	440a      	add	r2, r1
 8003e38:	b291      	uxth	r1, r2
 8003e3a:	4a41      	ldr	r2, [pc, #260]	; (8003f40 <generate_waveforms+0x810>)
 8003e3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003e40:	e061      	b.n	8003f06 <generate_waveforms+0x7d6>
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32(theta_vco + 0.3f * buffer_adsr_fm[i]);
 8003e42:	69bc      	ldr	r4, [r7, #24]
 8003e44:	4b3a      	ldr	r3, [pc, #232]	; (8003f30 <generate_waveforms+0x800>)
 8003e46:	ed93 8a06 	vldr	s16, [r3, #24]
 8003e4a:	4b39      	ldr	r3, [pc, #228]	; (8003f30 <generate_waveforms+0x800>)
 8003e4c:	edd3 8a06 	vldr	s17, [r3, #24]
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	4a39      	ldr	r2, [pc, #228]	; (8003f38 <generate_waveforms+0x808>)
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	edd3 7a00 	vldr	s15, [r3]
 8003e5c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003f3c <generate_waveforms+0x80c>
 8003e60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e64:	4b30      	ldr	r3, [pc, #192]	; (8003f28 <generate_waveforms+0x7f8>)
 8003e66:	edd3 7a00 	vldr	s15, [r3]
 8003e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e72:	f001 ffbd 	bl	8005df0 <arm_sin_f32>
 8003e76:	eef0 7a40 	vmov.f32	s15, s0
 8003e7a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003e7e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e86:	edc7 7a00 	vstr	s15, [r7]
 8003e8a:	883b      	ldrh	r3, [r7, #0]
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <generate_waveforms+0x810>)
 8003e90:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*arm_sin_f32(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 8003e94:	69bc      	ldr	r4, [r7, #24]
 8003e96:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <generate_waveforms+0x800>)
 8003e98:	ed93 8a07 	vldr	s16, [r3, #28]
 8003e9c:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <generate_waveforms+0x800>)
 8003e9e:	edd3 8a07 	vldr	s17, [r3, #28]
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	4a24      	ldr	r2, [pc, #144]	; (8003f38 <generate_waveforms+0x808>)
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	edd3 7a00 	vldr	s15, [r3]
 8003eae:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003f3c <generate_waveforms+0x80c>
 8003eb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <generate_waveforms+0x7fc>)
 8003eb8:	edd3 7a00 	vldr	s15, [r3]
 8003ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec4:	f001 ff94 	bl	8005df0 <arm_sin_f32>
 8003ec8:	eef0 7a40 	vmov.f32	s15, s0
 8003ecc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003ed0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ed8:	edc7 7a00 	vstr	s15, [r7]
 8003edc:	883b      	ldrh	r3, [r7, #0]
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	4b18      	ldr	r3, [pc, #96]	; (8003f44 <generate_waveforms+0x814>)
 8003ee2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4915      	ldr	r1, [pc, #84]	; (8003f40 <generate_waveforms+0x810>)
 8003eec:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003ef0:	b291      	uxth	r1, r2
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4813      	ldr	r0, [pc, #76]	; (8003f44 <generate_waveforms+0x814>)
 8003ef6:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8003efa:	b292      	uxth	r2, r2
 8003efc:	440a      	add	r2, r1
 8003efe:	b291      	uxth	r1, r2
 8003f00:	4a0f      	ldr	r2, [pc, #60]	; (8003f40 <generate_waveforms+0x810>)
 8003f02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Sine VCO
	if(osc.vco_wav == sine)
	{
		for(i = start; i < end; i++)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	61bb      	str	r3, [r7, #24]
 8003f0c:	88ba      	ldrh	r2, [r7, #4]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	f63f af01 	bhi.w	8003d18 <generate_waveforms+0x5e8>
 8003f16:	e381      	b.n	800461c <generate_waveforms+0xeec>
			}
		}
	}

	// Square VCO
	else if(osc.vco_wav == square)
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <generate_waveforms+0x800>)
 8003f1a:	8a1b      	ldrh	r3, [r3, #16]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	f040 8113 	bne.w	8004148 <generate_waveforms+0xa18>
	{
		for(i = start; i < end; i++)
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	e109      	b.n	800413c <generate_waveforms+0xa0c>
 8003f28:	2000496c 	.word	0x2000496c
 8003f2c:	20004970 	.word	0x20004970
 8003f30:	20000054 	.word	0x20000054
 8003f34:	200015c8 	.word	0x200015c8
 8003f38:	200035c8 	.word	0x200035c8
 8003f3c:	3e99999a 	.word	0x3e99999a
 8003f40:	200005c8 	.word	0x200005c8
 8003f44:	20000dc8 	.word	0x20000dc8
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8003f48:	4b83      	ldr	r3, [pc, #524]	; (8004158 <generate_waveforms+0xa28>)
 8003f4a:	ed93 7a00 	vldr	s14, [r3]
 8003f4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f56:	4b80      	ldr	r3, [pc, #512]	; (8004158 <generate_waveforms+0xa28>)
 8003f58:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 8003f5c:	4b7f      	ldr	r3, [pc, #508]	; (800415c <generate_waveforms+0xa2c>)
 8003f5e:	ed93 7a00 	vldr	s14, [r3]
 8003f62:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f6a:	4b7c      	ldr	r3, [pc, #496]	; (800415c <generate_waveforms+0xa2c>)
 8003f6c:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 8003f70:	4b7b      	ldr	r3, [pc, #492]	; (8004160 <generate_waveforms+0xa30>)
 8003f72:	8adb      	ldrh	r3, [r3, #22]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d17c      	bne.n	8004072 <generate_waveforms+0x942>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_square_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8003f78:	69bc      	ldr	r4, [r7, #24]
 8003f7a:	4b79      	ldr	r3, [pc, #484]	; (8004160 <generate_waveforms+0xa30>)
 8003f7c:	ed93 8a06 	vldr	s16, [r3, #24]
 8003f80:	4b77      	ldr	r3, [pc, #476]	; (8004160 <generate_waveforms+0xa30>)
 8003f82:	edd3 8a06 	vldr	s17, [r3, #24]
 8003f86:	4b76      	ldr	r3, [pc, #472]	; (8004160 <generate_waveforms+0xa30>)
 8003f88:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	4a75      	ldr	r2, [pc, #468]	; (8004164 <generate_waveforms+0xa34>)
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	edd3 7a00 	vldr	s15, [r3]
 8003f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f9c:	4b6e      	ldr	r3, [pc, #440]	; (8004158 <generate_waveforms+0xa28>)
 8003f9e:	edd3 7a00 	vldr	s15, [r3]
 8003fa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	4a6f      	ldr	r2, [pc, #444]	; (8004168 <generate_waveforms+0xa38>)
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	edd3 7a00 	vldr	s15, [r3]
 8003fb2:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800416c <generate_waveforms+0xa3c>
 8003fb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc2:	f000 ff87 	bl	8004ed4 <gen_square_angle>
 8003fc6:	eef0 7a40 	vmov.f32	s15, s0
 8003fca:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003fce:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd6:	edc7 7a00 	vstr	s15, [r7]
 8003fda:	883b      	ldrh	r3, [r7, #0]
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	4b64      	ldr	r3, [pc, #400]	; (8004170 <generate_waveforms+0xa40>)
 8003fe0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_square_angle(theta_vco2 + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8003fe4:	69bc      	ldr	r4, [r7, #24]
 8003fe6:	4b5e      	ldr	r3, [pc, #376]	; (8004160 <generate_waveforms+0xa30>)
 8003fe8:	ed93 8a07 	vldr	s16, [r3, #28]
 8003fec:	4b5c      	ldr	r3, [pc, #368]	; (8004160 <generate_waveforms+0xa30>)
 8003fee:	edd3 8a07 	vldr	s17, [r3, #28]
 8003ff2:	4b5b      	ldr	r3, [pc, #364]	; (8004160 <generate_waveforms+0xa30>)
 8003ff4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	4a5a      	ldr	r2, [pc, #360]	; (8004164 <generate_waveforms+0xa34>)
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	edd3 7a00 	vldr	s15, [r3]
 8004004:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004008:	4b54      	ldr	r3, [pc, #336]	; (800415c <generate_waveforms+0xa2c>)
 800400a:	edd3 7a00 	vldr	s15, [r3]
 800400e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	4a54      	ldr	r2, [pc, #336]	; (8004168 <generate_waveforms+0xa38>)
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	edd3 7a00 	vldr	s15, [r3]
 800401e:	eddf 6a53 	vldr	s13, [pc, #332]	; 800416c <generate_waveforms+0xa3c>
 8004022:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800402a:	eeb0 0a67 	vmov.f32	s0, s15
 800402e:	f000 ff51 	bl	8004ed4 <gen_square_angle>
 8004032:	eef0 7a40 	vmov.f32	s15, s0
 8004036:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800403a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800403e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004042:	edc7 7a00 	vstr	s15, [r7]
 8004046:	883b      	ldrh	r3, [r7, #0]
 8004048:	b29a      	uxth	r2, r3
 800404a:	4b4a      	ldr	r3, [pc, #296]	; (8004174 <generate_waveforms+0xa44>)
 800404c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4946      	ldr	r1, [pc, #280]	; (8004170 <generate_waveforms+0xa40>)
 8004056:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800405a:	b291      	uxth	r1, r2
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4845      	ldr	r0, [pc, #276]	; (8004174 <generate_waveforms+0xa44>)
 8004060:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8004064:	b292      	uxth	r2, r2
 8004066:	440a      	add	r2, r1
 8004068:	b291      	uxth	r1, r2
 800406a:	4a41      	ldr	r2, [pc, #260]	; (8004170 <generate_waveforms+0xa40>)
 800406c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004070:	e061      	b.n	8004136 <generate_waveforms+0xa06>
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_square_angle(theta_vco + 0.3f * buffer_adsr_fm[i]);
 8004072:	69bc      	ldr	r4, [r7, #24]
 8004074:	4b3a      	ldr	r3, [pc, #232]	; (8004160 <generate_waveforms+0xa30>)
 8004076:	ed93 8a06 	vldr	s16, [r3, #24]
 800407a:	4b39      	ldr	r3, [pc, #228]	; (8004160 <generate_waveforms+0xa30>)
 800407c:	edd3 8a06 	vldr	s17, [r3, #24]
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	4a39      	ldr	r2, [pc, #228]	; (8004168 <generate_waveforms+0xa38>)
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	edd3 7a00 	vldr	s15, [r3]
 800408c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800416c <generate_waveforms+0xa3c>
 8004090:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004094:	4b30      	ldr	r3, [pc, #192]	; (8004158 <generate_waveforms+0xa28>)
 8004096:	edd3 7a00 	vldr	s15, [r3]
 800409a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800409e:	eeb0 0a67 	vmov.f32	s0, s15
 80040a2:	f000 ff17 	bl	8004ed4 <gen_square_angle>
 80040a6:	eef0 7a40 	vmov.f32	s15, s0
 80040aa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80040ae:	ee78 7a27 	vadd.f32	s15, s16, s15
 80040b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b6:	edc7 7a00 	vstr	s15, [r7]
 80040ba:	883b      	ldrh	r3, [r7, #0]
 80040bc:	b29a      	uxth	r2, r3
 80040be:	4b2c      	ldr	r3, [pc, #176]	; (8004170 <generate_waveforms+0xa40>)
 80040c0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_square_angle(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 80040c4:	69bc      	ldr	r4, [r7, #24]
 80040c6:	4b26      	ldr	r3, [pc, #152]	; (8004160 <generate_waveforms+0xa30>)
 80040c8:	ed93 8a07 	vldr	s16, [r3, #28]
 80040cc:	4b24      	ldr	r3, [pc, #144]	; (8004160 <generate_waveforms+0xa30>)
 80040ce:	edd3 8a07 	vldr	s17, [r3, #28]
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	4a24      	ldr	r2, [pc, #144]	; (8004168 <generate_waveforms+0xa38>)
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	edd3 7a00 	vldr	s15, [r3]
 80040de:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800416c <generate_waveforms+0xa3c>
 80040e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <generate_waveforms+0xa2c>)
 80040e8:	edd3 7a00 	vldr	s15, [r3]
 80040ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f0:	eeb0 0a67 	vmov.f32	s0, s15
 80040f4:	f000 feee 	bl	8004ed4 <gen_square_angle>
 80040f8:	eef0 7a40 	vmov.f32	s15, s0
 80040fc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004100:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004108:	edc7 7a00 	vstr	s15, [r7]
 800410c:	883b      	ldrh	r3, [r7, #0]
 800410e:	b29a      	uxth	r2, r3
 8004110:	4b18      	ldr	r3, [pc, #96]	; (8004174 <generate_waveforms+0xa44>)
 8004112:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4915      	ldr	r1, [pc, #84]	; (8004170 <generate_waveforms+0xa40>)
 800411c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004120:	b291      	uxth	r1, r2
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4813      	ldr	r0, [pc, #76]	; (8004174 <generate_waveforms+0xa44>)
 8004126:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800412a:	b292      	uxth	r2, r2
 800412c:	440a      	add	r2, r1
 800412e:	b291      	uxth	r1, r2
 8004130:	4a0f      	ldr	r2, [pc, #60]	; (8004170 <generate_waveforms+0xa40>)
 8004132:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Square VCO
	else if(osc.vco_wav == square)
	{
		for(i = start; i < end; i++)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	3301      	adds	r3, #1
 800413a:	61bb      	str	r3, [r7, #24]
 800413c:	88ba      	ldrh	r2, [r7, #4]
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	429a      	cmp	r2, r3
 8004142:	f63f af01 	bhi.w	8003f48 <generate_waveforms+0x818>
 8004146:	e269      	b.n	800461c <generate_waveforms+0xeec>
			}
		}
	}

	// Sawtooth VCO
	else if(osc.vco_wav == sawtooth)
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <generate_waveforms+0xa30>)
 800414a:	8a1b      	ldrh	r3, [r3, #16]
 800414c:	2b03      	cmp	r3, #3
 800414e:	f040 8113 	bne.w	8004378 <generate_waveforms+0xc48>
	{
		for(i = start; i < end; i++)
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	e109      	b.n	800436c <generate_waveforms+0xc3c>
 8004158:	2000496c 	.word	0x2000496c
 800415c:	20004970 	.word	0x20004970
 8004160:	20000054 	.word	0x20000054
 8004164:	200015c8 	.word	0x200015c8
 8004168:	200035c8 	.word	0x200035c8
 800416c:	3e99999a 	.word	0x3e99999a
 8004170:	200005c8 	.word	0x200005c8
 8004174:	20000dc8 	.word	0x20000dc8
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8004178:	4b83      	ldr	r3, [pc, #524]	; (8004388 <generate_waveforms+0xc58>)
 800417a:	ed93 7a00 	vldr	s14, [r3]
 800417e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004186:	4b80      	ldr	r3, [pc, #512]	; (8004388 <generate_waveforms+0xc58>)
 8004188:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 800418c:	4b7f      	ldr	r3, [pc, #508]	; (800438c <generate_waveforms+0xc5c>)
 800418e:	ed93 7a00 	vldr	s14, [r3]
 8004192:	edd7 7a04 	vldr	s15, [r7, #16]
 8004196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800419a:	4b7c      	ldr	r3, [pc, #496]	; (800438c <generate_waveforms+0xc5c>)
 800419c:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 80041a0:	4b7b      	ldr	r3, [pc, #492]	; (8004390 <generate_waveforms+0xc60>)
 80041a2:	8adb      	ldrh	r3, [r3, #22]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d17c      	bne.n	80042a2 <generate_waveforms+0xb72>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_sawtooth_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 80041a8:	69bc      	ldr	r4, [r7, #24]
 80041aa:	4b79      	ldr	r3, [pc, #484]	; (8004390 <generate_waveforms+0xc60>)
 80041ac:	ed93 8a06 	vldr	s16, [r3, #24]
 80041b0:	4b77      	ldr	r3, [pc, #476]	; (8004390 <generate_waveforms+0xc60>)
 80041b2:	edd3 8a06 	vldr	s17, [r3, #24]
 80041b6:	4b76      	ldr	r3, [pc, #472]	; (8004390 <generate_waveforms+0xc60>)
 80041b8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	4a75      	ldr	r2, [pc, #468]	; (8004394 <generate_waveforms+0xc64>)
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	edd3 7a00 	vldr	s15, [r3]
 80041c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041cc:	4b6e      	ldr	r3, [pc, #440]	; (8004388 <generate_waveforms+0xc58>)
 80041ce:	edd3 7a00 	vldr	s15, [r3]
 80041d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	4a6f      	ldr	r2, [pc, #444]	; (8004398 <generate_waveforms+0xc68>)
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800439c <generate_waveforms+0xc6c>
 80041e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80041ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ee:	eeb0 0a67 	vmov.f32	s0, s15
 80041f2:	f000 fe97 	bl	8004f24 <gen_sawtooth_angle>
 80041f6:	eef0 7a40 	vmov.f32	s15, s0
 80041fa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80041fe:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004206:	edc7 7a00 	vstr	s15, [r7]
 800420a:	883b      	ldrh	r3, [r7, #0]
 800420c:	b29a      	uxth	r2, r3
 800420e:	4b64      	ldr	r3, [pc, #400]	; (80043a0 <generate_waveforms+0xc70>)
 8004210:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_sawtooth_angle(theta_vco2 + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8004214:	69bc      	ldr	r4, [r7, #24]
 8004216:	4b5e      	ldr	r3, [pc, #376]	; (8004390 <generate_waveforms+0xc60>)
 8004218:	ed93 8a07 	vldr	s16, [r3, #28]
 800421c:	4b5c      	ldr	r3, [pc, #368]	; (8004390 <generate_waveforms+0xc60>)
 800421e:	edd3 8a07 	vldr	s17, [r3, #28]
 8004222:	4b5b      	ldr	r3, [pc, #364]	; (8004390 <generate_waveforms+0xc60>)
 8004224:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	4a5a      	ldr	r2, [pc, #360]	; (8004394 <generate_waveforms+0xc64>)
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	edd3 7a00 	vldr	s15, [r3]
 8004234:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004238:	4b54      	ldr	r3, [pc, #336]	; (800438c <generate_waveforms+0xc5c>)
 800423a:	edd3 7a00 	vldr	s15, [r3]
 800423e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	4a54      	ldr	r2, [pc, #336]	; (8004398 <generate_waveforms+0xc68>)
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	edd3 7a00 	vldr	s15, [r3]
 800424e:	eddf 6a53 	vldr	s13, [pc, #332]	; 800439c <generate_waveforms+0xc6c>
 8004252:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800425a:	eeb0 0a67 	vmov.f32	s0, s15
 800425e:	f000 fe61 	bl	8004f24 <gen_sawtooth_angle>
 8004262:	eef0 7a40 	vmov.f32	s15, s0
 8004266:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800426a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800426e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004272:	edc7 7a00 	vstr	s15, [r7]
 8004276:	883b      	ldrh	r3, [r7, #0]
 8004278:	b29a      	uxth	r2, r3
 800427a:	4b4a      	ldr	r3, [pc, #296]	; (80043a4 <generate_waveforms+0xc74>)
 800427c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4946      	ldr	r1, [pc, #280]	; (80043a0 <generate_waveforms+0xc70>)
 8004286:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800428a:	b291      	uxth	r1, r2
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4845      	ldr	r0, [pc, #276]	; (80043a4 <generate_waveforms+0xc74>)
 8004290:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8004294:	b292      	uxth	r2, r2
 8004296:	440a      	add	r2, r1
 8004298:	b291      	uxth	r1, r2
 800429a:	4a41      	ldr	r2, [pc, #260]	; (80043a0 <generate_waveforms+0xc70>)
 800429c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80042a0:	e061      	b.n	8004366 <generate_waveforms+0xc36>

			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_sawtooth_angle(theta_vco + 0.3f * buffer_adsr_fm[i]);
 80042a2:	69bc      	ldr	r4, [r7, #24]
 80042a4:	4b3a      	ldr	r3, [pc, #232]	; (8004390 <generate_waveforms+0xc60>)
 80042a6:	ed93 8a06 	vldr	s16, [r3, #24]
 80042aa:	4b39      	ldr	r3, [pc, #228]	; (8004390 <generate_waveforms+0xc60>)
 80042ac:	edd3 8a06 	vldr	s17, [r3, #24]
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	4a39      	ldr	r2, [pc, #228]	; (8004398 <generate_waveforms+0xc68>)
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	edd3 7a00 	vldr	s15, [r3]
 80042bc:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800439c <generate_waveforms+0xc6c>
 80042c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042c4:	4b30      	ldr	r3, [pc, #192]	; (8004388 <generate_waveforms+0xc58>)
 80042c6:	edd3 7a00 	vldr	s15, [r3]
 80042ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ce:	eeb0 0a67 	vmov.f32	s0, s15
 80042d2:	f000 fe27 	bl	8004f24 <gen_sawtooth_angle>
 80042d6:	eef0 7a40 	vmov.f32	s15, s0
 80042da:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80042de:	ee78 7a27 	vadd.f32	s15, s16, s15
 80042e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042e6:	edc7 7a00 	vstr	s15, [r7]
 80042ea:	883b      	ldrh	r3, [r7, #0]
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	4b2c      	ldr	r3, [pc, #176]	; (80043a0 <generate_waveforms+0xc70>)
 80042f0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_sawtooth_angle(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 80042f4:	69bc      	ldr	r4, [r7, #24]
 80042f6:	4b26      	ldr	r3, [pc, #152]	; (8004390 <generate_waveforms+0xc60>)
 80042f8:	ed93 8a07 	vldr	s16, [r3, #28]
 80042fc:	4b24      	ldr	r3, [pc, #144]	; (8004390 <generate_waveforms+0xc60>)
 80042fe:	edd3 8a07 	vldr	s17, [r3, #28]
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	4a24      	ldr	r2, [pc, #144]	; (8004398 <generate_waveforms+0xc68>)
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	edd3 7a00 	vldr	s15, [r3]
 800430e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800439c <generate_waveforms+0xc6c>
 8004312:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004316:	4b1d      	ldr	r3, [pc, #116]	; (800438c <generate_waveforms+0xc5c>)
 8004318:	edd3 7a00 	vldr	s15, [r3]
 800431c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004320:	eeb0 0a67 	vmov.f32	s0, s15
 8004324:	f000 fdfe 	bl	8004f24 <gen_sawtooth_angle>
 8004328:	eef0 7a40 	vmov.f32	s15, s0
 800432c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004330:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004338:	edc7 7a00 	vstr	s15, [r7]
 800433c:	883b      	ldrh	r3, [r7, #0]
 800433e:	b29a      	uxth	r2, r3
 8004340:	4b18      	ldr	r3, [pc, #96]	; (80043a4 <generate_waveforms+0xc74>)
 8004342:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4915      	ldr	r1, [pc, #84]	; (80043a0 <generate_waveforms+0xc70>)
 800434c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004350:	b291      	uxth	r1, r2
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4813      	ldr	r0, [pc, #76]	; (80043a4 <generate_waveforms+0xc74>)
 8004356:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800435a:	b292      	uxth	r2, r2
 800435c:	440a      	add	r2, r1
 800435e:	b291      	uxth	r1, r2
 8004360:	4a0f      	ldr	r2, [pc, #60]	; (80043a0 <generate_waveforms+0xc70>)
 8004362:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Sawtooth VCO
	else if(osc.vco_wav == sawtooth)
	{
		for(i = start; i < end; i++)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	3301      	adds	r3, #1
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	88ba      	ldrh	r2, [r7, #4]
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	429a      	cmp	r2, r3
 8004372:	f63f af01 	bhi.w	8004178 <generate_waveforms+0xa48>
 8004376:	e151      	b.n	800461c <generate_waveforms+0xeec>
			}
		}
	}

	// Triangle VCO
	else if(osc.vco_wav == triangle)
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <generate_waveforms+0xc60>)
 800437a:	8a1b      	ldrh	r3, [r3, #16]
 800437c:	2b04      	cmp	r3, #4
 800437e:	f040 8113 	bne.w	80045a8 <generate_waveforms+0xe78>
	{
		for(i = start; i < end; i++)
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	e109      	b.n	800459c <generate_waveforms+0xe6c>
 8004388:	2000496c 	.word	0x2000496c
 800438c:	20004970 	.word	0x20004970
 8004390:	20000054 	.word	0x20000054
 8004394:	200015c8 	.word	0x200015c8
 8004398:	200035c8 	.word	0x200035c8
 800439c:	3e99999a 	.word	0x3e99999a
 80043a0:	200005c8 	.word	0x200005c8
 80043a4:	20000dc8 	.word	0x20000dc8
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 80043a8:	4bba      	ldr	r3, [pc, #744]	; (8004694 <generate_waveforms+0xf64>)
 80043aa:	ed93 7a00 	vldr	s14, [r3]
 80043ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80043b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043b6:	4bb7      	ldr	r3, [pc, #732]	; (8004694 <generate_waveforms+0xf64>)
 80043b8:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 80043bc:	4bb6      	ldr	r3, [pc, #728]	; (8004698 <generate_waveforms+0xf68>)
 80043be:	ed93 7a00 	vldr	s14, [r3]
 80043c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80043c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ca:	4bb3      	ldr	r3, [pc, #716]	; (8004698 <generate_waveforms+0xf68>)
 80043cc:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 80043d0:	4bb2      	ldr	r3, [pc, #712]	; (800469c <generate_waveforms+0xf6c>)
 80043d2:	8adb      	ldrh	r3, [r3, #22]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d17c      	bne.n	80044d2 <generate_waveforms+0xda2>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_triangle_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 80043d8:	69bc      	ldr	r4, [r7, #24]
 80043da:	4bb0      	ldr	r3, [pc, #704]	; (800469c <generate_waveforms+0xf6c>)
 80043dc:	ed93 8a06 	vldr	s16, [r3, #24]
 80043e0:	4bae      	ldr	r3, [pc, #696]	; (800469c <generate_waveforms+0xf6c>)
 80043e2:	edd3 8a06 	vldr	s17, [r3, #24]
 80043e6:	4bad      	ldr	r3, [pc, #692]	; (800469c <generate_waveforms+0xf6c>)
 80043e8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	4aac      	ldr	r2, [pc, #688]	; (80046a0 <generate_waveforms+0xf70>)
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	edd3 7a00 	vldr	s15, [r3]
 80043f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043fc:	4ba5      	ldr	r3, [pc, #660]	; (8004694 <generate_waveforms+0xf64>)
 80043fe:	edd3 7a00 	vldr	s15, [r3]
 8004402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	4aa6      	ldr	r2, [pc, #664]	; (80046a4 <generate_waveforms+0xf74>)
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	edd3 7a00 	vldr	s15, [r3]
 8004412:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80046a8 <generate_waveforms+0xf78>
 8004416:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800441a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800441e:	eeb0 0a67 	vmov.f32	s0, s15
 8004422:	f000 fe67 	bl	80050f4 <gen_triangle_angle>
 8004426:	eef0 7a40 	vmov.f32	s15, s0
 800442a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800442e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004436:	edc7 7a00 	vstr	s15, [r7]
 800443a:	883b      	ldrh	r3, [r7, #0]
 800443c:	b29a      	uxth	r2, r3
 800443e:	4b9b      	ldr	r3, [pc, #620]	; (80046ac <generate_waveforms+0xf7c>)
 8004440:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_triangle_angle(theta_vco2 + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8004444:	69bc      	ldr	r4, [r7, #24]
 8004446:	4b95      	ldr	r3, [pc, #596]	; (800469c <generate_waveforms+0xf6c>)
 8004448:	ed93 8a07 	vldr	s16, [r3, #28]
 800444c:	4b93      	ldr	r3, [pc, #588]	; (800469c <generate_waveforms+0xf6c>)
 800444e:	edd3 8a07 	vldr	s17, [r3, #28]
 8004452:	4b92      	ldr	r3, [pc, #584]	; (800469c <generate_waveforms+0xf6c>)
 8004454:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	4a91      	ldr	r2, [pc, #580]	; (80046a0 <generate_waveforms+0xf70>)
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	edd3 7a00 	vldr	s15, [r3]
 8004464:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004468:	4b8b      	ldr	r3, [pc, #556]	; (8004698 <generate_waveforms+0xf68>)
 800446a:	edd3 7a00 	vldr	s15, [r3]
 800446e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	4a8b      	ldr	r2, [pc, #556]	; (80046a4 <generate_waveforms+0xf74>)
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	edd3 7a00 	vldr	s15, [r3]
 800447e:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80046a8 <generate_waveforms+0xf78>
 8004482:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800448a:	eeb0 0a67 	vmov.f32	s0, s15
 800448e:	f000 fe31 	bl	80050f4 <gen_triangle_angle>
 8004492:	eef0 7a40 	vmov.f32	s15, s0
 8004496:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800449a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800449e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044a2:	edc7 7a00 	vstr	s15, [r7]
 80044a6:	883b      	ldrh	r3, [r7, #0]
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	4b81      	ldr	r3, [pc, #516]	; (80046b0 <generate_waveforms+0xf80>)
 80044ac:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	497d      	ldr	r1, [pc, #500]	; (80046ac <generate_waveforms+0xf7c>)
 80044b6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80044ba:	b291      	uxth	r1, r2
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	487c      	ldr	r0, [pc, #496]	; (80046b0 <generate_waveforms+0xf80>)
 80044c0:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80044c4:	b292      	uxth	r2, r2
 80044c6:	440a      	add	r2, r1
 80044c8:	b291      	uxth	r1, r2
 80044ca:	4a78      	ldr	r2, [pc, #480]	; (80046ac <generate_waveforms+0xf7c>)
 80044cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80044d0:	e061      	b.n	8004596 <generate_waveforms+0xe66>
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_triangle_angle(theta_vco + 0.3f * buffer_adsr_fm[i]);
 80044d2:	69bc      	ldr	r4, [r7, #24]
 80044d4:	4b71      	ldr	r3, [pc, #452]	; (800469c <generate_waveforms+0xf6c>)
 80044d6:	ed93 8a06 	vldr	s16, [r3, #24]
 80044da:	4b70      	ldr	r3, [pc, #448]	; (800469c <generate_waveforms+0xf6c>)
 80044dc:	edd3 8a06 	vldr	s17, [r3, #24]
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	4a70      	ldr	r2, [pc, #448]	; (80046a4 <generate_waveforms+0xf74>)
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	edd3 7a00 	vldr	s15, [r3]
 80044ec:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80046a8 <generate_waveforms+0xf78>
 80044f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80044f4:	4b67      	ldr	r3, [pc, #412]	; (8004694 <generate_waveforms+0xf64>)
 80044f6:	edd3 7a00 	vldr	s15, [r3]
 80044fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004502:	f000 fdf7 	bl	80050f4 <gen_triangle_angle>
 8004506:	eef0 7a40 	vmov.f32	s15, s0
 800450a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800450e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004516:	edc7 7a00 	vstr	s15, [r7]
 800451a:	883b      	ldrh	r3, [r7, #0]
 800451c:	b29a      	uxth	r2, r3
 800451e:	4b63      	ldr	r3, [pc, #396]	; (80046ac <generate_waveforms+0xf7c>)
 8004520:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_triangle_angle(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 8004524:	69bc      	ldr	r4, [r7, #24]
 8004526:	4b5d      	ldr	r3, [pc, #372]	; (800469c <generate_waveforms+0xf6c>)
 8004528:	ed93 8a07 	vldr	s16, [r3, #28]
 800452c:	4b5b      	ldr	r3, [pc, #364]	; (800469c <generate_waveforms+0xf6c>)
 800452e:	edd3 8a07 	vldr	s17, [r3, #28]
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	4a5b      	ldr	r2, [pc, #364]	; (80046a4 <generate_waveforms+0xf74>)
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	edd3 7a00 	vldr	s15, [r3]
 800453e:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80046a8 <generate_waveforms+0xf78>
 8004542:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004546:	4b54      	ldr	r3, [pc, #336]	; (8004698 <generate_waveforms+0xf68>)
 8004548:	edd3 7a00 	vldr	s15, [r3]
 800454c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004550:	eeb0 0a67 	vmov.f32	s0, s15
 8004554:	f000 fdce 	bl	80050f4 <gen_triangle_angle>
 8004558:	eef0 7a40 	vmov.f32	s15, s0
 800455c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004560:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004568:	edc7 7a00 	vstr	s15, [r7]
 800456c:	883b      	ldrh	r3, [r7, #0]
 800456e:	b29a      	uxth	r2, r3
 8004570:	4b4f      	ldr	r3, [pc, #316]	; (80046b0 <generate_waveforms+0xf80>)
 8004572:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	494c      	ldr	r1, [pc, #304]	; (80046ac <generate_waveforms+0xf7c>)
 800457c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004580:	b291      	uxth	r1, r2
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	484a      	ldr	r0, [pc, #296]	; (80046b0 <generate_waveforms+0xf80>)
 8004586:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800458a:	b292      	uxth	r2, r2
 800458c:	440a      	add	r2, r1
 800458e:	b291      	uxth	r1, r2
 8004590:	4a46      	ldr	r2, [pc, #280]	; (80046ac <generate_waveforms+0xf7c>)
 8004592:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Triangle VCO
	else if(osc.vco_wav == triangle)
	{
		for(i = start; i < end; i++)
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	3301      	adds	r3, #1
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	88ba      	ldrh	r2, [r7, #4]
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	f63f af01 	bhi.w	80043a8 <generate_waveforms+0xc78>
 80045a6:	e039      	b.n	800461c <generate_waveforms+0xeec>
			}
		}
	}

	// Noise VCO
	else if(osc.vco_wav == noise)
 80045a8:	4b3c      	ldr	r3, [pc, #240]	; (800469c <generate_waveforms+0xf6c>)
 80045aa:	8a1b      	ldrh	r3, [r3, #16]
 80045ac:	2b05      	cmp	r3, #5
 80045ae:	d135      	bne.n	800461c <generate_waveforms+0xeec>
	{
		for(i = start; i < end; i++)
 80045b0:	88fb      	ldrh	r3, [r7, #6]
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	e02e      	b.n	8004614 <generate_waveforms+0xee4>
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 80045b6:	4b37      	ldr	r3, [pc, #220]	; (8004694 <generate_waveforms+0xf64>)
 80045b8:	ed93 7a00 	vldr	s14, [r3]
 80045bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80045c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c4:	4b33      	ldr	r3, [pc, #204]	; (8004694 <generate_waveforms+0xf64>)
 80045c6:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 80045ca:	4b33      	ldr	r3, [pc, #204]	; (8004698 <generate_waveforms+0xf68>)
 80045cc:	ed93 7a00 	vldr	s14, [r3]
 80045d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80045d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d8:	4b2f      	ldr	r3, [pc, #188]	; (8004698 <generate_waveforms+0xf68>)
 80045da:	edc3 7a00 	vstr	s15, [r3]

			buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_AWGN();
 80045de:	69bc      	ldr	r4, [r7, #24]
 80045e0:	4b2e      	ldr	r3, [pc, #184]	; (800469c <generate_waveforms+0xf6c>)
 80045e2:	ed93 8a06 	vldr	s16, [r3, #24]
 80045e6:	4b2d      	ldr	r3, [pc, #180]	; (800469c <generate_waveforms+0xf6c>)
 80045e8:	edd3 8a06 	vldr	s17, [r3, #24]
 80045ec:	f000 ff1c 	bl	8005428 <gen_AWGN>
 80045f0:	eef0 7a40 	vmov.f32	s15, s0
 80045f4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80045f8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80045fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004600:	edc7 7a00 	vstr	s15, [r7]
 8004604:	883b      	ldrh	r3, [r7, #0]
 8004606:	b29a      	uxth	r2, r3
 8004608:	4b28      	ldr	r3, [pc, #160]	; (80046ac <generate_waveforms+0xf7c>)
 800460a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	}

	// Noise VCO
	else if(osc.vco_wav == noise)
	{
		for(i = start; i < end; i++)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	3301      	adds	r3, #1
 8004612:	61bb      	str	r3, [r7, #24]
 8004614:	88ba      	ldrh	r2, [r7, #4]
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	429a      	cmp	r2, r3
 800461a:	d8cc      	bhi.n	80045b6 <generate_waveforms+0xe86>
			}
		}
	}

	// AM Modulate VCO with LFO
	if(osc.am_mod == ON)
 800461c:	4b1f      	ldr	r3, [pc, #124]	; (800469c <generate_waveforms+0xf6c>)
 800461e:	8a9b      	ldrh	r3, [r3, #20]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d12e      	bne.n	8004682 <generate_waveforms+0xf52>
	{
		for(i = start; i < end; i++)
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	61bb      	str	r3, [r7, #24]
 8004628:	e027      	b.n	800467a <generate_waveforms+0xf4a>
		{
			buffer_output[i] = buffer_output[i]*(osc.lfo_amp_am + osc.lfo_amp_am*buffer_lfo_float[i]);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	491f      	ldr	r1, [pc, #124]	; (80046ac <generate_waveforms+0xf7c>)
 8004630:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004634:	b292      	uxth	r2, r2
 8004636:	ee07 2a90 	vmov	s15, r2
 800463a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800463e:	4a17      	ldr	r2, [pc, #92]	; (800469c <generate_waveforms+0xf6c>)
 8004640:	edd2 6a09 	vldr	s13, [r2, #36]	; 0x24
 8004644:	4a15      	ldr	r2, [pc, #84]	; (800469c <generate_waveforms+0xf6c>)
 8004646:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4914      	ldr	r1, [pc, #80]	; (80046a0 <generate_waveforms+0xf70>)
 800464e:	0092      	lsls	r2, r2, #2
 8004650:	440a      	add	r2, r1
 8004652:	edd2 7a00 	vldr	s15, [r2]
 8004656:	ee66 7a27 	vmul.f32	s15, s12, s15
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004666:	edc7 7a00 	vstr	s15, [r7]
 800466a:	883a      	ldrh	r2, [r7, #0]
 800466c:	b291      	uxth	r1, r2
 800466e:	4a0f      	ldr	r2, [pc, #60]	; (80046ac <generate_waveforms+0xf7c>)
 8004670:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// AM Modulate VCO with LFO
	if(osc.am_mod == ON)
	{
		for(i = start; i < end; i++)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	3301      	adds	r3, #1
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	88ba      	ldrh	r2, [r7, #4]
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	429a      	cmp	r2, r3
 8004680:	d8d3      	bhi.n	800462a <generate_waveforms+0xefa>
			buffer_output[i] = buffer_output[i]*(osc.lfo_amp_am + osc.lfo_amp_am*buffer_lfo_float[i]);
		}
	}

	// AM Modulate VCO with ADSR
	if(adsr_settings.am_mod == ON)
 8004682:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <generate_waveforms+0xf84>)
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d137      	bne.n	80046fc <generate_waveforms+0xfcc>
	{
		for(i = start; i < end; i++)
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	e030      	b.n	80046f4 <generate_waveforms+0xfc4>
 8004692:	bf00      	nop
 8004694:	2000496c 	.word	0x2000496c
 8004698:	20004970 	.word	0x20004970
 800469c:	20000054 	.word	0x20000054
 80046a0:	200015c8 	.word	0x200015c8
 80046a4:	200035c8 	.word	0x200035c8
 80046a8:	3e99999a 	.word	0x3e99999a
 80046ac:	200005c8 	.word	0x200005c8
 80046b0:	20000dc8 	.word	0x20000dc8
 80046b4:	20004a64 	.word	0x20004a64
		{
			buffer_output[i] = buffer_output[i]*buffer_adsr_am[i];
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	492a      	ldr	r1, [pc, #168]	; (8004768 <generate_waveforms+0x1038>)
 80046be:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80046c2:	b292      	uxth	r2, r2
 80046c4:	ee07 2a90 	vmov	s15, r2
 80046c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4927      	ldr	r1, [pc, #156]	; (800476c <generate_waveforms+0x103c>)
 80046d0:	0092      	lsls	r2, r2, #2
 80046d2:	440a      	add	r2, r1
 80046d4:	edd2 7a00 	vldr	s15, [r2]
 80046d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e0:	edc7 7a00 	vstr	s15, [r7]
 80046e4:	883a      	ldrh	r2, [r7, #0]
 80046e6:	b291      	uxth	r1, r2
 80046e8:	4a1f      	ldr	r2, [pc, #124]	; (8004768 <generate_waveforms+0x1038>)
 80046ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// AM Modulate VCO with ADSR
	if(adsr_settings.am_mod == ON)
	{
		for(i = start; i < end; i++)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	3301      	adds	r3, #1
 80046f2:	61bb      	str	r3, [r7, #24]
 80046f4:	88ba      	ldrh	r2, [r7, #4]
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d8dd      	bhi.n	80046b8 <generate_waveforms+0xf88>
	}

	// TODO: break setup into two functions.
	// One initializes filter settings.
	// The other calls the filter functions.
	biquad_invoke2(start, end);
 80046fc:	88ba      	ldrh	r2, [r7, #4]
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	4611      	mov	r1, r2
 8004702:	4618      	mov	r0, r3
 8004704:	f000 ff84 	bl	8005610 <biquad_invoke2>

	theta_vco = fast_fmod(theta_vco, TWO_PI);
 8004708:	4b19      	ldr	r3, [pc, #100]	; (8004770 <generate_waveforms+0x1040>)
 800470a:	edd3 7a00 	vldr	s15, [r3]
 800470e:	eddf 0a19 	vldr	s1, [pc, #100]	; 8004774 <generate_waveforms+0x1044>
 8004712:	eeb0 0a67 	vmov.f32	s0, s15
 8004716:	f000 fdb7 	bl	8005288 <fast_fmod>
 800471a:	eef0 7a40 	vmov.f32	s15, s0
 800471e:	4b14      	ldr	r3, [pc, #80]	; (8004770 <generate_waveforms+0x1040>)
 8004720:	edc3 7a00 	vstr	s15, [r3]
	theta_vco2 = fast_fmod(theta_vco2, TWO_PI);
 8004724:	4b14      	ldr	r3, [pc, #80]	; (8004778 <generate_waveforms+0x1048>)
 8004726:	edd3 7a00 	vldr	s15, [r3]
 800472a:	eddf 0a12 	vldr	s1, [pc, #72]	; 8004774 <generate_waveforms+0x1044>
 800472e:	eeb0 0a67 	vmov.f32	s0, s15
 8004732:	f000 fda9 	bl	8005288 <fast_fmod>
 8004736:	eef0 7a40 	vmov.f32	s15, s0
 800473a:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <generate_waveforms+0x1048>)
 800473c:	edc3 7a00 	vstr	s15, [r3]
	theta_lfo = fast_fmod(theta_lfo, TWO_PI);
 8004740:	4b0e      	ldr	r3, [pc, #56]	; (800477c <generate_waveforms+0x104c>)
 8004742:	edd3 7a00 	vldr	s15, [r3]
 8004746:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8004774 <generate_waveforms+0x1044>
 800474a:	eeb0 0a67 	vmov.f32	s0, s15
 800474e:	f000 fd9b 	bl	8005288 <fast_fmod>
 8004752:	eef0 7a40 	vmov.f32	s15, s0
 8004756:	4b09      	ldr	r3, [pc, #36]	; (800477c <generate_waveforms+0x104c>)
 8004758:	edc3 7a00 	vstr	s15, [r3]
	// theta_adsr = fast_fmod(theta_adsr, TWO_PI);

	return;
 800475c:	bf00      	nop
}
 800475e:	3724      	adds	r7, #36	; 0x24
 8004760:	46bd      	mov	sp, r7
 8004762:	ecbd 8b02 	vpop	{d8}
 8004766:	bd90      	pop	{r4, r7, pc}
 8004768:	200005c8 	.word	0x200005c8
 800476c:	200025c8 	.word	0x200025c8
 8004770:	2000496c 	.word	0x2000496c
 8004774:	40c90fdb 	.word	0x40c90fdb
 8004778:	20004970 	.word	0x20004970
 800477c:	20004974 	.word	0x20004974

08004780 <adsr>:


void adsr(uint16_t start, uint16_t end)
{
 8004780:	b590      	push	{r4, r7, lr}
 8004782:	ed2d 8b02 	vpush	{d8}
 8004786:	b08f      	sub	sp, #60	; 0x3c
 8004788:	af02      	add	r7, sp, #8
 800478a:	4603      	mov	r3, r0
 800478c:	460a      	mov	r2, r1
 800478e:	80fb      	strh	r3, [r7, #6]
 8004790:	4613      	mov	r3, r2
 8004792:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	85fb      	strh	r3, [r7, #46]	; 0x2e
	// adsr_settings = adsr_03;
	adsr_settings.attack_len =  (ADCBuffer[4] & 0xfffc)*20;		// A5
 8004798:	4b95      	ldr	r3, [pc, #596]	; (80049f0 <adsr+0x270>)
 800479a:	891b      	ldrh	r3, [r3, #8]
 800479c:	b29b      	uxth	r3, r3
 800479e:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80047a2:	401a      	ands	r2, r3
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	461a      	mov	r2, r3
 80047ae:	4b91      	ldr	r3, [pc, #580]	; (80049f4 <adsr+0x274>)
 80047b0:	609a      	str	r2, [r3, #8]
	adsr_settings.decay_len =   (ADCBuffer[9] & 0xfffc)*20;	// C1
 80047b2:	4b8f      	ldr	r3, [pc, #572]	; (80049f0 <adsr+0x270>)
 80047b4:	8a5b      	ldrh	r3, [r3, #18]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80047bc:	401a      	ands	r2, r3
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	461a      	mov	r2, r3
 80047c8:	4b8a      	ldr	r3, [pc, #552]	; (80049f4 <adsr+0x274>)
 80047ca:	60da      	str	r2, [r3, #12]
	adsr_settings.sustain_len = (ADCBuffer[5] & 0xfffc)*20;	// A7
 80047cc:	4b88      	ldr	r3, [pc, #544]	; (80049f0 <adsr+0x270>)
 80047ce:	895b      	ldrh	r3, [r3, #10]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80047d6:	401a      	ands	r2, r3
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	461a      	mov	r2, r3
 80047e2:	4b84      	ldr	r3, [pc, #528]	; (80049f4 <adsr+0x274>)
 80047e4:	611a      	str	r2, [r3, #16]
	adsr_settings.release_len = (ADCBuffer[6] & 0xfffc)*20;	// B0
 80047e6:	4b82      	ldr	r3, [pc, #520]	; (80049f0 <adsr+0x270>)
 80047e8:	899b      	ldrh	r3, [r3, #12]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80047f0:	401a      	ands	r2, r3
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	461a      	mov	r2, r3
 80047fc:	4b7d      	ldr	r3, [pc, #500]	; (80049f4 <adsr+0x274>)
 80047fe:	615a      	str	r2, [r3, #20]
	adsr_settings.blank_len =   (ADCBuffer[8] & 0xfffc)*20;		// C0
 8004800:	4b7b      	ldr	r3, [pc, #492]	; (80049f0 <adsr+0x270>)
 8004802:	8a1b      	ldrh	r3, [r3, #16]
 8004804:	b29b      	uxth	r3, r3
 8004806:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800480a:	401a      	ands	r2, r3
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	461a      	mov	r2, r3
 8004816:	4b77      	ldr	r3, [pc, #476]	; (80049f4 <adsr+0x274>)
 8004818:	619a      	str	r2, [r3, #24]
	volatile uint32_t samples_cycle_adsr = adsr_settings.attack_len + adsr_settings.decay_len + adsr_settings.sustain_len + adsr_settings.release_len + adsr_settings.blank_len;
 800481a:	4b76      	ldr	r3, [pc, #472]	; (80049f4 <adsr+0x274>)
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	4b75      	ldr	r3, [pc, #468]	; (80049f4 <adsr+0x274>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	441a      	add	r2, r3
 8004824:	4b73      	ldr	r3, [pc, #460]	; (80049f4 <adsr+0x274>)
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	441a      	add	r2, r3
 800482a:	4b72      	ldr	r3, [pc, #456]	; (80049f4 <adsr+0x274>)
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	441a      	add	r2, r3
 8004830:	4b70      	ldr	r3, [pc, #448]	; (80049f4 <adsr+0x274>)
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	4413      	add	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

	// C4
	uint16_t tempf = pseudo_log(ADCBuffer[11] & 0xfffc);
 8004838:	4b6d      	ldr	r3, [pc, #436]	; (80049f0 <adsr+0x270>)
 800483a:	8adb      	ldrh	r3, [r3, #22]
 800483c:	b29b      	uxth	r3, r3
 800483e:	f023 0303 	bic.w	r3, r3, #3
 8004842:	b29b      	uxth	r3, r3
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fd67 	bl	8005318 <pseudo_log>
 800484a:	4603      	mov	r3, r0
 800484c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	adsr_settings.sustain_amp = moving_avg(mov_avg4, &mov_avg_sum4, mov_avg_index4, MOV_AVG_LENGTH_BUFFER, tempf);
 800484e:	4b6a      	ldr	r3, [pc, #424]	; (80049f8 <adsr+0x278>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	2320      	movs	r3, #32
 8004858:	4968      	ldr	r1, [pc, #416]	; (80049fc <adsr+0x27c>)
 800485a:	4869      	ldr	r0, [pc, #420]	; (8004a00 <adsr+0x280>)
 800485c:	f000 fd38 	bl	80052d0 <moving_avg>
 8004860:	ee07 0a90 	vmov	s15, r0
 8004864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004868:	4b62      	ldr	r3, [pc, #392]	; (80049f4 <adsr+0x274>)
 800486a:	edc3 7a01 	vstr	s15, [r3, #4]
	mov_avg_index4++;
 800486e:	4b62      	ldr	r3, [pc, #392]	; (80049f8 <adsr+0x278>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	4a60      	ldr	r2, [pc, #384]	; (80049f8 <adsr+0x278>)
 8004876:	6013      	str	r3, [r2, #0]
	if (mov_avg_index4 >= MOV_AVG_LENGTH_BUFFER)
 8004878:	4b5f      	ldr	r3, [pc, #380]	; (80049f8 <adsr+0x278>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b1f      	cmp	r3, #31
 800487e:	d902      	bls.n	8004886 <adsr+0x106>
	{
		mov_avg_index4 = 0;
 8004880:	4b5d      	ldr	r3, [pc, #372]	; (80049f8 <adsr+0x278>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
	}

	adsr_settings.sustain_amp = adsr_settings.sustain_amp/8000.0f;
 8004886:	4b5b      	ldr	r3, [pc, #364]	; (80049f4 <adsr+0x274>)
 8004888:	ed93 7a01 	vldr	s14, [r3, #4]
 800488c:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8004a04 <adsr+0x284>
 8004890:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004894:	4b57      	ldr	r3, [pc, #348]	; (80049f4 <adsr+0x274>)
 8004896:	edc3 7a01 	vstr	s15, [r3, #4]
	// adsr_settings.sustain_amp = pseudo_log(adsr_settings.sustain_amp, ???);

	// Calculate ADSR boundaries.
	uint32_t decay_start = adsr_settings.attack_len;
 800489a:	4b56      	ldr	r3, [pc, #344]	; (80049f4 <adsr+0x274>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t sustain_start = decay_start + adsr_settings.decay_len;
 80048a0:	4b54      	ldr	r3, [pc, #336]	; (80049f4 <adsr+0x274>)
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	4413      	add	r3, r2
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t release_start = sustain_start + adsr_settings.sustain_len;
 80048aa:	4b52      	ldr	r3, [pc, #328]	; (80049f4 <adsr+0x274>)
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	4413      	add	r3, r2
 80048b2:	623b      	str	r3, [r7, #32]
	uint32_t blank_start = release_start + adsr_settings.release_len;
 80048b4:	4b4f      	ldr	r3, [pc, #316]	; (80049f4 <adsr+0x274>)
 80048b6:	695a      	ldr	r2, [r3, #20]
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	4413      	add	r3, r2
 80048bc:	61fb      	str	r3, [r7, #28]
	uint32_t blank_end = blank_start + adsr_settings.blank_len;
 80048be:	4b4d      	ldr	r3, [pc, #308]	; (80049f4 <adsr+0x274>)
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]


	volatile float32_t angle_attack = PI/adsr_settings.attack_len;
 80048c8:	4b4a      	ldr	r3, [pc, #296]	; (80049f4 <adsr+0x274>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	ee07 3a90 	vmov	s15, r3
 80048d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048d4:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8004a08 <adsr+0x288>
 80048d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048dc:	edc7 7a04 	vstr	s15, [r7, #16]
	volatile float32_t angle_decay = PI/adsr_settings.decay_len;
 80048e0:	4b44      	ldr	r3, [pc, #272]	; (80049f4 <adsr+0x274>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	ee07 3a90 	vmov	s15, r3
 80048e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048ec:	eddf 6a46 	vldr	s13, [pc, #280]	; 8004a08 <adsr+0x288>
 80048f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048f4:	edc7 7a03 	vstr	s15, [r7, #12]
	volatile float32_t angle_release = PI/adsr_settings.release_len;
 80048f8:	4b3e      	ldr	r3, [pc, #248]	; (80049f4 <adsr+0x274>)
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004904:	eddf 6a40 	vldr	s13, [pc, #256]	; 8004a08 <adsr+0x288>
 8004908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800490c:	edc7 7a02 	vstr	s15, [r7, #8]

	// Clear out adsr buffers if we're not using them.  Otherwise, they might still get used.
	if(adsr_settings.am_mod == OFF)
 8004910:	4b38      	ldr	r3, [pc, #224]	; (80049f4 <adsr+0x274>)
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d110      	bne.n	800493c <adsr+0x1bc>
	{
		for(i = start; i < end; i++)
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800491e:	e009      	b.n	8004934 <adsr+0x1b4>
		{
			buffer_adsr_am[i] = 0.0f;
 8004920:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004922:	4a3a      	ldr	r2, [pc, #232]	; (8004a0c <adsr+0x28c>)
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
	volatile float32_t angle_release = PI/adsr_settings.release_len;

	// Clear out adsr buffers if we're not using them.  Otherwise, they might still get used.
	if(adsr_settings.am_mod == OFF)
	{
		for(i = start; i < end; i++)
 800492e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004930:	3301      	adds	r3, #1
 8004932:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004934:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004936:	88bb      	ldrh	r3, [r7, #4]
 8004938:	429a      	cmp	r2, r3
 800493a:	d3f1      	bcc.n	8004920 <adsr+0x1a0>
		{
			buffer_adsr_am[i] = 0.0f;
		}
	}

	if(adsr_settings.fm_mod == OFF)
 800493c:	4b2d      	ldr	r3, [pc, #180]	; (80049f4 <adsr+0x274>)
 800493e:	885b      	ldrh	r3, [r3, #2]
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d110      	bne.n	8004968 <adsr+0x1e8>
	{
		for(i = start; i < end; i++)
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800494a:	e009      	b.n	8004960 <adsr+0x1e0>
		{
			buffer_adsr_fm[i] = 0.0f;
 800494c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800494e:	4a30      	ldr	r2, [pc, #192]	; (8004a10 <adsr+0x290>)
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
		}
	}

	if(adsr_settings.fm_mod == OFF)
	{
		for(i = start; i < end; i++)
 800495a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800495c:	3301      	adds	r3, #1
 800495e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004960:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004962:	88bb      	ldrh	r3, [r7, #4]
 8004964:	429a      	cmp	r2, r3
 8004966:	d3f1      	bcc.n	800494c <adsr+0x1cc>
	}

	// Generic ADSR envelope.  Always generate this envelope, even if no AM mod of ADSR.
	// The waveform contains 5 segments (asdr + a blank space)
	// if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
	if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
 8004968:	4b22      	ldr	r3, [pc, #136]	; (80049f4 <adsr+0x274>)
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b01      	cmp	r3, #1
 8004970:	d005      	beq.n	800497e <adsr+0x1fe>
 8004972:	4b20      	ldr	r3, [pc, #128]	; (80049f4 <adsr+0x274>)
 8004974:	885b      	ldrh	r3, [r3, #2]
 8004976:	b29b      	uxth	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	f040 80f8 	bne.w	8004b6e <adsr+0x3ee>
	{
		for(i = start; i < end; i++)
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004982:	e0ef      	b.n	8004b64 <adsr+0x3e4>
		{
			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			if( (sample_count_adsr+(i-start))%samples_cycle_adsr < decay_start)
 8004984:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	461a      	mov	r2, r3
 800498c:	4b21      	ldr	r3, [pc, #132]	; (8004a14 <adsr+0x294>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4413      	add	r3, r2
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	fbb3 f1f2 	udiv	r1, r3, r2
 8004998:	fb02 f201 	mul.w	r2, r2, r1
 800499c:	1a9a      	subs	r2, r3, r2
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d239      	bcs.n	8004a18 <adsr+0x298>
			{
				// Attack
				// Sine, FM --> Try 1.0
				// Square, FM --> Use 0.4
				// Triangle, FM ---> Try 2.0
				buffer_adsr_am[i] = 1.0f + 1.0f * gen_sawtooth_angle( (sample_count_adsr+(i-start)) % samples_cycle_adsr * angle_attack);
 80049a4:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 80049a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	461a      	mov	r2, r3
 80049ae:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <adsr+0x294>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4413      	add	r3, r2
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80049ba:	fb02 f201 	mul.w	r2, r2, r1
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	ee07 3a90 	vmov	s15, r3
 80049c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80049cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d0:	eeb0 0a67 	vmov.f32	s0, s15
 80049d4:	f000 faa6 	bl	8004f24 <gen_sawtooth_angle>
 80049d8:	eeb0 7a40 	vmov.f32	s14, s0
 80049dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80049e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049e4:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <adsr+0x28c>)
 80049e6:	00a3      	lsls	r3, r4, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	edc3 7a00 	vstr	s15, [r3]
 80049ee:	e0b6      	b.n	8004b5e <adsr+0x3de>
 80049f0:	20004a34 	.word	0x20004a34
 80049f4:	20004a64 	.word	0x20004a64
 80049f8:	200047d8 	.word	0x200047d8
 80049fc:	20004a5c 	.word	0x20004a5c
 8004a00:	20004758 	.word	0x20004758
 8004a04:	45fa0000 	.word	0x45fa0000
 8004a08:	40490fdb 	.word	0x40490fdb
 8004a0c:	200025c8 	.word	0x200025c8
 8004a10:	200035c8 	.word	0x200035c8
 8004a14:	200045c8 	.word	0x200045c8
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < sustain_start)
 8004a18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	4b9e      	ldr	r3, [pc, #632]	; (8004c9c <adsr+0x51c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4413      	add	r3, r2
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a2c:	fb02 f201 	mul.w	r2, r2, r1
 8004a30:	1a9a      	subs	r2, r3, r2
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d22a      	bcs.n	8004a8e <adsr+0x30e>
			{
				// Decay
				buffer_adsr_am[i] = 1.0f * gen_rampdown_angle2( (sample_count_adsr+(i-start-decay_start)) % samples_cycle_adsr * angle_decay, adsr_settings.sustain_amp, 1.0);
 8004a38:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8004a3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	1ad2      	subs	r2, r2, r3
 8004a46:	4b95      	ldr	r3, [pc, #596]	; (8004c9c <adsr+0x51c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a52:	fb02 f201 	mul.w	r2, r2, r1
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	ee07 3a90 	vmov	s15, r3
 8004a5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a60:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a68:	4b8d      	ldr	r3, [pc, #564]	; (8004ca0 <adsr+0x520>)
 8004a6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a6e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004a72:	eef0 0a47 	vmov.f32	s1, s14
 8004a76:	eeb0 0a67 	vmov.f32	s0, s15
 8004a7a:	f000 faf1 	bl	8005060 <gen_rampdown_angle2>
 8004a7e:	eef0 7a40 	vmov.f32	s15, s0
 8004a82:	4a88      	ldr	r2, [pc, #544]	; (8004ca4 <adsr+0x524>)
 8004a84:	00a3      	lsls	r3, r4, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	edc3 7a00 	vstr	s15, [r3]
 8004a8c:	e067      	b.n	8004b5e <adsr+0x3de>
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < release_start)
 8004a8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a90:	88fb      	ldrh	r3, [r7, #6]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	4b81      	ldr	r3, [pc, #516]	; (8004c9c <adsr+0x51c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004aa2:	fb02 f201 	mul.w	r2, r2, r1
 8004aa6:	1a9a      	subs	r2, r3, r2
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d207      	bcs.n	8004abe <adsr+0x33e>
			{
				// Sustain
				buffer_adsr_am[i] = adsr_settings.sustain_amp;
 8004aae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ab0:	4a7b      	ldr	r2, [pc, #492]	; (8004ca0 <adsr+0x520>)
 8004ab2:	6852      	ldr	r2, [r2, #4]
 8004ab4:	497b      	ldr	r1, [pc, #492]	; (8004ca4 <adsr+0x524>)
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e04f      	b.n	8004b5e <adsr+0x3de>
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_start)
 8004abe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4b75      	ldr	r3, [pc, #468]	; (8004c9c <adsr+0x51c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4413      	add	r3, r2
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ad2:	fb02 f201 	mul.w	r2, r2, r1
 8004ad6:	1a9a      	subs	r2, r3, r2
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d228      	bcs.n	8004b30 <adsr+0x3b0>
			{
				// Release
				buffer_adsr_am[i] = adsr_settings.sustain_amp * gen_rampdown_angle( (sample_count_adsr+(i-start-release_start)) % samples_cycle_adsr * angle_release);
 8004ade:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8004ae0:	4b6f      	ldr	r3, [pc, #444]	; (8004ca0 <adsr+0x520>)
 8004ae2:	ed93 8a01 	vldr	s16, [r3, #4]
 8004ae6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ae8:	88fb      	ldrh	r3, [r7, #6]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	1ad2      	subs	r2, r2, r3
 8004af2:	4b6a      	ldr	r3, [pc, #424]	; (8004c9c <adsr+0x51c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4413      	add	r3, r2
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	fbb3 f1f2 	udiv	r1, r3, r2
 8004afe:	fb02 f201 	mul.w	r2, r2, r1
 8004b02:	1a9b      	subs	r3, r3, r2
 8004b04:	ee07 3a90 	vmov	s15, r3
 8004b08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b14:	eeb0 0a67 	vmov.f32	s0, s15
 8004b18:	f000 fa72 	bl	8005000 <gen_rampdown_angle>
 8004b1c:	eef0 7a40 	vmov.f32	s15, s0
 8004b20:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004b24:	4a5f      	ldr	r2, [pc, #380]	; (8004ca4 <adsr+0x524>)
 8004b26:	00a3      	lsls	r3, r4, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	edc3 7a00 	vstr	s15, [r3]
 8004b2e:	e016      	b.n	8004b5e <adsr+0x3de>

			}
			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_end)
 8004b30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b32:	88fb      	ldrh	r3, [r7, #6]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b58      	ldr	r3, [pc, #352]	; (8004c9c <adsr+0x51c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b44:	fb02 f201 	mul.w	r2, r2, r1
 8004b48:	1a9a      	subs	r2, r3, r2
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d206      	bcs.n	8004b5e <adsr+0x3de>
			{
				// Blank
				buffer_adsr_am[i] = 0;
 8004b50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b52:	4a54      	ldr	r2, [pc, #336]	; (8004ca4 <adsr+0x524>)
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
	// Generic ADSR envelope.  Always generate this envelope, even if no AM mod of ADSR.
	// The waveform contains 5 segments (asdr + a blank space)
	// if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
	if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
	{
		for(i = start; i < end; i++)
 8004b5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b60:	3301      	adds	r3, #1
 8004b62:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b64:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b66:	88bb      	ldrh	r3, [r7, #4]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	f4ff af0b 	bcc.w	8004984 <adsr+0x204>

	/*
	 * ADSR frequency envelope.
	 * Uses the ADSR amplitude envelope and integrates each of the shapes.
	 */
	if(adsr_settings.fm_mod == ON)
 8004b6e:	4b4c      	ldr	r3, [pc, #304]	; (8004ca0 <adsr+0x520>)
 8004b70:	885b      	ldrh	r3, [r3, #2]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	f040 818c 	bne.w	8004e92 <adsr+0x712>
	{
		for(i = start; i < end; i++)
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b7e:	e183      	b.n	8004e88 <adsr+0x708>
		{
			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			if( (sample_count_adsr+(i-start))%samples_cycle_adsr < decay_start)
 8004b80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	4b44      	ldr	r3, [pc, #272]	; (8004c9c <adsr+0x51c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b94:	fb02 f201 	mul.w	r2, r2, r1
 8004b98:	1a9a      	subs	r2, r3, r2
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d236      	bcs.n	8004c0e <adsr+0x48e>
			{
				// Attack
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8004ba0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ba2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ba4:	493f      	ldr	r1, [pc, #252]	; (8004ca4 <adsr+0x524>)
 8004ba6:	0092      	lsls	r2, r2, #2
 8004ba8:	440a      	add	r2, r1
 8004baa:	6812      	ldr	r2, [r2, #0]
 8004bac:	493e      	ldr	r1, [pc, #248]	; (8004ca8 <adsr+0x528>)
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	601a      	str	r2, [r3, #0]
				if(i > 0)
 8004bb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d015      	beq.n	8004be6 <adsr+0x466>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 8004bba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004bbe:	493a      	ldr	r1, [pc, #232]	; (8004ca8 <adsr+0x528>)
 8004bc0:	0092      	lsls	r2, r2, #2
 8004bc2:	440a      	add	r2, r1
 8004bc4:	ed92 7a00 	vldr	s14, [r2]
 8004bc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004bca:	3a01      	subs	r2, #1
 8004bcc:	4936      	ldr	r1, [pc, #216]	; (8004ca8 <adsr+0x528>)
 8004bce:	0092      	lsls	r2, r2, #2
 8004bd0:	440a      	add	r2, r1
 8004bd2:	edd2 7a00 	vldr	s15, [r2]
 8004bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bda:	4a33      	ldr	r2, [pc, #204]	; (8004ca8 <adsr+0x528>)
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	edc3 7a00 	vstr	s15, [r3]
 8004be4:	e14d      	b.n	8004e82 <adsr+0x702>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 8004be6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004be8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004bea:	492f      	ldr	r1, [pc, #188]	; (8004ca8 <adsr+0x528>)
 8004bec:	0092      	lsls	r2, r2, #2
 8004bee:	440a      	add	r2, r1
 8004bf0:	ed92 7a00 	vldr	s14, [r2]
 8004bf4:	4a2c      	ldr	r2, [pc, #176]	; (8004ca8 <adsr+0x528>)
 8004bf6:	f602 72fc 	addw	r2, r2, #4092	; 0xffc
 8004bfa:	edd2 7a00 	vldr	s15, [r2]
 8004bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c02:	4a29      	ldr	r2, [pc, #164]	; (8004ca8 <adsr+0x528>)
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	edc3 7a00 	vstr	s15, [r3]
 8004c0c:	e139      	b.n	8004e82 <adsr+0x702>
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < sustain_start)
 8004c0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c10:	88fb      	ldrh	r3, [r7, #6]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <adsr+0x51c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c22:	fb02 f201 	mul.w	r2, r2, r1
 8004c26:	1a9a      	subs	r2, r3, r2
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d23e      	bcs.n	8004cac <adsr+0x52c>
			{
				// Decay
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8004c2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c32:	491c      	ldr	r1, [pc, #112]	; (8004ca4 <adsr+0x524>)
 8004c34:	0092      	lsls	r2, r2, #2
 8004c36:	440a      	add	r2, r1
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	491b      	ldr	r1, [pc, #108]	; (8004ca8 <adsr+0x528>)
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	601a      	str	r2, [r3, #0]
				if(i > 0)
 8004c42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d015      	beq.n	8004c74 <adsr+0x4f4>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 8004c48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c4a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c4c:	4916      	ldr	r1, [pc, #88]	; (8004ca8 <adsr+0x528>)
 8004c4e:	0092      	lsls	r2, r2, #2
 8004c50:	440a      	add	r2, r1
 8004c52:	ed92 7a00 	vldr	s14, [r2]
 8004c56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c58:	3a01      	subs	r2, #1
 8004c5a:	4913      	ldr	r1, [pc, #76]	; (8004ca8 <adsr+0x528>)
 8004c5c:	0092      	lsls	r2, r2, #2
 8004c5e:	440a      	add	r2, r1
 8004c60:	edd2 7a00 	vldr	s15, [r2]
 8004c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c68:	4a0f      	ldr	r2, [pc, #60]	; (8004ca8 <adsr+0x528>)
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	edc3 7a00 	vstr	s15, [r3]
 8004c72:	e106      	b.n	8004e82 <adsr+0x702>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 8004c74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c78:	490b      	ldr	r1, [pc, #44]	; (8004ca8 <adsr+0x528>)
 8004c7a:	0092      	lsls	r2, r2, #2
 8004c7c:	440a      	add	r2, r1
 8004c7e:	ed92 7a00 	vldr	s14, [r2]
 8004c82:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <adsr+0x528>)
 8004c84:	f602 72fc 	addw	r2, r2, #4092	; 0xffc
 8004c88:	edd2 7a00 	vldr	s15, [r2]
 8004c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c90:	4a05      	ldr	r2, [pc, #20]	; (8004ca8 <adsr+0x528>)
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	edc3 7a00 	vstr	s15, [r3]
 8004c9a:	e0f2      	b.n	8004e82 <adsr+0x702>
 8004c9c:	200045c8 	.word	0x200045c8
 8004ca0:	20004a64 	.word	0x20004a64
 8004ca4:	200025c8 	.word	0x200025c8
 8004ca8:	200035c8 	.word	0x200035c8
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < release_start)
 8004cac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4b83      	ldr	r3, [pc, #524]	; (8004ec4 <adsr+0x744>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4413      	add	r3, r2
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cc0:	fb02 f201 	mul.w	r2, r2, r1
 8004cc4:	1a9a      	subs	r2, r3, r2
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d27c      	bcs.n	8004dc6 <adsr+0x646>
			{
				// Sustain
				// DO this only once--get last delta from previous section.
				if( (sample_count_adsr+(i-start))%samples_cycle_adsr == sustain_start)
 8004ccc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004cce:	88fb      	ldrh	r3, [r7, #6]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	4b7b      	ldr	r3, [pc, #492]	; (8004ec4 <adsr+0x744>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4413      	add	r3, r2
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ce0:	fb02 f201 	mul.w	r2, r2, r1
 8004ce4:	1a9a      	subs	r2, r3, r2
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d145      	bne.n	8004d78 <adsr+0x5f8>
				{
					if(i > 1)
 8004cec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d913      	bls.n	8004d1a <adsr+0x59a>
					{
						delta = buffer_adsr_fm[i-1] - buffer_adsr_fm[i-2];
 8004cf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	4a74      	ldr	r2, [pc, #464]	; (8004ec8 <adsr+0x748>)
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	ed93 7a00 	vldr	s14, [r3]
 8004d00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d02:	3b02      	subs	r3, #2
 8004d04:	4a70      	ldr	r2, [pc, #448]	; (8004ec8 <adsr+0x748>)
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	edd3 7a00 	vldr	s15, [r3]
 8004d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d12:	4b6e      	ldr	r3, [pc, #440]	; (8004ecc <adsr+0x74c>)
 8004d14:	edc3 7a00 	vstr	s15, [r3]
 8004d18:	e026      	b.n	8004d68 <adsr+0x5e8>
					}
					else if(i == 0)
 8004d1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10f      	bne.n	8004d40 <adsr+0x5c0>
					{
						delta = buffer_adsr_fm[LENGTH_BUFFER-1] - buffer_adsr_fm[LENGTH_BUFFER-2];
 8004d20:	4b69      	ldr	r3, [pc, #420]	; (8004ec8 <adsr+0x748>)
 8004d22:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 8004d26:	ed93 7a00 	vldr	s14, [r3]
 8004d2a:	4b67      	ldr	r3, [pc, #412]	; (8004ec8 <adsr+0x748>)
 8004d2c:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 8004d30:	edd3 7a00 	vldr	s15, [r3]
 8004d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d38:	4b64      	ldr	r3, [pc, #400]	; (8004ecc <adsr+0x74c>)
 8004d3a:	edc3 7a00 	vstr	s15, [r3]
 8004d3e:	e013      	b.n	8004d68 <adsr+0x5e8>
					}
					else if(i == 1)
 8004d40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d110      	bne.n	8004d68 <adsr+0x5e8>
					{
						delta = buffer_adsr_fm[i-1] - buffer_adsr_fm[LENGTH_BUFFER-1];
 8004d46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	4a5f      	ldr	r2, [pc, #380]	; (8004ec8 <adsr+0x748>)
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	ed93 7a00 	vldr	s14, [r3]
 8004d54:	4b5c      	ldr	r3, [pc, #368]	; (8004ec8 <adsr+0x748>)
 8004d56:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 8004d5a:	edd3 7a00 	vldr	s15, [r3]
 8004d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d62:	4b5a      	ldr	r3, [pc, #360]	; (8004ecc <adsr+0x74c>)
 8004d64:	edc3 7a00 	vstr	s15, [r3]
					}
					buffer_adsr_fm[i] = 0.0f;
 8004d68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d6a:	4a57      	ldr	r2, [pc, #348]	; (8004ec8 <adsr+0x748>)
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	e084      	b.n	8004e82 <adsr+0x702>
				}
				else
				{
					if(i > 0)
 8004d78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d012      	beq.n	8004da4 <adsr+0x624>
					{
						buffer_adsr_fm[i] = buffer_adsr_fm[i-1] + delta;
 8004d7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004d82:	3a01      	subs	r2, #1
 8004d84:	4950      	ldr	r1, [pc, #320]	; (8004ec8 <adsr+0x748>)
 8004d86:	0092      	lsls	r2, r2, #2
 8004d88:	440a      	add	r2, r1
 8004d8a:	ed92 7a00 	vldr	s14, [r2]
 8004d8e:	4a4f      	ldr	r2, [pc, #316]	; (8004ecc <adsr+0x74c>)
 8004d90:	edd2 7a00 	vldr	s15, [r2]
 8004d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d98:	4a4b      	ldr	r2, [pc, #300]	; (8004ec8 <adsr+0x748>)
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	edc3 7a00 	vstr	s15, [r3]
 8004da2:	e06e      	b.n	8004e82 <adsr+0x702>
					}
					else
					{
						buffer_adsr_fm[i] = buffer_adsr_fm[LENGTH_BUFFER-1] + delta;
 8004da4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004da6:	4a48      	ldr	r2, [pc, #288]	; (8004ec8 <adsr+0x748>)
 8004da8:	f602 72fc 	addw	r2, r2, #4092	; 0xffc
 8004dac:	ed92 7a00 	vldr	s14, [r2]
 8004db0:	4a46      	ldr	r2, [pc, #280]	; (8004ecc <adsr+0x74c>)
 8004db2:	edd2 7a00 	vldr	s15, [r2]
 8004db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dba:	4a43      	ldr	r2, [pc, #268]	; (8004ec8 <adsr+0x748>)
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	edc3 7a00 	vstr	s15, [r3]
 8004dc4:	e05d      	b.n	8004e82 <adsr+0x702>
					}
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_start)
 8004dc6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4b3d      	ldr	r3, [pc, #244]	; (8004ec4 <adsr+0x744>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dda:	fb02 f201 	mul.w	r2, r2, r1
 8004dde:	1a9a      	subs	r2, r3, r2
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d236      	bcs.n	8004e54 <adsr+0x6d4>
			{
				// Release
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8004de6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004de8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004dea:	4939      	ldr	r1, [pc, #228]	; (8004ed0 <adsr+0x750>)
 8004dec:	0092      	lsls	r2, r2, #2
 8004dee:	440a      	add	r2, r1
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	4935      	ldr	r1, [pc, #212]	; (8004ec8 <adsr+0x748>)
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	601a      	str	r2, [r3, #0]
				if(i > 0)
 8004dfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d015      	beq.n	8004e2c <adsr+0x6ac>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 8004e00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e04:	4930      	ldr	r1, [pc, #192]	; (8004ec8 <adsr+0x748>)
 8004e06:	0092      	lsls	r2, r2, #2
 8004e08:	440a      	add	r2, r1
 8004e0a:	ed92 7a00 	vldr	s14, [r2]
 8004e0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e10:	3a01      	subs	r2, #1
 8004e12:	492d      	ldr	r1, [pc, #180]	; (8004ec8 <adsr+0x748>)
 8004e14:	0092      	lsls	r2, r2, #2
 8004e16:	440a      	add	r2, r1
 8004e18:	edd2 7a00 	vldr	s15, [r2]
 8004e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e20:	4a29      	ldr	r2, [pc, #164]	; (8004ec8 <adsr+0x748>)
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	edc3 7a00 	vstr	s15, [r3]
 8004e2a:	e02a      	b.n	8004e82 <adsr+0x702>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 8004e2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e30:	4925      	ldr	r1, [pc, #148]	; (8004ec8 <adsr+0x748>)
 8004e32:	0092      	lsls	r2, r2, #2
 8004e34:	440a      	add	r2, r1
 8004e36:	ed92 7a00 	vldr	s14, [r2]
 8004e3a:	4a23      	ldr	r2, [pc, #140]	; (8004ec8 <adsr+0x748>)
 8004e3c:	f602 72fc 	addw	r2, r2, #4092	; 0xffc
 8004e40:	edd2 7a00 	vldr	s15, [r2]
 8004e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e48:	4a1f      	ldr	r2, [pc, #124]	; (8004ec8 <adsr+0x748>)
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	edc3 7a00 	vstr	s15, [r3]
 8004e52:	e016      	b.n	8004e82 <adsr+0x702>
				}
			}
			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_end)
 8004e54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <adsr+0x744>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4413      	add	r3, r2
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e68:	fb02 f201 	mul.w	r2, r2, r1
 8004e6c:	1a9a      	subs	r2, r3, r2
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d206      	bcs.n	8004e82 <adsr+0x702>
			{
				// Blank
				buffer_adsr_fm[i] = 0.0f;
 8004e74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e76:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <adsr+0x748>)
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
	 * ADSR frequency envelope.
	 * Uses the ADSR amplitude envelope and integrates each of the shapes.
	 */
	if(adsr_settings.fm_mod == ON)
	{
		for(i = start; i < end; i++)
 8004e82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e84:	3301      	adds	r3, #1
 8004e86:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004e88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e8a:	88bb      	ldrh	r3, [r7, #4]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	f4ff ae77 	bcc.w	8004b80 <adsr+0x400>
				// Blank
				buffer_adsr_fm[i] = 0.0f;
			}
		}
	}
	sample_count_adsr = sample_count_adsr + (i - start);
 8004e92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <adsr+0x744>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <adsr+0x744>)
 8004ea2:	6013      	str	r3, [r2, #0]
	sample_count_adsr = sample_count_adsr % samples_cycle_adsr;
 8004ea4:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <adsr+0x744>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8004eae:	fb02 f201 	mul.w	r2, r2, r1
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	4a03      	ldr	r2, [pc, #12]	; (8004ec4 <adsr+0x744>)
 8004eb6:	6013      	str	r3, [r2, #0]
}
 8004eb8:	bf00      	nop
 8004eba:	3734      	adds	r7, #52	; 0x34
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	ecbd 8b02 	vpop	{d8}
 8004ec2:	bd90      	pop	{r4, r7, pc}
 8004ec4:	200045c8 	.word	0x200045c8
 8004ec8:	200035c8 	.word	0x200035c8
 8004ecc:	20004968 	.word	0x20004968
 8004ed0:	200025c8 	.word	0x200025c8

08004ed4 <gen_square_angle>:

/* Parameters:
 * 	angle: normalized angle between 0 and 2*PI.  Similar to sine function.
 */
float32_t gen_square_angle(float32_t angle)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	ed87 0a01 	vstr	s0, [r7, #4]
	angle = fast_fmod(angle, 2*PI);
 8004ede:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8004f18 <gen_square_angle+0x44>
 8004ee2:	ed97 0a01 	vldr	s0, [r7, #4]
 8004ee6:	f000 f9cf 	bl	8005288 <fast_fmod>
 8004eea:	ed87 0a01 	vstr	s0, [r7, #4]
	if (angle < PI)
 8004eee:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ef2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004f1c <gen_square_angle+0x48>
 8004ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efe:	d501      	bpl.n	8004f04 <gen_square_angle+0x30>
	{
		return -1.0f;
 8004f00:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <gen_square_angle+0x4c>)
 8004f02:	e001      	b.n	8004f08 <gen_square_angle+0x34>
	}
	return 1.0f;
 8004f04:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004f08:	ee07 3a90 	vmov	s15, r3
}
 8004f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40c90fdb 	.word	0x40c90fdb
 8004f1c:	40490fdb 	.word	0x40490fdb
 8004f20:	bf800000 	.word	0xbf800000

08004f24 <gen_sawtooth_angle>:


float32_t gen_sawtooth_angle(float32_t angle)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0f;
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]
	float32_t val = 0.0f;
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8004f3a:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8004f78 <gen_sawtooth_angle+0x54>
 8004f3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004f42:	f000 f9a1 	bl	8005288 <fast_fmod>
 8004f46:	ed87 0a01 	vstr	s0, [r7, #4]

	// y = mx + b
	m = ONE_DIV_PI;
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <gen_sawtooth_angle+0x58>)
 8004f4c:	60fb      	str	r3, [r7, #12]
	val = -1.0f + angle * m;
 8004f4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004f52:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f62:	edc7 7a02 	vstr	s15, [r7, #8]
	return val;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	ee07 3a90 	vmov	s15, r3
}
 8004f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40c90fdb 	.word	0x40c90fdb
 8004f7c:	3ea2f983 	.word	0x3ea2f983

08004f80 <gen_sawtooth_integral_angle>:


float32_t gen_sawtooth_integral_angle(float32_t angle)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0f;
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0f;
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8004f96:	eddf 0a18 	vldr	s1, [pc, #96]	; 8004ff8 <gen_sawtooth_integral_angle+0x78>
 8004f9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8004f9e:	f000 f973 	bl	8005288 <fast_fmod>
 8004fa2:	ed87 0a01 	vstr	s0, [r7, #4]
	m = ONE_DIV_2_PI;
 8004fa6:	4b15      	ldr	r3, [pc, #84]	; (8004ffc <gen_sawtooth_integral_angle+0x7c>)
 8004fa8:	60bb      	str	r3, [r7, #8]
	val = m*angle;			// Generate linear value between 0 and 1
 8004faa:	ed97 7a02 	vldr	s14, [r7, #8]
 8004fae:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb6:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*val;			// Square it.  Produces parabola y: 0 to 1
 8004fba:	ed97 7a03 	vldr	s14, [r7, #12]
 8004fbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc6:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*2.0f;			// Double it.
 8004fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004fd2:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val - 1.0f;			// Shift it down
 8004fd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004fe2:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	ee07 3a90 	vmov	s15, r3
}
 8004fec:	eeb0 0a67 	vmov.f32	s0, s15
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40c90fdb 	.word	0x40c90fdb
 8004ffc:	3e22f983 	.word	0x3e22f983

08005000 <gen_rampdown_angle>:
/*
 * Generate ramp value from +1 down to 0 based on angle.
 * Parameter angle is a radian.
 */
float32_t gen_rampdown_angle(float32_t angle)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0f;
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
	float32_t val = 0.0f;
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8005016:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8005054 <gen_rampdown_angle+0x54>
 800501a:	ed97 0a01 	vldr	s0, [r7, #4]
 800501e:	f000 f933 	bl	8005288 <fast_fmod>
 8005022:	ed87 0a01 	vstr	s0, [r7, #4]

	// y = mx + b
	m = -ONE_DIV_PI;
 8005026:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <gen_rampdown_angle+0x58>)
 8005028:	60fb      	str	r3, [r7, #12]
	val = 1.0f + angle*m;
 800502a:	ed97 7a01 	vldr	s14, [r7, #4]
 800502e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800503a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800503e:	edc7 7a02 	vstr	s15, [r7, #8]
	return val;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	ee07 3a90 	vmov	s15, r3
}
 8005048:	eeb0 0a67 	vmov.f32	s0, s15
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40c90fdb 	.word	0x40c90fdb
 8005058:	bea2f983 	.word	0xbea2f983
 800505c:	00000000 	.word	0x00000000

08005060 <gen_rampdown_angle2>:


float32_t gen_rampdown_angle2( float32_t angle, float32_t min, float32_t max)
{
 8005060:	b590      	push	{r4, r7, lr}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	ed87 0a03 	vstr	s0, [r7, #12]
 800506a:	edc7 0a02 	vstr	s1, [r7, #8]
 800506e:	ed87 1a01 	vstr	s2, [r7, #4]
	float32_t m = 0.0f;
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
	float32_t val = 0.0f;
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	613b      	str	r3, [r7, #16]

	angle = fast_fmod(angle, TWO_PI);
 800507e:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80050f0 <gen_rampdown_angle2+0x90>
 8005082:	ed97 0a03 	vldr	s0, [r7, #12]
 8005086:	f000 f8ff 	bl	8005288 <fast_fmod>
 800508a:	ed87 0a03 	vstr	s0, [r7, #12]

	// y = mx + b
	m = (min - max) * ONE_DIV_PI;
 800508e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005092:	edd7 7a01 	vldr	s15, [r7, #4]
 8005096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800509a:	ee17 0a90 	vmov	r0, s15
 800509e:	f7fb f9f7 	bl	8000490 <__aeabi_f2d>
 80050a2:	a311      	add	r3, pc, #68	; (adr r3, 80050e8 <gen_rampdown_angle2+0x88>)
 80050a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a8:	f7fb fa46 	bl	8000538 <__aeabi_dmul>
 80050ac:	4603      	mov	r3, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	4618      	mov	r0, r3
 80050b2:	4621      	mov	r1, r4
 80050b4:	f7fb fd02 	bl	8000abc <__aeabi_d2f>
 80050b8:	4603      	mov	r3, r0
 80050ba:	617b      	str	r3, [r7, #20]
	val = 1.0f + angle*m;
 80050bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80050c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80050c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050d0:	edc7 7a04 	vstr	s15, [r7, #16]


	return val;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	ee07 3a90 	vmov	s15, r3
}
 80050da:	eeb0 0a67 	vmov.f32	s0, s15
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd90      	pop	{r4, r7, pc}
 80050e4:	f3af 8000 	nop.w
 80050e8:	6dc8bdc4 	.word	0x6dc8bdc4
 80050ec:	3fd45f30 	.word	0x3fd45f30
 80050f0:	40c90fdb 	.word	0x40c90fdb

080050f4 <gen_triangle_angle>:


float32_t gen_triangle_angle(float32_t angle)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0f;
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0f;
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]

	// Increase from a negative value to its opposite value. Eg. -1 to 1 over 1/2 the wave's period
	// Then decrease from 1 to -1 over 1/2 the wave's period

	angle = fast_fmod(angle, 2*PI);
 800510a:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8005174 <gen_triangle_angle+0x80>
 800510e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005112:	f000 f8b9 	bl	8005288 <fast_fmod>
 8005116:	ed87 0a01 	vstr	s0, [r7, #4]
	m = TWO_DIV_PI;
 800511a:	4b17      	ldr	r3, [pc, #92]	; (8005178 <gen_triangle_angle+0x84>)
 800511c:	60bb      	str	r3, [r7, #8]
	if (angle < PI)
 800511e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005122:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800517c <gen_triangle_angle+0x88>
 8005126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800512a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512e:	d50d      	bpl.n	800514c <gen_triangle_angle+0x58>
	{
		val = -1.0f + m*angle;
 8005130:	ed97 7a02 	vldr	s14, [r7, #8]
 8005134:	edd7 7a01 	vldr	s15, [r7, #4]
 8005138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005140:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005144:	edc7 7a03 	vstr	s15, [r7, #12]
		return val;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	e00c      	b.n	8005166 <gen_triangle_angle+0x72>
	}
	// Make sure difference can be negative.
	// return amp + (m * (int32_t)(samples_half_cycle - current_sample));
	val =  3.0f - m*angle;
 800514c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005150:	edd7 7a01 	vldr	s15, [r7, #4]
 8005154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005158:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800515c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005160:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	ee07 3a90 	vmov	s15, r3
}
 800516a:	eeb0 0a67 	vmov.f32	s0, s15
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40c90fdb 	.word	0x40c90fdb
 8005178:	3f22f983 	.word	0x3f22f983
 800517c:	40490fdb 	.word	0x40490fdb

08005180 <gen_triangle_integral_angle>:

// Integral of triangle wave is convex parabola going up and then concave parabola going down.
float32_t gen_triangle_integral_angle(float32_t angle)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0f;
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0f;
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, 2*PI);		// TODO: pull this out into generate_waveforms().
 8005196:	eddf 0a39 	vldr	s1, [pc, #228]	; 800527c <gen_triangle_integral_angle+0xfc>
 800519a:	ed97 0a01 	vldr	s0, [r7, #4]
 800519e:	f000 f873 	bl	8005288 <fast_fmod>
 80051a2:	ed87 0a01 	vstr	s0, [r7, #4]
	m = ONE_DIV_PI;
 80051a6:	4b36      	ldr	r3, [pc, #216]	; (8005280 <gen_triangle_integral_angle+0x100>)
 80051a8:	60bb      	str	r3, [r7, #8]
	if (angle < PI)
 80051aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80051ae:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005284 <gen_triangle_integral_angle+0x104>
 80051b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ba:	d528      	bpl.n	800520e <gen_triangle_integral_angle+0x8e>

	if(angle < PI)
 80051bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80051c0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005284 <gen_triangle_integral_angle+0x104>
 80051c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051cc:	d51f      	bpl.n	800520e <gen_triangle_integral_angle+0x8e>
	{
		val = m*angle;			// Generate linear value between 0 and 1
 80051ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80051d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80051d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051da:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val*val;			// Square it.  Produces parabola y: 0 to 1
 80051de:	ed97 7a03 	vldr	s14, [r7, #12]
 80051e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80051e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ea:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val*2.0f;			// Double it.
 80051ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80051f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051f6:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val - 1.0f;			// Shift it down
 80051fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80051fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005206:	edc7 7a03 	vstr	s15, [r7, #12]
		return val;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	e02e      	b.n	800526c <gen_triangle_integral_angle+0xec>
	}

	angle = angle - PI;
 800520e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005212:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005284 <gen_triangle_integral_angle+0x104>
 8005216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800521a:	edc7 7a01 	vstr	s15, [r7, #4]
	val = m*angle;			// Generate linear value between 0 and 1
 800521e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005222:	edd7 7a01 	vldr	s15, [r7, #4]
 8005226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522a:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*val;			// Square it.  Produces parabola y: 0 to 1
 800522e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005232:	edd7 7a03 	vldr	s15, [r7, #12]
 8005236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523a:	edc7 7a03 	vstr	s15, [r7, #12]
	val = 1.0f - val;			// Turn it upside down
 800523e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005242:	edd7 7a03 	vldr	s15, [r7, #12]
 8005246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800524a:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*2.0f;			// Double it
 800524e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005252:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005256:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val - 1.0f;			// Shift it down
 800525a:	edd7 7a03 	vldr	s15, [r7, #12]
 800525e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005262:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005266:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	ee07 3a90 	vmov	s15, r3
}
 8005270:	eeb0 0a67 	vmov.f32	s0, s15
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40c90fdb 	.word	0x40c90fdb
 8005280:	3ea2f983 	.word	0x3ea2f983
 8005284:	40490fdb 	.word	0x40490fdb

08005288 <fast_fmod>:
 * Modified it to work with float32_t.
 * NOTE: Possible alternative found here: https://stackoverflow.com/questions/26342823/implementation-of-fmod-function
 * 	return (a - b * floor(a / b));
 */
float32_t fast_fmod(float32_t x,float32_t y)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005292:	edc7 0a00 	vstr	s1, [r7]
	float32_t a;
	return ( (a = x/y ) - (uint32_t)a ) * y;
 8005296:	edd7 6a01 	vldr	s13, [r7, #4]
 800529a:	ed97 7a00 	vldr	s14, [r7]
 800529e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a2:	edc7 7a03 	vstr	s15, [r7, #12]
 80052a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80052aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80052b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052ba:	edd7 7a00 	vldr	s15, [r7]
 80052be:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80052c2:	eeb0 0a67 	vmov.f32	s0, s15
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <moving_avg>:

/*
 * Found here: https://gist.github.com/bmccormack/d12f4bf0c96423d03f82
 */
uint32_t moving_avg(uint32_t *ptrArrNumbers, uint32_t *ptrSum, uint32_t pos, uint32_t len, uint16_t nextNum)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
  //Subtract the oldest number from the prev sum, add the new number
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	68f9      	ldr	r1, [r7, #12]
 80052e8:	440b      	add	r3, r1
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	1ad2      	subs	r2, r2, r3
 80052ee:	8b3b      	ldrh	r3, [r7, #24]
 80052f0:	441a      	add	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	601a      	str	r2, [r3, #0]
  //Assign the nextNum to the position in the array
  ptrArrNumbers[pos] = nextNum;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	8b3a      	ldrh	r2, [r7, #24]
 8005300:	601a      	str	r2, [r3, #0]
  //return the average
  return (uint32_t) *ptrSum / len;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <pseudo_log>:
/*
 * Make adc values seems as though they came from a log-taper potentiometer.
 */
// TODO: Try three line segments instead of two.  With two, the sudden increase is obvious.
uint16_t pseudo_log(uint16_t x)
{
 8005318:	b480      	push	{r7}
 800531a:	b089      	sub	sp, #36	; 0x24
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	80fb      	strh	r3, [r7, #6]
	float32_t y1 = 0.0f;
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	61fb      	str	r3, [r7, #28]
	float32_t y2 = 0.0f;
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	61bb      	str	r3, [r7, #24]
	const uint16_t max = 4095;
 800532e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005332:	82fb      	strh	r3, [r7, #22]
	const uint16_t xe = 3500;
 8005334:	f640 53ac 	movw	r3, #3500	; 0xdac
 8005338:	82bb      	strh	r3, [r7, #20]
	const float32_t m1 = 0.1f;
 800533a:	4b3a      	ldr	r3, [pc, #232]	; (8005424 <pseudo_log+0x10c>)
 800533c:	613b      	str	r3, [r7, #16]
	uint16_t ye = m1*xe;
 800533e:	8abb      	ldrh	r3, [r7, #20]
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005348:	edd7 7a04 	vldr	s15, [r7, #16]
 800534c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005354:	edc7 7a00 	vstr	s15, [r7]
 8005358:	883b      	ldrh	r3, [r7, #0]
 800535a:	81fb      	strh	r3, [r7, #14]
	uint16_t m2 = (float32_t) (max - ye)/(max - xe);
 800535c:	8afa      	ldrh	r2, [r7, #22]
 800535e:	89fb      	ldrh	r3, [r7, #14]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800536a:	8afa      	ldrh	r2, [r7, #22]
 800536c:	8abb      	ldrh	r3, [r7, #20]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	ee07 3a90 	vmov	s15, r3
 8005374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800537c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005380:	edc7 7a00 	vstr	s15, [r7]
 8005384:	883b      	ldrh	r3, [r7, #0]
 8005386:	81bb      	strh	r3, [r7, #12]

	float32_t b = 0.0f;
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]

	y1 = (uint16_t) ((float32_t) m1 * x);
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005398:	edd7 7a04 	vldr	s15, [r7, #16]
 800539c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053a4:	edc7 7a00 	vstr	s15, [r7]
 80053a8:	883b      	ldrh	r3, [r7, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b4:	edc7 7a07 	vstr	s15, [r7, #28]

	// Gradual taper.
	if(x < xe)
 80053b8:	88fa      	ldrh	r2, [r7, #6]
 80053ba:	8abb      	ldrh	r3, [r7, #20]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d208      	bcs.n	80053d2 <pseudo_log+0xba>
	{
		return (uint16_t) y1;
 80053c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80053c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c8:	edc7 7a00 	vstr	s15, [r7]
 80053cc:	883b      	ldrh	r3, [r7, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	e021      	b.n	8005416 <pseudo_log+0xfe>
	}

	// Fast taper.
	b = ye - m2*xe;
 80053d2:	89fa      	ldrh	r2, [r7, #14]
 80053d4:	89bb      	ldrh	r3, [r7, #12]
 80053d6:	8ab9      	ldrh	r1, [r7, #20]
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053e6:	edc7 7a02 	vstr	s15, [r7, #8]
	y2 = m2*x + b;		// y = mx+b
 80053ea:	89bb      	ldrh	r3, [r7, #12]
 80053ec:	88fa      	ldrh	r2, [r7, #6]
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80053fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005402:	edc7 7a06 	vstr	s15, [r7, #24]

	return (uint16_t) y2;
 8005406:	edd7 7a06 	vldr	s15, [r7, #24]
 800540a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800540e:	edc7 7a00 	vstr	s15, [r7]
 8005412:	883b      	ldrh	r3, [r7, #0]
 8005414:	b29b      	uxth	r3, r3
}
 8005416:	4618      	mov	r0, r3
 8005418:	3724      	adds	r7, #36	; 0x24
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	3dcccccd 	.word	0x3dcccccd

08005428 <gen_AWGN>:
		buffer_output[2*i+1] = (uint16_t) output[i].R;
	}
}

float32_t gen_AWGN()
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
	float32_t temp = (float32_t) rand() / RAND_MAX;
 800542e:	f000 ff6b 	bl	8006308 <rand>
 8005432:	ee07 0a90 	vmov	s15, r0
 8005436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800543a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005458 <gen_AWGN+0x30>
 800543e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005442:	edc7 7a01 	vstr	s15, [r7, #4]
	return temp;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	ee07 3a90 	vmov	s15, r3
}
 800544c:	eeb0 0a67 	vmov.f32	s0, s15
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	4f000000 	.word	0x4f000000

0800545c <biquad_setup2>:

// Only call once before any audio processing has been done.
void biquad_setup2()
{
 800545c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545e:	b089      	sub	sp, #36	; 0x24
 8005460:	af00      	add	r7, sp, #0

	lowpass.xn1.L = 0.0f;
 8005462:	4b66      	ldr	r3, [pc, #408]	; (80055fc <biquad_setup2+0x1a0>)
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	615a      	str	r2, [r3, #20]
	lowpass.xn1.R = 0.0f;
 800546a:	4b64      	ldr	r3, [pc, #400]	; (80055fc <biquad_setup2+0x1a0>)
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	619a      	str	r2, [r3, #24]

	lowpass.xn2.L = 0.0f;
 8005472:	4b62      	ldr	r3, [pc, #392]	; (80055fc <biquad_setup2+0x1a0>)
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	61da      	str	r2, [r3, #28]
	lowpass.xn2.R = 0.0f;
 800547a:	4b60      	ldr	r3, [pc, #384]	; (80055fc <biquad_setup2+0x1a0>)
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	621a      	str	r2, [r3, #32]

	lowpass.yn1.L = 0.0f;
 8005482:	4b5e      	ldr	r3, [pc, #376]	; (80055fc <biquad_setup2+0x1a0>)
 8005484:	f04f 0200 	mov.w	r2, #0
 8005488:	625a      	str	r2, [r3, #36]	; 0x24
	lowpass.yn1.R = 0.0f;
 800548a:	4b5c      	ldr	r3, [pc, #368]	; (80055fc <biquad_setup2+0x1a0>)
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	629a      	str	r2, [r3, #40]	; 0x28

	lowpass.yn2.L = 0.0f;
 8005492:	4b5a      	ldr	r3, [pc, #360]	; (80055fc <biquad_setup2+0x1a0>)
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	62da      	str	r2, [r3, #44]	; 0x2c
	lowpass.yn2.R = 0.0f;
 800549a:	4b58      	ldr	r3, [pc, #352]	; (80055fc <biquad_setup2+0x1a0>)
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30

	// TODO: declare a bunch of these as globals or in a struct.
	// uint16_t rate = 48000;
	float32_t cutoff = 400.0f;
 80054a2:	4b57      	ldr	r3, [pc, #348]	; (8005600 <biquad_setup2+0x1a4>)
 80054a4:	61fb      	str	r3, [r7, #28]
	float32_t resonance = 1.0f;
 80054a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80054aa:	61bb      	str	r3, [r7, #24]

	float32_t nyquist = SAMPLERATE * 0.5f;
 80054ac:	4b55      	ldr	r3, [pc, #340]	; (8005604 <biquad_setup2+0x1a8>)
 80054ae:	617b      	str	r3, [r7, #20]
	cutoff = cutoff/nyquist;
 80054b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80054b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054bc:	edc7 7a07 	vstr	s15, [r7, #28]

	// resonance = 10.0f ^ (resonance * 0.05f);          // convert resonance from dB to linear
	resonance = powf(10.0f, resonance * 0.05f);
 80054c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80054c4:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8005608 <biquad_setup2+0x1ac>
 80054c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054cc:	eef0 0a67 	vmov.f32	s1, s15
 80054d0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80054d4:	f001 f904 	bl	80066e0 <powf>
 80054d8:	ed87 0a06 	vstr	s0, [r7, #24]
	float32_t theta = PI * 2.0f * cutoff;
 80054dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80054e0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800560c <biquad_setup2+0x1b0>
 80054e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054e8:	edc7 7a04 	vstr	s15, [r7, #16]
	float32_t alpha = sin(theta) / (2.0f * resonance);	// TODO: use fast sin
 80054ec:	6938      	ldr	r0, [r7, #16]
 80054ee:	f7fa ffcf 	bl	8000490 <__aeabi_f2d>
 80054f2:	4603      	mov	r3, r0
 80054f4:	460c      	mov	r4, r1
 80054f6:	ec44 3b10 	vmov	d0, r3, r4
 80054fa:	f001 f8a9 	bl	8006650 <sin>
 80054fe:	ec56 5b10 	vmov	r5, r6, d0
 8005502:	edd7 7a06 	vldr	s15, [r7, #24]
 8005506:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800550a:	ee17 0a90 	vmov	r0, s15
 800550e:	f7fa ffbf 	bl	8000490 <__aeabi_f2d>
 8005512:	4603      	mov	r3, r0
 8005514:	460c      	mov	r4, r1
 8005516:	461a      	mov	r2, r3
 8005518:	4623      	mov	r3, r4
 800551a:	4628      	mov	r0, r5
 800551c:	4631      	mov	r1, r6
 800551e:	f7fb f935 	bl	800078c <__aeabi_ddiv>
 8005522:	4603      	mov	r3, r0
 8005524:	460c      	mov	r4, r1
 8005526:	4618      	mov	r0, r3
 8005528:	4621      	mov	r1, r4
 800552a:	f7fb fac7 	bl	8000abc <__aeabi_d2f>
 800552e:	4603      	mov	r3, r0
 8005530:	60fb      	str	r3, [r7, #12]
	float32_t cosw  = cos(theta);						// TODO: use fast cos
 8005532:	6938      	ldr	r0, [r7, #16]
 8005534:	f7fa ffac 	bl	8000490 <__aeabi_f2d>
 8005538:	4603      	mov	r3, r0
 800553a:	460c      	mov	r4, r1
 800553c:	ec44 3b10 	vmov	d0, r3, r4
 8005540:	f001 f842 	bl	80065c8 <cos>
 8005544:	ec54 3b10 	vmov	r3, r4, d0
 8005548:	4618      	mov	r0, r3
 800554a:	4621      	mov	r1, r4
 800554c:	f7fb fab6 	bl	8000abc <__aeabi_d2f>
 8005550:	4603      	mov	r3, r0
 8005552:	60bb      	str	r3, [r7, #8]
	float32_t beta  = (1.0f - cosw) * 0.5f;
 8005554:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005558:	edd7 7a02 	vldr	s15, [r7, #8]
 800555c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005560:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005568:	edc7 7a01 	vstr	s15, [r7, #4]
	float32_t a0inv = 1.0f / (1.0f + alpha);
 800556c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005574:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005578:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800557c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005580:	edc7 7a00 	vstr	s15, [r7]

	lowpass.b0 = a0inv * beta;
 8005584:	ed97 7a00 	vldr	s14, [r7]
 8005588:	edd7 7a01 	vldr	s15, [r7, #4]
 800558c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005590:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <biquad_setup2+0x1a0>)
 8005592:	edc3 7a00 	vstr	s15, [r3]
	lowpass.b1 = a0inv * 2.0f * beta;
 8005596:	edd7 7a00 	vldr	s15, [r7]
 800559a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800559e:	edd7 7a01 	vldr	s15, [r7, #4]
 80055a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a6:	4b15      	ldr	r3, [pc, #84]	; (80055fc <biquad_setup2+0x1a0>)
 80055a8:	edc3 7a01 	vstr	s15, [r3, #4]
	lowpass.b2 = a0inv * beta;
 80055ac:	ed97 7a00 	vldr	s14, [r7]
 80055b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80055b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b8:	4b10      	ldr	r3, [pc, #64]	; (80055fc <biquad_setup2+0x1a0>)
 80055ba:	edc3 7a02 	vstr	s15, [r3, #8]
	lowpass.a1 = a0inv * -2.0f * cosw;
 80055be:	edd7 7a00 	vldr	s15, [r7]
 80055c2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80055c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80055ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <biquad_setup2+0x1a0>)
 80055d4:	edc3 7a03 	vstr	s15, [r3, #12]
	lowpass.a2 = a0inv * (1.0f - alpha);
 80055d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80055e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055e4:	edd7 7a00 	vldr	s15, [r7]
 80055e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ec:	4b03      	ldr	r3, [pc, #12]	; (80055fc <biquad_setup2+0x1a0>)
 80055ee:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80055f2:	bf00      	nop
 80055f4:	3724      	adds	r7, #36	; 0x24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20004a94 	.word	0x20004a94
 8005600:	43c80000 	.word	0x43c80000
 8005604:	46bb8000 	.word	0x46bb8000
 8005608:	3d4ccccd 	.word	0x3d4ccccd
 800560c:	40c90fdb 	.word	0x40c90fdb

08005610 <biquad_invoke2>:

void biquad_invoke2(uint16_t start, uint16_t end)
{
 8005610:	b480      	push	{r7}
 8005612:	b095      	sub	sp, #84	; 0x54
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	460a      	mov	r2, r1
 800561a:	80fb      	strh	r3, [r7, #6]
 800561c:	4613      	mov	r3, r2
 800561e:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	float32_t L;
	float32_t R;

	float32_t b0 = lowpass.b0;
 8005626:	4ba2      	ldr	r3, [pc, #648]	; (80058b0 <biquad_invoke2+0x2a0>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
	float32_t b1 = lowpass.b1;
 800562c:	4ba0      	ldr	r3, [pc, #640]	; (80058b0 <biquad_invoke2+0x2a0>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	647b      	str	r3, [r7, #68]	; 0x44
	float32_t b2 = lowpass.b2;
 8005632:	4b9f      	ldr	r3, [pc, #636]	; (80058b0 <biquad_invoke2+0x2a0>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	643b      	str	r3, [r7, #64]	; 0x40
	float32_t a1 = lowpass.a1;
 8005638:	4b9d      	ldr	r3, [pc, #628]	; (80058b0 <biquad_invoke2+0x2a0>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
	float32_t a2 = lowpass.a2;
 800563e:	4b9c      	ldr	r3, [pc, #624]	; (80058b0 <biquad_invoke2+0x2a0>)
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	63bb      	str	r3, [r7, #56]	; 0x38

	sf_sample_st xn0;
	xn0.L = 0.0f;
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	62bb      	str	r3, [r7, #40]	; 0x28
	xn0.R = 0.0f;
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sf_sample_st xn1 = lowpass.xn1;
 8005650:	4a97      	ldr	r2, [pc, #604]	; (80058b0 <biquad_invoke2+0x2a0>)
 8005652:	f107 0320 	add.w	r3, r7, #32
 8005656:	3214      	adds	r2, #20
 8005658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800565c:	e883 0003 	stmia.w	r3, {r0, r1}
	sf_sample_st xn2 = lowpass.xn2;
 8005660:	4a93      	ldr	r2, [pc, #588]	; (80058b0 <biquad_invoke2+0x2a0>)
 8005662:	f107 0318 	add.w	r3, r7, #24
 8005666:	321c      	adds	r2, #28
 8005668:	e892 0003 	ldmia.w	r2, {r0, r1}
 800566c:	e883 0003 	stmia.w	r3, {r0, r1}
	sf_sample_st yn1 = lowpass.yn1;
 8005670:	4a8f      	ldr	r2, [pc, #572]	; (80058b0 <biquad_invoke2+0x2a0>)
 8005672:	f107 0310 	add.w	r3, r7, #16
 8005676:	3224      	adds	r2, #36	; 0x24
 8005678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800567c:	e883 0003 	stmia.w	r3, {r0, r1}
	sf_sample_st yn2 = lowpass.yn2;
 8005680:	4a8b      	ldr	r2, [pc, #556]	; (80058b0 <biquad_invoke2+0x2a0>)
 8005682:	f107 0308 	add.w	r3, r7, #8
 8005686:	322c      	adds	r2, #44	; 0x2c
 8005688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800568c:	e883 0003 	stmia.w	r3, {r0, r1}

	// Convert buffer_output[i] into input (floats).
	// TODO: make sure buffer_output[] has up-to-date values. I think it does.
	for(i = start/2; i < (end/2) ; i++)
 8005690:	88fb      	ldrh	r3, [r7, #6]
 8005692:	085b      	lsrs	r3, r3, #1
 8005694:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005698:	e02a      	b.n	80056f0 <biquad_invoke2+0xe0>
	{
		input[i].L = (float32_t) buffer_output[2*i];
 800569a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800569e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80056a2:	0052      	lsls	r2, r2, #1
 80056a4:	4983      	ldr	r1, [pc, #524]	; (80058b4 <biquad_invoke2+0x2a4>)
 80056a6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80056aa:	b292      	uxth	r2, r2
 80056ac:	ee07 2a90 	vmov	s15, r2
 80056b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b4:	4a80      	ldr	r2, [pc, #512]	; (80058b8 <biquad_invoke2+0x2a8>)
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	4413      	add	r3, r2
 80056ba:	edc3 7a00 	vstr	s15, [r3]
		input[i].R = (float32_t) buffer_output[2*i+1];
 80056be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056c2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80056c6:	0052      	lsls	r2, r2, #1
 80056c8:	3201      	adds	r2, #1
 80056ca:	497a      	ldr	r1, [pc, #488]	; (80058b4 <biquad_invoke2+0x2a4>)
 80056cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80056d0:	b292      	uxth	r2, r2
 80056d2:	ee07 2a90 	vmov	s15, r2
 80056d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056da:	4a77      	ldr	r2, [pc, #476]	; (80058b8 <biquad_invoke2+0x2a8>)
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	4413      	add	r3, r2
 80056e0:	3304      	adds	r3, #4
 80056e2:	edc3 7a00 	vstr	s15, [r3]
	sf_sample_st yn1 = lowpass.yn1;
	sf_sample_st yn2 = lowpass.yn2;

	// Convert buffer_output[i] into input (floats).
	// TODO: make sure buffer_output[] has up-to-date values. I think it does.
	for(i = start/2; i < (end/2) ; i++)
 80056e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056ea:	3301      	adds	r3, #1
 80056ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80056f0:	88bb      	ldrh	r3, [r7, #4]
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d3cd      	bcc.n	800569a <biquad_invoke2+0x8a>
		input[i].R = (float32_t) buffer_output[2*i+1];
	}

	// Loop for each sample
	// TODO: make sure both left and right samples are being handled.
	for(i = start; i < end; i++)
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005704:	e08f      	b.n	8005826 <biquad_invoke2+0x216>
	{
	    // get the current sample
	    // sf_sample_st xn0 = input[n];
		xn0 = input[i];
 8005706:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800570a:	496b      	ldr	r1, [pc, #428]	; (80058b8 <biquad_invoke2+0x2a8>)
 800570c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	440b      	add	r3, r1
 8005714:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005718:	e882 0003 	stmia.w	r2, {r0, r1}

	    // the formula is the same for each channel
		L =
			b0 * xn0.L +
 800571c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005720:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005724:	ee27 7a27 	vmul.f32	s14, s14, s15
			b1 * xn1.L +
 8005728:	edd7 6a08 	vldr	s13, [r7, #32]
 800572c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005730:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    // sf_sample_st xn0 = input[n];
		xn0 = input[i];

	    // the formula is the same for each channel
		L =
			b0 * xn0.L +
 8005734:	ee37 7a27 	vadd.f32	s14, s14, s15
			b1 * xn1.L +
			b2 * xn2.L -
 8005738:	edd7 6a06 	vldr	s13, [r7, #24]
 800573c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005740:	ee66 7aa7 	vmul.f32	s15, s13, s15
		xn0 = input[i];

	    // the formula is the same for each channel
		L =
			b0 * xn0.L +
			b1 * xn1.L +
 8005744:	ee37 7a27 	vadd.f32	s14, s14, s15
			b2 * xn2.L -
			a1 * yn1.L -
 8005748:	edd7 6a04 	vldr	s13, [r7, #16]
 800574c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005750:	ee66 7aa7 	vmul.f32	s15, s13, s15

	    // the formula is the same for each channel
		L =
			b0 * xn0.L +
			b1 * xn1.L +
			b2 * xn2.L -
 8005754:	ee37 7a67 	vsub.f32	s14, s14, s15
			a1 * yn1.L -
			a2 * yn2.L;
 8005758:	edd7 6a02 	vldr	s13, [r7, #8]
 800575c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005760:	ee66 7aa7 	vmul.f32	s15, s13, s15
	    // get the current sample
	    // sf_sample_st xn0 = input[n];
		xn0 = input[i];

	    // the formula is the same for each channel
		L =
 8005764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005768:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			b2 * xn2.L -
			a1 * yn1.L -
			a2 * yn2.L;

		R =
			b0 * xn0.R +
 800576c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005770:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005774:	ee27 7a27 	vmul.f32	s14, s14, s15
			b1 * xn1.R +
 8005778:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800577c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005780:	ee66 7aa7 	vmul.f32	s15, s13, s15
			b2 * xn2.L -
			a1 * yn1.L -
			a2 * yn2.L;

		R =
			b0 * xn0.R +
 8005784:	ee37 7a27 	vadd.f32	s14, s14, s15
			b1 * xn1.R +
			b2 * xn2.R -
 8005788:	edd7 6a07 	vldr	s13, [r7, #28]
 800578c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005790:	ee66 7aa7 	vmul.f32	s15, s13, s15
			a1 * yn1.L -
			a2 * yn2.L;

		R =
			b0 * xn0.R +
			b1 * xn1.R +
 8005794:	ee37 7a27 	vadd.f32	s14, s14, s15
			b2 * xn2.R -
			a1 * yn1.R -
 8005798:	edd7 6a05 	vldr	s13, [r7, #20]
 800579c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80057a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			a2 * yn2.L;

		R =
			b0 * xn0.R +
			b1 * xn1.R +
			b2 * xn2.R -
 80057a4:	ee37 7a67 	vsub.f32	s14, s14, s15
			a1 * yn1.R -
			a2 * yn2.R;
 80057a8:	edd7 6a03 	vldr	s13, [r7, #12]
 80057ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80057b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			b1 * xn1.L +
			b2 * xn2.L -
			a1 * yn1.L -
			a2 * yn2.L;

		R =
 80057b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057b8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			b2 * xn2.R -
			a1 * yn1.R -
			a2 * yn2.R;

		// save the result
		output[i] = (sf_sample_st){ L, R };
 80057bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80057c0:	493e      	ldr	r1, [pc, #248]	; (80058bc <biquad_invoke2+0x2ac>)
 80057c2:	00da      	lsls	r2, r3, #3
 80057c4:	440a      	add	r2, r1
 80057c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057c8:	6011      	str	r1, [r2, #0]
 80057ca:	4a3c      	ldr	r2, [pc, #240]	; (80058bc <biquad_invoke2+0x2ac>)
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4413      	add	r3, r2
 80057d0:	3304      	adds	r3, #4
 80057d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d4:	601a      	str	r2, [r3, #0]
	    // save the result
	    // output[n] = (sf_sample_st){ L, R };
	    // output[i] = L;

	    // slide everything down one sample
	    xn2 = xn1;
 80057d6:	f107 0318 	add.w	r3, r7, #24
 80057da:	f107 0220 	add.w	r2, r7, #32
 80057de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057e2:	e883 0003 	stmia.w	r3, {r0, r1}
	    xn1 = xn0;
 80057e6:	f107 0320 	add.w	r3, r7, #32
 80057ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80057ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057f2:	e883 0003 	stmia.w	r3, {r0, r1}
	    yn2 = yn1;
 80057f6:	f107 0308 	add.w	r3, r7, #8
 80057fa:	f107 0210 	add.w	r2, r7, #16
 80057fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005802:	e883 0003 	stmia.w	r3, {r0, r1}
	    yn1 = output[i];
 8005806:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800580a:	492c      	ldr	r1, [pc, #176]	; (80058bc <biquad_invoke2+0x2ac>)
 800580c:	f107 0210 	add.w	r2, r7, #16
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	440b      	add	r3, r1
 8005814:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005818:	e882 0003 	stmia.w	r2, {r0, r1}
		input[i].R = (float32_t) buffer_output[2*i+1];
	}

	// Loop for each sample
	// TODO: make sure both left and right samples are being handled.
	for(i = start; i < end; i++)
 800581c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005820:	3301      	adds	r3, #1
 8005822:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005826:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800582a:	88bb      	ldrh	r3, [r7, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	f4ff af6a 	bcc.w	8005706 <biquad_invoke2+0xf6>
	    yn2 = yn1;
	    yn1 = output[i];
	}

	// Convert output back into buffer_output[i] (ints).
	for(i = start/2; i < (end/2) ; i++)
 8005832:	88fb      	ldrh	r3, [r7, #6]
 8005834:	085b      	lsrs	r3, r3, #1
 8005836:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800583a:	e02c      	b.n	8005896 <biquad_invoke2+0x286>
	{
		buffer_output[2*i] = (uint16_t) output[i].L;
 800583c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8005846:	491d      	ldr	r1, [pc, #116]	; (80058bc <biquad_invoke2+0x2ac>)
 8005848:	00d2      	lsls	r2, r2, #3
 800584a:	440a      	add	r2, r1
 800584c:	edd2 7a00 	vldr	s15, [r2]
 8005850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005854:	edc7 7a00 	vstr	s15, [r7]
 8005858:	883a      	ldrh	r2, [r7, #0]
 800585a:	b291      	uxth	r1, r2
 800585c:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <biquad_invoke2+0x2a4>)
 800585e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		buffer_output[2*i+1] = (uint16_t) output[i].R;
 8005862:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	3301      	adds	r3, #1
 800586a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800586e:	4913      	ldr	r1, [pc, #76]	; (80058bc <biquad_invoke2+0x2ac>)
 8005870:	00d2      	lsls	r2, r2, #3
 8005872:	440a      	add	r2, r1
 8005874:	3204      	adds	r2, #4
 8005876:	edd2 7a00 	vldr	s15, [r2]
 800587a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800587e:	edc7 7a00 	vstr	s15, [r7]
 8005882:	883a      	ldrh	r2, [r7, #0]
 8005884:	b291      	uxth	r1, r2
 8005886:	4a0b      	ldr	r2, [pc, #44]	; (80058b4 <biquad_invoke2+0x2a4>)
 8005888:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    yn2 = yn1;
	    yn1 = output[i];
	}

	// Convert output back into buffer_output[i] (ints).
	for(i = start/2; i < (end/2) ; i++)
 800588c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005890:	3301      	adds	r3, #1
 8005892:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005896:	88bb      	ldrh	r3, [r7, #4]
 8005898:	085b      	lsrs	r3, r3, #1
 800589a:	b29b      	uxth	r3, r3
 800589c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d3cb      	bcc.n	800583c <biquad_invoke2+0x22c>
	{
		buffer_output[2*i] = (uint16_t) output[i].L;
		buffer_output[2*i+1] = (uint16_t) output[i].R;
	}
}
 80058a4:	bf00      	nop
 80058a6:	3754      	adds	r7, #84	; 0x54
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	20004a94 	.word	0x20004a94
 80058b4:	200005c8 	.word	0x200005c8
 80058b8:	20005acc 	.word	0x20005acc
 80058bc:	20004acc 	.word	0x20004acc

080058c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80058c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80058c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80058c6:	e003      	b.n	80058d0 <LoopCopyDataInit>

080058c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80058c8:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80058ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80058cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80058ce:	3104      	adds	r1, #4

080058d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80058d0:	480b      	ldr	r0, [pc, #44]	; (8005900 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80058d2:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80058d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80058d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80058d8:	d3f6      	bcc.n	80058c8 <CopyDataInit>
  ldr  r2, =_sbss
 80058da:	4a0b      	ldr	r2, [pc, #44]	; (8005908 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80058dc:	e002      	b.n	80058e4 <LoopFillZerobss>

080058de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80058de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80058e0:	f842 3b04 	str.w	r3, [r2], #4

080058e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80058e4:	4b09      	ldr	r3, [pc, #36]	; (800590c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80058e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80058e8:	d3f9      	bcc.n	80058de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80058ea:	f000 f929 	bl	8005b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058ee:	f000 fabb 	bl	8005e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058f2:	f7fd fec3 	bl	800367c <main>
  bx  lr    
 80058f6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80058f8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80058fc:	08008ce0 	.word	0x08008ce0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005900:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005904:	200005a4 	.word	0x200005a4
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8005908:	200005a4 	.word	0x200005a4
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800590c:	20006ae0 	.word	0x20006ae0

08005910 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005910:	e7fe      	b.n	8005910 <CAN1_RX0_IRQHandler>
	...

08005914 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
}
 8005918:	bf00      	nop
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop

08005924 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8005928:	e7fe      	b.n	8005928 <HardFault_Handler+0x4>
 800592a:	bf00      	nop

0800592c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8005930:	e7fe      	b.n	8005930 <MemManage_Handler+0x4>
 8005932:	bf00      	nop

08005934 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8005938:	e7fe      	b.n	8005938 <BusFault_Handler+0x4>
 800593a:	bf00      	nop

0800593c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8005940:	e7fe      	b.n	8005940 <UsageFault_Handler+0x4>
 8005942:	bf00      	nop

08005944 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
}
 8005948:	bf00      	nop
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop

08005954 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
}
 8005958:	bf00      	nop
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop

08005964 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
}
 8005968:	bf00      	nop
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop

08005974 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8005978:	bf00      	nop
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop

08005984 <EXTI0_IRQHandler>:


/*
 * interrupt handler for vco waveform button
 */
void EXTI0_IRQHandler(void){
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line0);
 8005988:	2001      	movs	r0, #1
 800598a:	f7fb fe4b 	bl	8001624 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 800598e:	4b08      	ldr	r3, [pc, #32]	; (80059b0 <EXTI0_IRQHandler+0x2c>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <EXTI0_IRQHandler+0x26>
		the_button.button = vco_wave_button;
 8005996:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <EXTI0_IRQHandler+0x2c>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 800599c:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <EXTI0_IRQHandler+0x2c>)
 800599e:	2201      	movs	r2, #1
 80059a0:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 80059a2:	2101      	movs	r1, #1
 80059a4:	4803      	ldr	r0, [pc, #12]	; (80059b4 <EXTI0_IRQHandler+0x30>)
 80059a6:	f7fc fd87 	bl	80024b8 <TIM_Cmd>
	}
}
 80059aa:	bf00      	nop
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20004a50 	.word	0x20004a50
 80059b4:	40000400 	.word	0x40000400

080059b8 <EXTI1_IRQHandler>:


/*
 * interrupt handler for lfo waveform button
 */
void EXTI1_IRQHandler(void){
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line1);
 80059bc:	2002      	movs	r0, #2
 80059be:	f7fb fe31 	bl	8001624 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <EXTI1_IRQHandler+0x2c>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <EXTI1_IRQHandler+0x26>
		the_button.button = lfo_wave_button;
 80059ca:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <EXTI1_IRQHandler+0x2c>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 80059d0:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <EXTI1_IRQHandler+0x2c>)
 80059d2:	2201      	movs	r2, #1
 80059d4:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 80059d6:	2101      	movs	r1, #1
 80059d8:	4803      	ldr	r0, [pc, #12]	; (80059e8 <EXTI1_IRQHandler+0x30>)
 80059da:	f7fc fd6d 	bl	80024b8 <TIM_Cmd>
	}
}
 80059de:	bf00      	nop
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20004a50 	.word	0x20004a50
 80059e8:	40000400 	.word	0x40000400

080059ec <EXTI2_IRQHandler>:


/*
 * interrupt handler for lfo modulation type button
 */
void EXTI2_IRQHandler(void){
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line2);
 80059f0:	2004      	movs	r0, #4
 80059f2:	f7fb fe17 	bl	8001624 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 80059f6:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <EXTI2_IRQHandler+0x2c>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <EXTI2_IRQHandler+0x26>
		the_button.button = lfo_mod_button;
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <EXTI2_IRQHandler+0x2c>)
 8005a00:	2202      	movs	r2, #2
 8005a02:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 8005a04:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <EXTI2_IRQHandler+0x2c>)
 8005a06:	2201      	movs	r2, #1
 8005a08:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	4803      	ldr	r0, [pc, #12]	; (8005a1c <EXTI2_IRQHandler+0x30>)
 8005a0e:	f7fc fd53 	bl	80024b8 <TIM_Cmd>
	}

}
 8005a12:	bf00      	nop
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20004a50 	.word	0x20004a50
 8005a1c:	40000400 	.word	0x40000400

08005a20 <EXTI3_IRQHandler>:


/*
 * interrupt handler for adsr modulation type button
 */
void EXTI3_IRQHandler(void){
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line3);
 8005a24:	2008      	movs	r0, #8
 8005a26:	f7fb fdfd 	bl	8001624 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 8005a2a:	4b08      	ldr	r3, [pc, #32]	; (8005a4c <EXTI3_IRQHandler+0x2c>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d109      	bne.n	8005a46 <EXTI3_IRQHandler+0x26>
		the_button.button = adsr_mod_button;
 8005a32:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <EXTI3_IRQHandler+0x2c>)
 8005a34:	2203      	movs	r2, #3
 8005a36:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 8005a38:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <EXTI3_IRQHandler+0x2c>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8005a3e:	2101      	movs	r1, #1
 8005a40:	4803      	ldr	r0, [pc, #12]	; (8005a50 <EXTI3_IRQHandler+0x30>)
 8005a42:	f7fc fd39 	bl	80024b8 <TIM_Cmd>
	}
}
 8005a46:	bf00      	nop
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20004a50 	.word	0x20004a50
 8005a50:	40000400 	.word	0x40000400

08005a54 <EXTI9_5_IRQHandler>:

//EXTI9_5_IRQn used for selector
void EXTI9_5_IRQHandler(void){
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
	// TODO: Is this a mistake?  Looks like EXTI_Line6 is twice.  Maybe should be EXTI_Line5.
	// EXTI_ClearITPendingBit(EXTI_Line6 | EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9);
	EXTI_ClearITPendingBit(EXTI_Line5 | EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9);
 8005a58:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8005a5c:	f7fb fde2 	bl	8001624 <EXTI_ClearITPendingBit>
	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){			//is debounce timer off
 8005a60:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <EXTI9_5_IRQHandler+0x28>)
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d103      	bne.n	8005a76 <EXTI9_5_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);								//turn on debounce timer
 8005a6e:	2101      	movs	r1, #1
 8005a70:	4802      	ldr	r0, [pc, #8]	; (8005a7c <EXTI9_5_IRQHandler+0x28>)
 8005a72:	f7fc fd21 	bl	80024b8 <TIM_Cmd>
	}
	// update_state();
}
 8005a76:	bf00      	nop
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	40000800 	.word	0x40000800

08005a80 <EXTI15_10_IRQHandler>:

//EXTI15_10_IRQn used for selector
void EXTI15_10_IRQHandler(void){
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15);
 8005a84:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8005a88:	f7fb fdcc 	bl	8001624 <EXTI_ClearITPendingBit>

	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){		//is debounce timer off
 8005a8c:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <EXTI15_10_IRQHandler+0x28>)
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d103      	bne.n	8005aa2 <EXTI15_10_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);							//turn on debounce timer
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	4802      	ldr	r0, [pc, #8]	; (8005aa8 <EXTI15_10_IRQHandler+0x28>)
 8005a9e:	f7fc fd0b 	bl	80024b8 <TIM_Cmd>
	}
}
 8005aa2:	bf00      	nop
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40000800 	.word	0x40000800

08005aac <TIM3_IRQHandler>:

// Timer for limiting button pushes 100ms
void TIM3_IRQHandler()
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
	// Note: the_button.button is set to vco_wave or whatever by
	// EXTI0_IRQHandler() or whatever.
	// That routine is called first and then this one.
	// It enables the TIM3 timer.  Then this function disables it.

	TIM_Cmd(TIM3, DISABLE);				//stop timer
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4813      	ldr	r0, [pc, #76]	; (8005b04 <TIM3_IRQHandler+0x58>)
 8005ab6:	f7fc fcff 	bl	80024b8 <TIM_Cmd>
	int temp = the_button.button;
 8005aba:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <TIM3_IRQHandler+0x5c>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	607b      	str	r3, [r7, #4]

	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);			//clear interrupt
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	4810      	ldr	r0, [pc, #64]	; (8005b04 <TIM3_IRQHandler+0x58>)
 8005ac4:	f7fc fd3c 	bl	8002540 <TIM_ClearITPendingBit>
	the_button.button_state = NOT_ACTIVE;
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <TIM3_IRQHandler+0x5c>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	605a      	str	r2, [r3, #4]
	if(temp == vco_wave_button)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <TIM3_IRQHandler+0x2e>
	{
		// handle_enter();			// TODO
		update_vco_wave();
 8005ad4:	f000 f8fe 	bl	8005cd4 <update_vco_wave>
	else if(temp == adsr_mod_button)
	{
		// handle_down();			// TODO
		update_adsr_mod();
	}
}
 8005ad8:	e010      	b.n	8005afc <TIM3_IRQHandler+0x50>
	{
		// handle_enter();			// TODO
		update_vco_wave();

	}
	else if(temp == lfo_wave_button)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d102      	bne.n	8005ae6 <TIM3_IRQHandler+0x3a>
	{
		// handle_back();			// TODO
		update_lfo_wave();
 8005ae0:	f000 f90e 	bl	8005d00 <update_lfo_wave>
	else if(temp == adsr_mod_button)
	{
		// handle_down();			// TODO
		update_adsr_mod();
	}
}
 8005ae4:	e00a      	b.n	8005afc <TIM3_IRQHandler+0x50>
	else if(temp == lfo_wave_button)
	{
		// handle_back();			// TODO
		update_lfo_wave();
	}
	else if(temp == lfo_mod_button)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d102      	bne.n	8005af2 <TIM3_IRQHandler+0x46>
	{
		// handle_up();			// TODO
		update_lfo_mod();
 8005aec:	f000 f91e 	bl	8005d2c <update_lfo_mod>
	else if(temp == adsr_mod_button)
	{
		// handle_down();			// TODO
		update_adsr_mod();
	}
}
 8005af0:	e004      	b.n	8005afc <TIM3_IRQHandler+0x50>
	else if(temp == lfo_mod_button)
	{
		// handle_up();			// TODO
		update_lfo_mod();
	}
	else if(temp == adsr_mod_button)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d101      	bne.n	8005afc <TIM3_IRQHandler+0x50>
	{
		// handle_down();			// TODO
		update_adsr_mod();
 8005af8:	f000 f938 	bl	8005d6c <update_adsr_mod>
	}
}
 8005afc:	bf00      	nop
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40000400 	.word	0x40000400
 8005b08:	20004a50 	.word	0x20004a50

08005b0c <TIM4_IRQHandler>:

// Timer for debouncing selectors 50ms
void TIM4_IRQHandler()
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM4, DISABLE);								//stop timer
 8005b10:	2100      	movs	r1, #0
 8005b12:	4804      	ldr	r0, [pc, #16]	; (8005b24 <TIM4_IRQHandler+0x18>)
 8005b14:	f7fc fcd0 	bl	80024b8 <TIM_Cmd>
	TIM_ClearITPendingBit(TIM4, TIM_IT_Update);			//clear interrupt
 8005b18:	2101      	movs	r1, #1
 8005b1a:	4802      	ldr	r0, [pc, #8]	; (8005b24 <TIM4_IRQHandler+0x18>)
 8005b1c:	f7fc fd10 	bl	8002540 <TIM_ClearITPendingBit>

	// update_selector_state();							//update state
	// update_state();
}
 8005b20:	bf00      	nop
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40000800 	.word	0x40000800

08005b28 <ADC_IRQHandler>:

// not set up yet but might to see if the adc is working
void ADC_IRQHandler() {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
	/* acknowledge interrupt */
	ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 8005b2c:	f240 2105 	movw	r1, #517	; 0x205
 8005b30:	4802      	ldr	r0, [pc, #8]	; (8005b3c <ADC_IRQHandler+0x14>)
 8005b32:	f7fb fa55 	bl	8000fe0 <ADC_ClearITPendingBit>
}
 8005b36:	bf00      	nop
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40012000 	.word	0x40012000

08005b40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  // Mike Beard
  // #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b44:	4a16      	ldr	r2, [pc, #88]	; (8005ba0 <SystemInit+0x60>)
 8005b46:	4b16      	ldr	r3, [pc, #88]	; (8005ba0 <SystemInit+0x60>)
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  // #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005b54:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <SystemInit+0x64>)
 8005b56:	4b13      	ldr	r3, [pc, #76]	; (8005ba4 <SystemInit+0x64>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f043 0301 	orr.w	r3, r3, #1
 8005b5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005b60:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <SystemInit+0x64>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005b66:	4a0f      	ldr	r2, [pc, #60]	; (8005ba4 <SystemInit+0x64>)
 8005b68:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <SystemInit+0x64>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005b76:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <SystemInit+0x64>)
 8005b78:	4a0b      	ldr	r2, [pc, #44]	; (8005ba8 <SystemInit+0x68>)
 8005b7a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005b7c:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <SystemInit+0x64>)
 8005b7e:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <SystemInit+0x64>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <SystemInit+0x64>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8005b8e:	f000 f80d 	bl	8005bac <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b92:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <SystemInit+0x60>)
 8005b94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b98:	609a      	str	r2, [r3, #8]
#endif
}
 8005b9a:	bf00      	nop
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	e000ed00 	.word	0xe000ed00
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	24003010 	.word	0x24003010

08005bac <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	607b      	str	r3, [r7, #4]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8005bba:	4a41      	ldr	r2, [pc, #260]	; (8005cc0 <SetSysClock+0x114>)
 8005bbc:	4b40      	ldr	r3, [pc, #256]	; (8005cc0 <SetSysClock+0x114>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005bc6:	4b3e      	ldr	r3, [pc, #248]	; (8005cc0 <SetSysClock+0x114>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d103      	bne.n	8005be4 <SetSysClock+0x38>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005be2:	d1f0      	bne.n	8005bc6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005be4:	4b36      	ldr	r3, [pc, #216]	; (8005cc0 <SetSysClock+0x114>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	e001      	b.n	8005bfa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d142      	bne.n	8005c86 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8005c00:	4a2f      	ldr	r2, [pc, #188]	; (8005cc0 <SetSysClock+0x114>)
 8005c02:	4b2f      	ldr	r3, [pc, #188]	; (8005cc0 <SetSysClock+0x114>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8005c0c:	4a2d      	ldr	r2, [pc, #180]	; (8005cc4 <SetSysClock+0x118>)
 8005c0e:	4b2d      	ldr	r3, [pc, #180]	; (8005cc4 <SetSysClock+0x118>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c16:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005c18:	4a29      	ldr	r2, [pc, #164]	; (8005cc0 <SetSysClock+0x114>)
 8005c1a:	4b29      	ldr	r3, [pc, #164]	; (8005cc0 <SetSysClock+0x114>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8005c20:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <SetSysClock+0x114>)
 8005c22:	4b27      	ldr	r3, [pc, #156]	; (8005cc0 <SetSysClock+0x114>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c2a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8005c2c:	4a24      	ldr	r2, [pc, #144]	; (8005cc0 <SetSysClock+0x114>)
 8005c2e:	4b24      	ldr	r3, [pc, #144]	; (8005cc0 <SetSysClock+0x114>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8005c36:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8005c38:	4b21      	ldr	r3, [pc, #132]	; (8005cc0 <SetSysClock+0x114>)
 8005c3a:	4a23      	ldr	r2, [pc, #140]	; (8005cc8 <SetSysClock+0x11c>)
 8005c3c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005c3e:	4a20      	ldr	r2, [pc, #128]	; (8005cc0 <SetSysClock+0x114>)
 8005c40:	4b1f      	ldr	r3, [pc, #124]	; (8005cc0 <SetSysClock+0x114>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c48:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005c4a:	bf00      	nop
 8005c4c:	4b1c      	ldr	r3, [pc, #112]	; (8005cc0 <SetSysClock+0x114>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f9      	beq.n	8005c4c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8005c58:	4b1c      	ldr	r3, [pc, #112]	; (8005ccc <SetSysClock+0x120>)
 8005c5a:	f240 6205 	movw	r2, #1541	; 0x605
 8005c5e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005c60:	4a17      	ldr	r2, [pc, #92]	; (8005cc0 <SetSysClock+0x114>)
 8005c62:	4b17      	ldr	r3, [pc, #92]	; (8005cc0 <SetSysClock+0x114>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005c6c:	4a14      	ldr	r2, [pc, #80]	; (8005cc0 <SetSysClock+0x114>)
 8005c6e:	4b14      	ldr	r3, [pc, #80]	; (8005cc0 <SetSysClock+0x114>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f043 0302 	orr.w	r3, r3, #2
 8005c76:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8005c78:	bf00      	nop
 8005c7a:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <SetSysClock+0x114>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 030c 	and.w	r3, r3, #12
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d1f9      	bne.n	8005c7a <SetSysClock+0xce>
// Re-added by Mike Beard
/******************************************************************************/
/*                          I2S clock configuration                           */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8005c86:	4a0e      	ldr	r2, [pc, #56]	; (8005cc0 <SetSysClock+0x114>)
 8005c88:	4b0d      	ldr	r3, [pc, #52]	; (8005cc0 <SetSysClock+0x114>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005c90:	6093      	str	r3, [r2, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8005c92:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <SetSysClock+0x114>)
 8005c94:	4a0e      	ldr	r2, [pc, #56]	; (8005cd0 <SetSysClock+0x124>)
 8005c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8005c9a:	4a09      	ldr	r2, [pc, #36]	; (8005cc0 <SetSysClock+0x114>)
 8005c9c:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <SetSysClock+0x114>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ca4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8005ca6:	bf00      	nop
 8005ca8:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <SetSysClock+0x114>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d0f9      	beq.n	8005ca8 <SetSysClock+0xfc>
  {
  }
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	40007000 	.word	0x40007000
 8005cc8:	07405408 	.word	0x07405408
 8005ccc:	40023c00 	.word	0x40023c00
 8005cd0:	30004080 	.word	0x30004080

08005cd4 <update_vco_wave>:
// #include "lcd.h"
#include "main.h"


void update_vco_wave()
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
	vco_wave++;
 8005cd8:	4b08      	ldr	r3, [pc, #32]	; (8005cfc <update_vco_wave+0x28>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <update_vco_wave+0x28>)
 8005ce2:	701a      	strb	r2, [r3, #0]
	if(vco_wave >= lastwave)
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <update_vco_wave+0x28>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b05      	cmp	r3, #5
 8005cea:	d902      	bls.n	8005cf2 <update_vco_wave+0x1e>
	{
		vco_wave = 0;
 8005cec:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <update_vco_wave+0x28>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
	}
}
 8005cf2:	bf00      	nop
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	20004a2d 	.word	0x20004a2d

08005d00 <update_lfo_wave>:

void update_lfo_wave()
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
	lfo_wave++;
 8005d04:	4b08      	ldr	r3, [pc, #32]	; (8005d28 <update_lfo_wave+0x28>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <update_lfo_wave+0x28>)
 8005d0e:	701a      	strb	r2, [r3, #0]
	if(lfo_wave >= lastwave)
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <update_lfo_wave+0x28>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b05      	cmp	r3, #5
 8005d16:	d902      	bls.n	8005d1e <update_lfo_wave+0x1e>
	{
		lfo_wave = 0;
 8005d18:	4b03      	ldr	r3, [pc, #12]	; (8005d28 <update_lfo_wave+0x28>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]
	}
}
 8005d1e:	bf00      	nop
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	20004a2c 	.word	0x20004a2c

08005d2c <update_lfo_mod>:
		}
	}
}

void update_lfo_mod()
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
	// TODO: make modulation modes in this order: None, AM, FM, AM+FM

	if(lfo_mod.am_mod == OFF)
 8005d30:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <update_lfo_mod+0x3c>)
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d103      	bne.n	8005d40 <update_lfo_mod+0x14>
	{
		lfo_mod.am_mod = ON;
 8005d38:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <update_lfo_mod+0x3c>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	801a      	strh	r2, [r3, #0]
		else
		{
			lfo_mod.fm_mod = OFF;
		}
	}
}
 8005d3e:	e00d      	b.n	8005d5c <update_lfo_mod+0x30>

		// Note: leave adsr_mod.fm_mod as-is.
	}
	else
	{
		lfo_mod.am_mod = OFF;
 8005d40:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <update_lfo_mod+0x3c>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	801a      	strh	r2, [r3, #0]

		// Toggle adsr_mod.am_mod.
		if(lfo_mod.fm_mod == OFF)
 8005d46:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <update_lfo_mod+0x3c>)
 8005d48:	885b      	ldrh	r3, [r3, #2]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d103      	bne.n	8005d56 <update_lfo_mod+0x2a>
		{
			lfo_mod.fm_mod = ON;
 8005d4e:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <update_lfo_mod+0x3c>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	805a      	strh	r2, [r3, #2]
		else
		{
			lfo_mod.fm_mod = OFF;
		}
	}
}
 8005d54:	e002      	b.n	8005d5c <update_lfo_mod+0x30>
		{
			lfo_mod.fm_mod = ON;
		}
		else
		{
			lfo_mod.fm_mod = OFF;
 8005d56:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <update_lfo_mod+0x3c>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8005d5c:	bf00      	nop
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	20004a58 	.word	0x20004a58

08005d6c <update_adsr_mod>:


void update_adsr_mod()
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
	if(adsr_mod.fm_mod == OFF)
 8005d70:	4b0d      	ldr	r3, [pc, #52]	; (8005da8 <update_adsr_mod+0x3c>)
 8005d72:	885b      	ldrh	r3, [r3, #2]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d103      	bne.n	8005d80 <update_adsr_mod+0x14>
	{
		adsr_mod.fm_mod = ON;
 8005d78:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <update_adsr_mod+0x3c>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	805a      	strh	r2, [r3, #2]
		else
		{
			adsr_mod.am_mod = OFF;
		}
	}
}
 8005d7e:	e00d      	b.n	8005d9c <update_adsr_mod+0x30>

		// Note: leave adsr_mod.am_mod as-is.
	}
	else
	{
		adsr_mod.fm_mod = OFF;
 8005d80:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <update_adsr_mod+0x3c>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	805a      	strh	r2, [r3, #2]

		// Toggle adsr_mod.am_mod.
		if(adsr_mod.am_mod == OFF)
 8005d86:	4b08      	ldr	r3, [pc, #32]	; (8005da8 <update_adsr_mod+0x3c>)
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d103      	bne.n	8005d96 <update_adsr_mod+0x2a>
		{
			adsr_mod.am_mod = ON;
 8005d8e:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <update_adsr_mod+0x3c>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	801a      	strh	r2, [r3, #0]
		else
		{
			adsr_mod.am_mod = OFF;
		}
	}
}
 8005d94:	e002      	b.n	8005d9c <update_adsr_mod+0x30>
		{
			adsr_mod.am_mod = ON;
		}
		else
		{
			adsr_mod.am_mod = OFF;
 8005d96:	4b04      	ldr	r3, [pc, #16]	; (8005da8 <update_adsr_mod+0x3c>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8005d9c:	bf00      	nop
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	20004a30 	.word	0x20004a30

08005dac <init_state>:
//	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_6) == 1){
//		lfo_state = other2;
//	}
//}

void init_state(){
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
//	current_menu_state.lfo_mod = NO_MOD;
//	current_menu_state.filterst8 = no_filter;
//	current_menu_state.secondary_vco = 0;
//	display_new_menu();

	vco_wave = sine;
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <init_state+0x34>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	701a      	strb	r2, [r3, #0]
	lfo_wave = sine;
 8005db6:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <init_state+0x38>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	701a      	strb	r2, [r3, #0]

	lfo_mod.am_mod = OFF;
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <init_state+0x3c>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	801a      	strh	r2, [r3, #0]
	lfo_mod.fm_mod = OFF;
 8005dc2:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <init_state+0x3c>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	805a      	strh	r2, [r3, #2]

	adsr_mod.am_mod = OFF;
 8005dc8:	4b08      	ldr	r3, [pc, #32]	; (8005dec <init_state+0x40>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	801a      	strh	r2, [r3, #0]
	adsr_mod.fm_mod = OFF;
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <init_state+0x40>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	805a      	strh	r2, [r3, #2]

}
 8005dd4:	bf00      	nop
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20004a2d 	.word	0x20004a2d
 8005de4:	20004a2c 	.word	0x20004a2c
 8005de8:	20004a58 	.word	0x20004a58
 8005dec:	20004a30 	.word	0x20004a30

08005df0 <arm_sin_f32>:
 8005df0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005e5c <arm_sin_f32+0x6c>
 8005df4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005df8:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e00:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8005e04:	d504      	bpl.n	8005e10 <arm_sin_f32+0x20>
 8005e06:	ee17 3a90 	vmov	r3, s15
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	ee07 3a90 	vmov	s15, r3
 8005e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e14:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005e60 <arm_sin_f32+0x70>
 8005e18:	4a12      	ldr	r2, [pc, #72]	; (8005e64 <arm_sin_f32+0x74>)
 8005e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005e22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005e26:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8005e2a:	ee16 3a90 	vmov	r3, s13
 8005e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e32:	ee06 3a90 	vmov	s13, r3
 8005e36:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 8005e3a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005e3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e42:	edd1 6a00 	vldr	s13, [r1]
 8005e46:	ed91 7a01 	vldr	s14, [r1, #4]
 8005e4a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e52:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005e56:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005e5a:	4770      	bx	lr
 8005e5c:	3e22f983 	.word	0x3e22f983
 8005e60:	44000000 	.word	0x44000000
 8005e64:	08008268 	.word	0x08008268

08005e68 <__libc_init_array>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	4b0e      	ldr	r3, [pc, #56]	; (8005ea4 <__libc_init_array+0x3c>)
 8005e6c:	4c0e      	ldr	r4, [pc, #56]	; (8005ea8 <__libc_init_array+0x40>)
 8005e6e:	1ae4      	subs	r4, r4, r3
 8005e70:	10a4      	asrs	r4, r4, #2
 8005e72:	2500      	movs	r5, #0
 8005e74:	461e      	mov	r6, r3
 8005e76:	42a5      	cmp	r5, r4
 8005e78:	d004      	beq.n	8005e84 <__libc_init_array+0x1c>
 8005e7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e7e:	4798      	blx	r3
 8005e80:	3501      	adds	r5, #1
 8005e82:	e7f8      	b.n	8005e76 <__libc_init_array+0xe>
 8005e84:	f002 f9de 	bl	8008244 <_init>
 8005e88:	4c08      	ldr	r4, [pc, #32]	; (8005eac <__libc_init_array+0x44>)
 8005e8a:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <__libc_init_array+0x48>)
 8005e8c:	1ae4      	subs	r4, r4, r3
 8005e8e:	10a4      	asrs	r4, r4, #2
 8005e90:	2500      	movs	r5, #0
 8005e92:	461e      	mov	r6, r3
 8005e94:	42a5      	cmp	r5, r4
 8005e96:	d004      	beq.n	8005ea2 <__libc_init_array+0x3a>
 8005e98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e9c:	4798      	blx	r3
 8005e9e:	3501      	adds	r5, #1
 8005ea0:	e7f8      	b.n	8005e94 <__libc_init_array+0x2c>
 8005ea2:	bd70      	pop	{r4, r5, r6, pc}
 8005ea4:	08008cd8 	.word	0x08008cd8
 8005ea8:	08008cd8 	.word	0x08008cd8
 8005eac:	08008cdc 	.word	0x08008cdc
 8005eb0:	08008cd8 	.word	0x08008cd8

08005eb4 <malloc>:
 8005eb4:	4b02      	ldr	r3, [pc, #8]	; (8005ec0 <malloc+0xc>)
 8005eb6:	4601      	mov	r1, r0
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	f000 b803 	b.w	8005ec4 <_malloc_r>
 8005ebe:	bf00      	nop
 8005ec0:	2000018c 	.word	0x2000018c

08005ec4 <_malloc_r>:
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	f101 040b 	add.w	r4, r1, #11
 8005ecc:	2c16      	cmp	r4, #22
 8005ece:	b085      	sub	sp, #20
 8005ed0:	4681      	mov	r9, r0
 8005ed2:	d903      	bls.n	8005edc <_malloc_r+0x18>
 8005ed4:	f034 0407 	bics.w	r4, r4, #7
 8005ed8:	d501      	bpl.n	8005ede <_malloc_r+0x1a>
 8005eda:	e002      	b.n	8005ee2 <_malloc_r+0x1e>
 8005edc:	2410      	movs	r4, #16
 8005ede:	428c      	cmp	r4, r1
 8005ee0:	d203      	bcs.n	8005eea <_malloc_r+0x26>
 8005ee2:	230c      	movs	r3, #12
 8005ee4:	f8c9 3000 	str.w	r3, [r9]
 8005ee8:	e1ea      	b.n	80062c0 <_malloc_r+0x3fc>
 8005eea:	4648      	mov	r0, r9
 8005eec:	f000 fa0a 	bl	8006304 <__malloc_lock>
 8005ef0:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005ef4:	4d9e      	ldr	r5, [pc, #632]	; (8006170 <_malloc_r+0x2ac>)
 8005ef6:	d217      	bcs.n	8005f28 <_malloc_r+0x64>
 8005ef8:	f104 0208 	add.w	r2, r4, #8
 8005efc:	442a      	add	r2, r5
 8005efe:	f1a2 0108 	sub.w	r1, r2, #8
 8005f02:	6856      	ldr	r6, [r2, #4]
 8005f04:	428e      	cmp	r6, r1
 8005f06:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8005f0a:	d102      	bne.n	8005f12 <_malloc_r+0x4e>
 8005f0c:	68d6      	ldr	r6, [r2, #12]
 8005f0e:	42b2      	cmp	r2, r6
 8005f10:	d008      	beq.n	8005f24 <_malloc_r+0x60>
 8005f12:	6873      	ldr	r3, [r6, #4]
 8005f14:	68f2      	ldr	r2, [r6, #12]
 8005f16:	68b1      	ldr	r1, [r6, #8]
 8005f18:	f023 0303 	bic.w	r3, r3, #3
 8005f1c:	60ca      	str	r2, [r1, #12]
 8005f1e:	4433      	add	r3, r6
 8005f20:	6091      	str	r1, [r2, #8]
 8005f22:	e02f      	b.n	8005f84 <_malloc_r+0xc0>
 8005f24:	3302      	adds	r3, #2
 8005f26:	e03d      	b.n	8005fa4 <_malloc_r+0xe0>
 8005f28:	0a63      	lsrs	r3, r4, #9
 8005f2a:	d01a      	beq.n	8005f62 <_malloc_r+0x9e>
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d802      	bhi.n	8005f36 <_malloc_r+0x72>
 8005f30:	09a3      	lsrs	r3, r4, #6
 8005f32:	3338      	adds	r3, #56	; 0x38
 8005f34:	e018      	b.n	8005f68 <_malloc_r+0xa4>
 8005f36:	2b14      	cmp	r3, #20
 8005f38:	d801      	bhi.n	8005f3e <_malloc_r+0x7a>
 8005f3a:	335b      	adds	r3, #91	; 0x5b
 8005f3c:	e014      	b.n	8005f68 <_malloc_r+0xa4>
 8005f3e:	2b54      	cmp	r3, #84	; 0x54
 8005f40:	d802      	bhi.n	8005f48 <_malloc_r+0x84>
 8005f42:	0b23      	lsrs	r3, r4, #12
 8005f44:	336e      	adds	r3, #110	; 0x6e
 8005f46:	e00f      	b.n	8005f68 <_malloc_r+0xa4>
 8005f48:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005f4c:	d802      	bhi.n	8005f54 <_malloc_r+0x90>
 8005f4e:	0be3      	lsrs	r3, r4, #15
 8005f50:	3377      	adds	r3, #119	; 0x77
 8005f52:	e009      	b.n	8005f68 <_malloc_r+0xa4>
 8005f54:	f240 5254 	movw	r2, #1364	; 0x554
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d804      	bhi.n	8005f66 <_malloc_r+0xa2>
 8005f5c:	0ca3      	lsrs	r3, r4, #18
 8005f5e:	337c      	adds	r3, #124	; 0x7c
 8005f60:	e002      	b.n	8005f68 <_malloc_r+0xa4>
 8005f62:	233f      	movs	r3, #63	; 0x3f
 8005f64:	e000      	b.n	8005f68 <_malloc_r+0xa4>
 8005f66:	237e      	movs	r3, #126	; 0x7e
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005f6e:	f1a2 0008 	sub.w	r0, r2, #8
 8005f72:	6856      	ldr	r6, [r2, #4]
 8005f74:	e00c      	b.n	8005f90 <_malloc_r+0xcc>
 8005f76:	2900      	cmp	r1, #0
 8005f78:	68f1      	ldr	r1, [r6, #12]
 8005f7a:	db08      	blt.n	8005f8e <_malloc_r+0xca>
 8005f7c:	68b3      	ldr	r3, [r6, #8]
 8005f7e:	60d9      	str	r1, [r3, #12]
 8005f80:	608b      	str	r3, [r1, #8]
 8005f82:	18b3      	adds	r3, r6, r2
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	f042 0201 	orr.w	r2, r2, #1
 8005f8a:	605a      	str	r2, [r3, #4]
 8005f8c:	e1a3      	b.n	80062d6 <_malloc_r+0x412>
 8005f8e:	460e      	mov	r6, r1
 8005f90:	4286      	cmp	r6, r0
 8005f92:	d006      	beq.n	8005fa2 <_malloc_r+0xde>
 8005f94:	6872      	ldr	r2, [r6, #4]
 8005f96:	f022 0203 	bic.w	r2, r2, #3
 8005f9a:	1b11      	subs	r1, r2, r4
 8005f9c:	290f      	cmp	r1, #15
 8005f9e:	ddea      	ble.n	8005f76 <_malloc_r+0xb2>
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	4a72      	ldr	r2, [pc, #456]	; (8006170 <_malloc_r+0x2ac>)
 8005fa6:	692e      	ldr	r6, [r5, #16]
 8005fa8:	f102 0708 	add.w	r7, r2, #8
 8005fac:	42be      	cmp	r6, r7
 8005fae:	4639      	mov	r1, r7
 8005fb0:	d079      	beq.n	80060a6 <_malloc_r+0x1e2>
 8005fb2:	6870      	ldr	r0, [r6, #4]
 8005fb4:	f020 0003 	bic.w	r0, r0, #3
 8005fb8:	ebc4 0e00 	rsb	lr, r4, r0
 8005fbc:	f1be 0f0f 	cmp.w	lr, #15
 8005fc0:	dd0d      	ble.n	8005fde <_malloc_r+0x11a>
 8005fc2:	1933      	adds	r3, r6, r4
 8005fc4:	f044 0401 	orr.w	r4, r4, #1
 8005fc8:	6074      	str	r4, [r6, #4]
 8005fca:	6153      	str	r3, [r2, #20]
 8005fcc:	6113      	str	r3, [r2, #16]
 8005fce:	f04e 0201 	orr.w	r2, lr, #1
 8005fd2:	60df      	str	r7, [r3, #12]
 8005fd4:	609f      	str	r7, [r3, #8]
 8005fd6:	605a      	str	r2, [r3, #4]
 8005fd8:	f843 e00e 	str.w	lr, [r3, lr]
 8005fdc:	e17b      	b.n	80062d6 <_malloc_r+0x412>
 8005fde:	f1be 0f00 	cmp.w	lr, #0
 8005fe2:	6157      	str	r7, [r2, #20]
 8005fe4:	6117      	str	r7, [r2, #16]
 8005fe6:	db05      	blt.n	8005ff4 <_malloc_r+0x130>
 8005fe8:	4430      	add	r0, r6
 8005fea:	6843      	ldr	r3, [r0, #4]
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	6043      	str	r3, [r0, #4]
 8005ff2:	e170      	b.n	80062d6 <_malloc_r+0x412>
 8005ff4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005ff8:	d215      	bcs.n	8006026 <_malloc_r+0x162>
 8005ffa:	08c0      	lsrs	r0, r0, #3
 8005ffc:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8006000:	2701      	movs	r7, #1
 8006002:	fa07 fe0e 	lsl.w	lr, r7, lr
 8006006:	6857      	ldr	r7, [r2, #4]
 8006008:	3001      	adds	r0, #1
 800600a:	ea4e 0707 	orr.w	r7, lr, r7
 800600e:	6057      	str	r7, [r2, #4]
 8006010:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8006014:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8006018:	f8c6 e008 	str.w	lr, [r6, #8]
 800601c:	3f08      	subs	r7, #8
 800601e:	60f7      	str	r7, [r6, #12]
 8006020:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8006024:	e03d      	b.n	80060a2 <_malloc_r+0x1de>
 8006026:	0a42      	lsrs	r2, r0, #9
 8006028:	2a04      	cmp	r2, #4
 800602a:	d802      	bhi.n	8006032 <_malloc_r+0x16e>
 800602c:	0982      	lsrs	r2, r0, #6
 800602e:	3238      	adds	r2, #56	; 0x38
 8006030:	e015      	b.n	800605e <_malloc_r+0x19a>
 8006032:	2a14      	cmp	r2, #20
 8006034:	d801      	bhi.n	800603a <_malloc_r+0x176>
 8006036:	325b      	adds	r2, #91	; 0x5b
 8006038:	e011      	b.n	800605e <_malloc_r+0x19a>
 800603a:	2a54      	cmp	r2, #84	; 0x54
 800603c:	d802      	bhi.n	8006044 <_malloc_r+0x180>
 800603e:	0b02      	lsrs	r2, r0, #12
 8006040:	326e      	adds	r2, #110	; 0x6e
 8006042:	e00c      	b.n	800605e <_malloc_r+0x19a>
 8006044:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006048:	d802      	bhi.n	8006050 <_malloc_r+0x18c>
 800604a:	0bc2      	lsrs	r2, r0, #15
 800604c:	3277      	adds	r2, #119	; 0x77
 800604e:	e006      	b.n	800605e <_malloc_r+0x19a>
 8006050:	f240 5754 	movw	r7, #1364	; 0x554
 8006054:	42ba      	cmp	r2, r7
 8006056:	bf9a      	itte	ls
 8006058:	0c82      	lsrls	r2, r0, #18
 800605a:	327c      	addls	r2, #124	; 0x7c
 800605c:	227e      	movhi	r2, #126	; 0x7e
 800605e:	1c57      	adds	r7, r2, #1
 8006060:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8006064:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8006068:	f8df c104 	ldr.w	ip, [pc, #260]	; 8006170 <_malloc_r+0x2ac>
 800606c:	45be      	cmp	lr, r7
 800606e:	d10d      	bne.n	800608c <_malloc_r+0x1c8>
 8006070:	2001      	movs	r0, #1
 8006072:	1092      	asrs	r2, r2, #2
 8006074:	fa00 f202 	lsl.w	r2, r0, r2
 8006078:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800607c:	4310      	orrs	r0, r2
 800607e:	f8cc 0004 	str.w	r0, [ip, #4]
 8006082:	4672      	mov	r2, lr
 8006084:	e009      	b.n	800609a <_malloc_r+0x1d6>
 8006086:	68bf      	ldr	r7, [r7, #8]
 8006088:	45be      	cmp	lr, r7
 800608a:	d004      	beq.n	8006096 <_malloc_r+0x1d2>
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	f022 0203 	bic.w	r2, r2, #3
 8006092:	4290      	cmp	r0, r2
 8006094:	d3f7      	bcc.n	8006086 <_malloc_r+0x1c2>
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	46be      	mov	lr, r7
 800609a:	60f2      	str	r2, [r6, #12]
 800609c:	f8c6 e008 	str.w	lr, [r6, #8]
 80060a0:	6096      	str	r6, [r2, #8]
 80060a2:	f8ce 600c 	str.w	r6, [lr, #12]
 80060a6:	2001      	movs	r0, #1
 80060a8:	109a      	asrs	r2, r3, #2
 80060aa:	fa00 f202 	lsl.w	r2, r0, r2
 80060ae:	6868      	ldr	r0, [r5, #4]
 80060b0:	4282      	cmp	r2, r0
 80060b2:	d85f      	bhi.n	8006174 <_malloc_r+0x2b0>
 80060b4:	4202      	tst	r2, r0
 80060b6:	d106      	bne.n	80060c6 <_malloc_r+0x202>
 80060b8:	f023 0303 	bic.w	r3, r3, #3
 80060bc:	0052      	lsls	r2, r2, #1
 80060be:	4202      	tst	r2, r0
 80060c0:	f103 0304 	add.w	r3, r3, #4
 80060c4:	d0fa      	beq.n	80060bc <_malloc_r+0x1f8>
 80060c6:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80060ca:	46c2      	mov	sl, r8
 80060cc:	469c      	mov	ip, r3
 80060ce:	f8da 600c 	ldr.w	r6, [sl, #12]
 80060d2:	4556      	cmp	r6, sl
 80060d4:	d02c      	beq.n	8006130 <_malloc_r+0x26c>
 80060d6:	6870      	ldr	r0, [r6, #4]
 80060d8:	68f7      	ldr	r7, [r6, #12]
 80060da:	f020 0003 	bic.w	r0, r0, #3
 80060de:	ebc4 0e00 	rsb	lr, r4, r0
 80060e2:	f1be 0f0f 	cmp.w	lr, #15
 80060e6:	dd11      	ble.n	800610c <_malloc_r+0x248>
 80060e8:	1933      	adds	r3, r6, r4
 80060ea:	f044 0401 	orr.w	r4, r4, #1
 80060ee:	6074      	str	r4, [r6, #4]
 80060f0:	f856 2f08 	ldr.w	r2, [r6, #8]!
 80060f4:	60d7      	str	r7, [r2, #12]
 80060f6:	60ba      	str	r2, [r7, #8]
 80060f8:	f04e 0201 	orr.w	r2, lr, #1
 80060fc:	616b      	str	r3, [r5, #20]
 80060fe:	612b      	str	r3, [r5, #16]
 8006100:	60d9      	str	r1, [r3, #12]
 8006102:	6099      	str	r1, [r3, #8]
 8006104:	605a      	str	r2, [r3, #4]
 8006106:	f843 e00e 	str.w	lr, [r3, lr]
 800610a:	e00b      	b.n	8006124 <_malloc_r+0x260>
 800610c:	f1be 0f00 	cmp.w	lr, #0
 8006110:	db0c      	blt.n	800612c <_malloc_r+0x268>
 8006112:	1833      	adds	r3, r6, r0
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	f042 0201 	orr.w	r2, r2, #1
 800611a:	605a      	str	r2, [r3, #4]
 800611c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8006120:	60df      	str	r7, [r3, #12]
 8006122:	60bb      	str	r3, [r7, #8]
 8006124:	4648      	mov	r0, r9
 8006126:	f000 f8ee 	bl	8006306 <__malloc_unlock>
 800612a:	e0d8      	b.n	80062de <_malloc_r+0x41a>
 800612c:	463e      	mov	r6, r7
 800612e:	e7d0      	b.n	80060d2 <_malloc_r+0x20e>
 8006130:	f10c 0c01 	add.w	ip, ip, #1
 8006134:	f01c 0f03 	tst.w	ip, #3
 8006138:	f10a 0a08 	add.w	sl, sl, #8
 800613c:	d1c7      	bne.n	80060ce <_malloc_r+0x20a>
 800613e:	0798      	lsls	r0, r3, #30
 8006140:	d104      	bne.n	800614c <_malloc_r+0x288>
 8006142:	686b      	ldr	r3, [r5, #4]
 8006144:	ea23 0302 	bic.w	r3, r3, r2
 8006148:	606b      	str	r3, [r5, #4]
 800614a:	e005      	b.n	8006158 <_malloc_r+0x294>
 800614c:	f858 0908 	ldr.w	r0, [r8], #-8
 8006150:	4580      	cmp	r8, r0
 8006152:	f103 33ff 	add.w	r3, r3, #4294967295
 8006156:	d0f2      	beq.n	800613e <_malloc_r+0x27a>
 8006158:	6868      	ldr	r0, [r5, #4]
 800615a:	0052      	lsls	r2, r2, #1
 800615c:	4282      	cmp	r2, r0
 800615e:	d809      	bhi.n	8006174 <_malloc_r+0x2b0>
 8006160:	b142      	cbz	r2, 8006174 <_malloc_r+0x2b0>
 8006162:	4663      	mov	r3, ip
 8006164:	4202      	tst	r2, r0
 8006166:	d1ae      	bne.n	80060c6 <_malloc_r+0x202>
 8006168:	3304      	adds	r3, #4
 800616a:	0052      	lsls	r2, r2, #1
 800616c:	e7fa      	b.n	8006164 <_malloc_r+0x2a0>
 800616e:	bf00      	nop
 8006170:	20000190 	.word	0x20000190
 8006174:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8006178:	f8db 6004 	ldr.w	r6, [fp, #4]
 800617c:	f026 0603 	bic.w	r6, r6, #3
 8006180:	42b4      	cmp	r4, r6
 8006182:	d803      	bhi.n	800618c <_malloc_r+0x2c8>
 8006184:	1b33      	subs	r3, r6, r4
 8006186:	2b0f      	cmp	r3, #15
 8006188:	f300 809c 	bgt.w	80062c4 <_malloc_r+0x400>
 800618c:	4a56      	ldr	r2, [pc, #344]	; (80062e8 <_malloc_r+0x424>)
 800618e:	4957      	ldr	r1, [pc, #348]	; (80062ec <_malloc_r+0x428>)
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	6808      	ldr	r0, [r1, #0]
 8006194:	9101      	str	r1, [sp, #4]
 8006196:	f102 0810 	add.w	r8, r2, #16
 800619a:	4a55      	ldr	r2, [pc, #340]	; (80062f0 <_malloc_r+0x42c>)
 800619c:	9203      	str	r2, [sp, #12]
 800619e:	3001      	adds	r0, #1
 80061a0:	bf18      	it	ne
 80061a2:	f102 31ff 	addne.w	r1, r2, #4294967295
 80061a6:	44a0      	add	r8, r4
 80061a8:	bf1e      	ittt	ne
 80061aa:	4488      	addne	r8, r1
 80061ac:	4251      	negne	r1, r2
 80061ae:	ea01 0808 	andne.w	r8, r1, r8
 80061b2:	eb0b 0306 	add.w	r3, fp, r6
 80061b6:	4641      	mov	r1, r8
 80061b8:	4648      	mov	r0, r9
 80061ba:	9302      	str	r3, [sp, #8]
 80061bc:	f000 f8de 	bl	800637c <_sbrk_r>
 80061c0:	1c42      	adds	r2, r0, #1
 80061c2:	4607      	mov	r7, r0
 80061c4:	d06f      	beq.n	80062a6 <_malloc_r+0x3e2>
 80061c6:	9b02      	ldr	r3, [sp, #8]
 80061c8:	9a03      	ldr	r2, [sp, #12]
 80061ca:	4283      	cmp	r3, r0
 80061cc:	d901      	bls.n	80061d2 <_malloc_r+0x30e>
 80061ce:	45ab      	cmp	fp, r5
 80061d0:	d169      	bne.n	80062a6 <_malloc_r+0x3e2>
 80061d2:	f8df a128 	ldr.w	sl, [pc, #296]	; 80062fc <_malloc_r+0x438>
 80061d6:	f8df c128 	ldr.w	ip, [pc, #296]	; 8006300 <_malloc_r+0x43c>
 80061da:	f8da 0000 	ldr.w	r0, [sl]
 80061de:	42bb      	cmp	r3, r7
 80061e0:	4440      	add	r0, r8
 80061e2:	f8ca 0000 	str.w	r0, [sl]
 80061e6:	d108      	bne.n	80061fa <_malloc_r+0x336>
 80061e8:	ea13 0f0c 	tst.w	r3, ip
 80061ec:	d105      	bne.n	80061fa <_malloc_r+0x336>
 80061ee:	68ab      	ldr	r3, [r5, #8]
 80061f0:	4446      	add	r6, r8
 80061f2:	f046 0601 	orr.w	r6, r6, #1
 80061f6:	605e      	str	r6, [r3, #4]
 80061f8:	e049      	b.n	800628e <_malloc_r+0x3ca>
 80061fa:	9901      	ldr	r1, [sp, #4]
 80061fc:	f8d1 e000 	ldr.w	lr, [r1]
 8006200:	f1be 3fff 	cmp.w	lr, #4294967295
 8006204:	bf15      	itete	ne
 8006206:	1afb      	subne	r3, r7, r3
 8006208:	4b38      	ldreq	r3, [pc, #224]	; (80062ec <_malloc_r+0x428>)
 800620a:	181b      	addne	r3, r3, r0
 800620c:	601f      	streq	r7, [r3, #0]
 800620e:	bf18      	it	ne
 8006210:	f8ca 3000 	strne.w	r3, [sl]
 8006214:	f017 0307 	ands.w	r3, r7, #7
 8006218:	bf1c      	itt	ne
 800621a:	f1c3 0308 	rsbne	r3, r3, #8
 800621e:	18ff      	addne	r7, r7, r3
 8006220:	44b8      	add	r8, r7
 8006222:	441a      	add	r2, r3
 8006224:	ea08 080c 	and.w	r8, r8, ip
 8006228:	ebc8 0802 	rsb	r8, r8, r2
 800622c:	4641      	mov	r1, r8
 800622e:	4648      	mov	r0, r9
 8006230:	f000 f8a4 	bl	800637c <_sbrk_r>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	bf04      	itt	eq
 8006238:	4638      	moveq	r0, r7
 800623a:	f04f 0800 	moveq.w	r8, #0
 800623e:	f8da 3000 	ldr.w	r3, [sl]
 8006242:	60af      	str	r7, [r5, #8]
 8006244:	1bc2      	subs	r2, r0, r7
 8006246:	4442      	add	r2, r8
 8006248:	4443      	add	r3, r8
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	45ab      	cmp	fp, r5
 8006250:	f8ca 3000 	str.w	r3, [sl]
 8006254:	607a      	str	r2, [r7, #4]
 8006256:	d01a      	beq.n	800628e <_malloc_r+0x3ca>
 8006258:	2e0f      	cmp	r6, #15
 800625a:	d802      	bhi.n	8006262 <_malloc_r+0x39e>
 800625c:	2301      	movs	r3, #1
 800625e:	607b      	str	r3, [r7, #4]
 8006260:	e021      	b.n	80062a6 <_malloc_r+0x3e2>
 8006262:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006266:	3e0c      	subs	r6, #12
 8006268:	f026 0607 	bic.w	r6, r6, #7
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	4333      	orrs	r3, r6
 8006272:	f8cb 3004 	str.w	r3, [fp, #4]
 8006276:	eb0b 0306 	add.w	r3, fp, r6
 800627a:	2205      	movs	r2, #5
 800627c:	2e0f      	cmp	r6, #15
 800627e:	605a      	str	r2, [r3, #4]
 8006280:	609a      	str	r2, [r3, #8]
 8006282:	d904      	bls.n	800628e <_malloc_r+0x3ca>
 8006284:	f10b 0108 	add.w	r1, fp, #8
 8006288:	4648      	mov	r0, r9
 800628a:	f000 f8dd 	bl	8006448 <_free_r>
 800628e:	4a19      	ldr	r2, [pc, #100]	; (80062f4 <_malloc_r+0x430>)
 8006290:	f8da 3000 	ldr.w	r3, [sl]
 8006294:	6811      	ldr	r1, [r2, #0]
 8006296:	428b      	cmp	r3, r1
 8006298:	bf88      	it	hi
 800629a:	6013      	strhi	r3, [r2, #0]
 800629c:	4a16      	ldr	r2, [pc, #88]	; (80062f8 <_malloc_r+0x434>)
 800629e:	6811      	ldr	r1, [r2, #0]
 80062a0:	428b      	cmp	r3, r1
 80062a2:	bf88      	it	hi
 80062a4:	6013      	strhi	r3, [r2, #0]
 80062a6:	68ab      	ldr	r3, [r5, #8]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	f022 0203 	bic.w	r2, r2, #3
 80062ae:	4294      	cmp	r4, r2
 80062b0:	eba2 0304 	sub.w	r3, r2, r4
 80062b4:	d801      	bhi.n	80062ba <_malloc_r+0x3f6>
 80062b6:	2b0f      	cmp	r3, #15
 80062b8:	dc04      	bgt.n	80062c4 <_malloc_r+0x400>
 80062ba:	4648      	mov	r0, r9
 80062bc:	f000 f823 	bl	8006306 <__malloc_unlock>
 80062c0:	2600      	movs	r6, #0
 80062c2:	e00c      	b.n	80062de <_malloc_r+0x41a>
 80062c4:	68ae      	ldr	r6, [r5, #8]
 80062c6:	f044 0201 	orr.w	r2, r4, #1
 80062ca:	4434      	add	r4, r6
 80062cc:	f043 0301 	orr.w	r3, r3, #1
 80062d0:	6072      	str	r2, [r6, #4]
 80062d2:	60ac      	str	r4, [r5, #8]
 80062d4:	6063      	str	r3, [r4, #4]
 80062d6:	4648      	mov	r0, r9
 80062d8:	f000 f815 	bl	8006306 <__malloc_unlock>
 80062dc:	3608      	adds	r6, #8
 80062de:	4630      	mov	r0, r6
 80062e0:	b005      	add	sp, #20
 80062e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e6:	bf00      	nop
 80062e8:	20004980 	.word	0x20004980
 80062ec:	2000059c 	.word	0x2000059c
 80062f0:	00000080 	.word	0x00000080
 80062f4:	2000497c 	.word	0x2000497c
 80062f8:	20004978 	.word	0x20004978
 80062fc:	20004984 	.word	0x20004984
 8006300:	0000007f 	.word	0x0000007f

08006304 <__malloc_lock>:
 8006304:	4770      	bx	lr

08006306 <__malloc_unlock>:
 8006306:	4770      	bx	lr

08006308 <rand>:
 8006308:	4b19      	ldr	r3, [pc, #100]	; (8006370 <rand+0x68>)
 800630a:	b510      	push	{r4, lr}
 800630c:	681c      	ldr	r4, [r3, #0]
 800630e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006310:	b9d3      	cbnz	r3, 8006348 <rand+0x40>
 8006312:	2018      	movs	r0, #24
 8006314:	f7ff fdce 	bl	8005eb4 <malloc>
 8006318:	f243 330e 	movw	r3, #13070	; 0x330e
 800631c:	63a0      	str	r0, [r4, #56]	; 0x38
 800631e:	8003      	strh	r3, [r0, #0]
 8006320:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8006324:	8043      	strh	r3, [r0, #2]
 8006326:	f241 2334 	movw	r3, #4660	; 0x1234
 800632a:	8083      	strh	r3, [r0, #4]
 800632c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8006330:	80c3      	strh	r3, [r0, #6]
 8006332:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8006336:	8103      	strh	r3, [r0, #8]
 8006338:	2305      	movs	r3, #5
 800633a:	8143      	strh	r3, [r0, #10]
 800633c:	230b      	movs	r3, #11
 800633e:	8183      	strh	r3, [r0, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	2300      	movs	r3, #0
 8006344:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006348:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800634a:	4c0a      	ldr	r4, [pc, #40]	; (8006374 <rand+0x6c>)
 800634c:	690b      	ldr	r3, [r1, #16]
 800634e:	6948      	ldr	r0, [r1, #20]
 8006350:	4a09      	ldr	r2, [pc, #36]	; (8006378 <rand+0x70>)
 8006352:	435c      	muls	r4, r3
 8006354:	fb02 4000 	mla	r0, r2, r0, r4
 8006358:	fba3 2302 	umull	r2, r3, r3, r2
 800635c:	3201      	adds	r2, #1
 800635e:	4403      	add	r3, r0
 8006360:	f143 0300 	adc.w	r3, r3, #0
 8006364:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8006368:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800636c:	bd10      	pop	{r4, pc}
 800636e:	bf00      	nop
 8006370:	2000018c 	.word	0x2000018c
 8006374:	5851f42d 	.word	0x5851f42d
 8006378:	4c957f2d 	.word	0x4c957f2d

0800637c <_sbrk_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4c06      	ldr	r4, [pc, #24]	; (8006398 <_sbrk_r+0x1c>)
 8006380:	2300      	movs	r3, #0
 8006382:	4605      	mov	r5, r0
 8006384:	4608      	mov	r0, r1
 8006386:	6023      	str	r3, [r4, #0]
 8006388:	f001 ff4e 	bl	8008228 <_sbrk>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_sbrk_r+0x1a>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	b103      	cbz	r3, 8006396 <_sbrk_r+0x1a>
 8006394:	602b      	str	r3, [r5, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	20006adc 	.word	0x20006adc

0800639c <_malloc_trim_r>:
 800639c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063a0:	4f25      	ldr	r7, [pc, #148]	; (8006438 <_malloc_trim_r+0x9c>)
 80063a2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006444 <_malloc_trim_r+0xa8>
 80063a6:	4689      	mov	r9, r1
 80063a8:	4606      	mov	r6, r0
 80063aa:	f7ff ffab 	bl	8006304 <__malloc_lock>
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	685d      	ldr	r5, [r3, #4]
 80063b2:	f1a8 0411 	sub.w	r4, r8, #17
 80063b6:	f025 0503 	bic.w	r5, r5, #3
 80063ba:	442c      	add	r4, r5
 80063bc:	ebc9 0404 	rsb	r4, r9, r4
 80063c0:	fbb4 f4f8 	udiv	r4, r4, r8
 80063c4:	3c01      	subs	r4, #1
 80063c6:	fb08 f404 	mul.w	r4, r8, r4
 80063ca:	4544      	cmp	r4, r8
 80063cc:	da05      	bge.n	80063da <_malloc_trim_r+0x3e>
 80063ce:	4630      	mov	r0, r6
 80063d0:	f7ff ff99 	bl	8006306 <__malloc_unlock>
 80063d4:	2000      	movs	r0, #0
 80063d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063da:	2100      	movs	r1, #0
 80063dc:	4630      	mov	r0, r6
 80063de:	f7ff ffcd 	bl	800637c <_sbrk_r>
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	442b      	add	r3, r5
 80063e6:	4298      	cmp	r0, r3
 80063e8:	d1f1      	bne.n	80063ce <_malloc_trim_r+0x32>
 80063ea:	4261      	negs	r1, r4
 80063ec:	4630      	mov	r0, r6
 80063ee:	f7ff ffc5 	bl	800637c <_sbrk_r>
 80063f2:	3001      	adds	r0, #1
 80063f4:	d110      	bne.n	8006418 <_malloc_trim_r+0x7c>
 80063f6:	2100      	movs	r1, #0
 80063f8:	4630      	mov	r0, r6
 80063fa:	f7ff ffbf 	bl	800637c <_sbrk_r>
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	1a83      	subs	r3, r0, r2
 8006402:	2b0f      	cmp	r3, #15
 8006404:	dde3      	ble.n	80063ce <_malloc_trim_r+0x32>
 8006406:	490d      	ldr	r1, [pc, #52]	; (800643c <_malloc_trim_r+0xa0>)
 8006408:	6809      	ldr	r1, [r1, #0]
 800640a:	1a40      	subs	r0, r0, r1
 800640c:	490c      	ldr	r1, [pc, #48]	; (8006440 <_malloc_trim_r+0xa4>)
 800640e:	f043 0301 	orr.w	r3, r3, #1
 8006412:	6008      	str	r0, [r1, #0]
 8006414:	6053      	str	r3, [r2, #4]
 8006416:	e7da      	b.n	80063ce <_malloc_trim_r+0x32>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4a09      	ldr	r2, [pc, #36]	; (8006440 <_malloc_trim_r+0xa4>)
 800641c:	1b2d      	subs	r5, r5, r4
 800641e:	f045 0501 	orr.w	r5, r5, #1
 8006422:	605d      	str	r5, [r3, #4]
 8006424:	6813      	ldr	r3, [r2, #0]
 8006426:	4630      	mov	r0, r6
 8006428:	1b1c      	subs	r4, r3, r4
 800642a:	6014      	str	r4, [r2, #0]
 800642c:	f7ff ff6b 	bl	8006306 <__malloc_unlock>
 8006430:	2001      	movs	r0, #1
 8006432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006436:	bf00      	nop
 8006438:	20000190 	.word	0x20000190
 800643c:	2000059c 	.word	0x2000059c
 8006440:	20004984 	.word	0x20004984
 8006444:	00000080 	.word	0x00000080

08006448 <_free_r>:
 8006448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800644c:	4604      	mov	r4, r0
 800644e:	4688      	mov	r8, r1
 8006450:	2900      	cmp	r1, #0
 8006452:	f000 80ad 	beq.w	80065b0 <_free_r+0x168>
 8006456:	f7ff ff55 	bl	8006304 <__malloc_lock>
 800645a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800645e:	4d55      	ldr	r5, [pc, #340]	; (80065b4 <_free_r+0x16c>)
 8006460:	f022 0001 	bic.w	r0, r2, #1
 8006464:	f1a8 0308 	sub.w	r3, r8, #8
 8006468:	181f      	adds	r7, r3, r0
 800646a:	68a9      	ldr	r1, [r5, #8]
 800646c:	687e      	ldr	r6, [r7, #4]
 800646e:	428f      	cmp	r7, r1
 8006470:	f026 0603 	bic.w	r6, r6, #3
 8006474:	f002 0201 	and.w	r2, r2, #1
 8006478:	d11b      	bne.n	80064b2 <_free_r+0x6a>
 800647a:	4430      	add	r0, r6
 800647c:	b93a      	cbnz	r2, 800648e <_free_r+0x46>
 800647e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8006482:	1a9b      	subs	r3, r3, r2
 8006484:	4410      	add	r0, r2
 8006486:	6899      	ldr	r1, [r3, #8]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	60ca      	str	r2, [r1, #12]
 800648c:	6091      	str	r1, [r2, #8]
 800648e:	f040 0201 	orr.w	r2, r0, #1
 8006492:	605a      	str	r2, [r3, #4]
 8006494:	60ab      	str	r3, [r5, #8]
 8006496:	4b48      	ldr	r3, [pc, #288]	; (80065b8 <_free_r+0x170>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4298      	cmp	r0, r3
 800649c:	d304      	bcc.n	80064a8 <_free_r+0x60>
 800649e:	4b47      	ldr	r3, [pc, #284]	; (80065bc <_free_r+0x174>)
 80064a0:	4620      	mov	r0, r4
 80064a2:	6819      	ldr	r1, [r3, #0]
 80064a4:	f7ff ff7a 	bl	800639c <_malloc_trim_r>
 80064a8:	4620      	mov	r0, r4
 80064aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ae:	f7ff bf2a 	b.w	8006306 <__malloc_unlock>
 80064b2:	607e      	str	r6, [r7, #4]
 80064b4:	b97a      	cbnz	r2, 80064d6 <_free_r+0x8e>
 80064b6:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80064ba:	1a5b      	subs	r3, r3, r1
 80064bc:	4408      	add	r0, r1
 80064be:	6899      	ldr	r1, [r3, #8]
 80064c0:	f105 0e08 	add.w	lr, r5, #8
 80064c4:	4571      	cmp	r1, lr
 80064c6:	d008      	beq.n	80064da <_free_r+0x92>
 80064c8:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80064cc:	f8c1 e00c 	str.w	lr, [r1, #12]
 80064d0:	f8ce 1008 	str.w	r1, [lr, #8]
 80064d4:	e002      	b.n	80064dc <_free_r+0x94>
 80064d6:	2200      	movs	r2, #0
 80064d8:	e000      	b.n	80064dc <_free_r+0x94>
 80064da:	2201      	movs	r2, #1
 80064dc:	19b9      	adds	r1, r7, r6
 80064de:	6849      	ldr	r1, [r1, #4]
 80064e0:	07c9      	lsls	r1, r1, #31
 80064e2:	d40e      	bmi.n	8006502 <_free_r+0xba>
 80064e4:	4430      	add	r0, r6
 80064e6:	68b9      	ldr	r1, [r7, #8]
 80064e8:	b942      	cbnz	r2, 80064fc <_free_r+0xb4>
 80064ea:	4e35      	ldr	r6, [pc, #212]	; (80065c0 <_free_r+0x178>)
 80064ec:	42b1      	cmp	r1, r6
 80064ee:	d105      	bne.n	80064fc <_free_r+0xb4>
 80064f0:	616b      	str	r3, [r5, #20]
 80064f2:	612b      	str	r3, [r5, #16]
 80064f4:	2201      	movs	r2, #1
 80064f6:	60d9      	str	r1, [r3, #12]
 80064f8:	6099      	str	r1, [r3, #8]
 80064fa:	e002      	b.n	8006502 <_free_r+0xba>
 80064fc:	68fe      	ldr	r6, [r7, #12]
 80064fe:	60ce      	str	r6, [r1, #12]
 8006500:	60b1      	str	r1, [r6, #8]
 8006502:	f040 0101 	orr.w	r1, r0, #1
 8006506:	6059      	str	r1, [r3, #4]
 8006508:	5018      	str	r0, [r3, r0]
 800650a:	2a00      	cmp	r2, #0
 800650c:	d1cc      	bne.n	80064a8 <_free_r+0x60>
 800650e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006512:	d212      	bcs.n	800653a <_free_r+0xf2>
 8006514:	08c0      	lsrs	r0, r0, #3
 8006516:	1081      	asrs	r1, r0, #2
 8006518:	2201      	movs	r2, #1
 800651a:	fa02 f101 	lsl.w	r1, r2, r1
 800651e:	686a      	ldr	r2, [r5, #4]
 8006520:	3001      	adds	r0, #1
 8006522:	430a      	orrs	r2, r1
 8006524:	606a      	str	r2, [r5, #4]
 8006526:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800652a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800652e:	6099      	str	r1, [r3, #8]
 8006530:	3a08      	subs	r2, #8
 8006532:	60da      	str	r2, [r3, #12]
 8006534:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006538:	e038      	b.n	80065ac <_free_r+0x164>
 800653a:	0a42      	lsrs	r2, r0, #9
 800653c:	2a04      	cmp	r2, #4
 800653e:	d802      	bhi.n	8006546 <_free_r+0xfe>
 8006540:	0982      	lsrs	r2, r0, #6
 8006542:	3238      	adds	r2, #56	; 0x38
 8006544:	e015      	b.n	8006572 <_free_r+0x12a>
 8006546:	2a14      	cmp	r2, #20
 8006548:	d801      	bhi.n	800654e <_free_r+0x106>
 800654a:	325b      	adds	r2, #91	; 0x5b
 800654c:	e011      	b.n	8006572 <_free_r+0x12a>
 800654e:	2a54      	cmp	r2, #84	; 0x54
 8006550:	d802      	bhi.n	8006558 <_free_r+0x110>
 8006552:	0b02      	lsrs	r2, r0, #12
 8006554:	326e      	adds	r2, #110	; 0x6e
 8006556:	e00c      	b.n	8006572 <_free_r+0x12a>
 8006558:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800655c:	d802      	bhi.n	8006564 <_free_r+0x11c>
 800655e:	0bc2      	lsrs	r2, r0, #15
 8006560:	3277      	adds	r2, #119	; 0x77
 8006562:	e006      	b.n	8006572 <_free_r+0x12a>
 8006564:	f240 5154 	movw	r1, #1364	; 0x554
 8006568:	428a      	cmp	r2, r1
 800656a:	bf9a      	itte	ls
 800656c:	0c82      	lsrls	r2, r0, #18
 800656e:	327c      	addls	r2, #124	; 0x7c
 8006570:	227e      	movhi	r2, #126	; 0x7e
 8006572:	1c51      	adds	r1, r2, #1
 8006574:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8006578:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800657c:	4f0d      	ldr	r7, [pc, #52]	; (80065b4 <_free_r+0x16c>)
 800657e:	428e      	cmp	r6, r1
 8006580:	d10b      	bne.n	800659a <_free_r+0x152>
 8006582:	2101      	movs	r1, #1
 8006584:	1092      	asrs	r2, r2, #2
 8006586:	fa01 f202 	lsl.w	r2, r1, r2
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	4311      	orrs	r1, r2
 800658e:	6079      	str	r1, [r7, #4]
 8006590:	4631      	mov	r1, r6
 8006592:	e008      	b.n	80065a6 <_free_r+0x15e>
 8006594:	6889      	ldr	r1, [r1, #8]
 8006596:	428e      	cmp	r6, r1
 8006598:	d004      	beq.n	80065a4 <_free_r+0x15c>
 800659a:	684a      	ldr	r2, [r1, #4]
 800659c:	f022 0203 	bic.w	r2, r2, #3
 80065a0:	4290      	cmp	r0, r2
 80065a2:	d3f7      	bcc.n	8006594 <_free_r+0x14c>
 80065a4:	68ce      	ldr	r6, [r1, #12]
 80065a6:	60de      	str	r6, [r3, #12]
 80065a8:	6099      	str	r1, [r3, #8]
 80065aa:	60b3      	str	r3, [r6, #8]
 80065ac:	60cb      	str	r3, [r1, #12]
 80065ae:	e77b      	b.n	80064a8 <_free_r+0x60>
 80065b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b4:	20000190 	.word	0x20000190
 80065b8:	20000598 	.word	0x20000598
 80065bc:	20004980 	.word	0x20004980
 80065c0:	20000198 	.word	0x20000198
 80065c4:	00000000 	.word	0x00000000

080065c8 <cos>:
 80065c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065ca:	ec51 0b10 	vmov	r0, r1, d0
 80065ce:	4a1e      	ldr	r2, [pc, #120]	; (8006648 <cos+0x80>)
 80065d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80065d4:	4293      	cmp	r3, r2
 80065d6:	dc02      	bgt.n	80065de <cos+0x16>
 80065d8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006640 <cos+0x78>
 80065dc:	e016      	b.n	800660c <cos+0x44>
 80065de:	4a1b      	ldr	r2, [pc, #108]	; (800664c <cos+0x84>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	dd05      	ble.n	80065f0 <cos+0x28>
 80065e4:	ee10 2a10 	vmov	r2, s0
 80065e8:	460b      	mov	r3, r1
 80065ea:	f7f9 fdf1 	bl	80001d0 <__aeabi_dsub>
 80065ee:	e021      	b.n	8006634 <cos+0x6c>
 80065f0:	4668      	mov	r0, sp
 80065f2:	f000 f9f1 	bl	80069d8 <__ieee754_rem_pio2>
 80065f6:	f000 0003 	and.w	r0, r0, #3
 80065fa:	2801      	cmp	r0, #1
 80065fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006600:	ed9d 0b00 	vldr	d0, [sp]
 8006604:	d005      	beq.n	8006612 <cos+0x4a>
 8006606:	2802      	cmp	r0, #2
 8006608:	d006      	beq.n	8006618 <cos+0x50>
 800660a:	b970      	cbnz	r0, 800662a <cos+0x62>
 800660c:	f000 fef0 	bl	80073f0 <__kernel_cos>
 8006610:	e00e      	b.n	8006630 <cos+0x68>
 8006612:	f001 fb25 	bl	8007c60 <__kernel_sin>
 8006616:	e001      	b.n	800661c <cos+0x54>
 8006618:	f000 feea 	bl	80073f0 <__kernel_cos>
 800661c:	ec53 2b10 	vmov	r2, r3, d0
 8006620:	ee10 0a10 	vmov	r0, s0
 8006624:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006628:	e004      	b.n	8006634 <cos+0x6c>
 800662a:	2001      	movs	r0, #1
 800662c:	f001 fb18 	bl	8007c60 <__kernel_sin>
 8006630:	ec51 0b10 	vmov	r0, r1, d0
 8006634:	ec41 0b10 	vmov	d0, r0, r1
 8006638:	b005      	add	sp, #20
 800663a:	f85d fb04 	ldr.w	pc, [sp], #4
 800663e:	bf00      	nop
	...
 8006648:	3fe921fb 	.word	0x3fe921fb
 800664c:	7fefffff 	.word	0x7fefffff

08006650 <sin>:
 8006650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006652:	ec51 0b10 	vmov	r0, r1, d0
 8006656:	4a20      	ldr	r2, [pc, #128]	; (80066d8 <sin+0x88>)
 8006658:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800665c:	4293      	cmp	r3, r2
 800665e:	dc03      	bgt.n	8006668 <sin+0x18>
 8006660:	2000      	movs	r0, #0
 8006662:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80066d0 <sin+0x80>
 8006666:	e017      	b.n	8006698 <sin+0x48>
 8006668:	4a1c      	ldr	r2, [pc, #112]	; (80066dc <sin+0x8c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	dd05      	ble.n	800667a <sin+0x2a>
 800666e:	ee10 2a10 	vmov	r2, s0
 8006672:	460b      	mov	r3, r1
 8006674:	f7f9 fdac 	bl	80001d0 <__aeabi_dsub>
 8006678:	e022      	b.n	80066c0 <sin+0x70>
 800667a:	4668      	mov	r0, sp
 800667c:	f000 f9ac 	bl	80069d8 <__ieee754_rem_pio2>
 8006680:	f000 0003 	and.w	r0, r0, #3
 8006684:	2801      	cmp	r0, #1
 8006686:	ed9d 1b02 	vldr	d1, [sp, #8]
 800668a:	ed9d 0b00 	vldr	d0, [sp]
 800668e:	d008      	beq.n	80066a2 <sin+0x52>
 8006690:	2802      	cmp	r0, #2
 8006692:	d009      	beq.n	80066a8 <sin+0x58>
 8006694:	b960      	cbnz	r0, 80066b0 <sin+0x60>
 8006696:	2001      	movs	r0, #1
 8006698:	f001 fae2 	bl	8007c60 <__kernel_sin>
 800669c:	ec51 0b10 	vmov	r0, r1, d0
 80066a0:	e00e      	b.n	80066c0 <sin+0x70>
 80066a2:	f000 fea5 	bl	80073f0 <__kernel_cos>
 80066a6:	e7f9      	b.n	800669c <sin+0x4c>
 80066a8:	2001      	movs	r0, #1
 80066aa:	f001 fad9 	bl	8007c60 <__kernel_sin>
 80066ae:	e001      	b.n	80066b4 <sin+0x64>
 80066b0:	f000 fe9e 	bl	80073f0 <__kernel_cos>
 80066b4:	ec53 2b10 	vmov	r2, r3, d0
 80066b8:	ee10 0a10 	vmov	r0, s0
 80066bc:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80066c0:	ec41 0b10 	vmov	d0, r0, r1
 80066c4:	b005      	add	sp, #20
 80066c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w
	...
 80066d8:	3fe921fb 	.word	0x3fe921fb
 80066dc:	7fefffff 	.word	0x7fefffff

080066e0 <powf>:
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	ed2d 8b04 	vpush	{d8-d9}
 80066e6:	4cb5      	ldr	r4, [pc, #724]	; (80069bc <powf+0x2dc>)
 80066e8:	b08a      	sub	sp, #40	; 0x28
 80066ea:	eeb0 9a40 	vmov.f32	s18, s0
 80066ee:	eef0 8a60 	vmov.f32	s17, s1
 80066f2:	f000 fb6f 	bl	8006dd4 <__ieee754_powf>
 80066f6:	f994 5000 	ldrsb.w	r5, [r4]
 80066fa:	1c6b      	adds	r3, r5, #1
 80066fc:	eeb0 8a40 	vmov.f32	s16, s0
 8006700:	4626      	mov	r6, r4
 8006702:	f000 8153 	beq.w	80069ac <powf+0x2cc>
 8006706:	eef4 8a68 	vcmp.f32	s17, s17
 800670a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800670e:	f180 814d 	bvs.w	80069ac <powf+0x2cc>
 8006712:	eeb4 9a49 	vcmp.f32	s18, s18
 8006716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671a:	d71f      	bvc.n	800675c <powf+0x7c>
 800671c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006724:	f040 8142 	bne.w	80069ac <powf+0x2cc>
 8006728:	2301      	movs	r3, #1
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	4ba4      	ldr	r3, [pc, #656]	; (80069c0 <powf+0x2e0>)
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	ee19 0a10 	vmov	r0, s18
 8006734:	2300      	movs	r3, #0
 8006736:	9308      	str	r3, [sp, #32]
 8006738:	f7f9 feaa 	bl	8000490 <__aeabi_f2d>
 800673c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006740:	ee18 0a90 	vmov	r0, s17
 8006744:	f7f9 fea4 	bl	8000490 <__aeabi_f2d>
 8006748:	4b9e      	ldr	r3, [pc, #632]	; (80069c4 <powf+0x2e4>)
 800674a:	2200      	movs	r2, #0
 800674c:	2d02      	cmp	r5, #2
 800674e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006752:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006756:	f040 808d 	bne.w	8006874 <powf+0x194>
 800675a:	e122      	b.n	80069a2 <powf+0x2c2>
 800675c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006764:	d14c      	bne.n	8006800 <powf+0x120>
 8006766:	eef5 8a40 	vcmp.f32	s17, #0.0
 800676a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800676e:	d11c      	bne.n	80067aa <powf+0xca>
 8006770:	2301      	movs	r3, #1
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	4b92      	ldr	r3, [pc, #584]	; (80069c0 <powf+0x2e0>)
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	ee19 0a10 	vmov	r0, s18
 800677c:	2300      	movs	r3, #0
 800677e:	9308      	str	r3, [sp, #32]
 8006780:	f7f9 fe86 	bl	8000490 <__aeabi_f2d>
 8006784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006788:	ee18 0a90 	vmov	r0, s17
 800678c:	f7f9 fe80 	bl	8000490 <__aeabi_f2d>
 8006790:	2200      	movs	r2, #0
 8006792:	2300      	movs	r3, #0
 8006794:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006798:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800679c:	2d00      	cmp	r5, #0
 800679e:	d069      	beq.n	8006874 <powf+0x194>
 80067a0:	4b88      	ldr	r3, [pc, #544]	; (80069c4 <powf+0x2e4>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80067a8:	e0f5      	b.n	8006996 <powf+0x2b6>
 80067aa:	eeb0 0a68 	vmov.f32	s0, s17
 80067ae:	f001 fcac 	bl	800810a <finitef>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	f000 80fa 	beq.w	80069ac <powf+0x2cc>
 80067b8:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80067bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c0:	f140 80f4 	bpl.w	80069ac <powf+0x2cc>
 80067c4:	2301      	movs	r3, #1
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	4b7d      	ldr	r3, [pc, #500]	; (80069c0 <powf+0x2e0>)
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	ee19 0a10 	vmov	r0, s18
 80067d0:	2300      	movs	r3, #0
 80067d2:	9308      	str	r3, [sp, #32]
 80067d4:	f7f9 fe5c 	bl	8000490 <__aeabi_f2d>
 80067d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067dc:	ee18 0a90 	vmov	r0, s17
 80067e0:	f7f9 fe56 	bl	8000490 <__aeabi_f2d>
 80067e4:	f994 3000 	ldrsb.w	r3, [r4]
 80067e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067ec:	b913      	cbnz	r3, 80067f4 <powf+0x114>
 80067ee:	2200      	movs	r2, #0
 80067f0:	2300      	movs	r3, #0
 80067f2:	e034      	b.n	800685e <powf+0x17e>
 80067f4:	4974      	ldr	r1, [pc, #464]	; (80069c8 <powf+0x2e8>)
 80067f6:	2000      	movs	r0, #0
 80067f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	e038      	b.n	8006872 <powf+0x192>
 8006800:	f001 fc83 	bl	800810a <finitef>
 8006804:	4605      	mov	r5, r0
 8006806:	2800      	cmp	r0, #0
 8006808:	f040 8099 	bne.w	800693e <powf+0x25e>
 800680c:	eeb0 0a49 	vmov.f32	s0, s18
 8006810:	f001 fc7b 	bl	800810a <finitef>
 8006814:	2800      	cmp	r0, #0
 8006816:	f000 8092 	beq.w	800693e <powf+0x25e>
 800681a:	eeb0 0a68 	vmov.f32	s0, s17
 800681e:	f001 fc74 	bl	800810a <finitef>
 8006822:	2800      	cmp	r0, #0
 8006824:	f000 808b 	beq.w	800693e <powf+0x25e>
 8006828:	eeb4 8a48 	vcmp.f32	s16, s16
 800682c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006830:	f994 4000 	ldrsb.w	r4, [r4]
 8006834:	4b62      	ldr	r3, [pc, #392]	; (80069c0 <powf+0x2e0>)
 8006836:	d727      	bvc.n	8006888 <powf+0x1a8>
 8006838:	2201      	movs	r2, #1
 800683a:	ee19 0a10 	vmov	r0, s18
 800683e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006842:	9508      	str	r5, [sp, #32]
 8006844:	f7f9 fe24 	bl	8000490 <__aeabi_f2d>
 8006848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800684c:	ee18 0a90 	vmov	r0, s17
 8006850:	f7f9 fe1e 	bl	8000490 <__aeabi_f2d>
 8006854:	2200      	movs	r2, #0
 8006856:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800685a:	2300      	movs	r3, #0
 800685c:	b914      	cbnz	r4, 8006864 <powf+0x184>
 800685e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006862:	e007      	b.n	8006874 <powf+0x194>
 8006864:	4610      	mov	r0, r2
 8006866:	4619      	mov	r1, r3
 8006868:	f7f9 ff90 	bl	800078c <__aeabi_ddiv>
 800686c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006870:	2c02      	cmp	r4, #2
 8006872:	d005      	beq.n	8006880 <powf+0x1a0>
 8006874:	4668      	mov	r0, sp
 8006876:	f001 fb3b 	bl	8007ef0 <matherr>
 800687a:	2800      	cmp	r0, #0
 800687c:	f040 808b 	bne.w	8006996 <powf+0x2b6>
 8006880:	f001 fccc 	bl	800821c <__errno>
 8006884:	2321      	movs	r3, #33	; 0x21
 8006886:	e085      	b.n	8006994 <powf+0x2b4>
 8006888:	2203      	movs	r2, #3
 800688a:	ee19 0a10 	vmov	r0, s18
 800688e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006892:	9508      	str	r5, [sp, #32]
 8006894:	f7f9 fdfc 	bl	8000490 <__aeabi_f2d>
 8006898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800689c:	ee18 0a90 	vmov	r0, s17
 80068a0:	f7f9 fdf6 	bl	8000490 <__aeabi_f2d>
 80068a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068a8:	bb14      	cbnz	r4, 80068f0 <powf+0x210>
 80068aa:	4b48      	ldr	r3, [pc, #288]	; (80069cc <powf+0x2ec>)
 80068ac:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80068b0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80068b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80068bc:	d563      	bpl.n	8006986 <powf+0x2a6>
 80068be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80068c2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80068c6:	ee17 0a90 	vmov	r0, s15
 80068ca:	f7f9 fde1 	bl	8000490 <__aeabi_f2d>
 80068ce:	4604      	mov	r4, r0
 80068d0:	460d      	mov	r5, r1
 80068d2:	ec45 4b10 	vmov	d0, r4, r5
 80068d6:	f001 fb0d 	bl	8007ef4 <rint>
 80068da:	4620      	mov	r0, r4
 80068dc:	ec53 2b10 	vmov	r2, r3, d0
 80068e0:	4629      	mov	r1, r5
 80068e2:	f7fa f891 	bl	8000a08 <__aeabi_dcmpeq>
 80068e6:	bb28      	cbnz	r0, 8006934 <powf+0x254>
 80068e8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80068ec:	4b38      	ldr	r3, [pc, #224]	; (80069d0 <powf+0x2f0>)
 80068ee:	e01f      	b.n	8006930 <powf+0x250>
 80068f0:	4b38      	ldr	r3, [pc, #224]	; (80069d4 <powf+0x2f4>)
 80068f2:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80068f6:	2200      	movs	r2, #0
 80068f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006900:	d518      	bpl.n	8006934 <powf+0x254>
 8006902:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006906:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800690a:	ee17 0a90 	vmov	r0, s15
 800690e:	f7f9 fdbf 	bl	8000490 <__aeabi_f2d>
 8006912:	4604      	mov	r4, r0
 8006914:	460d      	mov	r5, r1
 8006916:	ec45 4b10 	vmov	d0, r4, r5
 800691a:	f001 faeb 	bl	8007ef4 <rint>
 800691e:	4620      	mov	r0, r4
 8006920:	ec53 2b10 	vmov	r2, r3, d0
 8006924:	4629      	mov	r1, r5
 8006926:	f7fa f86f 	bl	8000a08 <__aeabi_dcmpeq>
 800692a:	b918      	cbnz	r0, 8006934 <powf+0x254>
 800692c:	4b26      	ldr	r3, [pc, #152]	; (80069c8 <powf+0x2e8>)
 800692e:	2200      	movs	r2, #0
 8006930:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006934:	f996 3000 	ldrsb.w	r3, [r6]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d124      	bne.n	8006986 <powf+0x2a6>
 800693c:	e027      	b.n	800698e <powf+0x2ae>
 800693e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006946:	d131      	bne.n	80069ac <powf+0x2cc>
 8006948:	eeb0 0a49 	vmov.f32	s0, s18
 800694c:	f001 fbdd 	bl	800810a <finitef>
 8006950:	b360      	cbz	r0, 80069ac <powf+0x2cc>
 8006952:	eeb0 0a68 	vmov.f32	s0, s17
 8006956:	f001 fbd8 	bl	800810a <finitef>
 800695a:	b338      	cbz	r0, 80069ac <powf+0x2cc>
 800695c:	2304      	movs	r3, #4
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	4b17      	ldr	r3, [pc, #92]	; (80069c0 <powf+0x2e0>)
 8006962:	9301      	str	r3, [sp, #4]
 8006964:	ee19 0a10 	vmov	r0, s18
 8006968:	2300      	movs	r3, #0
 800696a:	9308      	str	r3, [sp, #32]
 800696c:	f7f9 fd90 	bl	8000490 <__aeabi_f2d>
 8006970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006974:	ee18 0a90 	vmov	r0, s17
 8006978:	f7f9 fd8a 	bl	8000490 <__aeabi_f2d>
 800697c:	2200      	movs	r2, #0
 800697e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006982:	2300      	movs	r3, #0
 8006984:	e7d4      	b.n	8006930 <powf+0x250>
 8006986:	4668      	mov	r0, sp
 8006988:	f001 fab2 	bl	8007ef0 <matherr>
 800698c:	b918      	cbnz	r0, 8006996 <powf+0x2b6>
 800698e:	f001 fc45 	bl	800821c <__errno>
 8006992:	2322      	movs	r3, #34	; 0x22
 8006994:	6003      	str	r3, [r0, #0]
 8006996:	9b08      	ldr	r3, [sp, #32]
 8006998:	b11b      	cbz	r3, 80069a2 <powf+0x2c2>
 800699a:	f001 fc3f 	bl	800821c <__errno>
 800699e:	9b08      	ldr	r3, [sp, #32]
 80069a0:	6003      	str	r3, [r0, #0]
 80069a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069a6:	f7fa f889 	bl	8000abc <__aeabi_d2f>
 80069aa:	e001      	b.n	80069b0 <powf+0x2d0>
 80069ac:	ee18 0a10 	vmov	r0, s16
 80069b0:	ee00 0a10 	vmov	s0, r0
 80069b4:	b00a      	add	sp, #40	; 0x28
 80069b6:	ecbd 8b04 	vpop	{d8-d9}
 80069ba:	bd70      	pop	{r4, r5, r6, pc}
 80069bc:	200005a0 	.word	0x200005a0
 80069c0:	08008ad0 	.word	0x08008ad0
 80069c4:	3ff00000 	.word	0x3ff00000
 80069c8:	fff00000 	.word	0xfff00000
 80069cc:	47efffff 	.word	0x47efffff
 80069d0:	c7efffff 	.word	0xc7efffff
 80069d4:	7ff00000 	.word	0x7ff00000

080069d8 <__ieee754_rem_pio2>:
 80069d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	ec55 4b10 	vmov	r4, r5, d0
 80069e0:	4bc7      	ldr	r3, [pc, #796]	; (8006d00 <__ieee754_rem_pio2+0x328>)
 80069e2:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80069e6:	4598      	cmp	r8, r3
 80069e8:	b08d      	sub	sp, #52	; 0x34
 80069ea:	4682      	mov	sl, r0
 80069ec:	46ab      	mov	fp, r5
 80069ee:	dc06      	bgt.n	80069fe <__ieee754_rem_pio2+0x26>
 80069f0:	2200      	movs	r2, #0
 80069f2:	2300      	movs	r3, #0
 80069f4:	ed8a 0b00 	vstr	d0, [sl]
 80069f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80069fc:	e160      	b.n	8006cc0 <__ieee754_rem_pio2+0x2e8>
 80069fe:	4bc1      	ldr	r3, [pc, #772]	; (8006d04 <__ieee754_rem_pio2+0x32c>)
 8006a00:	4598      	cmp	r8, r3
 8006a02:	dc71      	bgt.n	8006ae8 <__ieee754_rem_pio2+0x110>
 8006a04:	2d00      	cmp	r5, #0
 8006a06:	a3b0      	add	r3, pc, #704	; (adr r3, 8006cc8 <__ieee754_rem_pio2+0x2f0>)
 8006a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0c:	ee10 0a10 	vmov	r0, s0
 8006a10:	4629      	mov	r1, r5
 8006a12:	4ebd      	ldr	r6, [pc, #756]	; (8006d08 <__ieee754_rem_pio2+0x330>)
 8006a14:	dd33      	ble.n	8006a7e <__ieee754_rem_pio2+0xa6>
 8006a16:	f7f9 fbdb 	bl	80001d0 <__aeabi_dsub>
 8006a1a:	45b0      	cmp	r8, r6
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	460d      	mov	r5, r1
 8006a20:	d010      	beq.n	8006a44 <__ieee754_rem_pio2+0x6c>
 8006a22:	a3ab      	add	r3, pc, #684	; (adr r3, 8006cd0 <__ieee754_rem_pio2+0x2f8>)
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	f7f9 fbd2 	bl	80001d0 <__aeabi_dsub>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	e9ca 2300 	strd	r2, r3, [sl]
 8006a34:	4620      	mov	r0, r4
 8006a36:	4629      	mov	r1, r5
 8006a38:	f7f9 fbca 	bl	80001d0 <__aeabi_dsub>
 8006a3c:	a3a4      	add	r3, pc, #656	; (adr r3, 8006cd0 <__ieee754_rem_pio2+0x2f8>)
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	e016      	b.n	8006a72 <__ieee754_rem_pio2+0x9a>
 8006a44:	a3a4      	add	r3, pc, #656	; (adr r3, 8006cd8 <__ieee754_rem_pio2+0x300>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f7f9 fbc1 	bl	80001d0 <__aeabi_dsub>
 8006a4e:	a3a4      	add	r3, pc, #656	; (adr r3, 8006ce0 <__ieee754_rem_pio2+0x308>)
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	4604      	mov	r4, r0
 8006a56:	460d      	mov	r5, r1
 8006a58:	f7f9 fbba 	bl	80001d0 <__aeabi_dsub>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	e9ca 2300 	strd	r2, r3, [sl]
 8006a64:	4620      	mov	r0, r4
 8006a66:	4629      	mov	r1, r5
 8006a68:	f7f9 fbb2 	bl	80001d0 <__aeabi_dsub>
 8006a6c:	a39c      	add	r3, pc, #624	; (adr r3, 8006ce0 <__ieee754_rem_pio2+0x308>)
 8006a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a72:	f7f9 fbad 	bl	80001d0 <__aeabi_dsub>
 8006a76:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006a7a:	2001      	movs	r0, #1
 8006a7c:	e1a2      	b.n	8006dc4 <__ieee754_rem_pio2+0x3ec>
 8006a7e:	f7f9 fba9 	bl	80001d4 <__adddf3>
 8006a82:	45b0      	cmp	r8, r6
 8006a84:	4604      	mov	r4, r0
 8006a86:	460d      	mov	r5, r1
 8006a88:	d010      	beq.n	8006aac <__ieee754_rem_pio2+0xd4>
 8006a8a:	a391      	add	r3, pc, #580	; (adr r3, 8006cd0 <__ieee754_rem_pio2+0x2f8>)
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f7f9 fba0 	bl	80001d4 <__adddf3>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	e9ca 2300 	strd	r2, r3, [sl]
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	f7f9 fb96 	bl	80001d0 <__aeabi_dsub>
 8006aa4:	a38a      	add	r3, pc, #552	; (adr r3, 8006cd0 <__ieee754_rem_pio2+0x2f8>)
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	e016      	b.n	8006ada <__ieee754_rem_pio2+0x102>
 8006aac:	a38a      	add	r3, pc, #552	; (adr r3, 8006cd8 <__ieee754_rem_pio2+0x300>)
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f7f9 fb8f 	bl	80001d4 <__adddf3>
 8006ab6:	a38a      	add	r3, pc, #552	; (adr r3, 8006ce0 <__ieee754_rem_pio2+0x308>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	4604      	mov	r4, r0
 8006abe:	460d      	mov	r5, r1
 8006ac0:	f7f9 fb88 	bl	80001d4 <__adddf3>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	e9ca 2300 	strd	r2, r3, [sl]
 8006acc:	4620      	mov	r0, r4
 8006ace:	4629      	mov	r1, r5
 8006ad0:	f7f9 fb7e 	bl	80001d0 <__aeabi_dsub>
 8006ad4:	a382      	add	r3, pc, #520	; (adr r3, 8006ce0 <__ieee754_rem_pio2+0x308>)
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	f7f9 fb7b 	bl	80001d4 <__adddf3>
 8006ade:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae6:	e16d      	b.n	8006dc4 <__ieee754_rem_pio2+0x3ec>
 8006ae8:	4b88      	ldr	r3, [pc, #544]	; (8006d0c <__ieee754_rem_pio2+0x334>)
 8006aea:	4598      	cmp	r8, r3
 8006aec:	f300 80da 	bgt.w	8006ca4 <__ieee754_rem_pio2+0x2cc>
 8006af0:	f001 f970 	bl	8007dd4 <fabs>
 8006af4:	ec55 4b10 	vmov	r4, r5, d0
 8006af8:	ee10 0a10 	vmov	r0, s0
 8006afc:	a37a      	add	r3, pc, #488	; (adr r3, 8006ce8 <__ieee754_rem_pio2+0x310>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	4629      	mov	r1, r5
 8006b04:	f7f9 fd18 	bl	8000538 <__aeabi_dmul>
 8006b08:	2200      	movs	r2, #0
 8006b0a:	4b81      	ldr	r3, [pc, #516]	; (8006d10 <__ieee754_rem_pio2+0x338>)
 8006b0c:	f7f9 fb62 	bl	80001d4 <__adddf3>
 8006b10:	f7f9 ffac 	bl	8000a6c <__aeabi_d2iz>
 8006b14:	4681      	mov	r9, r0
 8006b16:	f7f9 fca9 	bl	800046c <__aeabi_i2d>
 8006b1a:	a36b      	add	r3, pc, #428	; (adr r3, 8006cc8 <__ieee754_rem_pio2+0x2f0>)
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b24:	f7f9 fd08 	bl	8000538 <__aeabi_dmul>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	4629      	mov	r1, r5
 8006b30:	f7f9 fb4e 	bl	80001d0 <__aeabi_dsub>
 8006b34:	a366      	add	r3, pc, #408	; (adr r3, 8006cd0 <__ieee754_rem_pio2+0x2f8>)
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	460d      	mov	r5, r1
 8006b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b42:	f7f9 fcf9 	bl	8000538 <__aeabi_dmul>
 8006b46:	f1b9 0f1f 	cmp.w	r9, #31
 8006b4a:	4606      	mov	r6, r0
 8006b4c:	460f      	mov	r7, r1
 8006b4e:	dc06      	bgt.n	8006b5e <__ieee754_rem_pio2+0x186>
 8006b50:	f109 32ff 	add.w	r2, r9, #4294967295
 8006b54:	4b6f      	ldr	r3, [pc, #444]	; (8006d14 <__ieee754_rem_pio2+0x33c>)
 8006b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5a:	4598      	cmp	r8, r3
 8006b5c:	d172      	bne.n	8006c44 <__ieee754_rem_pio2+0x26c>
 8006b5e:	463b      	mov	r3, r7
 8006b60:	4632      	mov	r2, r6
 8006b62:	4620      	mov	r0, r4
 8006b64:	4629      	mov	r1, r5
 8006b66:	f7f9 fb33 	bl	80001d0 <__aeabi_dsub>
 8006b6a:	ea4f 5828 	mov.w	r8, r8, asr #20
 8006b6e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006b72:	ebc3 0308 	rsb	r3, r3, r8
 8006b76:	2b10      	cmp	r3, #16
 8006b78:	e9ca 0100 	strd	r0, r1, [sl]
 8006b7c:	dd6d      	ble.n	8006c5a <__ieee754_rem_pio2+0x282>
 8006b7e:	a356      	add	r3, pc, #344	; (adr r3, 8006cd8 <__ieee754_rem_pio2+0x300>)
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b88:	f7f9 fcd6 	bl	8000538 <__aeabi_dmul>
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	460f      	mov	r7, r1
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4620      	mov	r0, r4
 8006b96:	4629      	mov	r1, r5
 8006b98:	f7f9 fb1a 	bl	80001d0 <__aeabi_dsub>
 8006b9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	f7f9 fb12 	bl	80001d0 <__aeabi_dsub>
 8006bac:	4632      	mov	r2, r6
 8006bae:	463b      	mov	r3, r7
 8006bb0:	f7f9 fb0e 	bl	80001d0 <__aeabi_dsub>
 8006bb4:	a34a      	add	r3, pc, #296	; (adr r3, 8006ce0 <__ieee754_rem_pio2+0x308>)
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	4604      	mov	r4, r0
 8006bbc:	460d      	mov	r5, r1
 8006bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bc2:	f7f9 fcb9 	bl	8000538 <__aeabi_dmul>
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	462b      	mov	r3, r5
 8006bca:	f7f9 fb01 	bl	80001d0 <__aeabi_dsub>
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	460f      	mov	r7, r1
 8006bd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bda:	f7f9 faf9 	bl	80001d0 <__aeabi_dsub>
 8006bde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006be2:	ebc3 0808 	rsb	r8, r3, r8
 8006be6:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 8006bea:	e9ca 0100 	strd	r0, r1, [sl]
 8006bee:	dd32      	ble.n	8006c56 <__ieee754_rem_pio2+0x27e>
 8006bf0:	a33f      	add	r3, pc, #252	; (adr r3, 8006cf0 <__ieee754_rem_pio2+0x318>)
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bfa:	f7f9 fc9d 	bl	8000538 <__aeabi_dmul>
 8006bfe:	4606      	mov	r6, r0
 8006c00:	460f      	mov	r7, r1
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c0a:	f7f9 fae1 	bl	80001d0 <__aeabi_dsub>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	4604      	mov	r4, r0
 8006c14:	460d      	mov	r5, r1
 8006c16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c1a:	f7f9 fad9 	bl	80001d0 <__aeabi_dsub>
 8006c1e:	4632      	mov	r2, r6
 8006c20:	463b      	mov	r3, r7
 8006c22:	f7f9 fad5 	bl	80001d0 <__aeabi_dsub>
 8006c26:	a334      	add	r3, pc, #208	; (adr r3, 8006cf8 <__ieee754_rem_pio2+0x320>)
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	4606      	mov	r6, r0
 8006c2e:	460f      	mov	r7, r1
 8006c30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c34:	f7f9 fc80 	bl	8000538 <__aeabi_dmul>
 8006c38:	4632      	mov	r2, r6
 8006c3a:	463b      	mov	r3, r7
 8006c3c:	f7f9 fac8 	bl	80001d0 <__aeabi_dsub>
 8006c40:	4606      	mov	r6, r0
 8006c42:	460f      	mov	r7, r1
 8006c44:	4632      	mov	r2, r6
 8006c46:	463b      	mov	r3, r7
 8006c48:	4620      	mov	r0, r4
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	f7f9 fac0 	bl	80001d0 <__aeabi_dsub>
 8006c50:	e9ca 0100 	strd	r0, r1, [sl]
 8006c54:	e001      	b.n	8006c5a <__ieee754_rem_pio2+0x282>
 8006c56:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006c5a:	ed9a 7b00 	vldr	d7, [sl]
 8006c5e:	4620      	mov	r0, r4
 8006c60:	ec53 2b17 	vmov	r2, r3, d7
 8006c64:	4629      	mov	r1, r5
 8006c66:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c6a:	f7f9 fab1 	bl	80001d0 <__aeabi_dsub>
 8006c6e:	4632      	mov	r2, r6
 8006c70:	463b      	mov	r3, r7
 8006c72:	f7f9 faad 	bl	80001d0 <__aeabi_dsub>
 8006c76:	f1bb 0f00 	cmp.w	fp, #0
 8006c7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c7e:	f280 80a0 	bge.w	8006dc2 <__ieee754_rem_pio2+0x3ea>
 8006c82:	9b02      	ldr	r3, [sp, #8]
 8006c84:	f8ca 3000 	str.w	r3, [sl]
 8006c88:	9b03      	ldr	r3, [sp, #12]
 8006c8a:	f8ca 0008 	str.w	r0, [sl, #8]
 8006c8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006c92:	f8ca 3004 	str.w	r3, [sl, #4]
 8006c96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c9a:	f8ca 300c 	str.w	r3, [sl, #12]
 8006c9e:	f1c9 0000 	rsb	r0, r9, #0
 8006ca2:	e08f      	b.n	8006dc4 <__ieee754_rem_pio2+0x3ec>
 8006ca4:	4b1c      	ldr	r3, [pc, #112]	; (8006d18 <__ieee754_rem_pio2+0x340>)
 8006ca6:	4598      	cmp	r8, r3
 8006ca8:	dd38      	ble.n	8006d1c <__ieee754_rem_pio2+0x344>
 8006caa:	ee10 2a10 	vmov	r2, s0
 8006cae:	462b      	mov	r3, r5
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	f7f9 fa8c 	bl	80001d0 <__aeabi_dsub>
 8006cb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006cbc:	e9ca 0100 	strd	r0, r1, [sl]
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	e07f      	b.n	8006dc4 <__ieee754_rem_pio2+0x3ec>
 8006cc4:	f3af 8000 	nop.w
 8006cc8:	54400000 	.word	0x54400000
 8006ccc:	3ff921fb 	.word	0x3ff921fb
 8006cd0:	1a626331 	.word	0x1a626331
 8006cd4:	3dd0b461 	.word	0x3dd0b461
 8006cd8:	1a600000 	.word	0x1a600000
 8006cdc:	3dd0b461 	.word	0x3dd0b461
 8006ce0:	2e037073 	.word	0x2e037073
 8006ce4:	3ba3198a 	.word	0x3ba3198a
 8006ce8:	6dc9c883 	.word	0x6dc9c883
 8006cec:	3fe45f30 	.word	0x3fe45f30
 8006cf0:	2e000000 	.word	0x2e000000
 8006cf4:	3ba3198a 	.word	0x3ba3198a
 8006cf8:	252049c1 	.word	0x252049c1
 8006cfc:	397b839a 	.word	0x397b839a
 8006d00:	3fe921fb 	.word	0x3fe921fb
 8006d04:	4002d97b 	.word	0x4002d97b
 8006d08:	3ff921fb 	.word	0x3ff921fb
 8006d0c:	413921fb 	.word	0x413921fb
 8006d10:	3fe00000 	.word	0x3fe00000
 8006d14:	08008ad8 	.word	0x08008ad8
 8006d18:	7fefffff 	.word	0x7fefffff
 8006d1c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006d20:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006d24:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006d28:	4620      	mov	r0, r4
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	f7f9 fe9e 	bl	8000a6c <__aeabi_d2iz>
 8006d30:	f7f9 fb9c 	bl	800046c <__aeabi_i2d>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4620      	mov	r0, r4
 8006d3a:	4629      	mov	r1, r5
 8006d3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d40:	f7f9 fa46 	bl	80001d0 <__aeabi_dsub>
 8006d44:	2200      	movs	r2, #0
 8006d46:	4b21      	ldr	r3, [pc, #132]	; (8006dcc <__ieee754_rem_pio2+0x3f4>)
 8006d48:	f7f9 fbf6 	bl	8000538 <__aeabi_dmul>
 8006d4c:	460d      	mov	r5, r1
 8006d4e:	4604      	mov	r4, r0
 8006d50:	f7f9 fe8c 	bl	8000a6c <__aeabi_d2iz>
 8006d54:	f7f9 fb8a 	bl	800046c <__aeabi_i2d>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	4629      	mov	r1, r5
 8006d60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006d64:	f7f9 fa34 	bl	80001d0 <__aeabi_dsub>
 8006d68:	2200      	movs	r2, #0
 8006d6a:	4b18      	ldr	r3, [pc, #96]	; (8006dcc <__ieee754_rem_pio2+0x3f4>)
 8006d6c:	f7f9 fbe4 	bl	8000538 <__aeabi_dmul>
 8006d70:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d74:	ad0c      	add	r5, sp, #48	; 0x30
 8006d76:	2403      	movs	r4, #3
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	e975 0102 	ldrd	r0, r1, [r5, #-8]!
 8006d80:	1e67      	subs	r7, r4, #1
 8006d82:	f7f9 fe41 	bl	8000a08 <__aeabi_dcmpeq>
 8006d86:	b108      	cbz	r0, 8006d8c <__ieee754_rem_pio2+0x3b4>
 8006d88:	463c      	mov	r4, r7
 8006d8a:	e7f5      	b.n	8006d78 <__ieee754_rem_pio2+0x3a0>
 8006d8c:	4b10      	ldr	r3, [pc, #64]	; (8006dd0 <__ieee754_rem_pio2+0x3f8>)
 8006d8e:	9301      	str	r3, [sp, #4]
 8006d90:	2302      	movs	r3, #2
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	4632      	mov	r2, r6
 8006d96:	4623      	mov	r3, r4
 8006d98:	4651      	mov	r1, sl
 8006d9a:	a806      	add	r0, sp, #24
 8006d9c:	f000 fc10 	bl	80075c0 <__kernel_rem_pio2>
 8006da0:	f1bb 0f00 	cmp.w	fp, #0
 8006da4:	da0e      	bge.n	8006dc4 <__ieee754_rem_pio2+0x3ec>
 8006da6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006daa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006dae:	f8ca 3004 	str.w	r3, [sl, #4]
 8006db2:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006db6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006dba:	f8ca 300c 	str.w	r3, [sl, #12]
 8006dbe:	4240      	negs	r0, r0
 8006dc0:	e000      	b.n	8006dc4 <__ieee754_rem_pio2+0x3ec>
 8006dc2:	4648      	mov	r0, r9
 8006dc4:	b00d      	add	sp, #52	; 0x34
 8006dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dca:	bf00      	nop
 8006dcc:	41700000 	.word	0x41700000
 8006dd0:	08008b58 	.word	0x08008b58

08006dd4 <__ieee754_powf>:
 8006dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd8:	ee10 5a90 	vmov	r5, s1
 8006ddc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8006de0:	ed2d 8b02 	vpush	{d8}
 8006de4:	eeb0 8a40 	vmov.f32	s16, s0
 8006de8:	eef0 8a60 	vmov.f32	s17, s1
 8006dec:	f000 8298 	beq.w	8007320 <__ieee754_powf+0x54c>
 8006df0:	ee10 8a10 	vmov	r8, s0
 8006df4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8006df8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006dfc:	dc06      	bgt.n	8006e0c <__ieee754_powf+0x38>
 8006dfe:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006e02:	dd0a      	ble.n	8006e1a <__ieee754_powf+0x46>
 8006e04:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006e08:	f000 828a 	beq.w	8007320 <__ieee754_powf+0x54c>
 8006e0c:	ecbd 8b02 	vpop	{d8}
 8006e10:	48e2      	ldr	r0, [pc, #904]	; (800719c <__ieee754_powf+0x3c8>)
 8006e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e16:	f001 b983 	b.w	8008120 <nanf>
 8006e1a:	f1b8 0f00 	cmp.w	r8, #0
 8006e1e:	da13      	bge.n	8006e48 <__ieee754_powf+0x74>
 8006e20:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006e24:	da12      	bge.n	8006e4c <__ieee754_powf+0x78>
 8006e26:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006e2a:	db23      	blt.n	8006e74 <__ieee754_powf+0xa0>
 8006e2c:	15fb      	asrs	r3, r7, #23
 8006e2e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006e32:	fa47 f603 	asr.w	r6, r7, r3
 8006e36:	fa06 f303 	lsl.w	r3, r6, r3
 8006e3a:	429f      	cmp	r7, r3
 8006e3c:	d11a      	bne.n	8006e74 <__ieee754_powf+0xa0>
 8006e3e:	f006 0601 	and.w	r6, r6, #1
 8006e42:	f1c6 0602 	rsb	r6, r6, #2
 8006e46:	e016      	b.n	8006e76 <__ieee754_powf+0xa2>
 8006e48:	2600      	movs	r6, #0
 8006e4a:	e000      	b.n	8006e4e <__ieee754_powf+0x7a>
 8006e4c:	2602      	movs	r6, #2
 8006e4e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006e52:	d110      	bne.n	8006e76 <__ieee754_powf+0xa2>
 8006e54:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006e58:	f000 8262 	beq.w	8007320 <__ieee754_powf+0x54c>
 8006e5c:	dd05      	ble.n	8006e6a <__ieee754_powf+0x96>
 8006e5e:	2d00      	cmp	r5, #0
 8006e60:	f280 8261 	bge.w	8007326 <__ieee754_powf+0x552>
 8006e64:	ed9f 0ace 	vldr	s0, [pc, #824]	; 80071a0 <__ieee754_powf+0x3cc>
 8006e68:	e262      	b.n	8007330 <__ieee754_powf+0x55c>
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	dafa      	bge.n	8006e64 <__ieee754_powf+0x90>
 8006e6e:	eeb1 0a68 	vneg.f32	s0, s17
 8006e72:	e25d      	b.n	8007330 <__ieee754_powf+0x55c>
 8006e74:	2600      	movs	r6, #0
 8006e76:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006e7a:	d107      	bne.n	8006e8c <__ieee754_powf+0xb8>
 8006e7c:	2d00      	cmp	r5, #0
 8006e7e:	f280 8255 	bge.w	800732c <__ieee754_powf+0x558>
 8006e82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006e86:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006e8a:	e251      	b.n	8007330 <__ieee754_powf+0x55c>
 8006e8c:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8006e90:	d102      	bne.n	8006e98 <__ieee754_powf+0xc4>
 8006e92:	ee28 0a08 	vmul.f32	s0, s16, s16
 8006e96:	e24b      	b.n	8007330 <__ieee754_powf+0x55c>
 8006e98:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8006e9c:	eeb0 0a48 	vmov.f32	s0, s16
 8006ea0:	d108      	bne.n	8006eb4 <__ieee754_powf+0xe0>
 8006ea2:	f1b8 0f00 	cmp.w	r8, #0
 8006ea6:	db05      	blt.n	8006eb4 <__ieee754_powf+0xe0>
 8006ea8:	ecbd 8b02 	vpop	{d8}
 8006eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb0:	f000 ba56 	b.w	8007360 <__ieee754_sqrtf>
 8006eb4:	f001 f922 	bl	80080fc <fabsf>
 8006eb8:	b124      	cbz	r4, 8006ec4 <__ieee754_powf+0xf0>
 8006eba:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8006ebe:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006ec2:	d119      	bne.n	8006ef8 <__ieee754_powf+0x124>
 8006ec4:	2d00      	cmp	r5, #0
 8006ec6:	bfbc      	itt	lt
 8006ec8:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006ecc:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006ed0:	f1b8 0f00 	cmp.w	r8, #0
 8006ed4:	f280 822c 	bge.w	8007330 <__ieee754_powf+0x55c>
 8006ed8:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8006edc:	ea54 0306 	orrs.w	r3, r4, r6
 8006ee0:	d104      	bne.n	8006eec <__ieee754_powf+0x118>
 8006ee2:	ee70 0a40 	vsub.f32	s1, s0, s0
 8006ee6:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8006eea:	e221      	b.n	8007330 <__ieee754_powf+0x55c>
 8006eec:	2e01      	cmp	r6, #1
 8006eee:	f040 821f 	bne.w	8007330 <__ieee754_powf+0x55c>
 8006ef2:	eeb1 0a40 	vneg.f32	s0, s0
 8006ef6:	e21b      	b.n	8007330 <__ieee754_powf+0x55c>
 8006ef8:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8006efc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f00:	ea56 0308 	orrs.w	r3, r6, r8
 8006f04:	d104      	bne.n	8006f10 <__ieee754_powf+0x13c>
 8006f06:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006f0a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006f0e:	e20f      	b.n	8007330 <__ieee754_powf+0x55c>
 8006f10:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006f14:	dd3e      	ble.n	8006f94 <__ieee754_powf+0x1c0>
 8006f16:	4ba3      	ldr	r3, [pc, #652]	; (80071a4 <__ieee754_powf+0x3d0>)
 8006f18:	429c      	cmp	r4, r3
 8006f1a:	dc06      	bgt.n	8006f2a <__ieee754_powf+0x156>
 8006f1c:	2d00      	cmp	r5, #0
 8006f1e:	daa1      	bge.n	8006e64 <__ieee754_powf+0x90>
 8006f20:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 80071a8 <__ieee754_powf+0x3d4>
 8006f24:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006f28:	e202      	b.n	8007330 <__ieee754_powf+0x55c>
 8006f2a:	4ba0      	ldr	r3, [pc, #640]	; (80071ac <__ieee754_powf+0x3d8>)
 8006f2c:	429c      	cmp	r4, r3
 8006f2e:	dd02      	ble.n	8006f36 <__ieee754_powf+0x162>
 8006f30:	2d00      	cmp	r5, #0
 8006f32:	dcf5      	bgt.n	8006f20 <__ieee754_powf+0x14c>
 8006f34:	e796      	b.n	8006e64 <__ieee754_powf+0x90>
 8006f36:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006f3a:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006f3e:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80071b0 <__ieee754_powf+0x3dc>
 8006f42:	eef1 6a40 	vneg.f32	s13, s0
 8006f46:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006f4a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006f4e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006f52:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006f56:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f5e:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80071b4 <__ieee754_powf+0x3e0>
 8006f62:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8006f66:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80071b8 <__ieee754_powf+0x3e4>
 8006f6a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006f6e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80071bc <__ieee754_powf+0x3e8>
 8006f72:	eeb0 6a67 	vmov.f32	s12, s15
 8006f76:	eea0 6a07 	vfma.f32	s12, s0, s14
 8006f7a:	ee16 3a10 	vmov	r3, s12
 8006f7e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006f82:	f023 030f 	bic.w	r3, r3, #15
 8006f86:	ee06 3a10 	vmov	s12, r3
 8006f8a:	eea6 6a87 	vfma.f32	s12, s13, s14
 8006f8e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006f92:	e0cb      	b.n	800712c <__ieee754_powf+0x358>
 8006f94:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8006f98:	bfb8      	it	lt
 8006f9a:	eddf 7a89 	vldrlt	s15, [pc, #548]	; 80071c0 <__ieee754_powf+0x3ec>
 8006f9e:	4989      	ldr	r1, [pc, #548]	; (80071c4 <__ieee754_powf+0x3f0>)
 8006fa0:	bfbe      	ittt	lt
 8006fa2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8006fa6:	f06f 0217 	mvnlt.w	r2, #23
 8006faa:	ee17 4a90 	vmovlt	r4, s15
 8006fae:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8006fb2:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006fb6:	bfa8      	it	ge
 8006fb8:	2200      	movge	r2, #0
 8006fba:	3b7f      	subs	r3, #127	; 0x7f
 8006fbc:	428c      	cmp	r4, r1
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f044 527e 	orr.w	r2, r4, #1065353216	; 0x3f800000
 8006fc4:	dd05      	ble.n	8006fd2 <__ieee754_powf+0x1fe>
 8006fc6:	4980      	ldr	r1, [pc, #512]	; (80071c8 <__ieee754_powf+0x3f4>)
 8006fc8:	428c      	cmp	r4, r1
 8006fca:	dd04      	ble.n	8006fd6 <__ieee754_powf+0x202>
 8006fcc:	3301      	adds	r3, #1
 8006fce:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e000      	b.n	8006fd8 <__ieee754_powf+0x204>
 8006fd6:	2001      	movs	r0, #1
 8006fd8:	4c7c      	ldr	r4, [pc, #496]	; (80071cc <__ieee754_powf+0x3f8>)
 8006fda:	0081      	lsls	r1, r0, #2
 8006fdc:	440c      	add	r4, r1
 8006fde:	ee07 2a10 	vmov	s14, r2
 8006fe2:	ed94 4a00 	vldr	s8, [r4]
 8006fe6:	ee77 7a04 	vadd.f32	s15, s14, s8
 8006fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fee:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8006ff2:	1052      	asrs	r2, r2, #1
 8006ff4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006ff8:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
 8006ffc:	eb02 5240 	add.w	r2, r2, r0, lsl #21
 8007000:	ee77 5a44 	vsub.f32	s11, s14, s8
 8007004:	ee06 2a90 	vmov	s13, r2
 8007008:	ee65 7a86 	vmul.f32	s15, s11, s12
 800700c:	ee17 4a90 	vmov	r4, s15
 8007010:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8007014:	f024 040f 	bic.w	r4, r4, #15
 8007018:	ee05 4a10 	vmov	s10, r4
 800701c:	eef1 4a45 	vneg.f32	s9, s10
 8007020:	eee4 5aa6 	vfma.f32	s11, s9, s13
 8007024:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8007028:	ed9f 4a69 	vldr	s8, [pc, #420]	; 80071d0 <__ieee754_powf+0x3fc>
 800702c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007030:	ee37 7a85 	vadd.f32	s14, s15, s10
 8007034:	eee4 5aa6 	vfma.f32	s11, s9, s13
 8007038:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800703c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8007040:	eddf 5a64 	vldr	s11, [pc, #400]	; 80071d4 <__ieee754_powf+0x400>
 8007044:	eee6 5a84 	vfma.f32	s11, s13, s8
 8007048:	ed9f 4a63 	vldr	s8, [pc, #396]	; 80071d8 <__ieee754_powf+0x404>
 800704c:	eea6 4aa5 	vfma.f32	s8, s13, s11
 8007050:	eddf 5a57 	vldr	s11, [pc, #348]	; 80071b0 <__ieee754_powf+0x3dc>
 8007054:	eee6 5a84 	vfma.f32	s11, s13, s8
 8007058:	ed9f 4a60 	vldr	s8, [pc, #384]	; 80071dc <__ieee754_powf+0x408>
 800705c:	eea6 4aa5 	vfma.f32	s8, s13, s11
 8007060:	eddf 5a5f 	vldr	s11, [pc, #380]	; 80071e0 <__ieee754_powf+0x40c>
 8007064:	eee6 5a84 	vfma.f32	s11, s13, s8
 8007068:	ee66 3aa6 	vmul.f32	s7, s13, s13
 800706c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007070:	eea3 7aa5 	vfma.f32	s14, s7, s11
 8007074:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8007078:	eef0 6a65 	vmov.f32	s13, s11
 800707c:	eee5 6a05 	vfma.f32	s13, s10, s10
 8007080:	ee76 6a87 	vadd.f32	s13, s13, s14
 8007084:	ee16 2a90 	vmov	r2, s13
 8007088:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800708c:	f022 020f 	bic.w	r2, r2, #15
 8007090:	ee06 2a90 	vmov	s13, r2
 8007094:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8007098:	eee4 5a85 	vfma.f32	s11, s9, s10
 800709c:	ee37 7a65 	vsub.f32	s14, s14, s11
 80070a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80070a8:	eef0 5a67 	vmov.f32	s11, s15
 80070ac:	eee5 5a26 	vfma.f32	s11, s10, s13
 80070b0:	ed9f 5a4c 	vldr	s10, [pc, #304]	; 80071e4 <__ieee754_powf+0x410>
 80070b4:	ee15 2a90 	vmov	r2, s11
 80070b8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80070bc:	f022 020f 	bic.w	r2, r2, #15
 80070c0:	ee07 2a10 	vmov	s14, r2
 80070c4:	eea4 7aa6 	vfma.f32	s14, s9, s13
 80070c8:	ee05 2a90 	vmov	s11, r2
 80070cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80070d0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80071e8 <__ieee754_powf+0x414>
 80070d4:	4a45      	ldr	r2, [pc, #276]	; (80071ec <__ieee754_powf+0x418>)
 80070d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070da:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80071f0 <__ieee754_powf+0x41c>
 80070de:	eee5 7a87 	vfma.f32	s15, s11, s14
 80070e2:	440a      	add	r2, r1
 80070e4:	ed92 7a00 	vldr	s14, [r2]
 80070e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ec:	ee07 3a90 	vmov	s15, r3
 80070f0:	eef0 6a47 	vmov.f32	s13, s14
 80070f4:	4b3f      	ldr	r3, [pc, #252]	; (80071f4 <__ieee754_powf+0x420>)
 80070f6:	eee5 6a85 	vfma.f32	s13, s11, s10
 80070fa:	4419      	add	r1, r3
 80070fc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007100:	edd1 7a00 	vldr	s15, [r1]
 8007104:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007108:	ee76 6a86 	vadd.f32	s13, s13, s12
 800710c:	ee16 3a90 	vmov	r3, s13
 8007110:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007114:	f023 030f 	bic.w	r3, r3, #15
 8007118:	ee06 3a90 	vmov	s13, r3
 800711c:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8007120:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007124:	eee5 7ac5 	vfms.f32	s15, s11, s10
 8007128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800712c:	3e01      	subs	r6, #1
 800712e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8007132:	ea56 0208 	orrs.w	r2, r6, r8
 8007136:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800713a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800713e:	f025 050f 	bic.w	r5, r5, #15
 8007142:	bf0c      	ite	eq
 8007144:	eeb0 8a47 	vmoveq.f32	s16, s14
 8007148:	eeb0 8a40 	vmovne.f32	s16, s0
 800714c:	ee07 5a10 	vmov	s14, r5
 8007150:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8007154:	ee38 0ac7 	vsub.f32	s0, s17, s14
 8007158:	ee07 3a10 	vmov	s14, r3
 800715c:	ee06 5a90 	vmov	s13, r5
 8007160:	eee7 7a00 	vfma.f32	s15, s14, s0
 8007164:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007168:	ee77 6a87 	vadd.f32	s13, s15, s14
 800716c:	ee16 1a90 	vmov	r1, s13
 8007170:	2900      	cmp	r1, #0
 8007172:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007176:	dd41      	ble.n	80071fc <__ieee754_powf+0x428>
 8007178:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800717c:	dc0b      	bgt.n	8007196 <__ieee754_powf+0x3c2>
 800717e:	d150      	bne.n	8007222 <__ieee754_powf+0x44e>
 8007180:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80071f8 <__ieee754_powf+0x424>
 8007184:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8007188:	ee37 6a86 	vadd.f32	s12, s15, s12
 800718c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8007190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007194:	dd48      	ble.n	8007228 <__ieee754_powf+0x454>
 8007196:	eddf 0a04 	vldr	s1, [pc, #16]	; 80071a8 <__ieee754_powf+0x3d4>
 800719a:	e034      	b.n	8007206 <__ieee754_powf+0x432>
 800719c:	08008a6d 	.word	0x08008a6d
 80071a0:	00000000 	.word	0x00000000
 80071a4:	3f7ffff7 	.word	0x3f7ffff7
 80071a8:	7149f2ca 	.word	0x7149f2ca
 80071ac:	3f800007 	.word	0x3f800007
 80071b0:	3eaaaaab 	.word	0x3eaaaaab
 80071b4:	3fb8aa3b 	.word	0x3fb8aa3b
 80071b8:	36eca570 	.word	0x36eca570
 80071bc:	3fb8aa00 	.word	0x3fb8aa00
 80071c0:	4b800000 	.word	0x4b800000
 80071c4:	001cc471 	.word	0x001cc471
 80071c8:	005db3d6 	.word	0x005db3d6
 80071cc:	08008c70 	.word	0x08008c70
 80071d0:	3e53f142 	.word	0x3e53f142
 80071d4:	3e6c3255 	.word	0x3e6c3255
 80071d8:	3e8ba305 	.word	0x3e8ba305
 80071dc:	3edb6db7 	.word	0x3edb6db7
 80071e0:	3f19999a 	.word	0x3f19999a
 80071e4:	3f763800 	.word	0x3f763800
 80071e8:	3f76384f 	.word	0x3f76384f
 80071ec:	08008c68 	.word	0x08008c68
 80071f0:	369dc3a0 	.word	0x369dc3a0
 80071f4:	08008c60 	.word	0x08008c60
 80071f8:	3338aa3c 	.word	0x3338aa3c
 80071fc:	4a4e      	ldr	r2, [pc, #312]	; (8007338 <__ieee754_powf+0x564>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	dd06      	ble.n	8007210 <__ieee754_powf+0x43c>
 8007202:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800733c <__ieee754_powf+0x568>
 8007206:	ee28 0a20 	vmul.f32	s0, s16, s1
 800720a:	ee20 0a20 	vmul.f32	s0, s0, s1
 800720e:	e08f      	b.n	8007330 <__ieee754_powf+0x55c>
 8007210:	d107      	bne.n	8007222 <__ieee754_powf+0x44e>
 8007212:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8007216:	eef4 7ae6 	vcmpe.f32	s15, s13
 800721a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800721e:	d803      	bhi.n	8007228 <__ieee754_powf+0x454>
 8007220:	e7ef      	b.n	8007202 <__ieee754_powf+0x42e>
 8007222:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8007226:	dd1d      	ble.n	8007264 <__ieee754_powf+0x490>
 8007228:	15db      	asrs	r3, r3, #23
 800722a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800722e:	3b7e      	subs	r3, #126	; 0x7e
 8007230:	fa42 f303 	asr.w	r3, r2, r3
 8007234:	440b      	add	r3, r1
 8007236:	f3c3 50c7 	ubfx	r0, r3, #23, #8
 800723a:	387f      	subs	r0, #127	; 0x7f
 800723c:	3a01      	subs	r2, #1
 800723e:	4102      	asrs	r2, r0
 8007240:	ea23 0202 	bic.w	r2, r3, r2
 8007244:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007248:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800724c:	f1c0 0017 	rsb	r0, r0, #23
 8007250:	ee06 2a90 	vmov	s13, r2
 8007254:	fa43 f000 	asr.w	r0, r3, r0
 8007258:	2900      	cmp	r1, #0
 800725a:	bfb8      	it	lt
 800725c:	4240      	neglt	r0, r0
 800725e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007262:	e000      	b.n	8007266 <__ieee754_powf+0x492>
 8007264:	2000      	movs	r0, #0
 8007266:	ee77 6a27 	vadd.f32	s13, s14, s15
 800726a:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8007340 <__ieee754_powf+0x56c>
 800726e:	ee16 3a90 	vmov	r3, s13
 8007272:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007276:	f023 030f 	bic.w	r3, r3, #15
 800727a:	ee06 3a90 	vmov	s13, r3
 800727e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007282:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007286:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007344 <__ieee754_powf+0x570>
 800728a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800728e:	eea7 7a86 	vfma.f32	s14, s15, s12
 8007292:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8007348 <__ieee754_powf+0x574>
 8007296:	eef0 7a47 	vmov.f32	s15, s14
 800729a:	eea6 7a86 	vfma.f32	s14, s13, s12
 800729e:	eef0 5a47 	vmov.f32	s11, s14
 80072a2:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80072a6:	ee67 6a07 	vmul.f32	s13, s14, s14
 80072aa:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80072ae:	ed9f 6a27 	vldr	s12, [pc, #156]	; 800734c <__ieee754_powf+0x578>
 80072b2:	eddf 5a27 	vldr	s11, [pc, #156]	; 8007350 <__ieee754_powf+0x57c>
 80072b6:	eee6 5a86 	vfma.f32	s11, s13, s12
 80072ba:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8007354 <__ieee754_powf+0x580>
 80072be:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80072c2:	eddf 5a25 	vldr	s11, [pc, #148]	; 8007358 <__ieee754_powf+0x584>
 80072c6:	eee6 5a86 	vfma.f32	s11, s13, s12
 80072ca:	ed9f 6a24 	vldr	s12, [pc, #144]	; 800735c <__ieee754_powf+0x588>
 80072ce:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80072d2:	eef0 5a47 	vmov.f32	s11, s14
 80072d6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80072da:	eee7 7a27 	vfma.f32	s15, s14, s15
 80072de:	ee27 6a25 	vmul.f32	s12, s14, s11
 80072e2:	eef0 6a65 	vmov.f32	s13, s11
 80072e6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80072ea:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80072ee:	ee86 0a26 	vdiv.f32	s0, s12, s13
 80072f2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80072f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80072fa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80072fe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007302:	ee10 3a10 	vmov	r3, s0
 8007306:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800730a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800730e:	da02      	bge.n	8007316 <__ieee754_powf+0x542>
 8007310:	f000 ff0c 	bl	800812c <scalbnf>
 8007314:	e001      	b.n	800731a <__ieee754_powf+0x546>
 8007316:	ee00 3a10 	vmov	s0, r3
 800731a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800731e:	e007      	b.n	8007330 <__ieee754_powf+0x55c>
 8007320:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007324:	e004      	b.n	8007330 <__ieee754_powf+0x55c>
 8007326:	eeb0 0a68 	vmov.f32	s0, s17
 800732a:	e001      	b.n	8007330 <__ieee754_powf+0x55c>
 800732c:	eeb0 0a48 	vmov.f32	s0, s16
 8007330:	ecbd 8b02 	vpop	{d8}
 8007334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007338:	43160000 	.word	0x43160000
 800733c:	0da24260 	.word	0x0da24260
 8007340:	3f317218 	.word	0x3f317218
 8007344:	35bfbe8c 	.word	0x35bfbe8c
 8007348:	3f317200 	.word	0x3f317200
 800734c:	3331bb4c 	.word	0x3331bb4c
 8007350:	b5ddea0e 	.word	0xb5ddea0e
 8007354:	388ab355 	.word	0x388ab355
 8007358:	bb360b61 	.word	0xbb360b61
 800735c:	3e2aaaab 	.word	0x3e2aaaab

08007360 <__ieee754_sqrtf>:
 8007360:	ee10 2a10 	vmov	r2, s0
 8007364:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007368:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	d302      	bcc.n	8007376 <__ieee754_sqrtf+0x16>
 8007370:	eea0 0a00 	vfma.f32	s0, s0, s0
 8007374:	bd70      	pop	{r4, r5, r6, pc}
 8007376:	2900      	cmp	r1, #0
 8007378:	d039      	beq.n	80073ee <__ieee754_sqrtf+0x8e>
 800737a:	2a00      	cmp	r2, #0
 800737c:	da04      	bge.n	8007388 <__ieee754_sqrtf+0x28>
 800737e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007382:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007386:	bd70      	pop	{r4, r5, r6, pc}
 8007388:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800738c:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8007390:	d207      	bcs.n	80073a2 <__ieee754_sqrtf+0x42>
 8007392:	2100      	movs	r1, #0
 8007394:	0210      	lsls	r0, r2, #8
 8007396:	d402      	bmi.n	800739e <__ieee754_sqrtf+0x3e>
 8007398:	0052      	lsls	r2, r2, #1
 800739a:	3101      	adds	r1, #1
 800739c:	e7fa      	b.n	8007394 <__ieee754_sqrtf+0x34>
 800739e:	3901      	subs	r1, #1
 80073a0:	1a5b      	subs	r3, r3, r1
 80073a2:	3b7f      	subs	r3, #127	; 0x7f
 80073a4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80073a8:	07d9      	lsls	r1, r3, #31
 80073aa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80073ae:	bf48      	it	mi
 80073b0:	0052      	lslmi	r2, r2, #1
 80073b2:	1059      	asrs	r1, r3, #1
 80073b4:	2300      	movs	r3, #0
 80073b6:	0052      	lsls	r2, r2, #1
 80073b8:	2419      	movs	r4, #25
 80073ba:	461e      	mov	r6, r3
 80073bc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80073c0:	1835      	adds	r5, r6, r0
 80073c2:	4295      	cmp	r5, r2
 80073c4:	bfde      	ittt	le
 80073c6:	182e      	addle	r6, r5, r0
 80073c8:	1b52      	suble	r2, r2, r5
 80073ca:	181b      	addle	r3, r3, r0
 80073cc:	3c01      	subs	r4, #1
 80073ce:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80073d2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80073d6:	d1f3      	bne.n	80073c0 <__ieee754_sqrtf+0x60>
 80073d8:	b112      	cbz	r2, 80073e0 <__ieee754_sqrtf+0x80>
 80073da:	f003 0201 	and.w	r2, r3, #1
 80073de:	4413      	add	r3, r2
 80073e0:	105b      	asrs	r3, r3, #1
 80073e2:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 80073e6:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 80073ea:	ee00 3a10 	vmov	s0, r3
 80073ee:	bd70      	pop	{r4, r5, r6, pc}

080073f0 <__kernel_cos>:
 80073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	ec59 8b10 	vmov	r8, r9, d0
 80073f8:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 80073fc:	b085      	sub	sp, #20
 80073fe:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8007402:	ed8d 1b00 	vstr	d1, [sp]
 8007406:	da07      	bge.n	8007418 <__kernel_cos+0x28>
 8007408:	ee10 0a10 	vmov	r0, s0
 800740c:	4649      	mov	r1, r9
 800740e:	f7f9 fb2d 	bl	8000a6c <__aeabi_d2iz>
 8007412:	2800      	cmp	r0, #0
 8007414:	f000 80a6 	beq.w	8007564 <__kernel_cos+0x174>
 8007418:	4642      	mov	r2, r8
 800741a:	464b      	mov	r3, r9
 800741c:	4640      	mov	r0, r8
 800741e:	4649      	mov	r1, r9
 8007420:	f7f9 f88a 	bl	8000538 <__aeabi_dmul>
 8007424:	a359      	add	r3, pc, #356	; (adr r3, 800758c <__kernel_cos+0x19c>)
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	4604      	mov	r4, r0
 800742c:	460d      	mov	r5, r1
 800742e:	f7f9 f883 	bl	8000538 <__aeabi_dmul>
 8007432:	a358      	add	r3, pc, #352	; (adr r3, 8007594 <__kernel_cos+0x1a4>)
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	f7f8 fecc 	bl	80001d4 <__adddf3>
 800743c:	4622      	mov	r2, r4
 800743e:	462b      	mov	r3, r5
 8007440:	f7f9 f87a 	bl	8000538 <__aeabi_dmul>
 8007444:	a355      	add	r3, pc, #340	; (adr r3, 800759c <__kernel_cos+0x1ac>)
 8007446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744a:	f7f8 fec1 	bl	80001d0 <__aeabi_dsub>
 800744e:	4622      	mov	r2, r4
 8007450:	462b      	mov	r3, r5
 8007452:	f7f9 f871 	bl	8000538 <__aeabi_dmul>
 8007456:	a353      	add	r3, pc, #332	; (adr r3, 80075a4 <__kernel_cos+0x1b4>)
 8007458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745c:	f7f8 feba 	bl	80001d4 <__adddf3>
 8007460:	4622      	mov	r2, r4
 8007462:	462b      	mov	r3, r5
 8007464:	f7f9 f868 	bl	8000538 <__aeabi_dmul>
 8007468:	a350      	add	r3, pc, #320	; (adr r3, 80075ac <__kernel_cos+0x1bc>)
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	f7f8 feaf 	bl	80001d0 <__aeabi_dsub>
 8007472:	4622      	mov	r2, r4
 8007474:	462b      	mov	r3, r5
 8007476:	f7f9 f85f 	bl	8000538 <__aeabi_dmul>
 800747a:	a34e      	add	r3, pc, #312	; (adr r3, 80075b4 <__kernel_cos+0x1c4>)
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	f7f8 fea8 	bl	80001d4 <__adddf3>
 8007484:	462b      	mov	r3, r5
 8007486:	4622      	mov	r2, r4
 8007488:	f7f9 f856 	bl	8000538 <__aeabi_dmul>
 800748c:	4b3a      	ldr	r3, [pc, #232]	; (8007578 <__kernel_cos+0x188>)
 800748e:	429f      	cmp	r7, r3
 8007490:	4682      	mov	sl, r0
 8007492:	468b      	mov	fp, r1
 8007494:	dc26      	bgt.n	80074e4 <__kernel_cos+0xf4>
 8007496:	2200      	movs	r2, #0
 8007498:	4b38      	ldr	r3, [pc, #224]	; (800757c <__kernel_cos+0x18c>)
 800749a:	4620      	mov	r0, r4
 800749c:	4629      	mov	r1, r5
 800749e:	f7f9 f84b 	bl	8000538 <__aeabi_dmul>
 80074a2:	4652      	mov	r2, sl
 80074a4:	4606      	mov	r6, r0
 80074a6:	460f      	mov	r7, r1
 80074a8:	465b      	mov	r3, fp
 80074aa:	4620      	mov	r0, r4
 80074ac:	4629      	mov	r1, r5
 80074ae:	f7f9 f843 	bl	8000538 <__aeabi_dmul>
 80074b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074b6:	4604      	mov	r4, r0
 80074b8:	460d      	mov	r5, r1
 80074ba:	4640      	mov	r0, r8
 80074bc:	4649      	mov	r1, r9
 80074be:	f7f9 f83b 	bl	8000538 <__aeabi_dmul>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	4620      	mov	r0, r4
 80074c8:	4629      	mov	r1, r5
 80074ca:	f7f8 fe81 	bl	80001d0 <__aeabi_dsub>
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4630      	mov	r0, r6
 80074d4:	4639      	mov	r1, r7
 80074d6:	f7f8 fe7b 	bl	80001d0 <__aeabi_dsub>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	2000      	movs	r0, #0
 80074e0:	4927      	ldr	r1, [pc, #156]	; (8007580 <__kernel_cos+0x190>)
 80074e2:	e03c      	b.n	800755e <__kernel_cos+0x16e>
 80074e4:	4b27      	ldr	r3, [pc, #156]	; (8007584 <__kernel_cos+0x194>)
 80074e6:	4926      	ldr	r1, [pc, #152]	; (8007580 <__kernel_cos+0x190>)
 80074e8:	429f      	cmp	r7, r3
 80074ea:	bfd7      	itett	le
 80074ec:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 80074f0:	4f25      	ldrgt	r7, [pc, #148]	; (8007588 <__kernel_cos+0x198>)
 80074f2:	2200      	movle	r2, #0
 80074f4:	4616      	movle	r6, r2
 80074f6:	bfd4      	ite	le
 80074f8:	461f      	movle	r7, r3
 80074fa:	2600      	movgt	r6, #0
 80074fc:	4632      	mov	r2, r6
 80074fe:	463b      	mov	r3, r7
 8007500:	2000      	movs	r0, #0
 8007502:	f7f8 fe65 	bl	80001d0 <__aeabi_dsub>
 8007506:	2200      	movs	r2, #0
 8007508:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800750c:	4b1b      	ldr	r3, [pc, #108]	; (800757c <__kernel_cos+0x18c>)
 800750e:	4620      	mov	r0, r4
 8007510:	4629      	mov	r1, r5
 8007512:	f7f9 f811 	bl	8000538 <__aeabi_dmul>
 8007516:	4632      	mov	r2, r6
 8007518:	463b      	mov	r3, r7
 800751a:	f7f8 fe59 	bl	80001d0 <__aeabi_dsub>
 800751e:	4652      	mov	r2, sl
 8007520:	4606      	mov	r6, r0
 8007522:	460f      	mov	r7, r1
 8007524:	465b      	mov	r3, fp
 8007526:	4620      	mov	r0, r4
 8007528:	4629      	mov	r1, r5
 800752a:	f7f9 f805 	bl	8000538 <__aeabi_dmul>
 800752e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007532:	4604      	mov	r4, r0
 8007534:	460d      	mov	r5, r1
 8007536:	4640      	mov	r0, r8
 8007538:	4649      	mov	r1, r9
 800753a:	f7f8 fffd 	bl	8000538 <__aeabi_dmul>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	4620      	mov	r0, r4
 8007544:	4629      	mov	r1, r5
 8007546:	f7f8 fe43 	bl	80001d0 <__aeabi_dsub>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4630      	mov	r0, r6
 8007550:	4639      	mov	r1, r7
 8007552:	f7f8 fe3d 	bl	80001d0 <__aeabi_dsub>
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800755e:	f7f8 fe37 	bl	80001d0 <__aeabi_dsub>
 8007562:	e001      	b.n	8007568 <__kernel_cos+0x178>
 8007564:	4906      	ldr	r1, [pc, #24]	; (8007580 <__kernel_cos+0x190>)
 8007566:	2000      	movs	r0, #0
 8007568:	ec41 0b10 	vmov	d0, r0, r1
 800756c:	b005      	add	sp, #20
 800756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007572:	bf00      	nop
 8007574:	f3af 8000 	nop.w
 8007578:	3fd33332 	.word	0x3fd33332
 800757c:	3fe00000 	.word	0x3fe00000
 8007580:	3ff00000 	.word	0x3ff00000
 8007584:	3fe90000 	.word	0x3fe90000
 8007588:	3fd20000 	.word	0x3fd20000
 800758c:	be8838d4 	.word	0xbe8838d4
 8007590:	bda8fae9 	.word	0xbda8fae9
 8007594:	bdb4b1c4 	.word	0xbdb4b1c4
 8007598:	3e21ee9e 	.word	0x3e21ee9e
 800759c:	809c52ad 	.word	0x809c52ad
 80075a0:	3e927e4f 	.word	0x3e927e4f
 80075a4:	19cb1590 	.word	0x19cb1590
 80075a8:	3efa01a0 	.word	0x3efa01a0
 80075ac:	16c15177 	.word	0x16c15177
 80075b0:	3f56c16c 	.word	0x3f56c16c
 80075b4:	5555554c 	.word	0x5555554c
 80075b8:	3fa55555 	.word	0x3fa55555
 80075bc:	00000000 	.word	0x00000000

080075c0 <__kernel_rem_pio2>:
 80075c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80075c8:	2418      	movs	r4, #24
 80075ca:	9306      	str	r3, [sp, #24]
 80075cc:	9101      	str	r1, [sp, #4]
 80075ce:	4bba      	ldr	r3, [pc, #744]	; (80078b8 <__kernel_rem_pio2+0x2f8>)
 80075d0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80075d2:	9009      	str	r0, [sp, #36]	; 0x24
 80075d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80075d8:	9302      	str	r3, [sp, #8]
 80075da:	9b06      	ldr	r3, [sp, #24]
 80075dc:	3b01      	subs	r3, #1
 80075de:	9305      	str	r3, [sp, #20]
 80075e0:	1ed3      	subs	r3, r2, #3
 80075e2:	fb93 f4f4 	sdiv	r4, r3, r4
 80075e6:	f06f 0317 	mvn.w	r3, #23
 80075ea:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80075ee:	fb04 3303 	mla	r3, r4, r3, r3
 80075f2:	eb03 0802 	add.w	r8, r3, r2
 80075f6:	9b02      	ldr	r3, [sp, #8]
 80075f8:	9a05      	ldr	r2, [sp, #20]
 80075fa:	eb03 0a02 	add.w	sl, r3, r2
 80075fe:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007600:	1aa7      	subs	r7, r4, r2
 8007602:	ae20      	add	r6, sp, #128	; 0x80
 8007604:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007608:	2500      	movs	r5, #0
 800760a:	4555      	cmp	r5, sl
 800760c:	dc0c      	bgt.n	8007628 <__kernel_rem_pio2+0x68>
 800760e:	42ef      	cmn	r7, r5
 8007610:	d404      	bmi.n	800761c <__kernel_rem_pio2+0x5c>
 8007612:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007616:	f7f8 ff29 	bl	800046c <__aeabi_i2d>
 800761a:	e001      	b.n	8007620 <__kernel_rem_pio2+0x60>
 800761c:	2000      	movs	r0, #0
 800761e:	2100      	movs	r1, #0
 8007620:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007624:	3501      	adds	r5, #1
 8007626:	e7f0      	b.n	800760a <__kernel_rem_pio2+0x4a>
 8007628:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800762c:	2600      	movs	r6, #0
 800762e:	9b02      	ldr	r3, [sp, #8]
 8007630:	429e      	cmp	r6, r3
 8007632:	dc27      	bgt.n	8007684 <__kernel_rem_pio2+0xc4>
 8007634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007636:	9304      	str	r3, [sp, #16]
 8007638:	9b06      	ldr	r3, [sp, #24]
 800763a:	199d      	adds	r5, r3, r6
 800763c:	ab20      	add	r3, sp, #128	; 0x80
 800763e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007642:	9308      	str	r3, [sp, #32]
 8007644:	f04f 0900 	mov.w	r9, #0
 8007648:	f04f 0a00 	mov.w	sl, #0
 800764c:	2700      	movs	r7, #0
 800764e:	9b05      	ldr	r3, [sp, #20]
 8007650:	429f      	cmp	r7, r3
 8007652:	dc13      	bgt.n	800767c <__kernel_rem_pio2+0xbc>
 8007654:	9908      	ldr	r1, [sp, #32]
 8007656:	9d04      	ldr	r5, [sp, #16]
 8007658:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800765c:	9108      	str	r1, [sp, #32]
 800765e:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8007662:	9504      	str	r5, [sp, #16]
 8007664:	f7f8 ff68 	bl	8000538 <__aeabi_dmul>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4648      	mov	r0, r9
 800766e:	4651      	mov	r1, sl
 8007670:	f7f8 fdb0 	bl	80001d4 <__adddf3>
 8007674:	3701      	adds	r7, #1
 8007676:	4681      	mov	r9, r0
 8007678:	468a      	mov	sl, r1
 800767a:	e7e8      	b.n	800764e <__kernel_rem_pio2+0x8e>
 800767c:	e8ab 0600 	stmia.w	fp!, {r9, sl}
 8007680:	3601      	adds	r6, #1
 8007682:	e7d4      	b.n	800762e <__kernel_rem_pio2+0x6e>
 8007684:	9b02      	ldr	r3, [sp, #8]
 8007686:	f8dd b008 	ldr.w	fp, [sp, #8]
 800768a:	aa0c      	add	r2, sp, #48	; 0x30
 800768c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007690:	930a      	str	r3, [sp, #40]	; 0x28
 8007692:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007694:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007698:	930b      	str	r3, [sp, #44]	; 0x2c
 800769a:	ab98      	add	r3, sp, #608	; 0x260
 800769c:	f10b 5a00 	add.w	sl, fp, #536870912	; 0x20000000
 80076a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80076a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076a8:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80076ac:	aa98      	add	r2, sp, #608	; 0x260
 80076ae:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80076b2:	eb02 0903 	add.w	r9, r2, r3
 80076b6:	9308      	str	r3, [sp, #32]
 80076b8:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 80076bc:	f04f 0a00 	mov.w	sl, #0
 80076c0:	ebca 030b 	rsb	r3, sl, fp
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	dd25      	ble.n	8007714 <__kernel_rem_pio2+0x154>
 80076c8:	2200      	movs	r2, #0
 80076ca:	4b7c      	ldr	r3, [pc, #496]	; (80078bc <__kernel_rem_pio2+0x2fc>)
 80076cc:	4630      	mov	r0, r6
 80076ce:	4639      	mov	r1, r7
 80076d0:	f7f8 ff32 	bl	8000538 <__aeabi_dmul>
 80076d4:	f7f9 f9ca 	bl	8000a6c <__aeabi_d2iz>
 80076d8:	f7f8 fec8 	bl	800046c <__aeabi_i2d>
 80076dc:	2200      	movs	r2, #0
 80076de:	4b78      	ldr	r3, [pc, #480]	; (80078c0 <__kernel_rem_pio2+0x300>)
 80076e0:	4604      	mov	r4, r0
 80076e2:	460d      	mov	r5, r1
 80076e4:	f7f8 ff28 	bl	8000538 <__aeabi_dmul>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4630      	mov	r0, r6
 80076ee:	4639      	mov	r1, r7
 80076f0:	f7f8 fd6e 	bl	80001d0 <__aeabi_dsub>
 80076f4:	f7f9 f9ba 	bl	8000a6c <__aeabi_d2iz>
 80076f8:	ab0c      	add	r3, sp, #48	; 0x30
 80076fa:	4629      	mov	r1, r5
 80076fc:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8007700:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8007704:	4620      	mov	r0, r4
 8007706:	f7f8 fd65 	bl	80001d4 <__adddf3>
 800770a:	f10a 0a01 	add.w	sl, sl, #1
 800770e:	4606      	mov	r6, r0
 8007710:	460f      	mov	r7, r1
 8007712:	e7d5      	b.n	80076c0 <__kernel_rem_pio2+0x100>
 8007714:	ec47 6b10 	vmov	d0, r6, r7
 8007718:	4640      	mov	r0, r8
 800771a:	f000 fc75 	bl	8008008 <scalbn>
 800771e:	ec55 4b10 	vmov	r4, r5, d0
 8007722:	2200      	movs	r2, #0
 8007724:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007728:	ee10 0a10 	vmov	r0, s0
 800772c:	4629      	mov	r1, r5
 800772e:	f7f8 ff03 	bl	8000538 <__aeabi_dmul>
 8007732:	ec41 0b10 	vmov	d0, r0, r1
 8007736:	f000 fb57 	bl	8007de8 <floor>
 800773a:	2200      	movs	r2, #0
 800773c:	ec51 0b10 	vmov	r0, r1, d0
 8007740:	4b60      	ldr	r3, [pc, #384]	; (80078c4 <__kernel_rem_pio2+0x304>)
 8007742:	f7f8 fef9 	bl	8000538 <__aeabi_dmul>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4620      	mov	r0, r4
 800774c:	4629      	mov	r1, r5
 800774e:	f7f8 fd3f 	bl	80001d0 <__aeabi_dsub>
 8007752:	460d      	mov	r5, r1
 8007754:	4604      	mov	r4, r0
 8007756:	f7f9 f989 	bl	8000a6c <__aeabi_d2iz>
 800775a:	9004      	str	r0, [sp, #16]
 800775c:	f7f8 fe86 	bl	800046c <__aeabi_i2d>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4620      	mov	r0, r4
 8007766:	4629      	mov	r1, r5
 8007768:	f7f8 fd32 	bl	80001d0 <__aeabi_dsub>
 800776c:	f1b8 0f00 	cmp.w	r8, #0
 8007770:	4606      	mov	r6, r0
 8007772:	460f      	mov	r7, r1
 8007774:	dd15      	ble.n	80077a2 <__kernel_rem_pio2+0x1e2>
 8007776:	f10b 31ff 	add.w	r1, fp, #4294967295
 800777a:	ab0c      	add	r3, sp, #48	; 0x30
 800777c:	f1c8 0018 	rsb	r0, r8, #24
 8007780:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8007784:	9c04      	ldr	r4, [sp, #16]
 8007786:	fa42 f300 	asr.w	r3, r2, r0
 800778a:	441c      	add	r4, r3
 800778c:	4083      	lsls	r3, r0
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	aa0c      	add	r2, sp, #48	; 0x30
 8007792:	f1c8 0017 	rsb	r0, r8, #23
 8007796:	9404      	str	r4, [sp, #16]
 8007798:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800779c:	fa43 fa00 	asr.w	sl, r3, r0
 80077a0:	e00f      	b.n	80077c2 <__kernel_rem_pio2+0x202>
 80077a2:	d107      	bne.n	80077b4 <__kernel_rem_pio2+0x1f4>
 80077a4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80077a8:	aa0c      	add	r2, sp, #48	; 0x30
 80077aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80077ae:	ea4f 5ae0 	mov.w	sl, r0, asr #23
 80077b2:	e006      	b.n	80077c2 <__kernel_rem_pio2+0x202>
 80077b4:	2200      	movs	r2, #0
 80077b6:	4b44      	ldr	r3, [pc, #272]	; (80078c8 <__kernel_rem_pio2+0x308>)
 80077b8:	f7f9 f944 	bl	8000a44 <__aeabi_dcmpge>
 80077bc:	b928      	cbnz	r0, 80077ca <__kernel_rem_pio2+0x20a>
 80077be:	4682      	mov	sl, r0
 80077c0:	e052      	b.n	8007868 <__kernel_rem_pio2+0x2a8>
 80077c2:	f1ba 0f00 	cmp.w	sl, #0
 80077c6:	dc02      	bgt.n	80077ce <__kernel_rem_pio2+0x20e>
 80077c8:	e04e      	b.n	8007868 <__kernel_rem_pio2+0x2a8>
 80077ca:	f04f 0a02 	mov.w	sl, #2
 80077ce:	9b04      	ldr	r3, [sp, #16]
 80077d0:	2200      	movs	r2, #0
 80077d2:	3301      	adds	r3, #1
 80077d4:	9304      	str	r3, [sp, #16]
 80077d6:	4614      	mov	r4, r2
 80077d8:	4593      	cmp	fp, r2
 80077da:	dd11      	ble.n	8007800 <__kernel_rem_pio2+0x240>
 80077dc:	ab0c      	add	r3, sp, #48	; 0x30
 80077de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e2:	b91c      	cbnz	r4, 80077ec <__kernel_rem_pio2+0x22c>
 80077e4:	b153      	cbz	r3, 80077fc <__kernel_rem_pio2+0x23c>
 80077e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80077ea:	e003      	b.n	80077f4 <__kernel_rem_pio2+0x234>
 80077ec:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 80077f0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80077f4:	a90c      	add	r1, sp, #48	; 0x30
 80077f6:	2401      	movs	r4, #1
 80077f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80077fc:	3201      	adds	r2, #1
 80077fe:	e7eb      	b.n	80077d8 <__kernel_rem_pio2+0x218>
 8007800:	f1b8 0f00 	cmp.w	r8, #0
 8007804:	dd17      	ble.n	8007836 <__kernel_rem_pio2+0x276>
 8007806:	f1b8 0f01 	cmp.w	r8, #1
 800780a:	d00a      	beq.n	8007822 <__kernel_rem_pio2+0x262>
 800780c:	f1b8 0f02 	cmp.w	r8, #2
 8007810:	d111      	bne.n	8007836 <__kernel_rem_pio2+0x276>
 8007812:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007816:	ab0c      	add	r3, sp, #48	; 0x30
 8007818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007820:	e006      	b.n	8007830 <__kernel_rem_pio2+0x270>
 8007822:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007826:	ab0c      	add	r3, sp, #48	; 0x30
 8007828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007830:	a90c      	add	r1, sp, #48	; 0x30
 8007832:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007836:	f1ba 0f02 	cmp.w	sl, #2
 800783a:	d115      	bne.n	8007868 <__kernel_rem_pio2+0x2a8>
 800783c:	4632      	mov	r2, r6
 800783e:	463b      	mov	r3, r7
 8007840:	2000      	movs	r0, #0
 8007842:	4922      	ldr	r1, [pc, #136]	; (80078cc <__kernel_rem_pio2+0x30c>)
 8007844:	f7f8 fcc4 	bl	80001d0 <__aeabi_dsub>
 8007848:	4606      	mov	r6, r0
 800784a:	460f      	mov	r7, r1
 800784c:	b164      	cbz	r4, 8007868 <__kernel_rem_pio2+0x2a8>
 800784e:	4640      	mov	r0, r8
 8007850:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80078b0 <__kernel_rem_pio2+0x2f0>
 8007854:	f000 fbd8 	bl	8008008 <scalbn>
 8007858:	4630      	mov	r0, r6
 800785a:	4639      	mov	r1, r7
 800785c:	ec53 2b10 	vmov	r2, r3, d0
 8007860:	f7f8 fcb6 	bl	80001d0 <__aeabi_dsub>
 8007864:	4606      	mov	r6, r0
 8007866:	460f      	mov	r7, r1
 8007868:	2200      	movs	r2, #0
 800786a:	2300      	movs	r3, #0
 800786c:	4630      	mov	r0, r6
 800786e:	4639      	mov	r1, r7
 8007870:	f7f9 f8ca 	bl	8000a08 <__aeabi_dcmpeq>
 8007874:	2800      	cmp	r0, #0
 8007876:	d074      	beq.n	8007962 <__kernel_rem_pio2+0x3a2>
 8007878:	f10b 31ff 	add.w	r1, fp, #4294967295
 800787c:	460b      	mov	r3, r1
 800787e:	2200      	movs	r2, #0
 8007880:	9802      	ldr	r0, [sp, #8]
 8007882:	4283      	cmp	r3, r0
 8007884:	db05      	blt.n	8007892 <__kernel_rem_pio2+0x2d2>
 8007886:	a80c      	add	r0, sp, #48	; 0x30
 8007888:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800788c:	3b01      	subs	r3, #1
 800788e:	4302      	orrs	r2, r0
 8007890:	e7f6      	b.n	8007880 <__kernel_rem_pio2+0x2c0>
 8007892:	2a00      	cmp	r2, #0
 8007894:	d158      	bne.n	8007948 <__kernel_rem_pio2+0x388>
 8007896:	2301      	movs	r3, #1
 8007898:	f06f 0103 	mvn.w	r1, #3
 800789c:	fb01 f203 	mul.w	r2, r1, r3
 80078a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80078a2:	5882      	ldr	r2, [r0, r2]
 80078a4:	b9a2      	cbnz	r2, 80078d0 <__kernel_rem_pio2+0x310>
 80078a6:	3301      	adds	r3, #1
 80078a8:	e7f8      	b.n	800789c <__kernel_rem_pio2+0x2dc>
 80078aa:	bf00      	nop
 80078ac:	f3af 8000 	nop.w
 80078b0:	00000000 	.word	0x00000000
 80078b4:	3ff00000 	.word	0x3ff00000
 80078b8:	08008c78 	.word	0x08008c78
 80078bc:	3e700000 	.word	0x3e700000
 80078c0:	41700000 	.word	0x41700000
 80078c4:	40200000 	.word	0x40200000
 80078c8:	3fe00000 	.word	0x3fe00000
 80078cc:	3ff00000 	.word	0x3ff00000
 80078d0:	9a08      	ldr	r2, [sp, #32]
 80078d2:	a998      	add	r1, sp, #608	; 0x260
 80078d4:	440a      	add	r2, r1
 80078d6:	3a98      	subs	r2, #152	; 0x98
 80078d8:	9204      	str	r2, [sp, #16]
 80078da:	9a06      	ldr	r2, [sp, #24]
 80078dc:	445b      	add	r3, fp
 80078de:	eb02 050b 	add.w	r5, r2, fp
 80078e2:	aa20      	add	r2, sp, #128	; 0x80
 80078e4:	f10b 0601 	add.w	r6, fp, #1
 80078e8:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80078ec:	9308      	str	r3, [sp, #32]
 80078ee:	9b08      	ldr	r3, [sp, #32]
 80078f0:	429e      	cmp	r6, r3
 80078f2:	dc27      	bgt.n	8007944 <__kernel_rem_pio2+0x384>
 80078f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078f6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80078fa:	f7f8 fdb7 	bl	800046c <__aeabi_i2d>
 80078fe:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007904:	46a9      	mov	r9, r5
 8007906:	461c      	mov	r4, r3
 8007908:	2700      	movs	r7, #0
 800790a:	f04f 0a00 	mov.w	sl, #0
 800790e:	f04f 0b00 	mov.w	fp, #0
 8007912:	9b05      	ldr	r3, [sp, #20]
 8007914:	429f      	cmp	r7, r3
 8007916:	dc0f      	bgt.n	8007938 <__kernel_rem_pio2+0x378>
 8007918:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800791c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007920:	f7f8 fe0a 	bl	8000538 <__aeabi_dmul>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	4650      	mov	r0, sl
 800792a:	4659      	mov	r1, fp
 800792c:	f7f8 fc52 	bl	80001d4 <__adddf3>
 8007930:	3701      	adds	r7, #1
 8007932:	4682      	mov	sl, r0
 8007934:	468b      	mov	fp, r1
 8007936:	e7ec      	b.n	8007912 <__kernel_rem_pio2+0x352>
 8007938:	9b04      	ldr	r3, [sp, #16]
 800793a:	e9e3 ab02 	strd	sl, fp, [r3, #8]!
 800793e:	3601      	adds	r6, #1
 8007940:	9304      	str	r3, [sp, #16]
 8007942:	e7d4      	b.n	80078ee <__kernel_rem_pio2+0x32e>
 8007944:	469b      	mov	fp, r3
 8007946:	e6a8      	b.n	800769a <__kernel_rem_pio2+0xda>
 8007948:	f1a8 0818 	sub.w	r8, r8, #24
 800794c:	468b      	mov	fp, r1
 800794e:	ab0c      	add	r3, sp, #48	; 0x30
 8007950:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d13c      	bne.n	80079d2 <__kernel_rem_pio2+0x412>
 8007958:	f10b 3bff 	add.w	fp, fp, #4294967295
 800795c:	f1a8 0818 	sub.w	r8, r8, #24
 8007960:	e7f5      	b.n	800794e <__kernel_rem_pio2+0x38e>
 8007962:	f1c8 0000 	rsb	r0, r8, #0
 8007966:	ec47 6b10 	vmov	d0, r6, r7
 800796a:	f000 fb4d 	bl	8008008 <scalbn>
 800796e:	ec55 4b10 	vmov	r4, r5, d0
 8007972:	2200      	movs	r2, #0
 8007974:	4bb6      	ldr	r3, [pc, #728]	; (8007c50 <__kernel_rem_pio2+0x690>)
 8007976:	ee10 0a10 	vmov	r0, s0
 800797a:	4629      	mov	r1, r5
 800797c:	f7f9 f862 	bl	8000a44 <__aeabi_dcmpge>
 8007980:	b300      	cbz	r0, 80079c4 <__kernel_rem_pio2+0x404>
 8007982:	2200      	movs	r2, #0
 8007984:	4bb3      	ldr	r3, [pc, #716]	; (8007c54 <__kernel_rem_pio2+0x694>)
 8007986:	4620      	mov	r0, r4
 8007988:	4629      	mov	r1, r5
 800798a:	f7f8 fdd5 	bl	8000538 <__aeabi_dmul>
 800798e:	f7f9 f86d 	bl	8000a6c <__aeabi_d2iz>
 8007992:	4606      	mov	r6, r0
 8007994:	f7f8 fd6a 	bl	800046c <__aeabi_i2d>
 8007998:	2200      	movs	r2, #0
 800799a:	4bad      	ldr	r3, [pc, #692]	; (8007c50 <__kernel_rem_pio2+0x690>)
 800799c:	f7f8 fdcc 	bl	8000538 <__aeabi_dmul>
 80079a0:	460b      	mov	r3, r1
 80079a2:	4602      	mov	r2, r0
 80079a4:	4629      	mov	r1, r5
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7f8 fc12 	bl	80001d0 <__aeabi_dsub>
 80079ac:	f7f9 f85e 	bl	8000a6c <__aeabi_d2iz>
 80079b0:	ab0c      	add	r3, sp, #48	; 0x30
 80079b2:	f108 0818 	add.w	r8, r8, #24
 80079b6:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80079ba:	f10b 0b01 	add.w	fp, fp, #1
 80079be:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 80079c2:	e006      	b.n	80079d2 <__kernel_rem_pio2+0x412>
 80079c4:	4620      	mov	r0, r4
 80079c6:	4629      	mov	r1, r5
 80079c8:	f7f9 f850 	bl	8000a6c <__aeabi_d2iz>
 80079cc:	ab0c      	add	r3, sp, #48	; 0x30
 80079ce:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80079d2:	4640      	mov	r0, r8
 80079d4:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 8007c40 <__kernel_rem_pio2+0x680>
 80079d8:	f000 fb16 	bl	8008008 <scalbn>
 80079dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079e0:	9305      	str	r3, [sp, #20]
 80079e2:	9a05      	ldr	r2, [sp, #20]
 80079e4:	ab98      	add	r3, sp, #608	; 0x260
 80079e6:	189f      	adds	r7, r3, r2
 80079e8:	ec55 4b10 	vmov	r4, r5, d0
 80079ec:	3f98      	subs	r7, #152	; 0x98
 80079ee:	465e      	mov	r6, fp
 80079f0:	2e00      	cmp	r6, #0
 80079f2:	db14      	blt.n	8007a1e <__kernel_rem_pio2+0x45e>
 80079f4:	ab0c      	add	r3, sp, #48	; 0x30
 80079f6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80079fa:	f7f8 fd37 	bl	800046c <__aeabi_i2d>
 80079fe:	4622      	mov	r2, r4
 8007a00:	462b      	mov	r3, r5
 8007a02:	f7f8 fd99 	bl	8000538 <__aeabi_dmul>
 8007a06:	2200      	movs	r2, #0
 8007a08:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007a0c:	4b91      	ldr	r3, [pc, #580]	; (8007c54 <__kernel_rem_pio2+0x694>)
 8007a0e:	4620      	mov	r0, r4
 8007a10:	4629      	mov	r1, r5
 8007a12:	f7f8 fd91 	bl	8000538 <__aeabi_dmul>
 8007a16:	3e01      	subs	r6, #1
 8007a18:	4604      	mov	r4, r0
 8007a1a:	460d      	mov	r5, r1
 8007a1c:	e7e8      	b.n	80079f0 <__kernel_rem_pio2+0x430>
 8007a1e:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 8007a22:	2400      	movs	r4, #0
 8007a24:	4645      	mov	r5, r8
 8007a26:	ebbb 0704 	subs.w	r7, fp, r4
 8007a2a:	d424      	bmi.n	8007a76 <__kernel_rem_pio2+0x4b6>
 8007a2c:	ed9f 7b86 	vldr	d7, [pc, #536]	; 8007c48 <__kernel_rem_pio2+0x688>
 8007a30:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a34:	ab70      	add	r3, sp, #448	; 0x1c0
 8007a36:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8007c58 <__kernel_rem_pio2+0x698>
 8007a3a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007a3e:	2600      	movs	r6, #0
 8007a40:	9b02      	ldr	r3, [sp, #8]
 8007a42:	429e      	cmp	r6, r3
 8007a44:	dc11      	bgt.n	8007a6a <__kernel_rem_pio2+0x4aa>
 8007a46:	42a6      	cmp	r6, r4
 8007a48:	dc0f      	bgt.n	8007a6a <__kernel_rem_pio2+0x4aa>
 8007a4a:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8007a4e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007a52:	f7f8 fd71 	bl	8000538 <__aeabi_dmul>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a5e:	f7f8 fbb9 	bl	80001d4 <__adddf3>
 8007a62:	3601      	adds	r6, #1
 8007a64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007a68:	e7ea      	b.n	8007a40 <__kernel_rem_pio2+0x480>
 8007a6a:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007a6e:	3401      	adds	r4, #1
 8007a70:	eca8 7b02 	vstmia	r8!, {d7}
 8007a74:	e7d7      	b.n	8007a26 <__kernel_rem_pio2+0x466>
 8007a76:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	f200 80d8 	bhi.w	8007c2e <__kernel_rem_pio2+0x66e>
 8007a7e:	e8df f003 	tbb	[pc, r3]
 8007a82:	0810      	.short	0x0810
 8007a84:	0208      	.short	0x0208
 8007a86:	9a05      	ldr	r2, [sp, #20]
 8007a88:	ab48      	add	r3, sp, #288	; 0x120
 8007a8a:	189c      	adds	r4, r3, r2
 8007a8c:	46a0      	mov	r8, r4
 8007a8e:	46d9      	mov	r9, fp
 8007a90:	e056      	b.n	8007b40 <__kernel_rem_pio2+0x580>
 8007a92:	9c05      	ldr	r4, [sp, #20]
 8007a94:	ab48      	add	r3, sp, #288	; 0x120
 8007a96:	3408      	adds	r4, #8
 8007a98:	441c      	add	r4, r3
 8007a9a:	465d      	mov	r5, fp
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	e01d      	b.n	8007ade <__kernel_rem_pio2+0x51e>
 8007aa2:	9b05      	ldr	r3, [sp, #20]
 8007aa4:	aa98      	add	r2, sp, #608	; 0x260
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 8007aac:	2000      	movs	r0, #0
 8007aae:	2100      	movs	r1, #0
 8007ab0:	f1bb 0f00 	cmp.w	fp, #0
 8007ab4:	db06      	blt.n	8007ac4 <__kernel_rem_pio2+0x504>
 8007ab6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007aba:	f7f8 fb8b 	bl	80001d4 <__adddf3>
 8007abe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ac2:	e7f5      	b.n	8007ab0 <__kernel_rem_pio2+0x4f0>
 8007ac4:	f1ba 0f00 	cmp.w	sl, #0
 8007ac8:	d003      	beq.n	8007ad2 <__kernel_rem_pio2+0x512>
 8007aca:	4602      	mov	r2, r0
 8007acc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ad0:	e001      	b.n	8007ad6 <__kernel_rem_pio2+0x516>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	9901      	ldr	r1, [sp, #4]
 8007ad8:	e9c1 2300 	strd	r2, r3, [r1]
 8007adc:	e0a7      	b.n	8007c2e <__kernel_rem_pio2+0x66e>
 8007ade:	2d00      	cmp	r5, #0
 8007ae0:	db05      	blt.n	8007aee <__kernel_rem_pio2+0x52e>
 8007ae2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007ae6:	f7f8 fb75 	bl	80001d4 <__adddf3>
 8007aea:	3d01      	subs	r5, #1
 8007aec:	e7f7      	b.n	8007ade <__kernel_rem_pio2+0x51e>
 8007aee:	f1ba 0f00 	cmp.w	sl, #0
 8007af2:	d003      	beq.n	8007afc <__kernel_rem_pio2+0x53c>
 8007af4:	4602      	mov	r2, r0
 8007af6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007afa:	e001      	b.n	8007b00 <__kernel_rem_pio2+0x540>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	9c01      	ldr	r4, [sp, #4]
 8007b02:	e9c4 2300 	strd	r2, r3, [r4]
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007b0e:	f7f8 fb5f 	bl	80001d0 <__aeabi_dsub>
 8007b12:	ad4a      	add	r5, sp, #296	; 0x128
 8007b14:	2401      	movs	r4, #1
 8007b16:	45a3      	cmp	fp, r4
 8007b18:	db05      	blt.n	8007b26 <__kernel_rem_pio2+0x566>
 8007b1a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007b1e:	f7f8 fb59 	bl	80001d4 <__adddf3>
 8007b22:	3401      	adds	r4, #1
 8007b24:	e7f7      	b.n	8007b16 <__kernel_rem_pio2+0x556>
 8007b26:	f1ba 0f00 	cmp.w	sl, #0
 8007b2a:	d003      	beq.n	8007b34 <__kernel_rem_pio2+0x574>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b32:	e001      	b.n	8007b38 <__kernel_rem_pio2+0x578>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	9901      	ldr	r1, [sp, #4]
 8007b3a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007b3e:	e076      	b.n	8007c2e <__kernel_rem_pio2+0x66e>
 8007b40:	f1b9 0f00 	cmp.w	r9, #0
 8007b44:	dd20      	ble.n	8007b88 <__kernel_rem_pio2+0x5c8>
 8007b46:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
 8007b4a:	ed98 7b02 	vldr	d7, [r8, #8]
 8007b4e:	4630      	mov	r0, r6
 8007b50:	ec53 2b17 	vmov	r2, r3, d7
 8007b54:	4639      	mov	r1, r7
 8007b56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b5a:	f7f8 fb3b 	bl	80001d4 <__adddf3>
 8007b5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4630      	mov	r0, r6
 8007b68:	4639      	mov	r1, r7
 8007b6a:	f7f8 fb31 	bl	80001d0 <__aeabi_dsub>
 8007b6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b72:	f7f8 fb2f 	bl	80001d4 <__adddf3>
 8007b76:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007b7a:	f109 39ff 	add.w	r9, r9, #4294967295
 8007b7e:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8007b82:	ed88 7b00 	vstr	d7, [r8]
 8007b86:	e7db      	b.n	8007b40 <__kernel_rem_pio2+0x580>
 8007b88:	465e      	mov	r6, fp
 8007b8a:	2e01      	cmp	r6, #1
 8007b8c:	dd1f      	ble.n	8007bce <__kernel_rem_pio2+0x60e>
 8007b8e:	e974 8902 	ldrd	r8, r9, [r4, #-8]!
 8007b92:	ed94 7b02 	vldr	d7, [r4, #8]
 8007b96:	4640      	mov	r0, r8
 8007b98:	ec53 2b17 	vmov	r2, r3, d7
 8007b9c:	4649      	mov	r1, r9
 8007b9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ba2:	f7f8 fb17 	bl	80001d4 <__adddf3>
 8007ba6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	4640      	mov	r0, r8
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	f7f8 fb0d 	bl	80001d0 <__aeabi_dsub>
 8007bb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bba:	f7f8 fb0b 	bl	80001d4 <__adddf3>
 8007bbe:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007bc2:	3e01      	subs	r6, #1
 8007bc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007bc8:	ed84 7b00 	vstr	d7, [r4]
 8007bcc:	e7dd      	b.n	8007b8a <__kernel_rem_pio2+0x5ca>
 8007bce:	9c05      	ldr	r4, [sp, #20]
 8007bd0:	ab48      	add	r3, sp, #288	; 0x120
 8007bd2:	3408      	adds	r4, #8
 8007bd4:	441c      	add	r4, r3
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	2100      	movs	r1, #0
 8007bda:	f1bb 0f01 	cmp.w	fp, #1
 8007bde:	dd06      	ble.n	8007bee <__kernel_rem_pio2+0x62e>
 8007be0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007be4:	f7f8 faf6 	bl	80001d4 <__adddf3>
 8007be8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007bec:	e7f5      	b.n	8007bda <__kernel_rem_pio2+0x61a>
 8007bee:	f1ba 0f00 	cmp.w	sl, #0
 8007bf2:	d10b      	bne.n	8007c0c <__kernel_rem_pio2+0x64c>
 8007bf4:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8007bf8:	9c01      	ldr	r4, [sp, #4]
 8007bfa:	e9c4 2300 	strd	r2, r3, [r4]
 8007bfe:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8007c02:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8007c06:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007c0a:	e010      	b.n	8007c2e <__kernel_rem_pio2+0x66e>
 8007c0c:	9a01      	ldr	r2, [sp, #4]
 8007c0e:	682b      	ldr	r3, [r5, #0]
 8007c10:	6013      	str	r3, [r2, #0]
 8007c12:	686b      	ldr	r3, [r5, #4]
 8007c14:	6110      	str	r0, [r2, #16]
 8007c16:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007c1a:	6053      	str	r3, [r2, #4]
 8007c1c:	68ab      	ldr	r3, [r5, #8]
 8007c1e:	6093      	str	r3, [r2, #8]
 8007c20:	68eb      	ldr	r3, [r5, #12]
 8007c22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007c26:	60d3      	str	r3, [r2, #12]
 8007c28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c2c:	6153      	str	r3, [r2, #20]
 8007c2e:	9b04      	ldr	r3, [sp, #16]
 8007c30:	f003 0007 	and.w	r0, r3, #7
 8007c34:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3c:	f3af 8000 	nop.w
 8007c40:	00000000 	.word	0x00000000
 8007c44:	3ff00000 	.word	0x3ff00000
	...
 8007c50:	41700000 	.word	0x41700000
 8007c54:	3e700000 	.word	0x3e700000
 8007c58:	08008c88 	.word	0x08008c88
 8007c5c:	00000000 	.word	0x00000000

08007c60 <__kernel_sin>:
 8007c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c64:	ec55 4b10 	vmov	r4, r5, d0
 8007c68:	b085      	sub	sp, #20
 8007c6a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007c6e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007c72:	ed8d 1b00 	vstr	d1, [sp]
 8007c76:	9002      	str	r0, [sp, #8]
 8007c78:	da07      	bge.n	8007c8a <__kernel_sin+0x2a>
 8007c7a:	ee10 0a10 	vmov	r0, s0
 8007c7e:	4629      	mov	r1, r5
 8007c80:	f7f8 fef4 	bl	8000a6c <__aeabi_d2iz>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	f000 8081 	beq.w	8007d8c <__kernel_sin+0x12c>
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	462b      	mov	r3, r5
 8007c8e:	4620      	mov	r0, r4
 8007c90:	4629      	mov	r1, r5
 8007c92:	f7f8 fc51 	bl	8000538 <__aeabi_dmul>
 8007c96:	4682      	mov	sl, r0
 8007c98:	468b      	mov	fp, r1
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	f7f8 fc49 	bl	8000538 <__aeabi_dmul>
 8007ca6:	a341      	add	r3, pc, #260	; (adr r3, 8007dac <__kernel_sin+0x14c>)
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	4680      	mov	r8, r0
 8007cae:	4689      	mov	r9, r1
 8007cb0:	4650      	mov	r0, sl
 8007cb2:	4659      	mov	r1, fp
 8007cb4:	f7f8 fc40 	bl	8000538 <__aeabi_dmul>
 8007cb8:	a33e      	add	r3, pc, #248	; (adr r3, 8007db4 <__kernel_sin+0x154>)
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	f7f8 fa87 	bl	80001d0 <__aeabi_dsub>
 8007cc2:	4652      	mov	r2, sl
 8007cc4:	465b      	mov	r3, fp
 8007cc6:	f7f8 fc37 	bl	8000538 <__aeabi_dmul>
 8007cca:	a33c      	add	r3, pc, #240	; (adr r3, 8007dbc <__kernel_sin+0x15c>)
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f7f8 fa80 	bl	80001d4 <__adddf3>
 8007cd4:	4652      	mov	r2, sl
 8007cd6:	465b      	mov	r3, fp
 8007cd8:	f7f8 fc2e 	bl	8000538 <__aeabi_dmul>
 8007cdc:	a339      	add	r3, pc, #228	; (adr r3, 8007dc4 <__kernel_sin+0x164>)
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	f7f8 fa75 	bl	80001d0 <__aeabi_dsub>
 8007ce6:	4652      	mov	r2, sl
 8007ce8:	465b      	mov	r3, fp
 8007cea:	f7f8 fc25 	bl	8000538 <__aeabi_dmul>
 8007cee:	a337      	add	r3, pc, #220	; (adr r3, 8007dcc <__kernel_sin+0x16c>)
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	f7f8 fa6e 	bl	80001d4 <__adddf3>
 8007cf8:	9b02      	ldr	r3, [sp, #8]
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	460f      	mov	r7, r1
 8007cfe:	b99b      	cbnz	r3, 8007d28 <__kernel_sin+0xc8>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4650      	mov	r0, sl
 8007d06:	4659      	mov	r1, fp
 8007d08:	f7f8 fc16 	bl	8000538 <__aeabi_dmul>
 8007d0c:	a324      	add	r3, pc, #144	; (adr r3, 8007da0 <__kernel_sin+0x140>)
 8007d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d12:	f7f8 fa5d 	bl	80001d0 <__aeabi_dsub>
 8007d16:	4642      	mov	r2, r8
 8007d18:	464b      	mov	r3, r9
 8007d1a:	f7f8 fc0d 	bl	8000538 <__aeabi_dmul>
 8007d1e:	4622      	mov	r2, r4
 8007d20:	462b      	mov	r3, r5
 8007d22:	f7f8 fa57 	bl	80001d4 <__adddf3>
 8007d26:	e033      	b.n	8007d90 <__kernel_sin+0x130>
 8007d28:	2200      	movs	r2, #0
 8007d2a:	4b1f      	ldr	r3, [pc, #124]	; (8007da8 <__kernel_sin+0x148>)
 8007d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d30:	f7f8 fc02 	bl	8000538 <__aeabi_dmul>
 8007d34:	4632      	mov	r2, r6
 8007d36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d3a:	463b      	mov	r3, r7
 8007d3c:	4640      	mov	r0, r8
 8007d3e:	4649      	mov	r1, r9
 8007d40:	f7f8 fbfa 	bl	8000538 <__aeabi_dmul>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d4c:	f7f8 fa40 	bl	80001d0 <__aeabi_dsub>
 8007d50:	4652      	mov	r2, sl
 8007d52:	465b      	mov	r3, fp
 8007d54:	f7f8 fbf0 	bl	8000538 <__aeabi_dmul>
 8007d58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d5c:	f7f8 fa38 	bl	80001d0 <__aeabi_dsub>
 8007d60:	a30f      	add	r3, pc, #60	; (adr r3, 8007da0 <__kernel_sin+0x140>)
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	4606      	mov	r6, r0
 8007d68:	460f      	mov	r7, r1
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	4649      	mov	r1, r9
 8007d6e:	f7f8 fbe3 	bl	8000538 <__aeabi_dmul>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4630      	mov	r0, r6
 8007d78:	4639      	mov	r1, r7
 8007d7a:	f7f8 fa2b 	bl	80001d4 <__adddf3>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4620      	mov	r0, r4
 8007d84:	4629      	mov	r1, r5
 8007d86:	f7f8 fa23 	bl	80001d0 <__aeabi_dsub>
 8007d8a:	e001      	b.n	8007d90 <__kernel_sin+0x130>
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	4629      	mov	r1, r5
 8007d90:	ec41 0b10 	vmov	d0, r0, r1
 8007d94:	b005      	add	sp, #20
 8007d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9a:	bf00      	nop
 8007d9c:	f3af 8000 	nop.w
 8007da0:	55555549 	.word	0x55555549
 8007da4:	3fc55555 	.word	0x3fc55555
 8007da8:	3fe00000 	.word	0x3fe00000
 8007dac:	5acfd57c 	.word	0x5acfd57c
 8007db0:	3de5d93a 	.word	0x3de5d93a
 8007db4:	8a2b9ceb 	.word	0x8a2b9ceb
 8007db8:	3e5ae5e6 	.word	0x3e5ae5e6
 8007dbc:	57b1fe7d 	.word	0x57b1fe7d
 8007dc0:	3ec71de3 	.word	0x3ec71de3
 8007dc4:	19c161d5 	.word	0x19c161d5
 8007dc8:	3f2a01a0 	.word	0x3f2a01a0
 8007dcc:	1110f8a6 	.word	0x1110f8a6
 8007dd0:	3f811111 	.word	0x3f811111

08007dd4 <fabs>:
 8007dd4:	ec53 2b10 	vmov	r2, r3, d0
 8007dd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ddc:	ec43 2b10 	vmov	d0, r2, r3
 8007de0:	4770      	bx	lr
 8007de2:	0000      	movs	r0, r0
 8007de4:	0000      	movs	r0, r0
	...

08007de8 <floor>:
 8007de8:	ec51 0b10 	vmov	r0, r1, d0
 8007dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007df4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007df8:	2e13      	cmp	r6, #19
 8007dfa:	ee10 8a10 	vmov	r8, s0
 8007dfe:	460c      	mov	r4, r1
 8007e00:	ee10 5a10 	vmov	r5, s0
 8007e04:	dc33      	bgt.n	8007e6e <floor+0x86>
 8007e06:	2e00      	cmp	r6, #0
 8007e08:	da16      	bge.n	8007e38 <floor+0x50>
 8007e0a:	a335      	add	r3, pc, #212	; (adr r3, 8007ee0 <floor+0xf8>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f7f8 f9e0 	bl	80001d4 <__adddf3>
 8007e14:	2200      	movs	r2, #0
 8007e16:	2300      	movs	r3, #0
 8007e18:	f7f8 fe1e 	bl	8000a58 <__aeabi_dcmpgt>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d057      	beq.n	8007ed0 <floor+0xe8>
 8007e20:	2c00      	cmp	r4, #0
 8007e22:	da53      	bge.n	8007ecc <floor+0xe4>
 8007e24:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007e28:	ea53 0308 	orrs.w	r3, r3, r8
 8007e2c:	4b2e      	ldr	r3, [pc, #184]	; (8007ee8 <floor+0x100>)
 8007e2e:	f04f 0500 	mov.w	r5, #0
 8007e32:	bf18      	it	ne
 8007e34:	461c      	movne	r4, r3
 8007e36:	e04b      	b.n	8007ed0 <floor+0xe8>
 8007e38:	4f2c      	ldr	r7, [pc, #176]	; (8007eec <floor+0x104>)
 8007e3a:	4137      	asrs	r7, r6
 8007e3c:	ea01 0307 	and.w	r3, r1, r7
 8007e40:	4303      	orrs	r3, r0
 8007e42:	d047      	beq.n	8007ed4 <floor+0xec>
 8007e44:	a326      	add	r3, pc, #152	; (adr r3, 8007ee0 <floor+0xf8>)
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	f7f8 f9c3 	bl	80001d4 <__adddf3>
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2300      	movs	r3, #0
 8007e52:	f7f8 fe01 	bl	8000a58 <__aeabi_dcmpgt>
 8007e56:	b3d8      	cbz	r0, 8007ed0 <floor+0xe8>
 8007e58:	2c00      	cmp	r4, #0
 8007e5a:	bfbe      	ittt	lt
 8007e5c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007e60:	fa43 f606 	asrlt.w	r6, r3, r6
 8007e64:	19a4      	addlt	r4, r4, r6
 8007e66:	ea24 0407 	bic.w	r4, r4, r7
 8007e6a:	2500      	movs	r5, #0
 8007e6c:	e030      	b.n	8007ed0 <floor+0xe8>
 8007e6e:	2e33      	cmp	r6, #51	; 0x33
 8007e70:	dd08      	ble.n	8007e84 <floor+0x9c>
 8007e72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007e76:	d12d      	bne.n	8007ed4 <floor+0xec>
 8007e78:	ee10 2a10 	vmov	r2, s0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	f7f8 f9a9 	bl	80001d4 <__adddf3>
 8007e82:	e027      	b.n	8007ed4 <floor+0xec>
 8007e84:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007e88:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8c:	fa23 f707 	lsr.w	r7, r3, r7
 8007e90:	4238      	tst	r0, r7
 8007e92:	d01f      	beq.n	8007ed4 <floor+0xec>
 8007e94:	a312      	add	r3, pc, #72	; (adr r3, 8007ee0 <floor+0xf8>)
 8007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9a:	f7f8 f99b 	bl	80001d4 <__adddf3>
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f7f8 fdd9 	bl	8000a58 <__aeabi_dcmpgt>
 8007ea6:	b198      	cbz	r0, 8007ed0 <floor+0xe8>
 8007ea8:	2c00      	cmp	r4, #0
 8007eaa:	da0c      	bge.n	8007ec6 <floor+0xde>
 8007eac:	2e14      	cmp	r6, #20
 8007eae:	d101      	bne.n	8007eb4 <floor+0xcc>
 8007eb0:	3401      	adds	r4, #1
 8007eb2:	e008      	b.n	8007ec6 <floor+0xde>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007eba:	fa03 f606 	lsl.w	r6, r3, r6
 8007ebe:	4435      	add	r5, r6
 8007ec0:	45a8      	cmp	r8, r5
 8007ec2:	bf88      	it	hi
 8007ec4:	18e4      	addhi	r4, r4, r3
 8007ec6:	ea25 0507 	bic.w	r5, r5, r7
 8007eca:	e001      	b.n	8007ed0 <floor+0xe8>
 8007ecc:	2500      	movs	r5, #0
 8007ece:	462c      	mov	r4, r5
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	ec41 0b10 	vmov	d0, r0, r1
 8007ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007edc:	f3af 8000 	nop.w
 8007ee0:	8800759c 	.word	0x8800759c
 8007ee4:	7e37e43c 	.word	0x7e37e43c
 8007ee8:	bff00000 	.word	0xbff00000
 8007eec:	000fffff 	.word	0x000fffff

08007ef0 <matherr>:
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	4770      	bx	lr

08007ef4 <rint>:
 8007ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ef6:	ec53 2b10 	vmov	r2, r3, d0
 8007efa:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8007efe:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007f02:	2e13      	cmp	r6, #19
 8007f04:	461d      	mov	r5, r3
 8007f06:	4611      	mov	r1, r2
 8007f08:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8007f0c:	dc42      	bgt.n	8007f94 <rint+0xa0>
 8007f0e:	2e00      	cmp	r6, #0
 8007f10:	da28      	bge.n	8007f64 <rint+0x70>
 8007f12:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f16:	4311      	orrs	r1, r2
 8007f18:	d06b      	beq.n	8007ff2 <rint+0xfe>
 8007f1a:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8007f1e:	4316      	orrs	r6, r2
 8007f20:	4273      	negs	r3, r6
 8007f22:	431e      	orrs	r6, r3
 8007f24:	4b36      	ldr	r3, [pc, #216]	; (8008000 <rint+0x10c>)
 8007f26:	0b36      	lsrs	r6, r6, #12
 8007f28:	0c6d      	lsrs	r5, r5, #17
 8007f2a:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8007f2e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f32:	046d      	lsls	r5, r5, #17
 8007f34:	ea46 0105 	orr.w	r1, r6, r5
 8007f38:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007f3c:	ee10 0a10 	vmov	r0, s0
 8007f40:	4632      	mov	r2, r6
 8007f42:	463b      	mov	r3, r7
 8007f44:	f7f8 f946 	bl	80001d4 <__adddf3>
 8007f48:	e9cd 0100 	strd	r0, r1, [sp]
 8007f4c:	4632      	mov	r2, r6
 8007f4e:	463b      	mov	r3, r7
 8007f50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f54:	f7f8 f93c 	bl	80001d0 <__aeabi_dsub>
 8007f58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	ea41 73c4 	orr.w	r3, r1, r4, lsl #31
 8007f62:	e046      	b.n	8007ff2 <rint+0xfe>
 8007f64:	4827      	ldr	r0, [pc, #156]	; (8008004 <rint+0x110>)
 8007f66:	4130      	asrs	r0, r6
 8007f68:	ea03 0700 	and.w	r7, r3, r0
 8007f6c:	4317      	orrs	r7, r2
 8007f6e:	d040      	beq.n	8007ff2 <rint+0xfe>
 8007f70:	0843      	lsrs	r3, r0, #1
 8007f72:	ea05 0203 	and.w	r2, r5, r3
 8007f76:	4311      	orrs	r1, r2
 8007f78:	d027      	beq.n	8007fca <rint+0xd6>
 8007f7a:	ea25 0303 	bic.w	r3, r5, r3
 8007f7e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8007f82:	2e13      	cmp	r6, #19
 8007f84:	fa45 f506 	asr.w	r5, r5, r6
 8007f88:	bf0c      	ite	eq
 8007f8a:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
 8007f8e:	2100      	movne	r1, #0
 8007f90:	431d      	orrs	r5, r3
 8007f92:	e01a      	b.n	8007fca <rint+0xd6>
 8007f94:	2e33      	cmp	r6, #51	; 0x33
 8007f96:	dd08      	ble.n	8007faa <rint+0xb6>
 8007f98:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007f9c:	ee10 0a10 	vmov	r0, s0
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	d128      	bne.n	8007ff6 <rint+0x102>
 8007fa4:	f7f8 f916 	bl	80001d4 <__adddf3>
 8007fa8:	e025      	b.n	8007ff6 <rint+0x102>
 8007faa:	f2a7 4613 	subw	r6, r7, #1043	; 0x413
 8007fae:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb2:	40f0      	lsrs	r0, r6
 8007fb4:	4202      	tst	r2, r0
 8007fb6:	d01c      	beq.n	8007ff2 <rint+0xfe>
 8007fb8:	0843      	lsrs	r3, r0, #1
 8007fba:	4219      	tst	r1, r3
 8007fbc:	bf1f      	itttt	ne
 8007fbe:	ea21 0303 	bicne.w	r3, r1, r3
 8007fc2:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000
 8007fc6:	4131      	asrne	r1, r6
 8007fc8:	4319      	orrne	r1, r3
 8007fca:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <rint+0x10c>)
 8007fcc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	e9d4 4500 	ldrd	r4, r5, [r4]
 8007fd8:	4622      	mov	r2, r4
 8007fda:	462b      	mov	r3, r5
 8007fdc:	f7f8 f8fa 	bl	80001d4 <__adddf3>
 8007fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	462b      	mov	r3, r5
 8007fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fec:	f7f8 f8f0 	bl	80001d0 <__aeabi_dsub>
 8007ff0:	e001      	b.n	8007ff6 <rint+0x102>
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	ec41 0b10 	vmov	d0, r0, r1
 8007ffa:	b003      	add	sp, #12
 8007ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ffe:	bf00      	nop
 8008000:	08008cc8 	.word	0x08008cc8
 8008004:	000fffff 	.word	0x000fffff

08008008 <scalbn>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	ec55 4b10 	vmov	r4, r5, d0
 800800e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008012:	4606      	mov	r6, r0
 8008014:	462b      	mov	r3, r5
 8008016:	b9a2      	cbnz	r2, 8008042 <scalbn+0x3a>
 8008018:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800801c:	4323      	orrs	r3, r4
 800801e:	d059      	beq.n	80080d4 <scalbn+0xcc>
 8008020:	2200      	movs	r2, #0
 8008022:	4b33      	ldr	r3, [pc, #204]	; (80080f0 <scalbn+0xe8>)
 8008024:	4629      	mov	r1, r5
 8008026:	ee10 0a10 	vmov	r0, s0
 800802a:	f7f8 fa85 	bl	8000538 <__aeabi_dmul>
 800802e:	4a31      	ldr	r2, [pc, #196]	; (80080f4 <scalbn+0xec>)
 8008030:	4296      	cmp	r6, r2
 8008032:	4604      	mov	r4, r0
 8008034:	460d      	mov	r5, r1
 8008036:	460b      	mov	r3, r1
 8008038:	da0f      	bge.n	800805a <scalbn+0x52>
 800803a:	a329      	add	r3, pc, #164	; (adr r3, 80080e0 <scalbn+0xd8>)
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	e045      	b.n	80080ce <scalbn+0xc6>
 8008042:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008046:	428a      	cmp	r2, r1
 8008048:	d10a      	bne.n	8008060 <scalbn+0x58>
 800804a:	ee10 2a10 	vmov	r2, s0
 800804e:	462b      	mov	r3, r5
 8008050:	4620      	mov	r0, r4
 8008052:	4629      	mov	r1, r5
 8008054:	f7f8 f8be 	bl	80001d4 <__adddf3>
 8008058:	e03e      	b.n	80080d8 <scalbn+0xd0>
 800805a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800805e:	3a36      	subs	r2, #54	; 0x36
 8008060:	4432      	add	r2, r6
 8008062:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008066:	428a      	cmp	r2, r1
 8008068:	dd02      	ble.n	8008070 <scalbn+0x68>
 800806a:	ec45 4b11 	vmov	d1, r4, r5
 800806e:	e011      	b.n	8008094 <scalbn+0x8c>
 8008070:	2a00      	cmp	r2, #0
 8008072:	dd06      	ble.n	8008082 <scalbn+0x7a>
 8008074:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008078:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800807c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008080:	e028      	b.n	80080d4 <scalbn+0xcc>
 8008082:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008086:	da17      	bge.n	80080b8 <scalbn+0xb0>
 8008088:	f24c 3350 	movw	r3, #50000	; 0xc350
 800808c:	429e      	cmp	r6, r3
 800808e:	ec45 4b11 	vmov	d1, r4, r5
 8008092:	dd07      	ble.n	80080a4 <scalbn+0x9c>
 8008094:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80080e8 <scalbn+0xe0>
 8008098:	f000 f8a6 	bl	80081e8 <copysign>
 800809c:	a312      	add	r3, pc, #72	; (adr r3, 80080e8 <scalbn+0xe0>)
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	e006      	b.n	80080b2 <scalbn+0xaa>
 80080a4:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80080e0 <scalbn+0xd8>
 80080a8:	f000 f89e 	bl	80081e8 <copysign>
 80080ac:	a30c      	add	r3, pc, #48	; (adr r3, 80080e0 <scalbn+0xd8>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	ec51 0b10 	vmov	r0, r1, d0
 80080b6:	e00a      	b.n	80080ce <scalbn+0xc6>
 80080b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80080bc:	3236      	adds	r2, #54	; 0x36
 80080be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80080c6:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <scalbn+0xf0>)
 80080c8:	4620      	mov	r0, r4
 80080ca:	4629      	mov	r1, r5
 80080cc:	2200      	movs	r2, #0
 80080ce:	f7f8 fa33 	bl	8000538 <__aeabi_dmul>
 80080d2:	e001      	b.n	80080d8 <scalbn+0xd0>
 80080d4:	4620      	mov	r0, r4
 80080d6:	4629      	mov	r1, r5
 80080d8:	ec41 0b10 	vmov	d0, r0, r1
 80080dc:	bd70      	pop	{r4, r5, r6, pc}
 80080de:	bf00      	nop
 80080e0:	c2f8f359 	.word	0xc2f8f359
 80080e4:	01a56e1f 	.word	0x01a56e1f
 80080e8:	8800759c 	.word	0x8800759c
 80080ec:	7e37e43c 	.word	0x7e37e43c
 80080f0:	43500000 	.word	0x43500000
 80080f4:	ffff3cb0 	.word	0xffff3cb0
 80080f8:	3c900000 	.word	0x3c900000

080080fc <fabsf>:
 80080fc:	ee10 3a10 	vmov	r3, s0
 8008100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008104:	ee00 3a10 	vmov	s0, r3
 8008108:	4770      	bx	lr

0800810a <finitef>:
 800810a:	ee10 3a10 	vmov	r3, s0
 800810e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8008112:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008116:	bfac      	ite	ge
 8008118:	2000      	movge	r0, #0
 800811a:	2001      	movlt	r0, #1
 800811c:	4770      	bx	lr
	...

08008120 <nanf>:
 8008120:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008128 <nanf+0x8>
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	7fc00000 	.word	0x7fc00000

0800812c <scalbnf>:
 800812c:	b508      	push	{r3, lr}
 800812e:	ee10 2a10 	vmov	r2, s0
 8008132:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8008136:	ed2d 8b02 	vpush	{d8}
 800813a:	eef0 0a40 	vmov.f32	s1, s0
 800813e:	d045      	beq.n	80081cc <scalbnf+0xa0>
 8008140:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008144:	d302      	bcc.n	800814c <scalbnf+0x20>
 8008146:	ee30 0a00 	vadd.f32	s0, s0, s0
 800814a:	e03f      	b.n	80081cc <scalbnf+0xa0>
 800814c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008150:	d211      	bcs.n	8008176 <scalbnf+0x4a>
 8008152:	4b20      	ldr	r3, [pc, #128]	; (80081d4 <scalbnf+0xa8>)
 8008154:	eddf 7a20 	vldr	s15, [pc, #128]	; 80081d8 <scalbnf+0xac>
 8008158:	4298      	cmp	r0, r3
 800815a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800815e:	db05      	blt.n	800816c <scalbnf+0x40>
 8008160:	ee10 2a90 	vmov	r2, s1
 8008164:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008168:	3b19      	subs	r3, #25
 800816a:	e005      	b.n	8008178 <scalbnf+0x4c>
 800816c:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80081dc <scalbnf+0xb0>
 8008170:	ee20 0a80 	vmul.f32	s0, s1, s0
 8008174:	e02a      	b.n	80081cc <scalbnf+0xa0>
 8008176:	0ddb      	lsrs	r3, r3, #23
 8008178:	4403      	add	r3, r0
 800817a:	2bfe      	cmp	r3, #254	; 0xfe
 800817c:	dc0f      	bgt.n	800819e <scalbnf+0x72>
 800817e:	2b00      	cmp	r3, #0
 8008180:	dd06      	ble.n	8008190 <scalbnf+0x64>
 8008182:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008186:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800818a:	ee00 3a10 	vmov	s0, r3
 800818e:	e01d      	b.n	80081cc <scalbnf+0xa0>
 8008190:	f113 0f16 	cmn.w	r3, #22
 8008194:	da0f      	bge.n	80081b6 <scalbnf+0x8a>
 8008196:	f24c 3350 	movw	r3, #50000	; 0xc350
 800819a:	4298      	cmp	r0, r3
 800819c:	dd02      	ble.n	80081a4 <scalbnf+0x78>
 800819e:	ed9f 8a10 	vldr	s16, [pc, #64]	; 80081e0 <scalbnf+0xb4>
 80081a2:	e001      	b.n	80081a8 <scalbnf+0x7c>
 80081a4:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 80081dc <scalbnf+0xb0>
 80081a8:	eeb0 0a48 	vmov.f32	s0, s16
 80081ac:	f000 f829 	bl	8008202 <copysignf>
 80081b0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80081b4:	e00a      	b.n	80081cc <scalbnf+0xa0>
 80081b6:	3319      	adds	r3, #25
 80081b8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80081bc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80081c0:	ee00 3a90 	vmov	s1, r3
 80081c4:	eddf 7a07 	vldr	s15, [pc, #28]	; 80081e4 <scalbnf+0xb8>
 80081c8:	ee20 0aa7 	vmul.f32	s0, s1, s15
 80081cc:	ecbd 8b02 	vpop	{d8}
 80081d0:	bd08      	pop	{r3, pc}
 80081d2:	bf00      	nop
 80081d4:	ffff3cb0 	.word	0xffff3cb0
 80081d8:	4c000000 	.word	0x4c000000
 80081dc:	0da24260 	.word	0x0da24260
 80081e0:	7149f2ca 	.word	0x7149f2ca
 80081e4:	33000000 	.word	0x33000000

080081e8 <copysign>:
 80081e8:	ec53 2b10 	vmov	r2, r3, d0
 80081ec:	ee11 0a90 	vmov	r0, s3
 80081f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80081f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80081f8:	ea41 0300 	orr.w	r3, r1, r0
 80081fc:	ec43 2b10 	vmov	d0, r2, r3
 8008200:	4770      	bx	lr

08008202 <copysignf>:
 8008202:	ee10 3a10 	vmov	r3, s0
 8008206:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800820a:	ee10 3a90 	vmov	r3, s1
 800820e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008212:	4313      	orrs	r3, r2
 8008214:	ee00 3a10 	vmov	s0, r3
 8008218:	4770      	bx	lr
	...

0800821c <__errno>:
 800821c:	4b01      	ldr	r3, [pc, #4]	; (8008224 <__errno+0x8>)
 800821e:	6818      	ldr	r0, [r3, #0]
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	2000018c 	.word	0x2000018c

08008228 <_sbrk>:
 8008228:	4b04      	ldr	r3, [pc, #16]	; (800823c <_sbrk+0x14>)
 800822a:	6819      	ldr	r1, [r3, #0]
 800822c:	4602      	mov	r2, r0
 800822e:	b909      	cbnz	r1, 8008234 <_sbrk+0xc>
 8008230:	4903      	ldr	r1, [pc, #12]	; (8008240 <_sbrk+0x18>)
 8008232:	6019      	str	r1, [r3, #0]
 8008234:	6818      	ldr	r0, [r3, #0]
 8008236:	4402      	add	r2, r0
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	4770      	bx	lr
 800823c:	200049ac 	.word	0x200049ac
 8008240:	20006ae0 	.word	0x20006ae0

08008244 <_init>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	bf00      	nop
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr

08008250 <_fini>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	bf00      	nop
 8008254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008256:	bc08      	pop	{r3}
 8008258:	469e      	mov	lr, r3
 800825a:	4770      	bx	lr
