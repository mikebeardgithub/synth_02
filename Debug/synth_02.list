
C:\stm32_workspace\synth_02\Debug\synth_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000560c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  08005794  08005794  00015794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005fa0  08005fa0  00015fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a0  20000000  08005fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
  7 .bss          0000553c  200000a0  200000a0  000200a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200055dc  200055dc  000200a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000be08  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e33  00000000  00000000  0002bed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e90  00000000  00000000  0002dd10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d30  00000000  00000000  0002eba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000054d1  00000000  00000000  0002f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004b9e  00000000  00000000  00034da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000ee  00000000  00000000  0003993f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003d18  00000000  00000000  00039a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000000c8  00000000  00000000  0003d748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800577c 	.word	0x0800577c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	0800577c 	.word	0x0800577c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73bb      	strb	r3, [r7, #14]
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	78db      	ldrb	r3, [r3, #3]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d038      	beq.n	8000a8a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <NVIC_Init+0xbc>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a22:	0a1b      	lsrs	r3, r3, #8
 8000a24:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
 8000a28:	f1c3 0304 	rsb	r3, r3, #4
 8000a2c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000a2e:	7b7a      	ldrb	r2, [r7, #13]
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	fa42 f303 	asr.w	r3, r2, r3
 8000a36:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	7bbb      	ldrb	r3, [r7, #14]
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	789a      	ldrb	r2, [r3, #2]
 8000a4a:	7b7b      	ldrb	r3, [r7, #13]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	011b      	lsls	r3, r3, #4
 8000a5a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000a5c:	4a17      	ldr	r2, [pc, #92]	; (8000abc <NVIC_Init+0xc0>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	7bfa      	ldrb	r2, [r7, #15]
 8000a66:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a6a:	4a14      	ldr	r2, [pc, #80]	; (8000abc <NVIC_Init+0xc0>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	095b      	lsrs	r3, r3, #5
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	f003 031f 	and.w	r3, r3, #31
 8000a7e:	2101      	movs	r1, #1
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a84:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000a88:	e00f      	b.n	8000aaa <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a8a:	490c      	ldr	r1, [pc, #48]	; (8000abc <NVIC_Init+0xc0>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	095b      	lsrs	r3, r3, #5
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	f003 031f 	and.w	r3, r3, #31
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000aa2:	f100 0320 	add.w	r3, r0, #32
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000aca:	f001 f973 	bl	8001db4 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ad4:	f001 f96e 	bl	8001db4 <RCC_APB2PeriphResetCmd>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000afe:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	791b      	ldrb	r3, [r3, #4]
 8000b04:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <ADC_Init+0xa8>)
 8000b22:	4013      	ands	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b2e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000b34:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	795b      	ldrb	r3, [r3, #5]
 8000b3a:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000b56:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	7d1b      	ldrb	r3, [r3, #20]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	7afb      	ldrb	r3, [r7, #11]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000b66:	7afb      	ldrb	r3, [r7, #11]
 8000b68:	051b      	lsls	r3, r3, #20
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	c0fff7fd 	.word	0xc0fff7fd

08000b88 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	751a      	strb	r2, [r3, #20]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <ADC_CommonInit+0x48>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <ADC_CommonInit+0x4c>)
 8000bde:	4013      	ands	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000bea:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000bf0:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000bf6:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <ADC_CommonInit+0x48>)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6053      	str	r3, [r2, #4]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	40012300 	.word	0x40012300
 8000c14:	fffc30e0 	.word	0xfffc30e0

08000c18 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d006      	beq.n	8000c64 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f043 0201 	orr.w	r2, r3, #1
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000c62:	e005      	b.n	8000c70 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f023 0201 	bic.w	r2, r3, #1
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
  }
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	4608      	mov	r0, r1
 8000c86:	4611      	mov	r1, r2
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	70fb      	strb	r3, [r7, #3]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	70bb      	strb	r3, [r7, #2]
 8000c92:	4613      	mov	r3, r2
 8000c94:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	2b09      	cmp	r3, #9
 8000ca2:	d923      	bls.n	8000cec <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	f1a3 020a 	sub.w	r2, r3, #10
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000cc8:	7879      	ldrb	r1, [r7, #1]
 8000cca:	78fb      	ldrb	r3, [r7, #3]
 8000ccc:	f1a3 020a 	sub.w	r2, r3, #10
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	e01e      	b.n	8000d2a <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000cf2:	78fa      	ldrb	r2, [r7, #3]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	2207      	movs	r2, #7
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000d0c:	7879      	ldrb	r1, [r7, #1]
 8000d0e:	78fa      	ldrb	r2, [r7, #3]
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000d2a:	78bb      	ldrb	r3, [r7, #2]
 8000d2c:	2b06      	cmp	r3, #6
 8000d2e:	d821      	bhi.n	8000d74 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d34:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000d36:	78bb      	ldrb	r3, [r7, #2]
 8000d38:	1e5a      	subs	r2, r3, #1
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	221f      	movs	r2, #31
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000d52:	78f9      	ldrb	r1, [r7, #3]
 8000d54:	78bb      	ldrb	r3, [r7, #2]
 8000d56:	1e5a      	subs	r2, r3, #1
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000d72:	e047      	b.n	8000e04 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000d74:	78bb      	ldrb	r3, [r7, #2]
 8000d76:	2b0c      	cmp	r3, #12
 8000d78:	d821      	bhi.n	8000dbe <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000d80:	78bb      	ldrb	r3, [r7, #2]
 8000d82:	1fda      	subs	r2, r3, #7
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	221f      	movs	r2, #31
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000d9c:	78f9      	ldrb	r1, [r7, #3]
 8000d9e:	78bb      	ldrb	r3, [r7, #2]
 8000da0:	1fda      	subs	r2, r3, #7
 8000da2:	4613      	mov	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000dbc:	e022      	b.n	8000e04 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000dc4:	78bb      	ldrb	r3, [r7, #2]
 8000dc6:	f1a3 020d 	sub.w	r2, r3, #13
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	221f      	movs	r2, #31
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4013      	ands	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000de2:	78f9      	ldrb	r1, [r7, #3]
 8000de4:	78bb      	ldrb	r3, [r7, #2]
 8000de6:	f1a3 020d 	sub.w	r2, r3, #13
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d006      	beq.n	8000e30 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000e2e:	e005      	b.n	8000e3c <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d006      	beq.n	8000e68 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8000e66:	e005      	b.n	8000e74 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	609a      	str	r2, [r3, #8]
  }
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8000e90:	887b      	ldrh	r3, [r7, #2]
 8000e92:	0a1b      	lsrs	r3, r3, #8
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	601a      	str	r2, [r3, #0]
}                    
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <DAC_Init+0x64>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000ec4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ee4:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <DAC_Init+0x64>)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6013      	str	r3, [r2, #0]
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40007400 	.word	0x40007400

08000f14 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d009      	beq.n	8000f3a <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000f26:	490d      	ldr	r1, [pc, #52]	; (8000f5c <DAC_Cmd+0x48>)
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <DAC_Cmd+0x48>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	fa00 f303 	lsl.w	r3, r0, r3
 8000f34:	4313      	orrs	r3, r2
 8000f36:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000f38:	e009      	b.n	8000f4e <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <DAC_Cmd+0x48>)
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <DAC_Cmd+0x48>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2001      	movs	r0, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	fa00 f303 	lsl.w	r3, r0, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	600b      	str	r3, [r1, #0]
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40007400 	.word	0x40007400

08000f60 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <DAC_SetChannel1Data+0x34>)
 8000f72:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	461a      	mov	r2, r3
 8000f82:	887b      	ldrh	r3, [r7, #2]
 8000f84:	6013      	str	r3, [r2, #0]
}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40007400 	.word	0x40007400

08000f98 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f023 0201 	bic.w	r2, r3, #1
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2221      	movs	r2, #33	; 0x21
 8000fce:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a46      	ldr	r2, [pc, #280]	; (80010ec <DMA_DeInit+0x154>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d103      	bne.n	8000fe0 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000fd8:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <DMA_DeInit+0x158>)
 8000fda:	223d      	movs	r2, #61	; 0x3d
 8000fdc:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000fde:	e07e      	b.n	80010de <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a44      	ldr	r2, [pc, #272]	; (80010f4 <DMA_DeInit+0x15c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d104      	bne.n	8000ff2 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000fe8:	4b41      	ldr	r3, [pc, #260]	; (80010f0 <DMA_DeInit+0x158>)
 8000fea:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000fee:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000ff0:	e075      	b.n	80010de <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a40      	ldr	r2, [pc, #256]	; (80010f8 <DMA_DeInit+0x160>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d104      	bne.n	8001004 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <DMA_DeInit+0x158>)
 8000ffc:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001000:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001002:	e06c      	b.n	80010de <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a3d      	ldr	r2, [pc, #244]	; (80010fc <DMA_DeInit+0x164>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d104      	bne.n	8001016 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800100c:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <DMA_DeInit+0x158>)
 800100e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8001012:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001014:	e063      	b.n	80010de <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a39      	ldr	r2, [pc, #228]	; (8001100 <DMA_DeInit+0x168>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d103      	bne.n	8001026 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800101e:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <DMA_DeInit+0x158>)
 8001020:	4a38      	ldr	r2, [pc, #224]	; (8001104 <DMA_DeInit+0x16c>)
 8001022:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001024:	e05b      	b.n	80010de <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a37      	ldr	r2, [pc, #220]	; (8001108 <DMA_DeInit+0x170>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d103      	bne.n	8001036 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800102e:	4b30      	ldr	r3, [pc, #192]	; (80010f0 <DMA_DeInit+0x158>)
 8001030:	4a36      	ldr	r2, [pc, #216]	; (800110c <DMA_DeInit+0x174>)
 8001032:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001034:	e053      	b.n	80010de <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a35      	ldr	r2, [pc, #212]	; (8001110 <DMA_DeInit+0x178>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d103      	bne.n	8001046 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800103e:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <DMA_DeInit+0x158>)
 8001040:	4a34      	ldr	r2, [pc, #208]	; (8001114 <DMA_DeInit+0x17c>)
 8001042:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001044:	e04b      	b.n	80010de <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a33      	ldr	r2, [pc, #204]	; (8001118 <DMA_DeInit+0x180>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d104      	bne.n	8001058 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <DMA_DeInit+0x158>)
 8001050:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001054:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001056:	e042      	b.n	80010de <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a30      	ldr	r2, [pc, #192]	; (800111c <DMA_DeInit+0x184>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d103      	bne.n	8001068 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8001060:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <DMA_DeInit+0x188>)
 8001062:	223d      	movs	r2, #61	; 0x3d
 8001064:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001066:	e03a      	b.n	80010de <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <DMA_DeInit+0x18c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d104      	bne.n	800107a <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8001070:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <DMA_DeInit+0x188>)
 8001072:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8001076:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001078:	e031      	b.n	80010de <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a2a      	ldr	r2, [pc, #168]	; (8001128 <DMA_DeInit+0x190>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d104      	bne.n	800108c <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8001082:	4b27      	ldr	r3, [pc, #156]	; (8001120 <DMA_DeInit+0x188>)
 8001084:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001088:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800108a:	e028      	b.n	80010de <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a27      	ldr	r2, [pc, #156]	; (800112c <DMA_DeInit+0x194>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d104      	bne.n	800109e <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <DMA_DeInit+0x188>)
 8001096:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800109a:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800109c:	e01f      	b.n	80010de <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a23      	ldr	r2, [pc, #140]	; (8001130 <DMA_DeInit+0x198>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d103      	bne.n	80010ae <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <DMA_DeInit+0x188>)
 80010a8:	4a16      	ldr	r2, [pc, #88]	; (8001104 <DMA_DeInit+0x16c>)
 80010aa:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80010ac:	e017      	b.n	80010de <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a20      	ldr	r2, [pc, #128]	; (8001134 <DMA_DeInit+0x19c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d103      	bne.n	80010be <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <DMA_DeInit+0x188>)
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <DMA_DeInit+0x174>)
 80010ba:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80010bc:	e00f      	b.n	80010de <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <DMA_DeInit+0x1a0>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d103      	bne.n	80010ce <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <DMA_DeInit+0x188>)
 80010c8:	4a12      	ldr	r2, [pc, #72]	; (8001114 <DMA_DeInit+0x17c>)
 80010ca:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80010cc:	e007      	b.n	80010de <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a1a      	ldr	r2, [pc, #104]	; (800113c <DMA_DeInit+0x1a4>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d103      	bne.n	80010de <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <DMA_DeInit+0x188>)
 80010d8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80010dc:	60da      	str	r2, [r3, #12]
    }
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40026010 	.word	0x40026010
 80010f0:	40026000 	.word	0x40026000
 80010f4:	40026028 	.word	0x40026028
 80010f8:	40026040 	.word	0x40026040
 80010fc:	40026058 	.word	0x40026058
 8001100:	40026070 	.word	0x40026070
 8001104:	2000003d 	.word	0x2000003d
 8001108:	40026088 	.word	0x40026088
 800110c:	20000f40 	.word	0x20000f40
 8001110:	400260a0 	.word	0x400260a0
 8001114:	203d0000 	.word	0x203d0000
 8001118:	400260b8 	.word	0x400260b8
 800111c:	40026410 	.word	0x40026410
 8001120:	40026400 	.word	0x40026400
 8001124:	40026428 	.word	0x40026428
 8001128:	40026440 	.word	0x40026440
 800112c:	40026458 	.word	0x40026458
 8001130:	40026470 	.word	0x40026470
 8001134:	40026488 	.word	0x40026488
 8001138:	400264a0 	.word	0x400264a0
 800113c:	400264b8 	.word	0x400264b8

08001140 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <DMA_Init+0xac>)
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800116a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001176:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001182:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001188:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800118e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001194:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f023 0307 	bic.w	r3, r3, #7
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	4313      	orrs	r3, r2
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60da      	str	r2, [r3, #12]
}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	f01c803f 	.word	0xf01c803f

080011f0 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop

08001260 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f043 0201 	orr.w	r2, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800127e:	e005      	b.n	800128c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f023 0201 	bic.w	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	601a      	str	r2, [r3, #0]
  }
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a15      	ldr	r2, [pc, #84]	; (8001304 <DMA_GetFlagStatus+0x6c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d802      	bhi.n	80012b8 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <DMA_GetFlagStatus+0x70>)
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	e001      	b.n	80012bc <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <DMA_GetFlagStatus+0x74>)
 80012ba:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	e002      	b.n	80012d4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80012da:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80012de:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80012ea:	2301      	movs	r3, #1
 80012ec:	75fb      	strb	r3, [r7, #23]
 80012ee:	e001      	b.n	80012f4 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80012f0:	2300      	movs	r3, #0
 80012f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	371c      	adds	r7, #28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	4002640f 	.word	0x4002640f
 8001308:	40026000 	.word	0x40026000
 800130c:	40026400 	.word	0x40026400

08001310 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a10      	ldr	r2, [pc, #64]	; (8001360 <DMA_ClearFlag+0x50>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d802      	bhi.n	8001328 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <DMA_ClearFlag+0x54>)
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	e001      	b.n	800132c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <DMA_ClearFlag+0x58>)
 800132a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800133c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8001344:	e006      	b.n	8001354 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800134c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	6093      	str	r3, [r2, #8]
  }    
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	4002640f 	.word	0x4002640f
 8001364:	40026000 	.word	0x40026000
 8001368:	40026400 	.word	0x40026400

0800136c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	4613      	mov	r3, r2
 8001378:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00f      	beq.n	80013a4 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	615a      	str	r2, [r3, #20]
 8001396:	e005      	b.n	80013a4 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b80      	cmp	r3, #128	; 0x80
 80013a8:	d014      	beq.n	80013d4 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	f003 031e 	and.w	r3, r3, #30
 80013ba:	431a      	orrs	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80013c0:	e008      	b.n	80013d4 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f003 031e 	and.w	r3, r3, #30
 80013cc:	43db      	mvns	r3, r3
 80013ce:	401a      	ands	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80013ec:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <EXTI_Init+0xe0>)
 80013ee:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	799b      	ldrb	r3, [r3, #6]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d04f      	beq.n	8001498 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80013f8:	4931      	ldr	r1, [pc, #196]	; (80014c0 <EXTI_Init+0xe0>)
 80013fa:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <EXTI_Init+0xe0>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	43db      	mvns	r3, r3
 8001404:	4013      	ands	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001408:	492d      	ldr	r1, [pc, #180]	; (80014c0 <EXTI_Init+0xe0>)
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <EXTI_Init+0xe0>)
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	43db      	mvns	r3, r3
 8001414:	4013      	ands	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	791b      	ldrb	r3, [r3, #4]
 800141c:	461a      	mov	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4413      	add	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	6811      	ldr	r1, [r2, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001432:	4923      	ldr	r1, [pc, #140]	; (80014c0 <EXTI_Init+0xe0>)
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <EXTI_Init+0xe0>)
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	43db      	mvns	r3, r3
 800143e:	4013      	ands	r3, r2
 8001440:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001442:	491f      	ldr	r1, [pc, #124]	; (80014c0 <EXTI_Init+0xe0>)
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <EXTI_Init+0xe0>)
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	43db      	mvns	r3, r3
 800144e:	4013      	ands	r3, r2
 8001450:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	795b      	ldrb	r3, [r3, #5]
 8001456:	2b10      	cmp	r3, #16
 8001458:	d10e      	bne.n	8001478 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800145a:	4919      	ldr	r1, [pc, #100]	; (80014c0 <EXTI_Init+0xe0>)
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <EXTI_Init+0xe0>)
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4313      	orrs	r3, r2
 8001466:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001468:	4915      	ldr	r1, [pc, #84]	; (80014c0 <EXTI_Init+0xe0>)
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <EXTI_Init+0xe0>)
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001476:	e01d      	b.n	80014b4 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <EXTI_Init+0xe0>)
 800147a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	795b      	ldrb	r3, [r3, #5]
 8001480:	461a      	mov	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4413      	add	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	6811      	ldr	r1, [r2, #0]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001496:	e00d      	b.n	80014b4 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	791b      	ldrb	r3, [r3, #4]
 800149c:	461a      	mov	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4413      	add	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	6811      	ldr	r1, [r2, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	43d2      	mvns	r2, r2
 80014b0:	400a      	ands	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]
  }
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40013c00 	.word	0x40013c00

080014c4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <EXTI_ClearITPendingBit+0x1c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6153      	str	r3, [r2, #20]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40013c00 	.word	0x40013c00

080014e4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e076      	b.n	80015ee <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001500:	2201      	movs	r2, #1
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d165      	bne.n	80015e8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2103      	movs	r1, #3
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	401a      	ands	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	791b      	ldrb	r3, [r3, #4]
 800153a:	4619      	mov	r1, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	791b      	ldrb	r3, [r3, #4]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d003      	beq.n	800155a <GPIO_Init+0x76>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	791b      	ldrb	r3, [r3, #4]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d12e      	bne.n	80015b8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2103      	movs	r1, #3
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	401a      	ands	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	795b      	ldrb	r3, [r3, #5]
 8001578:	4619      	mov	r1, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	b29b      	uxth	r3, r3
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	401a      	ands	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	799b      	ldrb	r3, [r3, #6]
 80015a6:	4619      	mov	r1, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2103      	movs	r1, #3
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	401a      	ands	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	79db      	ldrb	r3, [r3, #7]
 80015d8:	4619      	mov	r1, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d985      	bls.n	8001500 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80015f4:	bf00      	nop
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800160e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	71da      	strb	r2, [r3, #7]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	887a      	ldrh	r2, [r7, #2]
 800164e:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8001650:	e002      	b.n	8001658 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	887a      	ldrh	r2, [r7, #2]
 8001656:	835a      	strh	r2, [r3, #26]
  }
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800167c:	787a      	ldrb	r2, [r7, #1]
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800168c:	887b      	ldrh	r3, [r7, #2]
 800168e:	08db      	lsrs	r3, r3, #3
 8001690:	b29b      	uxth	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	08db      	lsrs	r3, r3, #3
 8001698:	b29b      	uxth	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3208      	adds	r2, #8
 80016a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	210f      	movs	r1, #15
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	ea02 0103 	and.w	r1, r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f100 0208 	add.w	r2, r0, #8
 80016be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	461a      	mov	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80016d8:	887b      	ldrh	r3, [r7, #2]
 80016da:	08db      	lsrs	r3, r3, #3
 80016dc:	b29b      	uxth	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3208      	adds	r2, #8
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop

080016f8 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a17      	ldr	r2, [pc, #92]	; (8001760 <I2C_DeInit+0x68>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d10a      	bne.n	800171e <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001708:	2101      	movs	r1, #1
 800170a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800170e:	f000 fb31 	bl	8001d74 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8001712:	2100      	movs	r1, #0
 8001714:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001718:	f000 fb2c 	bl	8001d74 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800171c:	e01c      	b.n	8001758 <I2C_DeInit+0x60>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a10      	ldr	r2, [pc, #64]	; (8001764 <I2C_DeInit+0x6c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d10a      	bne.n	800173c <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001726:	2101      	movs	r1, #1
 8001728:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800172c:	f000 fb22 	bl	8001d74 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8001730:	2100      	movs	r1, #0
 8001732:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001736:	f000 fb1d 	bl	8001d74 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800173a:	e00d      	b.n	8001758 <I2C_DeInit+0x60>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <I2C_DeInit+0x70>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d109      	bne.n	8001758 <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8001744:	2101      	movs	r1, #1
 8001746:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800174a:	f000 fb13 	bl	8001d74 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800174e:	2100      	movs	r1, #0
 8001750:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001754:	f000 fb0e 	bl	8001d74 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40005400 	.word	0x40005400
 8001764:	40005800 	.word	0x40005800
 8001768:	40005c00 	.word	0x40005c00

0800176c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	84fb      	strh	r3, [r7, #38]	; 0x26
 800177a:	2300      	movs	r3, #0
 800177c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800177e:	2304      	movs	r3, #4
 8001780:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8001782:	4b57      	ldr	r3, [pc, #348]	; (80018e0 <I2C_Init+0x174>)
 8001784:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	889b      	ldrh	r3, [r3, #4]
 800178a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800178c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800178e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001792:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4618      	mov	r0, r3
 800179a:	f000 f9e1 	bl	8001b60 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	4a4f      	ldr	r2, [pc, #316]	; (80018e4 <I2C_Init+0x178>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	0c9b      	lsrs	r3, r3, #18
 80017ac:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80017ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80017b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017b2:	4313      	orrs	r3, r2
 80017b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80017ba:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a44      	ldr	r2, [pc, #272]	; (80018e8 <I2C_Init+0x17c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d815      	bhi.n	8001806 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80017e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d801      	bhi.n	80017f2 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80017ee:	2304      	movs	r3, #4
 80017f0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80017f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80017f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017f6:	4313      	orrs	r3, r2
 80017f8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80017fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017fc:	3301      	adds	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	841a      	strh	r2, [r3, #32]
 8001804:	e040      	b.n	8001888 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	88db      	ldrh	r3, [r3, #6]
 800180a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800180e:	4293      	cmp	r3, r2
 8001810:	d109      	bne.n	8001826 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001824:	e00e      	b.n	8001844 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	009a      	lsls	r2, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800183c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800183e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001842:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001844:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184a:	2b00      	cmp	r3, #0
 800184c:	d103      	bne.n	8001856 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800184e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001856:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001858:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800185a:	4313      	orrs	r3, r2
 800185c:	b29b      	uxth	r3, r3
 800185e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001866:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001868:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800186a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	4a1e      	ldr	r2, [pc, #120]	; (80018ec <I2C_Init+0x180>)
 8001874:	fb82 1203 	smull	r1, r2, r2, r3
 8001878:	1192      	asrs	r2, r2, #6
 800187a:	17db      	asrs	r3, r3, #31
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	b29b      	uxth	r3, r3
 8001880:	3301      	adds	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800188c:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	b29b      	uxth	r3, r3
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	b29a      	uxth	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80018a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018a6:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80018aa:	f023 0302 	bic.w	r3, r3, #2
 80018ae:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	889a      	ldrh	r2, [r3, #4]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	895b      	ldrh	r3, [r3, #10]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018be:	4313      	orrs	r3, r2
 80018c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018c6:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	899a      	ldrh	r2, [r3, #12]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	891b      	ldrh	r3, [r3, #8]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	811a      	strh	r2, [r3, #8]
}
 80018d8:	bf00      	nop
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	007a1200 	.word	0x007a1200
 80018e4:	431bde83 	.word	0x431bde83
 80018e8:	000186a0 	.word	0x000186a0
 80018ec:	10624dd3 	.word	0x10624dd3

080018f0 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	b29b      	uxth	r3, r3
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	b29a      	uxth	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8001912:	e007      	b.n	8001924 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	b29b      	uxth	r3, r3
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	801a      	strh	r2, [r3, #0]
  }
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d008      	beq.n	8001954 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194c:	b29a      	uxth	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8001952:	e007      	b.n	8001964 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	801a      	strh	r2, [r3, #0]
  }
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d008      	beq.n	8001994 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198c:	b29a      	uxth	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8001992:	e007      	b.n	80019a4 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800199e:	b29a      	uxth	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	801a      	strh	r2, [r3, #0]
  }
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
 80019bc:	4613      	mov	r3, r2
 80019be:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80019c0:	78bb      	ldrb	r3, [r7, #2]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	70fb      	strb	r3, [r7, #3]
 80019ce:	e003      	b.n	80019d8 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	821a      	strh	r2, [r3, #16]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d008      	beq.n	8001a10 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8001a0e:	e007      	b.n	8001a20 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	801a      	strh	r2, [r3, #0]
  }
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	821a      	strh	r2, [r3, #16]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	8a1b      	ldrh	r3, [r3, #16]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	8a9b      	ldrh	r3, [r3, #20]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	8b1b      	ldrh	r3, [r3, #24]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	041b      	lsls	r3, r3, #16
 8001a96:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001aa2:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d102      	bne.n	8001ab6 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	75fb      	strb	r3, [r7, #23]
 8001ab4:	e001      	b.n	8001aba <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	0f1b      	lsrs	r3, r3, #28
 8001ae6:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001aee:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3314      	adds	r3, #20
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e005      	b.n	8001b0a <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3318      	adds	r3, #24
 8001b08:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001b16:	2301      	movs	r3, #1
 8001b18:	75fb      	strb	r3, [r7, #23]
 8001b1a:	e001      	b.n	8001b20 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop

08001b30 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b44:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	829a      	strh	r2, [r3, #20]
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop

08001b60 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	2302      	movs	r3, #2
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001b80:	4b48      	ldr	r3, [pc, #288]	; (8001ca4 <RCC_GetClocksFreq+0x144>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d007      	beq.n	8001ba0 <RCC_GetClocksFreq+0x40>
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d009      	beq.n	8001ba8 <RCC_GetClocksFreq+0x48>
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d13f      	bne.n	8001c18 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a43      	ldr	r2, [pc, #268]	; (8001ca8 <RCC_GetClocksFreq+0x148>)
 8001b9c:	601a      	str	r2, [r3, #0]
      break;
 8001b9e:	e03f      	b.n	8001c20 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a42      	ldr	r2, [pc, #264]	; (8001cac <RCC_GetClocksFreq+0x14c>)
 8001ba4:	601a      	str	r2, [r3, #0]
      break;
 8001ba6:	e03b      	b.n	8001c20 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <RCC_GetClocksFreq+0x144>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb0:	0d9b      	lsrs	r3, r3, #22
 8001bb2:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <RCC_GetClocksFreq+0x144>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bbc:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00d      	beq.n	8001be0 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001bc4:	4a39      	ldr	r2, [pc, #228]	; (8001cac <RCC_GetClocksFreq+0x14c>)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bcc:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <RCC_GetClocksFreq+0x144>)
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	099b      	lsrs	r3, r3, #6
 8001bd8:	fb03 f302 	mul.w	r3, r3, r2
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	e00c      	b.n	8001bfa <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001be0:	4a31      	ldr	r2, [pc, #196]	; (8001ca8 <RCC_GetClocksFreq+0x148>)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001be8:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <RCC_GetClocksFreq+0x144>)
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf0:	400b      	ands	r3, r1
 8001bf2:	099b      	lsrs	r3, r3, #6
 8001bf4:	fb03 f302 	mul.w	r3, r3, r2
 8001bf8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <RCC_GetClocksFreq+0x144>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c02:	0c1b      	lsrs	r3, r3, #16
 8001c04:	3301      	adds	r3, #1
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	601a      	str	r2, [r3, #0]
      break;
 8001c16:	e003      	b.n	8001c20 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a23      	ldr	r2, [pc, #140]	; (8001ca8 <RCC_GetClocksFreq+0x148>)
 8001c1c:	601a      	str	r2, [r3, #0]
      break;
 8001c1e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001c20:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <RCC_GetClocksFreq+0x144>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c28:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001c30:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <RCC_GetClocksFreq+0x150>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	4413      	add	r3, r2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	40da      	lsrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <RCC_GetClocksFreq+0x144>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001c50:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	0a9b      	lsrs	r3, r3, #10
 8001c56:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001c58:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <RCC_GetClocksFreq+0x150>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	40da      	lsrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <RCC_GetClocksFreq+0x144>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001c78:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	0b5b      	lsrs	r3, r3, #13
 8001c7e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001c80:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <RCC_GetClocksFreq+0x150>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4413      	add	r3, r2
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	40da      	lsrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	60da      	str	r2, [r3, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3724      	adds	r7, #36	; 0x24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	00f42400 	.word	0x00f42400
 8001cac:	007a1200 	.word	0x007a1200
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001cc6:	490a      	ldr	r1, [pc, #40]	; (8001cf0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001cd2:	e006      	b.n	8001ce2 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001cd4:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	4013      	ands	r3, r2
 8001ce0:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800

08001cf4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001d06:	490a      	ldr	r1, [pc, #40]	; (8001d30 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001d12:	e006      	b.n	8001d22 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001d14:	4906      	ldr	r1, [pc, #24]	; (8001d30 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	4013      	ands	r3, r2
 8001d20:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800

08001d34 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001d46:	490a      	ldr	r1, [pc, #40]	; (8001d70 <RCC_APB2PeriphClockCmd+0x3c>)
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <RCC_APB2PeriphClockCmd+0x3c>)
 8001d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001d52:	e006      	b.n	8001d62 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001d54:	4906      	ldr	r1, [pc, #24]	; (8001d70 <RCC_APB2PeriphClockCmd+0x3c>)
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <RCC_APB2PeriphClockCmd+0x3c>)
 8001d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	4013      	ands	r3, r2
 8001d60:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800

08001d74 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001d86:	490a      	ldr	r1, [pc, #40]	; (8001db0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001d8a:	6a1a      	ldr	r2, [r3, #32]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001d92:	e006      	b.n	8001da2 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001d94:	4906      	ldr	r1, [pc, #24]	; (8001db0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001d98:	6a1a      	ldr	r2, [r3, #32]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4013      	ands	r3, r2
 8001da0:	620b      	str	r3, [r1, #32]
  }
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800

08001db4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001dc6:	490a      	ldr	r1, [pc, #40]	; (8001df0 <RCC_APB2PeriphResetCmd+0x3c>)
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <RCC_APB2PeriphResetCmd+0x3c>)
 8001dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001dd2:	e006      	b.n	8001de2 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001dd4:	4906      	ldr	r1, [pc, #24]	; (8001df0 <RCC_APB2PeriphResetCmd+0x3c>)
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <RCC_APB2PeriphResetCmd+0x3c>)
 8001dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	4013      	ands	r3, r2
 8001de0:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800

08001df4 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a2e      	ldr	r2, [pc, #184]	; (8001eb8 <SPI_I2S_DeInit+0xc4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d10a      	bne.n	8001e1a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001e04:	2101      	movs	r1, #1
 8001e06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e0a:	f7ff ffd3 	bl	8001db4 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e14:	f7ff ffce 	bl	8001db4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001e18:	e049      	b.n	8001eae <SPI_I2S_DeInit+0xba>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a27      	ldr	r2, [pc, #156]	; (8001ebc <SPI_I2S_DeInit+0xc8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d10a      	bne.n	8001e38 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001e22:	2101      	movs	r1, #1
 8001e24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e28:	f7ff ffa4 	bl	8001d74 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e32:	f7ff ff9f 	bl	8001d74 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001e36:	e03a      	b.n	8001eae <SPI_I2S_DeInit+0xba>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a21      	ldr	r2, [pc, #132]	; (8001ec0 <SPI_I2S_DeInit+0xcc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d10a      	bne.n	8001e56 <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001e40:	2101      	movs	r1, #1
 8001e42:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e46:	f7ff ff95 	bl	8001d74 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e50:	f7ff ff90 	bl	8001d74 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001e54:	e02b      	b.n	8001eae <SPI_I2S_DeInit+0xba>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <SPI_I2S_DeInit+0xd0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10a      	bne.n	8001e74 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8001e5e:	2101      	movs	r1, #1
 8001e60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e64:	f7ff ffa6 	bl	8001db4 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e6e:	f7ff ffa1 	bl	8001db4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001e72:	e01c      	b.n	8001eae <SPI_I2S_DeInit+0xba>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <SPI_I2S_DeInit+0xd4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d10a      	bne.n	8001e92 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e82:	f7ff ff97 	bl	8001db4 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8001e86:	2100      	movs	r1, #0
 8001e88:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e8c:	f7ff ff92 	bl	8001db4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001e90:	e00d      	b.n	8001eae <SPI_I2S_DeInit+0xba>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a0d      	ldr	r2, [pc, #52]	; (8001ecc <SPI_I2S_DeInit+0xd8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d109      	bne.n	8001eae <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001ea0:	f7ff ff88 	bl	8001db4 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001eaa:	f7ff ff83 	bl	8001db4 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40013000 	.word	0x40013000
 8001ebc:	40003800 	.word	0x40003800
 8001ec0:	40003c00 	.word	0x40003c00
 8001ec4:	40013400 	.word	0x40013400
 8001ec8:	40015000 	.word	0x40015000
 8001ecc:	40015400 	.word	0x40015400

08001ed0 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b08b      	sub	sp, #44	; 0x2c
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	837b      	strh	r3, [r7, #26]
 8001ede:	2302      	movs	r3, #2
 8001ee0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	8b9b      	ldrh	r3, [r3, #28]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f08:	f023 030f 	bic.w	r3, r3, #15
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2202      	movs	r2, #2
 8001f16:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	8b9b      	ldrh	r3, [r3, #28]
 8001f1c:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d104      	bne.n	8001f30 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f2e:	e072      	b.n	8002016 <I2S_Init+0x146>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	889b      	ldrh	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f3c:	e001      	b.n	8001f42 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001f42:	4b4d      	ldr	r3, [pc, #308]	; (8002078 <I2S_Init+0x1a8>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8001f4e:	4a4a      	ldr	r2, [pc, #296]	; (8002078 <I2S_Init+0x1a8>)
 8001f50:	4b49      	ldr	r3, [pc, #292]	; (8002078 <I2S_Init+0x1a8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f58:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001f5a:	4b47      	ldr	r3, [pc, #284]	; (8002078 <I2S_Init+0x1a8>)
 8001f5c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001f60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f64:	4013      	ands	r3, r2
 8001f66:	099b      	lsrs	r3, r3, #6
 8001f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f6c:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001f6e:	4b42      	ldr	r3, [pc, #264]	; (8002078 <I2S_Init+0x1a8>)
 8001f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f74:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001f78:	0f1b      	lsrs	r3, r3, #28
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001f80:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <I2S_Init+0x1a8>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f88:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001f8a:	4a3c      	ldr	r2, [pc, #240]	; (800207c <I2S_Init+0x1ac>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	fb02 f203 	mul.w	r2, r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	88db      	ldrh	r3, [r3, #6]
 8001fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa8:	d10f      	bne.n	8001fca <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	0a1a      	lsrs	r2, r3, #8
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3305      	adds	r3, #5
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	e012      	b.n	8001ff0 <I2S_Init+0x120>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001fca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fcc:	015b      	lsls	r3, r3, #5
 8001fce:	461a      	mov	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	461a      	mov	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	3305      	adds	r3, #5
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	4a23      	ldr	r2, [pc, #140]	; (8002080 <I2S_Init+0x1b0>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	08db      	lsrs	r3, r3, #3
 8001ffa:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002006:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	085b      	lsrs	r3, r3, #1
 800200e:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8002010:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8002016:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002018:	2b01      	cmp	r3, #1
 800201a:	d902      	bls.n	8002022 <I2S_Init+0x152>
 800201c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800201e:	2bff      	cmp	r3, #255	; 0xff
 8002020:	d903      	bls.n	800202a <I2S_Init+0x15a>
  {
    /* Set the default values */
    i2sdiv = 2;
 8002022:	2302      	movs	r3, #2
 8002024:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	88da      	ldrh	r2, [r3, #6]
 800202e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002030:	4313      	orrs	r3, r2
 8002032:	b29a      	uxth	r2, r3
 8002034:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002036:	4313      	orrs	r3, r2
 8002038:	b29a      	uxth	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	8859      	ldrh	r1, [r3, #2]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800204e:	4303      	orrs	r3, r0
 8002050:	b29b      	uxth	r3, r3
 8002052:	430b      	orrs	r3, r1
 8002054:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8002056:	4313      	orrs	r3, r2
 8002058:	b29a      	uxth	r2, r3
 800205a:	8b7b      	ldrh	r3, [r7, #26]
 800205c:	4313      	orrs	r3, r2
 800205e:	b29b      	uxth	r3, r3
 8002060:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002064:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	8b7a      	ldrh	r2, [r7, #26]
 800206a:	839a      	strh	r2, [r3, #28]
}
 800206c:	bf00      	nop
 800206e:	372c      	adds	r7, #44	; 0x2c
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40023800 	.word	0x40023800
 800207c:	007a1200 	.word	0x007a1200
 8002080:	cccccccd 	.word	0xcccccccd

08002084 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	8b9b      	ldrh	r3, [r3, #28]
 800209a:	b29b      	uxth	r3, r3
 800209c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 80020a6:	e007      	b.n	80020b8 <I2S_Cmd+0x34>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	8b9b      	ldrh	r3, [r3, #28]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	839a      	strh	r2, [r3, #28]
  }
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	887a      	ldrh	r2, [r7, #2]
 80020d4:	819a      	strh	r2, [r3, #12]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop

080020e4 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
 80020f0:	4613      	mov	r3, r2
 80020f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 80020f4:	787b      	ldrb	r3, [r7, #1]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d008      	beq.n	800210c <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	889b      	ldrh	r3, [r3, #4]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	4313      	orrs	r3, r2
 8002104:	b29a      	uxth	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 800210a:	e009      	b.n	8002120 <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	889b      	ldrh	r3, [r3, #4]
 8002110:	b29a      	uxth	r2, r3
 8002112:	887b      	ldrh	r3, [r7, #2]
 8002114:	43db      	mvns	r3, r3
 8002116:	b29b      	uxth	r3, r3
 8002118:	4013      	ands	r3, r2
 800211a:	b29a      	uxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	809a      	strh	r2, [r3, #4]
  }
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	70fb      	strb	r3, [r7, #3]
 8002138:	4613      	mov	r3, r2
 800213a:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800213c:	2300      	movs	r3, #0
 800213e:	81fb      	strh	r3, [r7, #14]
 8002140:	2300      	movs	r3, #0
 8002142:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	091b      	lsrs	r3, r3, #4
 8002148:	b2db      	uxtb	r3, r3
 800214a:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800214c:	89fb      	ldrh	r3, [r7, #14]
 800214e:	2201      	movs	r2, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 8002156:	78bb      	ldrb	r3, [r7, #2]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	889b      	ldrh	r3, [r3, #4]
 8002160:	b29a      	uxth	r2, r3
 8002162:	89bb      	ldrh	r3, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	b29a      	uxth	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 800216c:	e009      	b.n	8002182 <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	889b      	ldrh	r3, [r3, #4]
 8002172:	b29a      	uxth	r2, r3
 8002174:	89bb      	ldrh	r3, [r7, #12]
 8002176:	43db      	mvns	r3, r3
 8002178:	b29b      	uxth	r3, r3
 800217a:	4013      	ands	r3, r2
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	809a      	strh	r2, [r3, #4]
  }
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop

08002190 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	891b      	ldrh	r3, [r3, #8]
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	4013      	ands	r3, r2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e001      	b.n	80021ba <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80021c8:	b490      	push	{r4, r7}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	460a      	mov	r2, r1
 80021d2:	71fb      	strb	r3, [r7, #7]
 80021d4:	4613      	mov	r3, r2
 80021d6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80021ec:	4916      	ldr	r1, [pc, #88]	; (8002248 <SYSCFG_EXTILineConfig+0x80>)
 80021ee:	79bb      	ldrb	r3, [r7, #6]
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	4618      	mov	r0, r3
 80021f6:	4a14      	ldr	r2, [pc, #80]	; (8002248 <SYSCFG_EXTILineConfig+0x80>)
 80021f8:	79bb      	ldrb	r3, [r7, #6]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	3302      	adds	r3, #2
 8002200:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	401a      	ands	r2, r3
 800220a:	1c83      	adds	r3, r0, #2
 800220c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8002210:	480d      	ldr	r0, [pc, #52]	; (8002248 <SYSCFG_EXTILineConfig+0x80>)
 8002212:	79bb      	ldrb	r3, [r7, #6]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461c      	mov	r4, r3
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <SYSCFG_EXTILineConfig+0x80>)
 800221c:	79bb      	ldrb	r3, [r7, #6]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	b2db      	uxtb	r3, r3
 8002222:	3302      	adds	r3, #2
 8002224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002228:	79f9      	ldrb	r1, [r7, #7]
 800222a:	79bb      	ldrb	r3, [r7, #6]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	431a      	orrs	r2, r3
 8002238:	1ca3      	adds	r3, r4, #2
 800223a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bc90      	pop	{r4, r7}
 8002246:	4770      	bx	lr
 8002248:	40013800 	.word	0x40013800

0800224c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a29      	ldr	r2, [pc, #164]	; (8002308 <TIM_TimeBaseInit+0xbc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d013      	beq.n	8002290 <TIM_TimeBaseInit+0x44>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a28      	ldr	r2, [pc, #160]	; (800230c <TIM_TimeBaseInit+0xc0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00f      	beq.n	8002290 <TIM_TimeBaseInit+0x44>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002276:	d00b      	beq.n	8002290 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a25      	ldr	r2, [pc, #148]	; (8002310 <TIM_TimeBaseInit+0xc4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d007      	beq.n	8002290 <TIM_TimeBaseInit+0x44>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a24      	ldr	r2, [pc, #144]	; (8002314 <TIM_TimeBaseInit+0xc8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d003      	beq.n	8002290 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a23      	ldr	r2, [pc, #140]	; (8002318 <TIM_TimeBaseInit+0xcc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d108      	bne.n	80022a2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002290:	89fb      	ldrh	r3, [r7, #14]
 8002292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002296:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	885a      	ldrh	r2, [r3, #2]
 800229c:	89fb      	ldrh	r3, [r7, #14]
 800229e:	4313      	orrs	r3, r2
 80022a0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <TIM_TimeBaseInit+0xd0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00c      	beq.n	80022c4 <TIM_TimeBaseInit+0x78>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <TIM_TimeBaseInit+0xd4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d008      	beq.n	80022c4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80022b2:	89fb      	ldrh	r3, [r7, #14]
 80022b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	891a      	ldrh	r2, [r3, #8]
 80022be:	89fb      	ldrh	r3, [r7, #14]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	89fa      	ldrh	r2, [r7, #14]
 80022c8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	881a      	ldrh	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <TIM_TimeBaseInit+0xbc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d003      	beq.n	80022ea <TIM_TimeBaseInit+0x9e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a09      	ldr	r2, [pc, #36]	; (800230c <TIM_TimeBaseInit+0xc0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d104      	bne.n	80022f4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	7a9b      	ldrb	r3, [r3, #10]
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	829a      	strh	r2, [r3, #20]
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40010000 	.word	0x40010000
 800230c:	40010400 	.word	0x40010400
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800
 8002318:	40000c00 	.word	0x40000c00
 800231c:	40001000 	.word	0x40001000
 8002320:	40001400 	.word	0x40001400

08002324 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f04f 32ff 	mov.w	r2, #4294967295
 8002332:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	729a      	strb	r2, [r3, #10]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800237a:	e007      	b.n	800238c <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	801a      	strh	r2, [r3, #0]
  }
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80023a8:	787b      	ldrb	r3, [r7, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	899b      	ldrh	r3, [r3, #12]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80023be:	e009      	b.n	80023d4 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	899b      	ldrh	r3, [r3, #12]
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	887b      	ldrh	r3, [r7, #2]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	4013      	ands	r3, r2
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	819a      	strh	r2, [r3, #12]
  }
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80023ec:	887b      	ldrh	r3, [r7, #2]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	821a      	strh	r2, [r3, #16]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop

08002404 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	889b      	ldrh	r3, [r3, #4]
 8002414:	b29b      	uxth	r3, r3
 8002416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241a:	b29a      	uxth	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	889b      	ldrh	r3, [r3, #4]
 8002424:	b29a      	uxth	r2, r3
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	4313      	orrs	r3, r2
 800242a:	b29a      	uxth	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	809a      	strh	r2, [r3, #4]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	4a06      	ldr	r2, [pc, #24]	; (8002464 <STM_EVAL_LEDOn+0x28>)
 800244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244e:	79fa      	ldrb	r2, [r7, #7]
 8002450:	4905      	ldr	r1, [pc, #20]	; (8002468 <STM_EVAL_LEDOn+0x2c>)
 8002452:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002456:	831a      	strh	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	20000010 	.word	0x20000010
 8002468:	08005794 	.word	0x08005794

0800246c <EVAL_AUDIO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	603a      	str	r2, [r7, #0]
 8002476:	80fb      	strh	r3, [r7, #6]
 8002478:	460b      	mov	r3, r1
 800247a:	717b      	strb	r3, [r7, #5]
  /* Perform low layer Codec initialization */
  if (Codec_Init(OutputDevice, VOLUME_CONVERT(Volume), AudioFreq) != 0)
 800247c:	797b      	ldrb	r3, [r7, #5]
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d80b      	bhi.n	800249a <EVAL_AUDIO_Init+0x2e>
 8002482:	797a      	ldrb	r2, [r7, #5]
 8002484:	4613      	mov	r3, r2
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <EVAL_AUDIO_Init+0x54>)
 800248c:	fb82 1203 	smull	r1, r2, r2, r3
 8002490:	1152      	asrs	r2, r2, #5
 8002492:	17db      	asrs	r3, r3, #31
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	e000      	b.n	800249c <EVAL_AUDIO_Init+0x30>
 800249a:	2364      	movs	r3, #100	; 0x64
 800249c:	88f8      	ldrh	r0, [r7, #6]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f000 f8f3 	bl	800268c <Codec_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <EVAL_AUDIO_Init+0x44>
  {
    return 1;                
 80024ac:	2301      	movs	r3, #1
 80024ae:	e002      	b.n	80024b6 <EVAL_AUDIO_Init+0x4a>
  }
  else
  {    
    /* I2S data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    Audio_MAL_Init();
 80024b0:	f000 fcb4 	bl	8002e1c <Audio_MAL_Init>
    
    /* Return 0 when all operations are OK */
    return 0;
 80024b4:	2300      	movs	r3, #0
  }
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	51eb851f 	.word	0x51eb851f

080024c4 <EVAL_AUDIO_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data half-words (16bits).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Play(uint16_t* pBuffer, uint32_t Size)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  /* Set the total number of data to be played (count in half-word) */
  AudioTotalSize = Size;
 80024ce:	4a15      	ldr	r2, [pc, #84]	; (8002524 <EVAL_AUDIO_Play+0x60>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6013      	str	r3, [r2, #0]

  /* Call the audio Codec Play function */
  Codec_Play();
 80024d4:	f000 f986 	bl	80027e4 <Codec_Play>
  
  /* Update the Media layer and enable it for play */  
  Audio_MAL_Play((uint32_t)pBuffer, (uint32_t)(DMA_MAX(Size)));
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e0:	4293      	cmp	r3, r2
 80024e2:	bf28      	it	cs
 80024e4:	4613      	movcs	r3, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f000 fd40 	bl	8002f6c <Audio_MAL_Play>
  
  /* Update the remaining number of data to be played */
  AudioRemSize = Size - DMA_MAX(AudioTotalSize);
 80024ec:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <EVAL_AUDIO_Play+0x60>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f4:	4293      	cmp	r3, r2
 80024f6:	bf28      	it	cs
 80024f8:	4613      	movcs	r3, r2
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <EVAL_AUDIO_Play+0x64>)
 8002500:	6013      	str	r3, [r2, #0]
  
  /* Update the current audio pointer position */
  CurrentPos = pBuffer + DMA_MAX(AudioTotalSize);
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <EVAL_AUDIO_Play+0x60>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800250a:	4293      	cmp	r3, r2
 800250c:	bf28      	it	cs
 800250e:	4613      	movcs	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	4a05      	ldr	r2, [pc, #20]	; (800252c <EVAL_AUDIO_Play+0x68>)
 8002518:	6013      	str	r3, [r2, #0]
  
  return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000020 	.word	0x20000020
 8002528:	20000024 	.word	0x20000024
 800252c:	200054ec 	.word	0x200054ec

08002530 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
#ifndef AUDIO_MAL_MODE_NORMAL
  uint16_t *pAddr = (uint16_t *)CurrentPos;
 8002536:	4b36      	ldr	r3, [pc, #216]	; (8002610 <Audio_MAL_IRQHandler+0xe0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	603b      	str	r3, [r7, #0]
  uint32_t Size = AudioRemSize;
 800253c:	4b35      	ldr	r3, [pc, #212]	; (8002614 <Audio_MAL_IRQHandler+0xe4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	607b      	str	r3, [r7, #4]
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002542:	4b35      	ldr	r3, [pc, #212]	; (8002618 <Audio_MAL_IRQHandler+0xe8>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	4b35      	ldr	r3, [pc, #212]	; (800261c <Audio_MAL_IRQHandler+0xec>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	4610      	mov	r0, r2
 800254e:	f7fe fea3 	bl	8001298 <DMA_GetFlagStatus>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00c      	beq.n	8002572 <Audio_MAL_IRQHandler+0x42>
    }
    
 #elif defined(AUDIO_MAL_MODE_CIRCULAR)
    /* Manage the remaining file size and new address offset: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_TransferComplete_CallBack((uint32_t)pAddr, Size);    
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4618      	mov	r0, r3
 800255e:	f001 f80d 	bl	800357c <EVAL_AUDIO_TransferComplete_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <Audio_MAL_IRQHandler+0xe8>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4b2d      	ldr	r3, [pc, #180]	; (800261c <Audio_MAL_IRQHandler+0xec>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f7fe fecf 	bl	8001310 <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_TC_EN */

#ifdef AUDIO_MAL_DMA_IT_HT_EN
  /* Half Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT) != RESET)
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <Audio_MAL_IRQHandler+0xe8>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <Audio_MAL_IRQHandler+0xf0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f7fe fe8b 	bl	8001298 <DMA_GetFlagStatus>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00c      	beq.n	80025a2 <Audio_MAL_IRQHandler+0x72>
  {
    /* Manage the remaining file size and new address offset: This function
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */
    EVAL_AUDIO_HalfTransfer_CallBack((uint32_t)pAddr, Size);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4618      	mov	r0, r3
 800258e:	f000 ffe7 	bl	8003560 <EVAL_AUDIO_HalfTransfer_CallBack>

    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT);
 8002592:	4b21      	ldr	r3, [pc, #132]	; (8002618 <Audio_MAL_IRQHandler+0xe8>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b22      	ldr	r3, [pc, #136]	; (8002620 <Audio_MAL_IRQHandler+0xf0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4619      	mov	r1, r3
 800259c:	4610      	mov	r0, r2
 800259e:	f7fe feb7 	bl	8001310 <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <Audio_MAL_IRQHandler+0xe8>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <Audio_MAL_IRQHandler+0xf4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4619      	mov	r1, r3
 80025ac:	4610      	mov	r0, r2
 80025ae:	f7fe fe73 	bl	8001298 <DMA_GetFlagStatus>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d115      	bne.n	80025e4 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <Audio_MAL_IRQHandler+0xe8>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <Audio_MAL_IRQHandler+0xf8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f7fe fe68 	bl	8001298 <DMA_GetFlagStatus>
 80025c8:	4603      	mov	r3, r0
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10a      	bne.n	80025e4 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <Audio_MAL_IRQHandler+0xe8>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4b16      	ldr	r3, [pc, #88]	; (800262c <Audio_MAL_IRQHandler+0xfc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4619      	mov	r1, r3
 80025d8:	4610      	mov	r0, r2
 80025da:	f7fe fe5d 	bl	8001298 <DMA_GetFlagStatus>
 80025de:	4603      	mov	r3, r0
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d010      	beq.n	8002606 <Audio_MAL_IRQHandler+0xd6>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
    
  {
    /* Manage the error generated on DMA FIFO: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_Error_CallBack((uint32_t*)&pAddr);    
 80025e4:	463b      	mov	r3, r7
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 ffde 	bl	80035a8 <EVAL_AUDIO_Error_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
 80025ec:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <Audio_MAL_IRQHandler+0xe8>)
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <Audio_MAL_IRQHandler+0xf4>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <Audio_MAL_IRQHandler+0xf8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <Audio_MAL_IRQHandler+0xfc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	4619      	mov	r1, r3
 8002602:	f7fe fe85 	bl	8001310 <DMA_ClearFlag>
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200054ec 	.word	0x200054ec
 8002614:	20000024 	.word	0x20000024
 8002618:	20000034 	.word	0x20000034
 800261c:	20000040 	.word	0x20000040
 8002620:	20000044 	.word	0x20000044
 8002624:	2000004c 	.word	0x2000004c
 8002628:	20000048 	.word	0x20000048
 800262c:	20000050 	.word	0x20000050

08002630 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002634:	f7ff ff7c 	bl	8002530 <Audio_MAL_IRQHandler>
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002640:	f7ff ff76 	bl	8002530 <Audio_MAL_IRQHandler>
}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}

08002648 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 800264c:	2102      	movs	r1, #2
 800264e:	480d      	ldr	r0, [pc, #52]	; (8002684 <SPI3_IRQHandler+0x3c>)
 8002650:	f7ff fd9e 	bl	8002190 <SPI_I2S_GetFlagStatus>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d011      	beq.n	800267e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <SPI3_IRQHandler+0x40>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d106      	bne.n	8002670 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8002662:	f000 ff99 	bl	8003598 <EVAL_AUDIO_GetSampleCallBack>
 8002666:	4603      	mov	r3, r0
 8002668:	4619      	mov	r1, r3
 800266a:	2004      	movs	r0, #4
 800266c:	f7fe fc78 	bl	8000f60 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8002670:	f000 ff92 	bl	8003598 <EVAL_AUDIO_GetSampleCallBack>
 8002674:	4603      	mov	r3, r0
 8002676:	4619      	mov	r1, r3
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <SPI3_IRQHandler+0x3c>)
 800267a:	f7ff fd23 	bl	80020c4 <SPI_I2S_SendData>
  }
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40003c00 	.word	0x40003c00
 8002688:	2000002c 	.word	0x2000002c

0800268c <Codec_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	603a      	str	r2, [r7, #0]
 8002696:	80fb      	strh	r3, [r7, #6]
 8002698:	460b      	mov	r3, r1
 800269a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]

  /* Configure the Codec related IOs */
  Codec_GPIO_Init();   
 80026a0:	f000 fb1a 	bl	8002cd8 <Codec_GPIO_Init>
  
  /* Reset the Codec Registers */
  Codec_Reset();
 80026a4:	f000 f8e2 	bl	800286c <Codec_Reset>

  /* Initialize the Control interface of the Audio Codec */
  Codec_CtrlInterface_Init();     
 80026a8:	f000 faa8 	bl	8002bfc <Codec_CtrlInterface_Init>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);  
 80026ac:	2101      	movs	r1, #1
 80026ae:	2002      	movs	r0, #2
 80026b0:	f000 f8f0 	bl	8002894 <Codec_WriteRegister>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4413      	add	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
      
  counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
 80026bc:	21af      	movs	r1, #175	; 0xaf
 80026be:	2004      	movs	r0, #4
 80026c0:	f000 f8e8 	bl	8002894 <Codec_WriteRegister>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4413      	add	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
  OutputDev = 0xAF;
 80026cc:	4b43      	ldr	r3, [pc, #268]	; (80027dc <Codec_Init+0x150>)
 80026ce:	22af      	movs	r2, #175	; 0xaf
 80026d0:	701a      	strb	r2, [r3, #0]
  
  /* Clock configuration: Auto detection */  
  counter += Codec_WriteRegister(0x05, 0x81);
 80026d2:	2181      	movs	r1, #129	; 0x81
 80026d4:	2005      	movs	r0, #5
 80026d6:	f000 f8dd 	bl	8002894 <Codec_WriteRegister>
 80026da:	4602      	mov	r2, r0
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += Codec_WriteRegister(0x06, CODEC_STANDARD);
 80026e2:	2104      	movs	r1, #4
 80026e4:	2006      	movs	r0, #6
 80026e6:	f000 f8d5 	bl	8002894 <Codec_WriteRegister>
 80026ea:	4602      	mov	r2, r0
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
      
  /* Set the Master volume */
  Codec_VolumeCtrl(Volume);
 80026f2:	797b      	ldrb	r3, [r7, #5]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f87d 	bl	80027f4 <Codec_VolumeCtrl>
  
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80026fa:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <Codec_Init+0x154>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d127      	bne.n	8002752 <Codec_Init+0xc6>
  {
    /* Enable the PassThrough on AIN1A and AIN1B */
    counter += Codec_WriteRegister(0x08, 0x01);
 8002702:	2101      	movs	r1, #1
 8002704:	2008      	movs	r0, #8
 8002706:	f000 f8c5 	bl	8002894 <Codec_WriteRegister>
 800270a:	4602      	mov	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4413      	add	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x09, 0x01);
 8002712:	2101      	movs	r1, #1
 8002714:	2009      	movs	r0, #9
 8002716:	f000 f8bd 	bl	8002894 <Codec_WriteRegister>
 800271a:	4602      	mov	r2, r0
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
    
    /* Route the analog input to the HP line */
    counter += Codec_WriteRegister(0x0E, 0xC0);
 8002722:	21c0      	movs	r1, #192	; 0xc0
 8002724:	200e      	movs	r0, #14
 8002726:	f000 f8b5 	bl	8002894 <Codec_WriteRegister>
 800272a:	4602      	mov	r2, r0
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4413      	add	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
    
    /* Set the Passthough volume */
    counter += Codec_WriteRegister(0x14, 0x00);
 8002732:	2100      	movs	r1, #0
 8002734:	2014      	movs	r0, #20
 8002736:	f000 f8ad 	bl	8002894 <Codec_WriteRegister>
 800273a:	4602      	mov	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4413      	add	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x15, 0x00);
 8002742:	2100      	movs	r1, #0
 8002744:	2015      	movs	r0, #21
 8002746:	f000 f8a5 	bl	8002894 <Codec_WriteRegister>
 800274a:	4602      	mov	r2, r0
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  }

  /* Power on the Codec */
  counter += Codec_WriteRegister(0x02, 0x9E);  
 8002752:	219e      	movs	r1, #158	; 0x9e
 8002754:	2002      	movs	r0, #2
 8002756:	f000 f89d 	bl	8002894 <Codec_WriteRegister>
 800275a:	4602      	mov	r2, r0
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
      off the I2S peripheral MCLK clock (which is the operating clock for Codec).
      If this delay is not inserted, then the codec will not shut down properly and
      it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += Codec_WriteRegister(0x0A, 0x00);
 8002762:	2100      	movs	r1, #0
 8002764:	200a      	movs	r0, #10
 8002766:	f000 f895 	bl	8002894 <Codec_WriteRegister>
 800276a:	4602      	mov	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  if (CurrAudioInterface != AUDIO_INTERFACE_DAC)
 8002772:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <Codec_Init+0x154>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d007      	beq.n	800278a <Codec_Init+0xfe>
  {  
    /* Disable the digital soft ramp */
    counter += Codec_WriteRegister(0x0E, 0x04);
 800277a:	2104      	movs	r1, #4
 800277c:	200e      	movs	r0, #14
 800277e:	f000 f889 	bl	8002894 <Codec_WriteRegister>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  }
  /* Disable the limiter attack level */
  counter += Codec_WriteRegister(0x27, 0x00);
 800278a:	2100      	movs	r1, #0
 800278c:	2027      	movs	r0, #39	; 0x27
 800278e:	f000 f881 	bl	8002894 <Codec_WriteRegister>
 8002792:	4602      	mov	r2, r0
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
  /* Adjust Bass and Treble levels */
  counter += Codec_WriteRegister(0x1F, 0x0F);
 800279a:	210f      	movs	r1, #15
 800279c:	201f      	movs	r0, #31
 800279e:	f000 f879 	bl	8002894 <Codec_WriteRegister>
 80027a2:	4602      	mov	r2, r0
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4413      	add	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  /* Adjust PCM volume level */
  counter += Codec_WriteRegister(0x1A, 0x0A);
 80027aa:	210a      	movs	r1, #10
 80027ac:	201a      	movs	r0, #26
 80027ae:	f000 f871 	bl	8002894 <Codec_WriteRegister>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  counter += Codec_WriteRegister(0x1B, 0x0A);
 80027ba:	210a      	movs	r1, #10
 80027bc:	201b      	movs	r0, #27
 80027be:	f000 f869 	bl	8002894 <Codec_WriteRegister>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Configure the I2S peripheral */
  Codec_AudioInterface_Init(AudioFreq);  
 80027ca:	6838      	ldr	r0, [r7, #0]
 80027cc:	f000 fa42 	bl	8002c54 <Codec_AudioInterface_Init>
  
  /* Return communication control value */
  return counter;  
 80027d0:	68fb      	ldr	r3, [r7, #12]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200000bc 	.word	0x200000bc
 80027e0:	2000002c 	.word	0x2000002c

080027e4 <Codec_Play>:
  * @note   For this codec no Play options are required.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Play(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* 
     No actions required on Codec level for play command
     */  

  /* Return communication control value */
  return 0;  
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <Codec_VolumeCtrl>:
  * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_VolumeCtrl(uint8_t Volume)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
  
  if (Volume > 0xE6)
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	2be6      	cmp	r3, #230	; 0xe6
 8002806:	d916      	bls.n	8002836 <Codec_VolumeCtrl+0x42>
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	3319      	adds	r3, #25
 800280c:	b2db      	uxtb	r3, r3
 800280e:	4619      	mov	r1, r3
 8002810:	2020      	movs	r0, #32
 8002812:	f000 f83f 	bl	8002894 <Codec_WriteRegister>
 8002816:	4602      	mov	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4413      	add	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	3319      	adds	r3, #25
 8002822:	b2db      	uxtb	r3, r3
 8002824:	4619      	mov	r1, r3
 8002826:	2021      	movs	r0, #33	; 0x21
 8002828:	f000 f834 	bl	8002894 <Codec_WriteRegister>
 800282c:	4602      	mov	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4413      	add	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	e015      	b.n	8002862 <Codec_VolumeCtrl+0x6e>
  }
  else
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume + 0x19); 
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	3319      	adds	r3, #25
 800283a:	b2db      	uxtb	r3, r3
 800283c:	4619      	mov	r1, r3
 800283e:	2020      	movs	r0, #32
 8002840:	f000 f828 	bl	8002894 <Codec_WriteRegister>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4413      	add	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume + 0x19); 
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	3319      	adds	r3, #25
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4619      	mov	r1, r3
 8002854:	2021      	movs	r0, #33	; 0x21
 8002856:	f000 f81d 	bl	8002894 <Codec_WriteRegister>
 800285a:	4602      	mov	r2, r0
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
  }

  return counter;  
 8002862:	68fb      	ldr	r3, [r7, #12]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <Codec_Reset>:
  * @note   This function calls an external driver function: The IO Expander driver.
  * @param  None
  * @retval None
  */
static void Codec_Reset(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Power Down the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 8002870:	2200      	movs	r2, #0
 8002872:	2110      	movs	r1, #16
 8002874:	4806      	ldr	r0, [pc, #24]	; (8002890 <Codec_Reset+0x24>)
 8002876:	f7fe fedd 	bl	8001634 <GPIO_WriteBit>

  /* wait for a delay to insure registers erasing */
  Delay(CODEC_RESET_DELAY); 
 800287a:	f644 70ff 	movw	r0, #20479	; 0x4fff
 800287e:	f000 fabb 	bl	8002df8 <Delay>
  
  /* Power on the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_SET);
 8002882:	2201      	movs	r2, #1
 8002884:	2110      	movs	r1, #16
 8002886:	4802      	ldr	r0, [pc, #8]	; (8002890 <Codec_Reset+0x24>)
 8002888:	f7fe fed4 	bl	8001634 <GPIO_WriteBit>
}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40020c00 	.word	0x40020c00

08002894 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	460a      	mov	r2, r1
 800289e:	71fb      	strb	r3, [r7, #7]
 80028a0:	4613      	mov	r3, r2
 80028a2:	71bb      	strb	r3, [r7, #6]
  uint32_t result = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 80028a8:	4b4c      	ldr	r3, [pc, #304]	; (80029dc <Codec_WriteRegister+0x148>)
 80028aa:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 80028ae:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 80028b0:	e00a      	b.n	80028c8 <Codec_WriteRegister+0x34>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80028b2:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <Codec_WriteRegister+0x148>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	1e5a      	subs	r2, r3, #1
 80028b8:	4948      	ldr	r1, [pc, #288]	; (80029dc <Codec_WriteRegister+0x148>)
 80028ba:	600a      	str	r2, [r1, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d103      	bne.n	80028c8 <Codec_WriteRegister+0x34>
 80028c0:	f000 fe46 	bl	8003550 <Codec_TIMEOUT_UserCallback>
 80028c4:	4603      	mov	r3, r0
 80028c6:	e085      	b.n	80029d4 <Codec_WriteRegister+0x140>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 80028c8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80028cc:	4844      	ldr	r0, [pc, #272]	; (80029e0 <Codec_WriteRegister+0x14c>)
 80028ce:	f7ff f8fb 	bl	8001ac8 <I2C_GetFlagStatus>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ec      	bne.n	80028b2 <Codec_WriteRegister+0x1e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 80028d8:	2101      	movs	r1, #1
 80028da:	4841      	ldr	r0, [pc, #260]	; (80029e0 <Codec_WriteRegister+0x14c>)
 80028dc:	f7ff f828 	bl	8001930 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80028e0:	4b3e      	ldr	r3, [pc, #248]	; (80029dc <Codec_WriteRegister+0x148>)
 80028e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028e6:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 80028e8:	e00a      	b.n	8002900 <Codec_WriteRegister+0x6c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80028ea:	4b3c      	ldr	r3, [pc, #240]	; (80029dc <Codec_WriteRegister+0x148>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	1e5a      	subs	r2, r3, #1
 80028f0:	493a      	ldr	r1, [pc, #232]	; (80029dc <Codec_WriteRegister+0x148>)
 80028f2:	600a      	str	r2, [r1, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d103      	bne.n	8002900 <Codec_WriteRegister+0x6c>
 80028f8:	f000 fe2a 	bl	8003550 <Codec_TIMEOUT_UserCallback>
 80028fc:	4603      	mov	r3, r0
 80028fe:	e069      	b.n	80029d4 <Codec_WriteRegister+0x140>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002900:	4938      	ldr	r1, [pc, #224]	; (80029e4 <Codec_WriteRegister+0x150>)
 8002902:	4837      	ldr	r0, [pc, #220]	; (80029e0 <Codec_WriteRegister+0x14c>)
 8002904:	f7ff f8b0 	bl	8001a68 <I2C_CheckEvent>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0ed      	beq.n	80028ea <Codec_WriteRegister+0x56>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 800290e:	2200      	movs	r2, #0
 8002910:	2194      	movs	r1, #148	; 0x94
 8002912:	4833      	ldr	r0, [pc, #204]	; (80029e0 <Codec_WriteRegister+0x14c>)
 8002914:	f7ff f84c 	bl	80019b0 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <Codec_WriteRegister+0x148>)
 800291a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800291e:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002920:	e00a      	b.n	8002938 <Codec_WriteRegister+0xa4>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002922:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <Codec_WriteRegister+0x148>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	1e5a      	subs	r2, r3, #1
 8002928:	492c      	ldr	r1, [pc, #176]	; (80029dc <Codec_WriteRegister+0x148>)
 800292a:	600a      	str	r2, [r1, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <Codec_WriteRegister+0xa4>
 8002930:	f000 fe0e 	bl	8003550 <Codec_TIMEOUT_UserCallback>
 8002934:	4603      	mov	r3, r0
 8002936:	e04d      	b.n	80029d4 <Codec_WriteRegister+0x140>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002938:	492b      	ldr	r1, [pc, #172]	; (80029e8 <Codec_WriteRegister+0x154>)
 800293a:	4829      	ldr	r0, [pc, #164]	; (80029e0 <Codec_WriteRegister+0x14c>)
 800293c:	f7ff f894 	bl	8001a68 <I2C_CheckEvent>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0ed      	beq.n	8002922 <Codec_WriteRegister+0x8e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	4619      	mov	r1, r3
 800294a:	4825      	ldr	r0, [pc, #148]	; (80029e0 <Codec_WriteRegister+0x14c>)
 800294c:	f7ff f86e 	bl	8001a2c <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002950:	4b22      	ldr	r3, [pc, #136]	; (80029dc <Codec_WriteRegister+0x148>)
 8002952:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002956:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8002958:	e00a      	b.n	8002970 <Codec_WriteRegister+0xdc>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <Codec_WriteRegister+0x148>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	1e5a      	subs	r2, r3, #1
 8002960:	491e      	ldr	r1, [pc, #120]	; (80029dc <Codec_WriteRegister+0x148>)
 8002962:	600a      	str	r2, [r1, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d103      	bne.n	8002970 <Codec_WriteRegister+0xdc>
 8002968:	f000 fdf2 	bl	8003550 <Codec_TIMEOUT_UserCallback>
 800296c:	4603      	mov	r3, r0
 800296e:	e031      	b.n	80029d4 <Codec_WriteRegister+0x140>
  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8002970:	491e      	ldr	r1, [pc, #120]	; (80029ec <Codec_WriteRegister+0x158>)
 8002972:	481b      	ldr	r0, [pc, #108]	; (80029e0 <Codec_WriteRegister+0x14c>)
 8002974:	f7ff f878 	bl	8001a68 <I2C_CheckEvent>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0ed      	beq.n	800295a <Codec_WriteRegister+0xc6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
 800297e:	79bb      	ldrb	r3, [r7, #6]
 8002980:	4619      	mov	r1, r3
 8002982:	4817      	ldr	r0, [pc, #92]	; (80029e0 <Codec_WriteRegister+0x14c>)
 8002984:	f7ff f852 	bl	8001a2c <I2C_SendData>
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002988:	4b14      	ldr	r3, [pc, #80]	; (80029dc <Codec_WriteRegister+0x148>)
 800298a:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 800298e:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8002990:	e008      	b.n	80029a4 <Codec_WriteRegister+0x110>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <Codec_WriteRegister+0x148>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	1e5a      	subs	r2, r3, #1
 8002998:	4910      	ldr	r1, [pc, #64]	; (80029dc <Codec_WriteRegister+0x148>)
 800299a:	600a      	str	r2, [r1, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <Codec_WriteRegister+0x110>
 80029a0:	f000 fdd6 	bl	8003550 <Codec_TIMEOUT_UserCallback>
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 80029a4:	4912      	ldr	r1, [pc, #72]	; (80029f0 <Codec_WriteRegister+0x15c>)
 80029a6:	480e      	ldr	r0, [pc, #56]	; (80029e0 <Codec_WriteRegister+0x14c>)
 80029a8:	f7ff f88e 	bl	8001ac8 <I2C_GetFlagStatus>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ef      	beq.n	8002992 <Codec_WriteRegister+0xfe>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);  
 80029b2:	2101      	movs	r1, #1
 80029b4:	480a      	ldr	r0, [pc, #40]	; (80029e0 <Codec_WriteRegister+0x14c>)
 80029b6:	f7fe ffdb 	bl	8001970 <I2C_GenerateSTOP>
  
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (Codec_ReadRegister(RegisterAddr) == RegisterValue)? 0:1;
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f819 	bl	80029f4 <Codec_ReadRegister>
 80029c2:	4602      	mov	r2, r0
 80029c4:	79bb      	ldrb	r3, [r7, #6]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	bf14      	ite	ne
 80029ca:	2301      	movne	r3, #1
 80029cc:	2300      	moveq	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	60fb      	str	r3, [r7, #12]
#endif /* VERIFY_WRITTENDATA */

  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return result;  
 80029d2:	68fb      	ldr	r3, [r7, #12]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000028 	.word	0x20000028
 80029e0:	40005400 	.word	0x40005400
 80029e4:	00030001 	.word	0x00030001
 80029e8:	00070082 	.word	0x00070082
 80029ec:	00070080 	.word	0x00070080
 80029f0:	10000004 	.word	0x10000004

080029f4 <Codec_ReadRegister>:
  * @param  RegisterAddr: Address of the register to be read.
  * @retval Value of the register to be read or dummy value if the communication
  *         fails.
  */
static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
  uint32_t result = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002a02:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002a04:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002a08:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002a0a:	e00a      	b.n	8002a22 <Codec_ReadRegister+0x2e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a0c:	4b73      	ldr	r3, [pc, #460]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	1e5a      	subs	r2, r3, #1
 8002a12:	4972      	ldr	r1, [pc, #456]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002a14:	600a      	str	r2, [r1, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d103      	bne.n	8002a22 <Codec_ReadRegister+0x2e>
 8002a1a:	f000 fd99 	bl	8003550 <Codec_TIMEOUT_UserCallback>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	e0d7      	b.n	8002bd2 <Codec_ReadRegister+0x1de>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002a22:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002a26:	486e      	ldr	r0, [pc, #440]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002a28:	f7ff f84e 	bl	8001ac8 <I2C_GetFlagStatus>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1ec      	bne.n	8002a0c <Codec_ReadRegister+0x18>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002a32:	2101      	movs	r1, #1
 8002a34:	486a      	ldr	r0, [pc, #424]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002a36:	f7fe ff7b 	bl	8001930 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002a3a:	4b68      	ldr	r3, [pc, #416]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002a3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a40:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002a42:	e00a      	b.n	8002a5a <Codec_ReadRegister+0x66>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a44:	4b65      	ldr	r3, [pc, #404]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	1e5a      	subs	r2, r3, #1
 8002a4a:	4964      	ldr	r1, [pc, #400]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002a4c:	600a      	str	r2, [r1, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d103      	bne.n	8002a5a <Codec_ReadRegister+0x66>
 8002a52:	f000 fd7d 	bl	8003550 <Codec_TIMEOUT_UserCallback>
 8002a56:	4603      	mov	r3, r0
 8002a58:	e0bb      	b.n	8002bd2 <Codec_ReadRegister+0x1de>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002a5a:	4962      	ldr	r1, [pc, #392]	; (8002be4 <Codec_ReadRegister+0x1f0>)
 8002a5c:	4860      	ldr	r0, [pc, #384]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002a5e:	f7ff f803 	bl	8001a68 <I2C_CheckEvent>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0ed      	beq.n	8002a44 <Codec_ReadRegister+0x50>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2194      	movs	r1, #148	; 0x94
 8002a6c:	485c      	ldr	r0, [pc, #368]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002a6e:	f7fe ff9f 	bl	80019b0 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002a72:	4b5a      	ldr	r3, [pc, #360]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002a74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a78:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002a7a:	e00a      	b.n	8002a92 <Codec_ReadRegister+0x9e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a7c:	4b57      	ldr	r3, [pc, #348]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	1e5a      	subs	r2, r3, #1
 8002a82:	4956      	ldr	r1, [pc, #344]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002a84:	600a      	str	r2, [r1, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d103      	bne.n	8002a92 <Codec_ReadRegister+0x9e>
 8002a8a:	f000 fd61 	bl	8003550 <Codec_TIMEOUT_UserCallback>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	e09f      	b.n	8002bd2 <Codec_ReadRegister+0x1de>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002a92:	4955      	ldr	r1, [pc, #340]	; (8002be8 <Codec_ReadRegister+0x1f4>)
 8002a94:	4852      	ldr	r0, [pc, #328]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002a96:	f7fe ffe7 	bl	8001a68 <I2C_CheckEvent>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ed      	beq.n	8002a7c <Codec_ReadRegister+0x88>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	484e      	ldr	r0, [pc, #312]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002aa6:	f7fe ffc1 	bl	8001a2c <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002aaa:	4b4c      	ldr	r3, [pc, #304]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002aac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ab0:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002ab2:	e00a      	b.n	8002aca <Codec_ReadRegister+0xd6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002ab4:	4b49      	ldr	r3, [pc, #292]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	1e5a      	subs	r2, r3, #1
 8002aba:	4948      	ldr	r1, [pc, #288]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002abc:	600a      	str	r2, [r1, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d103      	bne.n	8002aca <Codec_ReadRegister+0xd6>
 8002ac2:	f000 fd45 	bl	8003550 <Codec_TIMEOUT_UserCallback>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	e083      	b.n	8002bd2 <Codec_ReadRegister+0x1de>
  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002aca:	4948      	ldr	r1, [pc, #288]	; (8002bec <Codec_ReadRegister+0x1f8>)
 8002acc:	4844      	ldr	r0, [pc, #272]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002ace:	f7fe fffb 	bl	8001ac8 <I2C_GetFlagStatus>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ed      	beq.n	8002ab4 <Codec_ReadRegister+0xc0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4841      	ldr	r0, [pc, #260]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002adc:	f7fe ff28 	bl	8001930 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002ae0:	4b3e      	ldr	r3, [pc, #248]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002ae2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ae6:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002ae8:	e00a      	b.n	8002b00 <Codec_ReadRegister+0x10c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002aea:	4b3c      	ldr	r3, [pc, #240]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	1e5a      	subs	r2, r3, #1
 8002af0:	493a      	ldr	r1, [pc, #232]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002af2:	600a      	str	r2, [r1, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d103      	bne.n	8002b00 <Codec_ReadRegister+0x10c>
 8002af8:	f000 fd2a 	bl	8003550 <Codec_TIMEOUT_UserCallback>
 8002afc:	4603      	mov	r3, r0
 8002afe:	e068      	b.n	8002bd2 <Codec_ReadRegister+0x1de>
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002b00:	4938      	ldr	r1, [pc, #224]	; (8002be4 <Codec_ReadRegister+0x1f0>)
 8002b02:	4837      	ldr	r0, [pc, #220]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002b04:	f7fe ffb0 	bl	8001a68 <I2C_CheckEvent>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0ed      	beq.n	8002aea <Codec_ReadRegister+0xf6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  } 
  
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
 8002b0e:	2201      	movs	r2, #1
 8002b10:	2194      	movs	r1, #148	; 0x94
 8002b12:	4833      	ldr	r0, [pc, #204]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002b14:	f7fe ff4c 	bl	80019b0 <I2C_Send7bitAddress>
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002b18:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002b1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b1e:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002b20:	e00a      	b.n	8002b38 <Codec_ReadRegister+0x144>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002b22:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	1e5a      	subs	r2, r3, #1
 8002b28:	492c      	ldr	r1, [pc, #176]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002b2a:	600a      	str	r2, [r1, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d103      	bne.n	8002b38 <Codec_ReadRegister+0x144>
 8002b30:	f000 fd0e 	bl	8003550 <Codec_TIMEOUT_UserCallback>
 8002b34:	4603      	mov	r3, r0
 8002b36:	e04c      	b.n	8002bd2 <Codec_ReadRegister+0x1de>
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002b38:	492d      	ldr	r1, [pc, #180]	; (8002bf0 <Codec_ReadRegister+0x1fc>)
 8002b3a:	4829      	ldr	r0, [pc, #164]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002b3c:	f7fe ffc4 	bl	8001ac8 <I2C_GetFlagStatus>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0ed      	beq.n	8002b22 <Codec_ReadRegister+0x12e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }     
  
  /*!< Disable Acknowledgment */
  I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);   
 8002b46:	2100      	movs	r1, #0
 8002b48:	4825      	ldr	r0, [pc, #148]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002b4a:	f7fe ff4f 	bl	80019ec <I2C_AcknowledgeConfig>
  
  /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
  (void)CODEC_I2C->SR2;
 8002b4e:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002b50:	8b1b      	ldrh	r3, [r3, #24]
  
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 8002b52:	2101      	movs	r1, #1
 8002b54:	4822      	ldr	r0, [pc, #136]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002b56:	f7fe ff0b 	bl	8001970 <I2C_GenerateSTOP>
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002b5a:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002b5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b60:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002b62:	e00a      	b.n	8002b7a <Codec_ReadRegister+0x186>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002b64:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	1e5a      	subs	r2, r3, #1
 8002b6a:	491c      	ldr	r1, [pc, #112]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002b6c:	600a      	str	r2, [r1, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d103      	bne.n	8002b7a <Codec_ReadRegister+0x186>
 8002b72:	f000 fced 	bl	8003550 <Codec_TIMEOUT_UserCallback>
 8002b76:	4603      	mov	r3, r0
 8002b78:	e02b      	b.n	8002bd2 <Codec_ReadRegister+0x1de>
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002b7a:	491e      	ldr	r1, [pc, #120]	; (8002bf4 <Codec_ReadRegister+0x200>)
 8002b7c:	4818      	ldr	r0, [pc, #96]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002b7e:	f7fe ffa3 	bl	8001ac8 <I2C_GetFlagStatus>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0ed      	beq.n	8002b64 <Codec_ReadRegister+0x170>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
 8002b88:	4815      	ldr	r0, [pc, #84]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002b8a:	f7fe ff5f 	bl	8001a4c <I2C_ReceiveData>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	60fb      	str	r3, [r7, #12]
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002b94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b98:	601a      	str	r2, [r3, #0]
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 8002b9a:	e00a      	b.n	8002bb2 <Codec_ReadRegister+0x1be>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	1e5a      	subs	r2, r3, #1
 8002ba2:	490e      	ldr	r1, [pc, #56]	; (8002bdc <Codec_ReadRegister+0x1e8>)
 8002ba4:	600a      	str	r2, [r1, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d103      	bne.n	8002bb2 <Codec_ReadRegister+0x1be>
 8002baa:	f000 fcd1 	bl	8003550 <Codec_TIMEOUT_UserCallback>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	e00f      	b.n	8002bd2 <Codec_ReadRegister+0x1de>
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ed      	bne.n	8002b9c <Codec_ReadRegister+0x1a8>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }  
  
  /*!< Re-Enable Acknowledgment to be ready for another reception */
  I2C_AcknowledgeConfig(CODEC_I2C, ENABLE);  
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4807      	ldr	r0, [pc, #28]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002bc4:	f7fe ff12 	bl	80019ec <I2C_AcknowledgeConfig>
  
  /* Clear AF flag for next communication */
  I2C_ClearFlag(CODEC_I2C, I2C_FLAG_AF); 
 8002bc8:	490b      	ldr	r1, [pc, #44]	; (8002bf8 <Codec_ReadRegister+0x204>)
 8002bca:	4805      	ldr	r0, [pc, #20]	; (8002be0 <Codec_ReadRegister+0x1ec>)
 8002bcc:	f7fe ffb0 	bl	8001b30 <I2C_ClearFlag>
  
  /* Return the byte read from Codec */
  return result;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000028 	.word	0x20000028
 8002be0:	40005400 	.word	0x40005400
 8002be4:	00030001 	.word	0x00030001
 8002be8:	00070082 	.word	0x00070082
 8002bec:	10000004 	.word	0x10000004
 8002bf0:	10000002 	.word	0x10000002
 8002bf4:	10000040 	.word	0x10000040
 8002bf8:	10000400 	.word	0x10000400

08002bfc <Codec_CtrlInterface_Init>:
  * @brief  Initializes the Audio Codec control interface (I2C).
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* Enable the CODEC_I2C peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2C_CLK, ENABLE);
 8002c02:	2101      	movs	r1, #1
 8002c04:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002c08:	f7ff f874 	bl	8001cf4 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(CODEC_I2C);
 8002c0c:	480f      	ldr	r0, [pc, #60]	; (8002c4c <Codec_CtrlInterface_Init+0x50>)
 8002c0e:	f7fe fd73 	bl	80016f8 <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8002c12:	2300      	movs	r3, #0
 8002c14:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8002c16:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002c1a:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 8002c1c:	2333      	movs	r3, #51	; 0x33
 8002c1e:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c24:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c2a:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <Codec_CtrlInterface_Init+0x54>)
 8002c2e:	603b      	str	r3, [r7, #0]
  /* Enable the I2C peripheral */
  I2C_Cmd(CODEC_I2C, ENABLE);  
 8002c30:	2101      	movs	r1, #1
 8002c32:	4806      	ldr	r0, [pc, #24]	; (8002c4c <Codec_CtrlInterface_Init+0x50>)
 8002c34:	f7fe fe5c 	bl	80018f0 <I2C_Cmd>
  I2C_Init(CODEC_I2C, &I2C_InitStructure);
 8002c38:	463b      	mov	r3, r7
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4803      	ldr	r0, [pc, #12]	; (8002c4c <Codec_CtrlInterface_Init+0x50>)
 8002c3e:	f7fe fd95 	bl	800176c <I2C_Init>
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40005400 	.word	0x40005400
 8002c50:	000186a0 	.word	0x000186a0

08002c54 <Codec_AudioInterface_Init>:
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  * @retval None
  */
static void Codec_AudioInterface_Init(uint32_t AudioFreq)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  I2S_InitTypeDef I2S_InitStructure;
  DAC_InitTypeDef  DAC_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, ENABLE);
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c62:	f7ff f847 	bl	8001cf4 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(CODEC_I2S);
 8002c66:	481a      	ldr	r0, [pc, #104]	; (8002cd0 <Codec_AudioInterface_Init+0x7c>)
 8002c68:	f7ff f8c4 	bl	8001df4 <SPI_I2S_DeInit>
  I2S_InitStructure.I2S_AudioFreq = AudioFreq;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	623b      	str	r3, [r7, #32]
  I2S_InitStructure.I2S_Standard = I2S_STANDARD;
 8002c70:	2300      	movs	r3, #0
 8002c72:	837b      	strh	r3, [r7, #26]
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 8002c74:	2300      	movs	r3, #0
 8002c76:	83bb      	strh	r3, [r7, #28]
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	84bb      	strh	r3, [r7, #36]	; 0x24
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterRx;
  }
  else
  {
#else
   I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 8002c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c80:	833b      	strh	r3, [r7, #24]
#endif
#ifdef DAC_USE_I2S_DMA
  }
#endif /* DAC_USE_I2S_DMA */
#ifdef CODEC_MCLK_ENABLED
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 8002c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c86:	83fb      	strh	r3, [r7, #30]
#else
#error "No selection for the MCLK output has been defined !"
#endif /* CODEC_MCLK_ENABLED */
  
  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(CODEC_I2S, &I2S_InitStructure);
 8002c88:	f107 0318 	add.w	r3, r7, #24
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4810      	ldr	r0, [pc, #64]	; (8002cd0 <Codec_AudioInterface_Init+0x7c>)
 8002c90:	f7ff f91e 	bl	8001ed0 <I2S_Init>


  /* Configure the DAC interface */
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002c94:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <Codec_AudioInterface_Init+0x80>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d114      	bne.n	8002cc6 <Codec_AudioInterface_Init+0x72>
  {    
    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002ca2:	f7ff f827 	bl	8001cf4 <RCC_APB1PeriphClockCmd>
    
    /* DAC channel1 Configuration */
    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
    DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f7fe f8f7 	bl	8000eac <DAC_Init>
    
    /* Enable DAC Channel1 */
    DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);  
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7fe f927 	bl	8000f14 <DAC_Cmd>
  }
  
  /* The I2S peripheral will be enabled only in the EVAL_AUDIO_Play() function 
       or by user functions if DMA mode not enabled */  
}
 8002cc6:	bf00      	nop
 8002cc8:	3728      	adds	r7, #40	; 0x28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40003c00 	.word	0x40003c00
 8002cd4:	2000002c 	.word	0x2000002c

08002cd8 <Codec_GPIO_Init>:
  *        interfaces).
  * @param  None
  * @retval None
  */
static void Codec_GPIO_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable Reset GPIO Clock */
  RCC_AHB1PeriphClockCmd(AUDIO_RESET_GPIO_CLK,ENABLE);
 8002cde:	2101      	movs	r1, #1
 8002ce0:	2008      	movs	r0, #8
 8002ce2:	f7fe ffe7 	bl	8001cb4 <RCC_AHB1PeriphClockCmd>
  
  /* Audio reset pin configuration -------------------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = AUDIO_RESET_PIN; 
 8002ce6:	2310      	movs	r3, #16
 8002ce8:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002cea:	2301      	movs	r3, #1
 8002cec:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
 8002cfa:	463b      	mov	r3, r7
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4839      	ldr	r0, [pc, #228]	; (8002de4 <Codec_GPIO_Init+0x10c>)
 8002d00:	f7fe fbf0 	bl	80014e4 <GPIO_Init>
  
  /* Enable I2S and I2C GPIO clocks */
  RCC_AHB1PeriphClockCmd(CODEC_I2C_GPIO_CLOCK | CODEC_I2S_GPIO_CLOCK, ENABLE);
 8002d04:	2101      	movs	r1, #1
 8002d06:	2007      	movs	r0, #7
 8002d08:	f7fe ffd4 	bl	8001cb4 <RCC_AHB1PeriphClockCmd>

  /* CODEC_I2C SCL and SDA pins configuration -------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2C_SCL_PIN | CODEC_I2C_SDA_PIN; 
 8002d0c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002d10:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002d12:	2302      	movs	r3, #2
 8002d14:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002d16:	2302      	movs	r3, #2
 8002d18:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2C_GPIO, &GPIO_InitStructure);     
 8002d22:	463b      	mov	r3, r7
 8002d24:	4619      	mov	r1, r3
 8002d26:	4830      	ldr	r0, [pc, #192]	; (8002de8 <Codec_GPIO_Init+0x110>)
 8002d28:	f7fe fbdc 	bl	80014e4 <GPIO_Init>
  /* Connect pins to I2C peripheral */
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SCL_PINSRC, CODEC_I2C_GPIO_AF);  
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	2106      	movs	r1, #6
 8002d30:	482d      	ldr	r0, [pc, #180]	; (8002de8 <Codec_GPIO_Init+0x110>)
 8002d32:	f7fe fc97 	bl	8001664 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SDA_PINSRC, CODEC_I2C_GPIO_AF);  
 8002d36:	2204      	movs	r2, #4
 8002d38:	2109      	movs	r1, #9
 8002d3a:	482b      	ldr	r0, [pc, #172]	; (8002de8 <Codec_GPIO_Init+0x110>)
 8002d3c:	f7fe fc92 	bl	8001664 <GPIO_PinAFConfig>

  /* CODEC_I2S pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
 8002d40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d44:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002d46:	2302      	movs	r3, #2
 8002d48:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
 8002d56:	463b      	mov	r3, r7
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4824      	ldr	r0, [pc, #144]	; (8002dec <Codec_GPIO_Init+0x114>)
 8002d5c:	f7fe fbc2 	bl	80014e4 <GPIO_Init>
  
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, CODEC_I2S_GPIO_AF);  
 8002d60:	2206      	movs	r2, #6
 8002d62:	2104      	movs	r1, #4
 8002d64:	4822      	ldr	r0, [pc, #136]	; (8002df0 <Codec_GPIO_Init+0x118>)
 8002d66:	f7fe fc7d 	bl	8001664 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, CODEC_I2S_GPIO_AF);
 8002d6a:	2206      	movs	r2, #6
 8002d6c:	210a      	movs	r1, #10
 8002d6e:	481f      	ldr	r0, [pc, #124]	; (8002dec <Codec_GPIO_Init+0x114>)
 8002d70:	f7fe fc78 	bl	8001664 <GPIO_PinAFConfig>

  if (CurrAudioInterface != AUDIO_INTERFACE_DAC) 
 8002d74:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <Codec_GPIO_Init+0x11c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d00c      	beq.n	8002d96 <Codec_GPIO_Init+0xbe>
  {
    GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 8002d7c:	2310      	movs	r3, #16
 8002d7e:	603b      	str	r3, [r7, #0]
    GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 8002d80:	463b      	mov	r3, r7
 8002d82:	4619      	mov	r1, r3
 8002d84:	481a      	ldr	r0, [pc, #104]	; (8002df0 <Codec_GPIO_Init+0x118>)
 8002d86:	f7fe fbad 	bl	80014e4 <GPIO_Init>
    GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, CODEC_I2S_GPIO_AF);
 8002d8a:	2206      	movs	r2, #6
 8002d8c:	210c      	movs	r1, #12
 8002d8e:	4817      	ldr	r0, [pc, #92]	; (8002dec <Codec_GPIO_Init+0x114>)
 8002d90:	f7fe fc68 	bl	8001664 <GPIO_PinAFConfig>
 8002d94:	e00e      	b.n	8002db4 <Codec_GPIO_Init+0xdc>
  }
  else
  {
    /* GPIOA clock enable (to be used with DAC) */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002d96:	2101      	movs	r1, #1
 8002d98:	2001      	movs	r0, #1
 8002d9a:	f7fe ff8b 	bl	8001cb4 <RCC_AHB1PeriphClockCmd>
   
    /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8002d9e:	2310      	movs	r3, #16
 8002da0:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002da2:	2303      	movs	r3, #3
 8002da4:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002daa:	463b      	mov	r3, r7
 8002dac:	4619      	mov	r1, r3
 8002dae:	4810      	ldr	r0, [pc, #64]	; (8002df0 <Codec_GPIO_Init+0x118>)
 8002db0:	f7fe fb98 	bl	80014e4 <GPIO_Init>
  }

#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002db8:	2302      	movs	r3, #2
 8002dba:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 8002dc8:	463b      	mov	r3, r7
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4807      	ldr	r0, [pc, #28]	; (8002dec <Codec_GPIO_Init+0x114>)
 8002dce:	f7fe fb89 	bl	80014e4 <GPIO_Init>
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 8002dd2:	2206      	movs	r2, #6
 8002dd4:	2107      	movs	r1, #7
 8002dd6:	4805      	ldr	r0, [pc, #20]	; (8002dec <Codec_GPIO_Init+0x114>)
 8002dd8:	f7fe fc44 	bl	8001664 <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */ 
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40020c00 	.word	0x40020c00
 8002de8:	40020400 	.word	0x40020400
 8002dec:	40020800 	.word	0x40020800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	2000002c 	.word	0x2000002c

08002df8 <Delay>:
  * @param  nCount: specifies the delay time length.
  * @retval None
  */

static void Delay( __IO uint32_t nCount)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  for (; nCount != 0; nCount--);
 8002e00:	e002      	b.n	8002e08 <Delay+0x10>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f9      	bne.n	8002e02 <Delay+0xa>
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop

08002e1c <Audio_MAL_Init>:
  *         from Media to the I2S peripheral.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Init(void)  
{ 
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
#else  
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;
#endif

  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002e22:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <Audio_MAL_Init+0x130>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d16e      	bne.n	8002f08 <Audio_MAL_Init+0xec>
  {
    /* Enable the DMA clock */
    RCC_AHB1PeriphClockCmd(AUDIO_MAL_DMA_CLOCK, ENABLE); 
 8002e2a:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <Audio_MAL_Init+0x134>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2101      	movs	r1, #1
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe ff3f 	bl	8001cb4 <RCC_AHB1PeriphClockCmd>
    
    /* Configure the DMA Stream */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 8002e36:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <Audio_MAL_Init+0x138>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe fa0f 	bl	8001260 <DMA_Cmd>
    DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 8002e42:	4b44      	ldr	r3, [pc, #272]	; (8002f54 <Audio_MAL_Init+0x138>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe f8a6 	bl	8000f98 <DMA_DeInit>
    /* Set the parameters to be configured */
    DMA_InitStructure.DMA_Channel = AUDIO_MAL_DMA_CHANNEL;  
 8002e4c:	4b42      	ldr	r3, [pc, #264]	; (8002f58 <Audio_MAL_Init+0x13c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a42      	ldr	r2, [pc, #264]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002e52:	6013      	str	r3, [r2, #0]
    DMA_InitStructure.DMA_PeripheralBaseAddr = AUDIO_MAL_DMA_DREG;
 8002e54:	4b42      	ldr	r3, [pc, #264]	; (8002f60 <Audio_MAL_Init+0x144>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a40      	ldr	r2, [pc, #256]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002e5a:	6053      	str	r3, [r2, #4]
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 8002e5c:	4b3f      	ldr	r3, [pc, #252]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8002e62:	4b3e      	ldr	r3, [pc, #248]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002e64:	2240      	movs	r2, #64	; 0x40
 8002e66:	60da      	str	r2, [r3, #12]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)0xFFFE;      /* This field will be configured in play function */
 8002e68:	4b3c      	ldr	r3, [pc, #240]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002e6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e6e:	611a      	str	r2, [r3, #16]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002e70:	4b3a      	ldr	r3, [pc, #232]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	615a      	str	r2, [r3, #20]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002e76:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e7c:	619a      	str	r2, [r3, #24]
    DMA_InitStructure.DMA_PeripheralDataSize = AUDIO_MAL_DMA_PERIPH_DATA_SIZE;
 8002e7e:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e84:	61da      	str	r2, [r3, #28]
    DMA_InitStructure.DMA_MemoryDataSize = AUDIO_MAL_DMA_MEM_DATA_SIZE; 
 8002e86:	4b35      	ldr	r3, [pc, #212]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002e88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e8c:	621a      	str	r2, [r3, #32]
#ifdef AUDIO_MAL_MODE_NORMAL
    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
#elif defined(AUDIO_MAL_MODE_CIRCULAR)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8002e8e:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error "AUDIO_MAL_MODE_NORMAL or AUDIO_MAL_MODE_CIRCULAR should be selected !!"
#endif /* AUDIO_MAL_MODE_NORMAL */  
    DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8002e96:	4b31      	ldr	r3, [pc, #196]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002e98:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8002ea4:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	635a      	str	r2, [r3, #52]	; 0x34
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;  
 8002eb0:	4b2a      	ldr	r3, [pc, #168]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);  
 8002eb6:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <Audio_MAL_Init+0x138>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4928      	ldr	r1, [pc, #160]	; (8002f5c <Audio_MAL_Init+0x140>)
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe f93f 	bl	8001140 <DMA_Init>
    
    /* Enable the selected DMA interrupts (selected in "stm32f4_discovery_eval_audio_codec.h" defines) */
#ifdef AUDIO_MAL_DMA_IT_TC_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TC, ENABLE);
 8002ec2:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <Audio_MAL_Init+0x138>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	2110      	movs	r1, #16
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fa4e 	bl	800136c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TC_EN */
#ifdef AUDIO_MAL_DMA_IT_HT_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_HT, ENABLE);
 8002ed0:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <Audio_MAL_Init+0x138>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	2108      	movs	r1, #8
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe fa47 	bl	800136c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
#ifdef AUDIO_MAL_DMA_IT_TE_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
 8002ede:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <Audio_MAL_Init+0x138>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	2186      	movs	r1, #134	; 0x86
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fa40 	bl	800136c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
    
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <Audio_MAL_Init+0x148>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002efc:	2301      	movs	r3, #1
 8002efe:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fd7a 	bl	80009fc <NVIC_Init>
    NVIC_Init(&NVIC_InitStructure);
#endif 
  }
#endif /* DAC_USE_I2S_DMA */
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002f08:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <Audio_MAL_Init+0x130>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d105      	bne.n	8002f1c <Audio_MAL_Init+0x100>
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
 8002f10:	2201      	movs	r2, #1
 8002f12:	2102      	movs	r1, #2
 8002f14:	4814      	ldr	r0, [pc, #80]	; (8002f68 <Audio_MAL_Init+0x14c>)
 8002f16:	f7ff f8e5 	bl	80020e4 <SPI_I2S_DMACmd>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 8002f1a:	e012      	b.n	8002f42 <Audio_MAL_Init+0x126>
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
  }
  else
  {
    /* Configure the STM32 DAC to geenrate audio analog signal */
    DAC_Config();
 8002f1c:	f000 f86c 	bl	8002ff8 <DAC_Config>
    
#ifndef DAC_USE_I2S_DMA
    /* Enable the I2S interrupt used to write into the DAC register */
    SPI_I2S_ITConfig(SPI3, SPI_I2S_IT_TXE, ENABLE);
 8002f20:	2201      	movs	r2, #1
 8002f22:	2171      	movs	r1, #113	; 0x71
 8002f24:	4810      	ldr	r0, [pc, #64]	; (8002f68 <Audio_MAL_Init+0x14c>)
 8002f26:	f7ff f901 	bl	800212c <SPI_I2S_ITConfig>
    
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = CODEC_I2S_IRQ;
 8002f2a:	2333      	movs	r3, #51	; 0x33
 8002f2c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 8002f32:	2300      	movs	r3, #0
 8002f34:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002f36:	2301      	movs	r3, #1
 8002f38:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure); 
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd fd5d 	bl	80009fc <NVIC_Init>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2000002c 	.word	0x2000002c
 8002f50:	20000030 	.word	0x20000030
 8002f54:	20000034 	.word	0x20000034
 8002f58:	200000c0 	.word	0x200000c0
 8002f5c:	2000552c 	.word	0x2000552c
 8002f60:	20000038 	.word	0x20000038
 8002f64:	2000003c 	.word	0x2000003c
 8002f68:	40003c00 	.word	0x40003c00

08002f6c <Audio_MAL_Play>:
  * @brief  Starts playing audio stream from the audio Media.
  * @param  None
  * @retval None
  */
void Audio_MAL_Play(uint32_t Addr, uint32_t Size)
{         
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <Audio_MAL_Play+0x7c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d112      	bne.n	8002fa4 <Audio_MAL_Play+0x38>
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 8002f7e:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <Audio_MAL_Play+0x80>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 8002f84:	4a19      	ldr	r2, [pc, #100]	; (8002fec <Audio_MAL_Play+0x80>)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002f8a:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <Audio_MAL_Play+0x84>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4917      	ldr	r1, [pc, #92]	; (8002fec <Audio_MAL_Play+0x80>)
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe f8d5 	bl	8001140 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);   
 8002f96:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <Audio_MAL_Play+0x84>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe f95f 	bl	8001260 <DMA_Cmd>
 8002fa2:	e011      	b.n	8002fc8 <Audio_MAL_Play+0x5c>
  }
#ifndef DAC_USE_I2S_DMA
  else
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 8002fa4:	4a11      	ldr	r2, [pc, #68]	; (8002fec <Audio_MAL_Play+0x80>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 8002faa:	4a10      	ldr	r2, [pc, #64]	; (8002fec <Audio_MAL_Play+0x80>)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <Audio_MAL_Play+0x84>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	490d      	ldr	r1, [pc, #52]	; (8002fec <Audio_MAL_Play+0x80>)
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe f8c2 	bl	8001140 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <Audio_MAL_Play+0x84>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe f94c 	bl	8001260 <DMA_Cmd>
  }
#endif /* DAC_USE_I2S_DMA */
  
  /* If the I2S peripheral is still not enabled, enable it */
  if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <Audio_MAL_Play+0x88>)
 8002fca:	8b9b      	ldrh	r3, [r3, #28]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <Audio_MAL_Play+0x72>
  {
    I2S_Cmd(CODEC_I2S, ENABLE);
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4806      	ldr	r0, [pc, #24]	; (8002ff4 <Audio_MAL_Play+0x88>)
 8002fda:	f7ff f853 	bl	8002084 <I2S_Cmd>
  }
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	2000002c 	.word	0x2000002c
 8002fec:	2000552c 	.word	0x2000552c
 8002ff0:	20000034 	.word	0x20000034
 8002ff4:	40003c00 	.word	0x40003c00

08002ff8 <DAC_Config>:
  * @brief  DAC  Channel1 Configuration
  * @param  None
  * @retval None
  */
void DAC_Config(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
  DAC_InitTypeDef  DAC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;

  /* DMA1 clock and GPIOA clock enable (to be used with DAC) */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 8002ffe:	2101      	movs	r1, #1
 8003000:	4813      	ldr	r0, [pc, #76]	; (8003050 <DAC_Config+0x58>)
 8003002:	f7fe fe57 	bl	8001cb4 <RCC_AHB1PeriphClockCmd>

  /* DAC Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8003006:	2101      	movs	r1, #1
 8003008:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800300c:	f7fe fe72 	bl	8001cf4 <RCC_APB1PeriphClockCmd>

  /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8003010:	2310      	movs	r3, #16
 8003012:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8003014:	2303      	movs	r3, #3
 8003016:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 800301c:	463b      	mov	r3, r7
 800301e:	4619      	mov	r1, r3
 8003020:	480c      	ldr	r0, [pc, #48]	; (8003054 <DAC_Config+0x5c>)
 8003022:	f7fe fa5f 	bl	80014e4 <GPIO_Init>

  /* DAC channel1 Configuration */
  DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
  DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 8003032:	f107 0308 	add.w	r3, r7, #8
 8003036:	4619      	mov	r1, r3
 8003038:	2000      	movs	r0, #0
 800303a:	f7fd ff37 	bl	8000eac <DAC_Init>

  /* Enable DAC Channel1 */
  DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);
 800303e:	2101      	movs	r1, #1
 8003040:	2000      	movs	r0, #0
 8003042:	f7fd ff67 	bl	8000f14 <DAC_Cmd>
}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	00200001 	.word	0x00200001
 8003054:	40020000 	.word	0x40020000

08003058 <init_adc>:
/*
 * Initializes the ADC to work in scan mode with 13 channels for pots
 * Uses DMA to transfer data and a timer to throttle the ADC conversion
 * The conversion cycle occurs every 75ms this function starts the timer.
 */
void init_adc(volatile uint16_t ADCBuffer[NUM_CHANNELS]){
 8003058:	b580      	push	{r7, lr}
 800305a:	b0a0      	sub	sp, #128	; 0x80
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	DMA_InitTypeDef DMA_Init_struct;
	GPIO_InitTypeDef GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef time_base_struct;

	/* Enable timer (timer runs at 13.3 Hz)*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8003060:	2101      	movs	r1, #1
 8003062:	2001      	movs	r0, #1
 8003064:	f7fe fe46 	bl	8001cf4 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&time_base_struct);
 8003068:	f107 0308 	add.w	r3, r7, #8
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f959 	bl	8002324 <TIM_TimeBaseStructInit>
	time_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 8003072:	2300      	movs	r3, #0
 8003074:	823b      	strh	r3, [r7, #16]
	time_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 8003076:	2300      	movs	r3, #0
 8003078:	817b      	strh	r3, [r7, #10]
	time_base_struct.TIM_Period = myTIM2_PERIOD;
 800307a:	f243 1338 	movw	r3, #12600	; 0x3138
 800307e:	60fb      	str	r3, [r7, #12]
	time_base_struct.TIM_Prescaler = myTIM2_PRESCALER;
 8003080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003084:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM2, &time_base_struct);
 8003086:	f107 0308 	add.w	r3, r7, #8
 800308a:	4619      	mov	r1, r3
 800308c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003090:	f7ff f8dc 	bl	800224c <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM2,TIM_TRGOSource_Update);
 8003094:	2120      	movs	r1, #32
 8003096:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800309a:	f7ff f9b3 	bl	8002404 <TIM_SelectOutputTrigger>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 800309e:	2201      	movs	r2, #1
 80030a0:	2101      	movs	r1, #1
 80030a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80030a6:	f7ff f977 	bl	8002398 <TIM_ITConfig>

	/* Enable clock on DMA1 & GPIO's */
	/* Enable DMA2, thats where ADC peripheral is used */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 80030aa:	2101      	movs	r1, #1
 80030ac:	2001      	movs	r0, #1
 80030ae:	f7fe fe01 	bl	8001cb4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 80030b2:	2101      	movs	r1, #1
 80030b4:	2002      	movs	r0, #2
 80030b6:	f7fe fdfd 	bl	8001cb4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 80030ba:	2101      	movs	r1, #1
 80030bc:	2004      	movs	r0, #4
 80030be:	f7fe fdf9 	bl	8001cb4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,ENABLE);
 80030c2:	2101      	movs	r1, #1
 80030c4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80030c8:	f7fe fdf4 	bl	8001cb4 <RCC_AHB1PeriphClockCmd>
	//GPIO_Pin_1	VFO-Frequency
	//GPIO_Pin_2	LFO-Amplitude
	//GPIO_Pin_3	LFO-Frequency
	//GPIO_Pin_5	ENVELOPE-Attack
	//GPIO_Pin_7	ENVELOPE-Sustain-time
	GPIO_StructInit(&GPIO_InitStructure);
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe fa95 	bl	8001600 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_5  | GPIO_Pin_7;
 80030d6:	23af      	movs	r3, #175	; 0xaf
 80030d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 80030da:	2303      	movs	r3, #3
 80030dc:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80030de:	2302      	movs	r3, #2
 80030e0:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80030e6:	f107 0314 	add.w	r3, r7, #20
 80030ea:	4619      	mov	r1, r3
 80030ec:	4879      	ldr	r0, [pc, #484]	; (80032d4 <init_adc+0x27c>)
 80030ee:	f7fe f9f9 	bl	80014e4 <GPIO_Init>

	//B bank pins
	//GPIO_Pin_0	ENVELOPE-Release
	//GPIO_Pin_1	FILTER-FreqLow
	GPIO_StructInit(&GPIO_InitStructure);
 80030f2:	f107 0314 	add.w	r3, r7, #20
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fa82 	bl	8001600 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1;
 80030fc:	2303      	movs	r3, #3
 80030fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8003100:	2303      	movs	r3, #3
 8003102:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003104:	2302      	movs	r3, #2
 8003106:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003108:	2300      	movs	r3, #0
 800310a:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	4619      	mov	r1, r3
 8003112:	4871      	ldr	r0, [pc, #452]	; (80032d8 <init_adc+0x280>)
 8003114:	f7fe f9e6 	bl	80014e4 <GPIO_Init>
	//C bank pins//GPIO_Pin_0
	//GPIO_Pin_0	ENVELOPE blsnk_len
	//GPIO_Pin_1	ENVELOPE-decay
	//GPIO_Pin_2	VCO-Volume					TODO: get rid of volume.
	//GPIO_Pin_4	ENVELOPE-sustain-amp
	GPIO_StructInit(&GPIO_InitStructure);
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe fa6f 	bl	8001600 <GPIO_StructInit>
	// GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_4;
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4;		// MB turned off C2
 8003122:	2313      	movs	r3, #19
 8003124:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8003126:	2303      	movs	r3, #3
 8003128:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800312a:	2302      	movs	r3, #2
 800312c:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003132:	f107 0314 	add.w	r3, r7, #20
 8003136:	4619      	mov	r1, r3
 8003138:	4868      	ldr	r0, [pc, #416]	; (80032dc <init_adc+0x284>)
 800313a:	f7fe f9d3 	bl	80014e4 <GPIO_Init>


	/*  Initialise DMA */
	DMA_StructInit(&DMA_Init_struct);							// reset struct
 800313e:	f107 031c 	add.w	r3, r7, #28
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe f854 	bl	80011f0 <DMA_StructInit>

	/* config of DMA */
	DMA_Init_struct.DMA_Channel = DMA_Channel_0; 				/* See Tab 43 */
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
	DMA_Init_struct.DMA_BufferSize = NUM_CHANNELS;				/*  13adc channels */
 800314c:	230c      	movs	r3, #12
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_Init_struct.DMA_DIR = DMA_DIR_PeripheralToMemory; 		/* ADC to mem */
 8003150:	2300      	movs	r3, #0
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_Init_struct.DMA_FIFOMode = DMA_FIFOMode_Disable; 		/* no FIFO */
 8003154:	2300      	movs	r3, #0
 8003156:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_Init_struct.DMA_FIFOThreshold = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_Init_struct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800315c:	2300      	movs	r3, #0
 800315e:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_Init_struct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8003160:	2300      	movs	r3, #0
 8003162:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_Init_struct.DMA_Mode = DMA_Mode_Circular; 				/* circular buffer */
 8003164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003168:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_Init_struct.DMA_Priority = DMA_Priority_High; 			/* high priority */
 800316a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800316e:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init_struct.DMA_Memory0BaseAddr = (uint32_t)ADCBuffer; 	/* target addr */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_Init_struct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; /* 16 bit */
 8003174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003178:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_Init_struct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 800317a:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <init_adc+0x288>)
 800317c:	623b      	str	r3, [r7, #32]
	DMA_Init_struct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800317e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003182:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_Init_struct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_Init_struct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800318a:	2300      	movs	r3, #0
 800318c:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init(DMA2_Stream0, &DMA_Init_struct); 					/* See Table 43 for mapping */
 800318e:	f107 031c 	add.w	r3, r7, #28
 8003192:	4619      	mov	r1, r3
 8003194:	4853      	ldr	r0, [pc, #332]	; (80032e4 <init_adc+0x28c>)
 8003196:	f7fd ffd3 	bl	8001140 <DMA_Init>
	DMA_Cmd(DMA2_Stream0, ENABLE);
 800319a:	2101      	movs	r1, #1
 800319c:	4851      	ldr	r0, [pc, #324]	; (80032e4 <init_adc+0x28c>)
 800319e:	f7fe f85f 	bl	8001260 <DMA_Cmd>

	/*Initialize ADC*/
	ADC_StructInit(&adc_init_struct);						//populates structs with reset defaults
 80031a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd fcee 	bl	8000b88 <ADC_StructInit>
	ADC_CommonStructInit(&adc_com_init_struct);
 80031ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd fd31 	bl	8000c18 <ADC_CommonStructInit>
	ADC_Cmd(ADC1, DISABLE);
 80031b6:	2100      	movs	r1, #0
 80031b8:	484b      	ldr	r0, [pc, #300]	; (80032e8 <init_adc+0x290>)
 80031ba:	f7fd fd43 	bl	8000c44 <ADC_Cmd>
	ADC_DeInit();
 80031be:	f7fd fc7f 	bl	8000ac0 <ADC_DeInit>

	/* init ADC clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80031c2:	2101      	movs	r1, #1
 80031c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031c8:	f7fe fdb4 	bl	8001d34 <RCC_APB2PeriphClockCmd>

	/*Initialize Common ADC */
	adc_com_init_struct.ADC_Mode = ADC_Mode_Independent;
 80031cc:	2300      	movs	r3, #0
 80031ce:	65bb      	str	r3, [r7, #88]	; 0x58
	adc_com_init_struct.ADC_Prescaler = ADC_Prescaler_Div2;
 80031d0:	2300      	movs	r3, #0
 80031d2:	65fb      	str	r3, [r7, #92]	; 0x5c
	adc_com_init_struct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80031d4:	2300      	movs	r3, #0
 80031d6:	663b      	str	r3, [r7, #96]	; 0x60
	adc_com_init_struct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_20Cycles;
 80031d8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80031dc:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CommonInit(&adc_com_init_struct);
 80031de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd fcf0 	bl	8000bc8 <ADC_CommonInit>

	/* Initialize ADC1 */
	adc_init_struct.ADC_Resolution = ADC_Resolution_12b;
 80031e8:	2300      	movs	r3, #0
 80031ea:	66bb      	str	r3, [r7, #104]	; 0x68
	adc_init_struct.ADC_ScanConvMode = ENABLE;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	adc_init_struct.ADC_ContinuousConvMode = DISABLE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	adc_init_struct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 80031f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80031fc:	673b      	str	r3, [r7, #112]	; 0x70
	adc_init_struct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;
 80031fe:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003202:	677b      	str	r3, [r7, #116]	; 0x74
	adc_init_struct.ADC_DataAlign = ADC_DataAlign_Right;
 8003204:	2300      	movs	r3, #0
 8003206:	67bb      	str	r3, [r7, #120]	; 0x78
	adc_init_struct.ADC_NbrOfConversion = NUM_CHANNELS; /* 5 channels in total */
 8003208:	230c      	movs	r3, #12
 800320a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	ADC_Init(ADC1, &adc_init_struct);
 800320e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003212:	4619      	mov	r1, r3
 8003214:	4834      	ldr	r0, [pc, #208]	; (80032e8 <init_adc+0x290>)
 8003216:	f7fd fc61 	bl	8000adc <ADC_Init>

	/* Configure channels */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_480Cycles);		//VFO-Amplitude
 800321a:	2307      	movs	r3, #7
 800321c:	2201      	movs	r2, #1
 800321e:	2100      	movs	r1, #0
 8003220:	4831      	ldr	r0, [pc, #196]	; (80032e8 <init_adc+0x290>)
 8003222:	f7fd fd2b 	bl	8000c7c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_480Cycles);		//VFO-Frequency
 8003226:	2307      	movs	r3, #7
 8003228:	2202      	movs	r2, #2
 800322a:	2101      	movs	r1, #1
 800322c:	482e      	ldr	r0, [pc, #184]	; (80032e8 <init_adc+0x290>)
 800322e:	f7fd fd25 	bl	8000c7c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 3, ADC_SampleTime_480Cycles);		//LFO-Amplitude
 8003232:	2307      	movs	r3, #7
 8003234:	2203      	movs	r2, #3
 8003236:	2102      	movs	r1, #2
 8003238:	482b      	ldr	r0, [pc, #172]	; (80032e8 <init_adc+0x290>)
 800323a:	f7fd fd1f 	bl	8000c7c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 4, ADC_SampleTime_480Cycles);		//LFO-Frequency
 800323e:	2307      	movs	r3, #7
 8003240:	2204      	movs	r2, #4
 8003242:	2103      	movs	r1, #3
 8003244:	4828      	ldr	r0, [pc, #160]	; (80032e8 <init_adc+0x290>)
 8003246:	f7fd fd19 	bl	8000c7c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 5, ADC_SampleTime_480Cycles);		//ENVELOPE-Attack
 800324a:	2307      	movs	r3, #7
 800324c:	2205      	movs	r2, #5
 800324e:	2105      	movs	r1, #5
 8003250:	4825      	ldr	r0, [pc, #148]	; (80032e8 <init_adc+0x290>)
 8003252:	f7fd fd13 	bl	8000c7c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 6, ADC_SampleTime_480Cycles);		//ENVELOPE-Sustain-time
 8003256:	2307      	movs	r3, #7
 8003258:	2206      	movs	r2, #6
 800325a:	2107      	movs	r1, #7
 800325c:	4822      	ldr	r0, [pc, #136]	; (80032e8 <init_adc+0x290>)
 800325e:	f7fd fd0d 	bl	8000c7c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 7, ADC_SampleTime_480Cycles);		//ENVELOPE-Release
 8003262:	2307      	movs	r3, #7
 8003264:	2207      	movs	r2, #7
 8003266:	2108      	movs	r1, #8
 8003268:	481f      	ldr	r0, [pc, #124]	; (80032e8 <init_adc+0x290>)
 800326a:	f7fd fd07 	bl	8000c7c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 8, ADC_SampleTime_480Cycles);		//FILTER-FreqLow
 800326e:	2307      	movs	r3, #7
 8003270:	2208      	movs	r2, #8
 8003272:	2109      	movs	r1, #9
 8003274:	481c      	ldr	r0, [pc, #112]	; (80032e8 <init_adc+0x290>)
 8003276:	f7fd fd01 	bl	8000c7c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 9, ADC_SampleTime_480Cycles);	//ENVELOPE blsnk_len
 800327a:	2307      	movs	r3, #7
 800327c:	2209      	movs	r2, #9
 800327e:	210a      	movs	r1, #10
 8003280:	4819      	ldr	r0, [pc, #100]	; (80032e8 <init_adc+0x290>)
 8003282:	f7fd fcfb 	bl	8000c7c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 10, ADC_SampleTime_480Cycles);	//ENVELOPE-decay
 8003286:	2307      	movs	r3, #7
 8003288:	220a      	movs	r2, #10
 800328a:	210b      	movs	r1, #11
 800328c:	4816      	ldr	r0, [pc, #88]	; (80032e8 <init_adc+0x290>)
 800328e:	f7fd fcf5 	bl	8000c7c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 11, ADC_SampleTime_480Cycles);	//VCO-Volume
 8003292:	2307      	movs	r3, #7
 8003294:	220b      	movs	r2, #11
 8003296:	210c      	movs	r1, #12
 8003298:	4813      	ldr	r0, [pc, #76]	; (80032e8 <init_adc+0x290>)
 800329a:	f7fd fcef 	bl	8000c7c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 12, ADC_SampleTime_480Cycles);	//ENVELOPE-sustain-amp
 800329e:	2307      	movs	r3, #7
 80032a0:	220c      	movs	r2, #12
 80032a2:	210e      	movs	r1, #14
 80032a4:	4810      	ldr	r0, [pc, #64]	; (80032e8 <init_adc+0x290>)
 80032a6:	f7fd fce9 	bl	8000c7c <ADC_RegularChannelConfig>

	/* Enable ADC1 DMA */
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);			//enables DMA request after all adc conversions
 80032aa:	2101      	movs	r1, #1
 80032ac:	480e      	ldr	r0, [pc, #56]	; (80032e8 <init_adc+0x290>)
 80032ae:	f7fd fdcb 	bl	8000e48 <ADC_DMARequestAfterLastTransferCmd>
	ADC_DMACmd(ADC1, ENABLE);
 80032b2:	2101      	movs	r1, #1
 80032b4:	480c      	ldr	r0, [pc, #48]	; (80032e8 <init_adc+0x290>)
 80032b6:	f7fd fdab 	bl	8000e10 <ADC_DMACmd>

	/* Enable ADC1 **************************************************************/
	ADC_Cmd(ADC1, ENABLE);
 80032ba:	2101      	movs	r1, #1
 80032bc:	480a      	ldr	r0, [pc, #40]	; (80032e8 <init_adc+0x290>)
 80032be:	f7fd fcc1 	bl	8000c44 <ADC_Cmd>

	TIM_Cmd(TIM2, ENABLE);		//This could be dine in the main however gonna leave it here
 80032c2:	2101      	movs	r1, #1
 80032c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80032c8:	f7ff f846 	bl	8002358 <TIM_Cmd>



}
 80032cc:	bf00      	nop
 80032ce:	3780      	adds	r7, #128	; 0x80
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40020000 	.word	0x40020000
 80032d8:	40020400 	.word	0x40020400
 80032dc:	40020800 	.word	0x40020800
 80032e0:	4001204c 	.word	0x4001204c
 80032e4:	40026410 	.word	0x40026410
 80032e8:	40012000 	.word	0x40012000

080032ec <init_gpios>:
/*
 * Sets up the 5 position selectors and TIM4 to be used to debounce
 * if the interrupt priorities need to be changed make sure timer is higher than EXTI
 */

void init_gpios(){
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08a      	sub	sp, #40	; 0x28
 80032f0:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef EXTI_init_struct;
	NVIC_InitTypeDef EXTI_NVIC_init_struct;
	NVIC_InitTypeDef TIM4_NVIC_init_struct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE); 			//This is already turned on in ADC Init function
 80032f2:	2101      	movs	r1, #1
 80032f4:	2004      	movs	r0, #4
 80032f6:	f7fe fcdd 	bl	8001cb4 <RCC_AHB1PeriphClockCmd>

	/*
	 * C bank pins
	 * PC6		lfo_other2
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 80032fa:	f107 0320 	add.w	r3, r7, #32
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe f97e 	bl	8001600 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_6;
 8003304:	2340      	movs	r3, #64	; 0x40
 8003306:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 8003308:	2300      	movs	r3, #0
 800330a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;				//slow
 800330e:	2300      	movs	r3, #0
 8003310:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//no pull
 8003314:	2300      	movs	r3, #0
 8003316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 800331a:	f107 0320 	add.w	r3, r7, #32
 800331e:	4619      	mov	r1, r3
 8003320:	4829      	ldr	r0, [pc, #164]	; (80033c8 <init_gpios+0xdc>)
 8003322:	f7fe f8df 	bl	80014e4 <GPIO_Init>


	/*Configure Tim4 for debouncing	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8003326:	2101      	movs	r1, #1
 8003328:	2004      	movs	r0, #4
 800332a:	f7fe fce3 	bl	8001cf4 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&tim4_base_struct);
 800332e:	f107 0314 	add.w	r3, r7, #20
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fff6 	bl	8002324 <TIM_TimeBaseStructInit>
	tim4_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 8003338:	2300      	movs	r3, #0
 800333a:	83bb      	strh	r3, [r7, #28]
	tim4_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 800333c:	2300      	movs	r3, #0
 800333e:	82fb      	strh	r3, [r7, #22]
	tim4_base_struct.TIM_Period = MYTIM4_PERIOD;
 8003340:	f643 136c 	movw	r3, #14700	; 0x396c
 8003344:	61bb      	str	r3, [r7, #24]
	tim4_base_struct.TIM_Prescaler = myTIM4_PRESCALER;
 8003346:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800334a:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM4, &tim4_base_struct);
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	4619      	mov	r1, r3
 8003352:	481e      	ldr	r0, [pc, #120]	; (80033cc <init_gpios+0xe0>)
 8003354:	f7fe ff7a 	bl	800224c <TIM_TimeBaseInit>

	TIM4_NVIC_init_struct.NVIC_IRQChannel = TIM4_IRQn;
 8003358:	231e      	movs	r3, #30
 800335a:	713b      	strb	r3, [r7, #4]
	TIM4_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 800335c:	2301      	movs	r3, #1
 800335e:	71fb      	strb	r3, [r7, #7]
	TIM4_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x00;
 8003360:	2300      	movs	r3, #0
 8003362:	717b      	strb	r3, [r7, #5]
	TIM4_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x00;
 8003364:	2300      	movs	r3, #0
 8003366:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&TIM4_NVIC_init_struct);
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fb46 	bl	80009fc <NVIC_Init>

	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8003370:	2201      	movs	r2, #1
 8003372:	2101      	movs	r1, #1
 8003374:	4815      	ldr	r0, [pc, #84]	; (80033cc <init_gpios+0xe0>)
 8003376:	f7ff f80f 	bl	8002398 <TIM_ITConfig>


	/*Configure pins as EXTI*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 800337a:	2101      	movs	r1, #1
 800337c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003380:	f7fe fcd8 	bl	8001d34 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource6);
 8003384:	2106      	movs	r1, #6
 8003386:	2002      	movs	r0, #2
 8003388:	f7fe ff1e 	bl	80021c8 <SYSCFG_EXTILineConfig>
//	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource15);


	//init EXTI
	// MB EXTI_init_struct.EXTI_Line = EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9 | EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15;
	EXTI_init_struct.EXTI_Line = EXTI_Line6;
 800338c:	2340      	movs	r3, #64	; 0x40
 800338e:	60fb      	str	r3, [r7, #12]
	EXTI_init_struct.EXTI_LineCmd = ENABLE;
 8003390:	2301      	movs	r3, #1
 8003392:	74bb      	strb	r3, [r7, #18]
	EXTI_init_struct.EXTI_Mode =  EXTI_Mode_Interrupt;
 8003394:	2300      	movs	r3, #0
 8003396:	743b      	strb	r3, [r7, #16]
	EXTI_init_struct.EXTI_Trigger = EXTI_Trigger_Rising;
 8003398:	2308      	movs	r3, #8
 800339a:	747b      	strb	r3, [r7, #17]
	EXTI_Init(&EXTI_init_struct);
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fe f81d 	bl	80013e0 <EXTI_Init>

	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI9_5_IRQn;
 80033a6:	2317      	movs	r3, #23
 80033a8:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80033aa:	230f      	movs	r3, #15
 80033ac:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80033ae:	230f      	movs	r3, #15
 80033b0:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80033b2:	2301      	movs	r3, #1
 80033b4:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80033b6:	f107 0308 	add.w	r3, r7, #8
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd fb1e 	bl	80009fc <NVIC_Init>
//	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI15_10_IRQn;
//	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
//	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
//	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
//	NVIC_Init(&EXTI_NVIC_init_struct);
}
 80033c0:	bf00      	nop
 80033c2:	3728      	adds	r7, #40	; 0x28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40020800 	.word	0x40020800
 80033cc:	40000800 	.word	0x40000800

080033d0 <init_push_buttons>:

/*
 * Initialzes the pushbutton and pushbutton interrupts and limiting timer,
 * if the interrupt priorities need to be changed make sure timer is higher than EXTI
 */
void  init_push_buttons(){
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	; 0x28
 80033d4:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef tim3_base_struct;
	EXTI_InitTypeDef EXTI_init_struct;
	NVIC_InitTypeDef EXTI_NVIC_init_struct, TIM3_NVIC_init_struct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE,ENABLE); 			//This is already turned on in init gpio's but turn on incase
 80033d6:	2101      	movs	r1, #1
 80033d8:	2010      	movs	r0, #16
 80033da:	f7fe fc6b 	bl	8001cb4 <RCC_AHB1PeriphClockCmd>
	 * PE0		Menu up
	 * PE1		Menu down
	 * PE2		Menu back
	 * PE3		Menu enter
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 80033de:	f107 0320 	add.w	r3, r7, #32
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe f90c 	bl	8001600 <GPIO_StructInit>
	// GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;		// MB - to turn filter on
 80033e8:	231f      	movs	r3, #31
 80033ea:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 80033ec:	2300      	movs	r3, #0
 80033ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;				//medium
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//pull down
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 80033fe:	f107 0320 	add.w	r3, r7, #32
 8003402:	4619      	mov	r1, r3
 8003404:	4843      	ldr	r0, [pc, #268]	; (8003514 <init_push_buttons+0x144>)
 8003406:	f7fe f86d 	bl	80014e4 <GPIO_Init>


	/*Configure Tim3 for debouncing	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800340a:	2101      	movs	r1, #1
 800340c:	2002      	movs	r0, #2
 800340e:	f7fe fc71 	bl	8001cf4 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&tim3_base_struct);
 8003412:	f107 0314 	add.w	r3, r7, #20
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe ff84 	bl	8002324 <TIM_TimeBaseStructInit>
	tim3_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 800341c:	2300      	movs	r3, #0
 800341e:	83bb      	strh	r3, [r7, #28]
	tim3_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 8003420:	2300      	movs	r3, #0
 8003422:	82fb      	strh	r3, [r7, #22]
	tim3_base_struct.TIM_Period = MYTIM3_PERIOD;
 8003424:	f643 136c 	movw	r3, #14700	; 0x396c
 8003428:	61bb      	str	r3, [r7, #24]
	tim3_base_struct.TIM_Prescaler = myTIM3_PRESCALER;
 800342a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800342e:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM3, &tim3_base_struct);
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	4619      	mov	r1, r3
 8003436:	4838      	ldr	r0, [pc, #224]	; (8003518 <init_push_buttons+0x148>)
 8003438:	f7fe ff08 	bl	800224c <TIM_TimeBaseInit>

	TIM3_NVIC_init_struct.NVIC_IRQChannel = TIM3_IRQn;
 800343c:	231d      	movs	r3, #29
 800343e:	713b      	strb	r3, [r7, #4]
	TIM3_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003440:	2301      	movs	r3, #1
 8003442:	71fb      	strb	r3, [r7, #7]
	TIM3_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x00;
 8003444:	2300      	movs	r3, #0
 8003446:	717b      	strb	r3, [r7, #5]
	TIM3_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x00;
 8003448:	2300      	movs	r3, #0
 800344a:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&TIM3_NVIC_init_struct);
 800344c:	1d3b      	adds	r3, r7, #4
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd fad4 	bl	80009fc <NVIC_Init>

	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8003454:	2201      	movs	r2, #1
 8003456:	2101      	movs	r1, #1
 8003458:	482f      	ldr	r0, [pc, #188]	; (8003518 <init_push_buttons+0x148>)
 800345a:	f7fe ff9d 	bl	8002398 <TIM_ITConfig>


	/*Configure pins as EXTI*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 800345e:	2101      	movs	r1, #1
 8003460:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003464:	f7fe fc66 	bl	8001d34 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource0);
 8003468:	2100      	movs	r1, #0
 800346a:	2004      	movs	r0, #4
 800346c:	f7fe feac 	bl	80021c8 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource1);
 8003470:	2101      	movs	r1, #1
 8003472:	2004      	movs	r0, #4
 8003474:	f7fe fea8 	bl	80021c8 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource2);
 8003478:	2102      	movs	r1, #2
 800347a:	2004      	movs	r0, #4
 800347c:	f7fe fea4 	bl	80021c8 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource3);
 8003480:	2103      	movs	r1, #3
 8003482:	2004      	movs	r0, #4
 8003484:	f7fe fea0 	bl	80021c8 <SYSCFG_EXTILineConfig>



	//init EXTI
	EXTI_init_struct.EXTI_Line = EXTI_Line0 | EXTI_Line1 | EXTI_Line2 | EXTI_Line3;
 8003488:	230f      	movs	r3, #15
 800348a:	60fb      	str	r3, [r7, #12]
	EXTI_init_struct.EXTI_LineCmd = ENABLE;
 800348c:	2301      	movs	r3, #1
 800348e:	74bb      	strb	r3, [r7, #18]
	EXTI_init_struct.EXTI_Mode =  EXTI_Mode_Interrupt;
 8003490:	2300      	movs	r3, #0
 8003492:	743b      	strb	r3, [r7, #16]
	EXTI_init_struct.EXTI_Trigger = EXTI_Trigger_Rising;
 8003494:	2308      	movs	r3, #8
 8003496:	747b      	strb	r3, [r7, #17]
	EXTI_Init(&EXTI_init_struct);
 8003498:	f107 030c 	add.w	r3, r7, #12
 800349c:	4618      	mov	r0, r3
 800349e:	f7fd ff9f 	bl	80013e0 <EXTI_Init>

	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI0_IRQn;
 80034a2:	2306      	movs	r3, #6
 80034a4:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80034a6:	230f      	movs	r3, #15
 80034a8:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80034aa:	230f      	movs	r3, #15
 80034ac:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80034ae:	2301      	movs	r3, #1
 80034b0:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80034b2:	f107 0308 	add.w	r3, r7, #8
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd faa0 	bl	80009fc <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI1_IRQn;;
 80034bc:	2307      	movs	r3, #7
 80034be:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80034c0:	230f      	movs	r3, #15
 80034c2:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80034c4:	230f      	movs	r3, #15
 80034c6:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80034c8:	2301      	movs	r3, #1
 80034ca:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80034cc:	f107 0308 	add.w	r3, r7, #8
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd fa93 	bl	80009fc <NVIC_Init>
	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI2_IRQn;
 80034d6:	2308      	movs	r3, #8
 80034d8:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80034da:	230f      	movs	r3, #15
 80034dc:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80034de:	230f      	movs	r3, #15
 80034e0:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80034e2:	2301      	movs	r3, #1
 80034e4:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80034e6:	f107 0308 	add.w	r3, r7, #8
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fd fa86 	bl	80009fc <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI3_IRQn;;
 80034f0:	2309      	movs	r3, #9
 80034f2:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80034f4:	230f      	movs	r3, #15
 80034f6:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80034f8:	230f      	movs	r3, #15
 80034fa:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80034fc:	2301      	movs	r3, #1
 80034fe:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8003500:	f107 0308 	add.w	r3, r7, #8
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd fa79 	bl	80009fc <NVIC_Init>
}
 800350a:	bf00      	nop
 800350c:	3728      	adds	r7, #40	; 0x28
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
 8003518:	40000400 	.word	0x40000400

0800351c <main>:

/* Globals */
extern uint16_t buffer_output[LENGTH_BUFFER];

int main(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
	*/

	/**************************** Run Initialization functions timer for tim2 started in init_adc*****************************/

	// menubutton.button=back;					//initializes menubutton state for startup
	init_gpios();								//initialize gpios
 8003520:	f7ff fee4 	bl	80032ec <init_gpios>
	init_push_buttons();						//initialize menu navigation buttons
 8003524:	f7ff ff54 	bl	80033d0 <init_push_buttons>
	init_adc(ADCBuffer);						//initialize ADC, do this last because it starts the timer
 8003528:	4807      	ldr	r0, [pc, #28]	; (8003548 <main+0x2c>)
 800352a:	f7ff fd95 	bl	8003058 <init_adc>
	//init_spi();								//initialize the SPI for LCD not using SPI any more don't need this
	// init_parallel();							//initializes all the GPIO's for parallel LCD communication
	// lcd_init();								//initializes LCD screen
	// update_selector_state();					// get startup state
	init_state();								//initialize the global state variable for the menu, filterstate, secondary VCO and modlulation
 800352e:	f002 f8a1 	bl	8005674 <init_state>
	// display_new_menu();

	EVAL_AUDIO_Init( OUTPUT_DEVICE_AUTO, VOL, SAMPLERATE);
 8003532:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003536:	2150      	movs	r1, #80	; 0x50
 8003538:	2004      	movs	r0, #4
 800353a:	f7fe ff97 	bl	800246c <EVAL_AUDIO_Init>
	EVAL_AUDIO_Play(buffer_output, LENGTH_BUFFER);
 800353e:	2140      	movs	r1, #64	; 0x40
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <main+0x30>)
 8003542:	f7fe ffbf 	bl	80024c4 <EVAL_AUDIO_Play>

	while (1)
	{

	}
 8003546:	e7fe      	b.n	8003546 <main+0x2a>
 8003548:	20005570 	.word	0x20005570
 800354c:	200000c4 	.word	0x200000c4

08003550 <Codec_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None
  * @retval None
  */
uint32_t Codec_TIMEOUT_UserCallback(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
	// TODO: See instructions in function declaration.  I've seen this LED turn on, which may signal an issue.
	STM_EVAL_LEDOn(LED5); 				/*  alert : red LED !  */
 8003554:	2002      	movs	r0, #2
 8003556:	f7fe ff71 	bl	800243c <STM_EVAL_LEDOn>
	return (0);
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}

08003560 <EVAL_AUDIO_HalfTransfer_CallBack>:
* @brief  Manages the DMA Half Transfer complete interrupt.
* @param  None
* @retval None
*/
void EVAL_AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
	the new data to the first half of buffer while DMA is transferring data from
	the second half. And when Transfer complete occurs, load the second half of
	the buffer while the DMA is transferring from the first half ...
	 */

	generate_waveforms(0, BUFF_LEN_HALF);
 800356a:	2120      	movs	r1, #32
 800356c:	2000      	movs	r0, #0
 800356e:	f000 f827 	bl	80035c0 <generate_waveforms>
	return;
 8003572:	bf00      	nop
}
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop

0800357c <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
	generate_waveforms(BUFF_LEN_HALF, LENGTH_BUFFER);
 8003586:	2140      	movs	r1, #64	; 0x40
 8003588:	2020      	movs	r0, #32
 800358a:	f000 f819 	bl	80035c0 <generate_waveforms>
	return;
 800358e:	bf00      	nop
}
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop

08003598 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0

  // return -1;
	return 0;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <EVAL_AUDIO_Error_CallBack>:

void EVAL_AUDIO_Error_CallBack(void* pData)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	STM_EVAL_LEDOn(LED3);
 80035b0:	2001      	movs	r0, #1
 80035b2:	f7fe ff43 	bl	800243c <STM_EVAL_LEDOn>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop

080035c0 <generate_waveforms>:
volatile uint16_t testflag = 0;

volatile adsr_setting adsr_settings;

void generate_waveforms(uint16_t start, uint16_t end)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	ed2d 8b02 	vpush	{d8}
 80035c6:	b08b      	sub	sp, #44	; 0x2c
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	4603      	mov	r3, r0
 80035cc:	460a      	mov	r2, r1
 80035ce:	80fb      	strh	r3, [r7, #6]
 80035d0:	4613      	mov	r3, r2
 80035d2:	80bb      	strh	r3, [r7, #4]
	osc.vco_wav = vco_wave;				// VCO wave type.
 80035d4:	4baa      	ldr	r3, [pc, #680]	; (8003880 <generate_waveforms+0x2c0>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	b29a      	uxth	r2, r3
 80035da:	4baa      	ldr	r3, [pc, #680]	; (8003884 <generate_waveforms+0x2c4>)
 80035dc:	821a      	strh	r2, [r3, #16]
	osc.lfo_wav = lfo_wave;				// LFO wave type.
 80035de:	4baa      	ldr	r3, [pc, #680]	; (8003888 <generate_waveforms+0x2c8>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	4ba7      	ldr	r3, [pc, #668]	; (8003884 <generate_waveforms+0x2c4>)
 80035e6:	825a      	strh	r2, [r3, #18]

	osc.am_mod = OFF; // TODO: *** get value of pushbutton ***
 80035e8:	4ba6      	ldr	r3, [pc, #664]	; (8003884 <generate_waveforms+0x2c4>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	829a      	strh	r2, [r3, #20]
	osc.fm_mod = OFF; // TODO: *** get value of pushbutton ***
 80035ee:	4ba5      	ldr	r3, [pc, #660]	; (8003884 <generate_waveforms+0x2c4>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	82da      	strh	r2, [r3, #22]

	osc.am_mod = lfo_mod.am_mod;
 80035f4:	4ba5      	ldr	r3, [pc, #660]	; (800388c <generate_waveforms+0x2cc>)
 80035f6:	881a      	ldrh	r2, [r3, #0]
 80035f8:	4ba2      	ldr	r3, [pc, #648]	; (8003884 <generate_waveforms+0x2c4>)
 80035fa:	829a      	strh	r2, [r3, #20]
	osc.fm_mod = lfo_mod.fm_mod;
 80035fc:	4ba3      	ldr	r3, [pc, #652]	; (800388c <generate_waveforms+0x2cc>)
 80035fe:	885a      	ldrh	r2, [r3, #2]
 8003600:	4ba0      	ldr	r3, [pc, #640]	; (8003884 <generate_waveforms+0x2c4>)
 8003602:	82da      	strh	r2, [r3, #22]
//	{
//		mov_avg_index6 = 0;
//	}

	// A0
	osc.vco_amp = moving_avg(mov_avg5, &mov_avg_sum5, mov_avg_index5, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[1] & 0xfffc));
 8003604:	4ba2      	ldr	r3, [pc, #648]	; (8003890 <generate_waveforms+0x2d0>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4ba2      	ldr	r3, [pc, #648]	; (8003894 <generate_waveforms+0x2d4>)
 800360a:	885b      	ldrh	r3, [r3, #2]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f023 0303 	bic.w	r3, r3, #3
 8003612:	b29b      	uxth	r3, r3
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800361a:	499f      	ldr	r1, [pc, #636]	; (8003898 <generate_waveforms+0x2d8>)
 800361c:	489f      	ldr	r0, [pc, #636]	; (800389c <generate_waveforms+0x2dc>)
 800361e:	f001 fd07 	bl	8005030 <moving_avg>
 8003622:	ee07 0a90 	vmov	s15, r0
 8003626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800362a:	4b96      	ldr	r3, [pc, #600]	; (8003884 <generate_waveforms+0x2c4>)
 800362c:	edc3 7a06 	vstr	s15, [r3, #24]
	mov_avg_index5++;
 8003630:	4b97      	ldr	r3, [pc, #604]	; (8003890 <generate_waveforms+0x2d0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3301      	adds	r3, #1
 8003636:	4a96      	ldr	r2, [pc, #600]	; (8003890 <generate_waveforms+0x2d0>)
 8003638:	6013      	str	r3, [r2, #0]
	if (mov_avg_index5 >= MOV_AVG_LENGTH_BUFFER)
 800363a:	4b95      	ldr	r3, [pc, #596]	; (8003890 <generate_waveforms+0x2d0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003642:	d302      	bcc.n	800364a <generate_waveforms+0x8a>
	{
		mov_avg_index5 = 0;
 8003644:	4b92      	ldr	r3, [pc, #584]	; (8003890 <generate_waveforms+0x2d0>)
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]

//	osc.volume = (float32_t) osc.volume / 2048;
//	osc.vco_amp = osc.vco_amp * osc.volume;

	// A1
	uint16_t tempf = pseudo_log(ADCBuffer[0] & 0xfffc);
 800364a:	4b92      	ldr	r3, [pc, #584]	; (8003894 <generate_waveforms+0x2d4>)
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b29b      	uxth	r3, r3
 8003650:	f023 0303 	bic.w	r3, r3, #3
 8003654:	b29b      	uxth	r3, r3
 8003656:	4618      	mov	r0, r3
 8003658:	f001 fd0e 	bl	8005078 <pseudo_log>
 800365c:	4603      	mov	r3, r0
 800365e:	83fb      	strh	r3, [r7, #30]
	// osc.vco_freq = moving_avg(mov_avg1, &mov_avg_sum1, mov_avg_index1, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[0] & 0xfffc)*2*PI);
	osc.vco_freq = moving_avg(mov_avg1, &mov_avg_sum1, mov_avg_index1, MOV_AVG_LENGTH_BUFFER, tempf * 2*PI);
 8003660:	4b8f      	ldr	r3, [pc, #572]	; (80038a0 <generate_waveforms+0x2e0>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	8bfb      	ldrh	r3, [r7, #30]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	ee07 3a90 	vmov	s15, r3
 800366c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003670:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80038a4 <generate_waveforms+0x2e4>
 8003674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800367c:	edc7 7a00 	vstr	s15, [r7]
 8003680:	883b      	ldrh	r3, [r7, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800368a:	4987      	ldr	r1, [pc, #540]	; (80038a8 <generate_waveforms+0x2e8>)
 800368c:	4887      	ldr	r0, [pc, #540]	; (80038ac <generate_waveforms+0x2ec>)
 800368e:	f001 fccf 	bl	8005030 <moving_avg>
 8003692:	ee07 0a90 	vmov	s15, r0
 8003696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369a:	4b7a      	ldr	r3, [pc, #488]	; (8003884 <generate_waveforms+0x2c4>)
 800369c:	edc3 7a01 	vstr	s15, [r3, #4]
	mov_avg_index1++;
 80036a0:	4b7f      	ldr	r3, [pc, #508]	; (80038a0 <generate_waveforms+0x2e0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3301      	adds	r3, #1
 80036a6:	4a7e      	ldr	r2, [pc, #504]	; (80038a0 <generate_waveforms+0x2e0>)
 80036a8:	6013      	str	r3, [r2, #0]
	if (mov_avg_index1 >= MOV_AVG_LENGTH_BUFFER)
 80036aa:	4b7d      	ldr	r3, [pc, #500]	; (80038a0 <generate_waveforms+0x2e0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b2:	d302      	bcc.n	80036ba <generate_waveforms+0xfa>
	{
		mov_avg_index1 = 0;
 80036b4:	4b7a      	ldr	r3, [pc, #488]	; (80038a0 <generate_waveforms+0x2e0>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
	}

	// A2
	osc.lfo_amp = moving_avg(mov_avg3, &mov_avg_sum3, mov_avg_index3, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[2] & 0xfffc));
 80036ba:	4b7d      	ldr	r3, [pc, #500]	; (80038b0 <generate_waveforms+0x2f0>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4b75      	ldr	r3, [pc, #468]	; (8003894 <generate_waveforms+0x2d4>)
 80036c0:	889b      	ldrh	r3, [r3, #4]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	f023 0303 	bic.w	r3, r3, #3
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036d0:	4978      	ldr	r1, [pc, #480]	; (80038b4 <generate_waveforms+0x2f4>)
 80036d2:	4879      	ldr	r0, [pc, #484]	; (80038b8 <generate_waveforms+0x2f8>)
 80036d4:	f001 fcac 	bl	8005030 <moving_avg>
 80036d8:	ee07 0a90 	vmov	s15, r0
 80036dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e0:	4b68      	ldr	r3, [pc, #416]	; (8003884 <generate_waveforms+0x2c4>)
 80036e2:	edc3 7a08 	vstr	s15, [r3, #32]
	mov_avg_index3++;
 80036e6:	4b72      	ldr	r3, [pc, #456]	; (80038b0 <generate_waveforms+0x2f0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	4a70      	ldr	r2, [pc, #448]	; (80038b0 <generate_waveforms+0x2f0>)
 80036ee:	6013      	str	r3, [r2, #0]
	if (mov_avg_index3 >= MOV_AVG_LENGTH_BUFFER)
 80036f0:	4b6f      	ldr	r3, [pc, #444]	; (80038b0 <generate_waveforms+0x2f0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f8:	d302      	bcc.n	8003700 <generate_waveforms+0x140>
	{
		mov_avg_index3 = 0;
 80036fa:	4b6d      	ldr	r3, [pc, #436]	; (80038b0 <generate_waveforms+0x2f0>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
	}
	osc.lfo_amp_am = osc.lfo_amp*LFO_AMP_AM;
 8003700:	4b60      	ldr	r3, [pc, #384]	; (8003884 <generate_waveforms+0x2c4>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fc fec3 	bl	8000490 <__aeabi_f2d>
 800370a:	a359      	add	r3, pc, #356	; (adr r3, 8003870 <generate_waveforms+0x2b0>)
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f7fc ff12 	bl	8000538 <__aeabi_dmul>
 8003714:	4603      	mov	r3, r0
 8003716:	460c      	mov	r4, r1
 8003718:	4618      	mov	r0, r3
 800371a:	4621      	mov	r1, r4
 800371c:	f7fd f91e 	bl	800095c <__aeabi_d2f>
 8003720:	4602      	mov	r2, r0
 8003722:	4b58      	ldr	r3, [pc, #352]	; (8003884 <generate_waveforms+0x2c4>)
 8003724:	625a      	str	r2, [r3, #36]	; 0x24
	osc.lfo_amp_fm = osc.lfo_amp*LFO_AMP_FM;
 8003726:	4b57      	ldr	r3, [pc, #348]	; (8003884 <generate_waveforms+0x2c4>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fc feb0 	bl	8000490 <__aeabi_f2d>
 8003730:	a351      	add	r3, pc, #324	; (adr r3, 8003878 <generate_waveforms+0x2b8>)
 8003732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003736:	f7fc feff 	bl	8000538 <__aeabi_dmul>
 800373a:	4603      	mov	r3, r0
 800373c:	460c      	mov	r4, r1
 800373e:	4618      	mov	r0, r3
 8003740:	4621      	mov	r1, r4
 8003742:	f7fd f90b 	bl	800095c <__aeabi_d2f>
 8003746:	4602      	mov	r2, r0
 8003748:	4b4e      	ldr	r3, [pc, #312]	; (8003884 <generate_waveforms+0x2c4>)
 800374a:	629a      	str	r2, [r3, #40]	; 0x28

	// A3
	tempf = pseudo_log(ADCBuffer[3] & 0xfffc);
 800374c:	4b51      	ldr	r3, [pc, #324]	; (8003894 <generate_waveforms+0x2d4>)
 800374e:	88db      	ldrh	r3, [r3, #6]
 8003750:	b29b      	uxth	r3, r3
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	b29b      	uxth	r3, r3
 8003758:	4618      	mov	r0, r3
 800375a:	f001 fc8d 	bl	8005078 <pseudo_log>
 800375e:	4603      	mov	r3, r0
 8003760:	83fb      	strh	r3, [r7, #30]
	// osc.lfo_freq = moving_avg(mov_avg2, &mov_avg_sum2, mov_avg_index2, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[3] & 0xfffc));
	osc.lfo_freq = moving_avg(mov_avg2, &mov_avg_sum2, mov_avg_index2, MOV_AVG_LENGTH_BUFFER, tempf);
 8003762:	4b56      	ldr	r3, [pc, #344]	; (80038bc <generate_waveforms+0x2fc>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	8bfb      	ldrh	r3, [r7, #30]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800376e:	4954      	ldr	r1, [pc, #336]	; (80038c0 <generate_waveforms+0x300>)
 8003770:	4854      	ldr	r0, [pc, #336]	; (80038c4 <generate_waveforms+0x304>)
 8003772:	f001 fc5d 	bl	8005030 <moving_avg>
 8003776:	ee07 0a90 	vmov	s15, r0
 800377a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377e:	4b41      	ldr	r3, [pc, #260]	; (8003884 <generate_waveforms+0x2c4>)
 8003780:	edc3 7a03 	vstr	s15, [r3, #12]
	mov_avg_index2++;
 8003784:	4b4d      	ldr	r3, [pc, #308]	; (80038bc <generate_waveforms+0x2fc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3301      	adds	r3, #1
 800378a:	4a4c      	ldr	r2, [pc, #304]	; (80038bc <generate_waveforms+0x2fc>)
 800378c:	6013      	str	r3, [r2, #0]
	if (mov_avg_index2 >= MOV_AVG_LENGTH_BUFFER)
 800378e:	4b4b      	ldr	r3, [pc, #300]	; (80038bc <generate_waveforms+0x2fc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003796:	d302      	bcc.n	800379e <generate_waveforms+0x1de>
	{
		mov_avg_index2 = 0;
 8003798:	4b48      	ldr	r3, [pc, #288]	; (80038bc <generate_waveforms+0x2fc>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
	}
	// osc.lfo_freq = pseudo_log(osc.lfo_freq, ???);

	volatile uint32_t i = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	61bb      	str	r3, [r7, #24]
	// adsr_settings.am_mod = OFF;
	// adsr_settings.fm_mod = OFF;
	// adsr_settings.am_mod = current_menu_state.adsr_mod;
	// adsr_settings.fm_mod = current_menu_state.adsr_mod;
	adsr_settings.am_mod = adsr_mod.am_mod;
 80037a2:	4b49      	ldr	r3, [pc, #292]	; (80038c8 <generate_waveforms+0x308>)
 80037a4:	881a      	ldrh	r2, [r3, #0]
 80037a6:	4b49      	ldr	r3, [pc, #292]	; (80038cc <generate_waveforms+0x30c>)
 80037a8:	801a      	strh	r2, [r3, #0]
	adsr_settings.fm_mod = adsr_mod.fm_mod;
 80037aa:	4b47      	ldr	r3, [pc, #284]	; (80038c8 <generate_waveforms+0x308>)
 80037ac:	885a      	ldrh	r2, [r3, #2]
 80037ae:	4b47      	ldr	r3, [pc, #284]	; (80038cc <generate_waveforms+0x30c>)
 80037b0:	805a      	strh	r2, [r3, #2]
	// adsr_settings.mod = DualMode_VCO;
	// adsr_settings.mod = NO_MOD;
	// adsr_settings.mod = VCOfreq;

	//	// Calculate angle amount to increment per sample.
	volatile float32_t rads_per_sample_vco = osc.vco_freq / ONE_SECOND;		// Radians to increment for each iteration.
 80037b2:	4b34      	ldr	r3, [pc, #208]	; (8003884 <generate_waveforms+0x2c4>)
 80037b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80037b8:	eddf 6a45 	vldr	s13, [pc, #276]	; 80038d0 <generate_waveforms+0x310>
 80037bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037c0:	edc7 7a05 	vstr	s15, [r7, #20]
	volatile float32_t rads_per_sample_vco2 = osc.vco_freq / TWO_SECOND;
 80037c4:	4b2f      	ldr	r3, [pc, #188]	; (8003884 <generate_waveforms+0x2c4>)
 80037c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80037ca:	eddf 6a42 	vldr	s13, [pc, #264]	; 80038d4 <generate_waveforms+0x314>
 80037ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037d2:	edc7 7a04 	vstr	s15, [r7, #16]
	//volatile float32_t rads_per_sample_vco2 = rads_per_sample_vco/2.0f;		// Radians to increment for each iteration.
	volatile float32_t rads_per_sample_lfo = osc.lfo_freq / ONE_SECOND;		// Radians to increment for each iteration.
 80037d6:	4b2b      	ldr	r3, [pc, #172]	; (8003884 <generate_waveforms+0x2c4>)
 80037d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80037dc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80038d0 <generate_waveforms+0x310>
 80037e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037e4:	edc7 7a03 	vstr	s15, [r7, #12]

	// Fill adsr buffer.
//	if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
//	{
		adsr(start, end);
 80037e8:	88ba      	ldrh	r2, [r7, #4]
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	4611      	mov	r1, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fe88 	bl	8004504 <adsr>
//	}

	// No LFO
	if(osc.lfo_wav == nowave)
 80037f4:	4b23      	ldr	r3, [pc, #140]	; (8003884 <generate_waveforms+0x2c4>)
 80037f6:	8a5b      	ldrh	r3, [r3, #18]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d110      	bne.n	800381e <generate_waveforms+0x25e>
	{
		for(i = start; i < end; i++)
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	e009      	b.n	8003816 <generate_waveforms+0x256>
		{
			buffer_lfo_float[i] = 0;
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	4a34      	ldr	r2, [pc, #208]	; (80038d8 <generate_waveforms+0x318>)
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
//	}

	// No LFO
	if(osc.lfo_wav == nowave)
	{
		for(i = start; i < end; i++)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	3301      	adds	r3, #1
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	88ba      	ldrh	r2, [r7, #4]
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	429a      	cmp	r2, r3
 800381c:	d8f1      	bhi.n	8003802 <generate_waveforms+0x242>
			buffer_lfo_float[i] = 0;
		}
	}

	// Sine LFO
	if(osc.lfo_wav == sine)
 800381e:	4b19      	ldr	r3, [pc, #100]	; (8003884 <generate_waveforms+0x2c4>)
 8003820:	8a5b      	ldrh	r3, [r3, #18]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d15c      	bne.n	80038e0 <generate_waveforms+0x320>
	{
		for(i = start; i < end; i++)
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	e01b      	b.n	8003864 <generate_waveforms+0x2a4>
		{
			theta_lfo = theta_lfo + rads_per_sample_lfo;
 800382c:	4b2b      	ldr	r3, [pc, #172]	; (80038dc <generate_waveforms+0x31c>)
 800382e:	ed93 7a00 	vldr	s14, [r3]
 8003832:	edd7 7a03 	vldr	s15, [r7, #12]
 8003836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800383a:	4b28      	ldr	r3, [pc, #160]	; (80038dc <generate_waveforms+0x31c>)
 800383c:	edc3 7a00 	vstr	s15, [r3]
			buffer_lfo_float[i] = arm_sin_f32(theta_lfo);
 8003840:	69bc      	ldr	r4, [r7, #24]
 8003842:	4b26      	ldr	r3, [pc, #152]	; (80038dc <generate_waveforms+0x31c>)
 8003844:	edd3 7a00 	vldr	s15, [r3]
 8003848:	eeb0 0a67 	vmov.f32	s0, s15
 800384c:	f001 ff34 	bl	80056b8 <arm_sin_f32>
 8003850:	eef0 7a40 	vmov.f32	s15, s0
 8003854:	4a20      	ldr	r2, [pc, #128]	; (80038d8 <generate_waveforms+0x318>)
 8003856:	00a3      	lsls	r3, r4, #2
 8003858:	4413      	add	r3, r2
 800385a:	edc3 7a00 	vstr	s15, [r3]
	}

	// Sine LFO
	if(osc.lfo_wav == sine)
	{
		for(i = start; i < end; i++)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	3301      	adds	r3, #1
 8003862:	61bb      	str	r3, [r7, #24]
 8003864:	88ba      	ldrh	r2, [r7, #4]
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	429a      	cmp	r2, r3
 800386a:	d8df      	bhi.n	800382c <generate_waveforms+0x26c>
 800386c:	e134      	b.n	8003ad8 <generate_waveforms+0x518>
 800386e:	bf00      	nop
 8003870:	eb1c432d 	.word	0xeb1c432d
 8003874:	3f1a36e2 	.word	0x3f1a36e2
 8003878:	47ae147b 	.word	0x47ae147b
 800387c:	3f847ae1 	.word	0x3f847ae1
 8003880:	20005569 	.word	0x20005569
 8003884:	20000054 	.word	0x20000054
 8003888:	20005568 	.word	0x20005568
 800388c:	20005590 	.word	0x20005590
 8003890:	200054d8 	.word	0x200054d8
 8003894:	20005570 	.word	0x20005570
 8003898:	20005598 	.word	0x20005598
 800389c:	200044d8 	.word	0x200044d8
 80038a0:	200014c8 	.word	0x200014c8
 80038a4:	40490fdb 	.word	0x40490fdb
 80038a8:	200055cc 	.word	0x200055cc
 80038ac:	200004c8 	.word	0x200004c8
 80038b0:	200034d0 	.word	0x200034d0
 80038b4:	200055d8 	.word	0x200055d8
 80038b8:	200024d0 	.word	0x200024d0
 80038bc:	200024cc 	.word	0x200024cc
 80038c0:	200055d4 	.word	0x200055d4
 80038c4:	200014cc 	.word	0x200014cc
 80038c8:	2000556c 	.word	0x2000556c
 80038cc:	2000559c 	.word	0x2000559c
 80038d0:	47bb8000 	.word	0x47bb8000
 80038d4:	483b8000 	.word	0x483b8000
 80038d8:	200001c4 	.word	0x200001c4
 80038dc:	200054e8 	.word	0x200054e8
			buffer_lfo_float[i] = arm_sin_f32(theta_lfo);
		}
	}

	// Square LFO
	else if(osc.lfo_wav == square)
 80038e0:	4b8b      	ldr	r3, [pc, #556]	; (8003b10 <generate_waveforms+0x550>)
 80038e2:	8a5b      	ldrh	r3, [r3, #18]
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d150      	bne.n	800398a <generate_waveforms+0x3ca>
	{
		// If osc modulation contains am
		if(osc.am_mod == ON)
 80038e8:	4b89      	ldr	r3, [pc, #548]	; (8003b10 <generate_waveforms+0x550>)
 80038ea:	8a9b      	ldrh	r3, [r3, #20]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d123      	bne.n	8003938 <generate_waveforms+0x378>
		{
			// AM
			for(i = start; i < end; i++)
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	e01b      	b.n	800392e <generate_waveforms+0x36e>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 80038f6:	4b87      	ldr	r3, [pc, #540]	; (8003b14 <generate_waveforms+0x554>)
 80038f8:	ed93 7a00 	vldr	s14, [r3]
 80038fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003904:	4b83      	ldr	r3, [pc, #524]	; (8003b14 <generate_waveforms+0x554>)
 8003906:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_square_angle(theta_lfo);	// TODO: offset??
 800390a:	69bc      	ldr	r4, [r7, #24]
 800390c:	4b81      	ldr	r3, [pc, #516]	; (8003b14 <generate_waveforms+0x554>)
 800390e:	edd3 7a00 	vldr	s15, [r3]
 8003912:	eeb0 0a67 	vmov.f32	s0, s15
 8003916:	f001 f98d 	bl	8004c34 <gen_square_angle>
 800391a:	eef0 7a40 	vmov.f32	s15, s0
 800391e:	4a7e      	ldr	r2, [pc, #504]	; (8003b18 <generate_waveforms+0x558>)
 8003920:	00a3      	lsls	r3, r4, #2
 8003922:	4413      	add	r3, r2
 8003924:	edc3 7a00 	vstr	s15, [r3]
	{
		// If osc modulation contains am
		if(osc.am_mod == ON)
		{
			// AM
			for(i = start; i < end; i++)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	3301      	adds	r3, #1
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	88ba      	ldrh	r2, [r7, #4]
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	429a      	cmp	r2, r3
 8003934:	d8df      	bhi.n	80038f6 <generate_waveforms+0x336>
 8003936:	e0cf      	b.n	8003ad8 <generate_waveforms+0x518>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
				buffer_lfo_float[i] = gen_square_angle(theta_lfo);	// TODO: offset??
			}
		}
		else if(osc.fm_mod == ON)
 8003938:	4b75      	ldr	r3, [pc, #468]	; (8003b10 <generate_waveforms+0x550>)
 800393a:	8adb      	ldrh	r3, [r3, #22]
 800393c:	2b01      	cmp	r3, #1
 800393e:	f040 80cb 	bne.w	8003ad8 <generate_waveforms+0x518>
		{
			// FM
			for(i = start; i < end; i++)
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	e01b      	b.n	8003980 <generate_waveforms+0x3c0>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003948:	4b72      	ldr	r3, [pc, #456]	; (8003b14 <generate_waveforms+0x554>)
 800394a:	ed93 7a00 	vldr	s14, [r3]
 800394e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003956:	4b6f      	ldr	r3, [pc, #444]	; (8003b14 <generate_waveforms+0x554>)
 8003958:	edc3 7a00 	vstr	s15, [r3]
				// Sawtooth is integral of triangle
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
 800395c:	69bc      	ldr	r4, [r7, #24]
 800395e:	4b6d      	ldr	r3, [pc, #436]	; (8003b14 <generate_waveforms+0x554>)
 8003960:	edd3 7a00 	vldr	s15, [r3]
 8003964:	eeb0 0a67 	vmov.f32	s0, s15
 8003968:	f001 fa74 	bl	8004e54 <gen_triangle_angle>
 800396c:	eef0 7a40 	vmov.f32	s15, s0
 8003970:	4a69      	ldr	r2, [pc, #420]	; (8003b18 <generate_waveforms+0x558>)
 8003972:	00a3      	lsls	r3, r4, #2
 8003974:	4413      	add	r3, r2
 8003976:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		else if(osc.fm_mod == ON)
		{
			// FM
			for(i = start; i < end; i++)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	3301      	adds	r3, #1
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	88ba      	ldrh	r2, [r7, #4]
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	429a      	cmp	r2, r3
 8003986:	d8df      	bhi.n	8003948 <generate_waveforms+0x388>
 8003988:	e0a6      	b.n	8003ad8 <generate_waveforms+0x518>
			}
		}
	}

	// Sawtooth LFO
	else if(osc.lfo_wav == sawtooth)
 800398a:	4b61      	ldr	r3, [pc, #388]	; (8003b10 <generate_waveforms+0x550>)
 800398c:	8a5b      	ldrh	r3, [r3, #18]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d14f      	bne.n	8003a32 <generate_waveforms+0x472>
	{

		if(osc.am_mod == ON)
 8003992:	4b5f      	ldr	r3, [pc, #380]	; (8003b10 <generate_waveforms+0x550>)
 8003994:	8a9b      	ldrh	r3, [r3, #20]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d123      	bne.n	80039e2 <generate_waveforms+0x422>
		{
			for(i = start; i < end; i++)
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	e01b      	b.n	80039d8 <generate_waveforms+0x418>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 80039a0:	4b5c      	ldr	r3, [pc, #368]	; (8003b14 <generate_waveforms+0x554>)
 80039a2:	ed93 7a00 	vldr	s14, [r3]
 80039a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80039aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ae:	4b59      	ldr	r3, [pc, #356]	; (8003b14 <generate_waveforms+0x554>)
 80039b0:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_sawtooth_angle(theta_lfo);
 80039b4:	69bc      	ldr	r4, [r7, #24]
 80039b6:	4b57      	ldr	r3, [pc, #348]	; (8003b14 <generate_waveforms+0x554>)
 80039b8:	edd3 7a00 	vldr	s15, [r3]
 80039bc:	eeb0 0a67 	vmov.f32	s0, s15
 80039c0:	f001 f960 	bl	8004c84 <gen_sawtooth_angle>
 80039c4:	eef0 7a40 	vmov.f32	s15, s0
 80039c8:	4a53      	ldr	r2, [pc, #332]	; (8003b18 <generate_waveforms+0x558>)
 80039ca:	00a3      	lsls	r3, r4, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	edc3 7a00 	vstr	s15, [r3]
	else if(osc.lfo_wav == sawtooth)
	{

		if(osc.am_mod == ON)
		{
			for(i = start; i < end; i++)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	3301      	adds	r3, #1
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	88ba      	ldrh	r2, [r7, #4]
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d8df      	bhi.n	80039a0 <generate_waveforms+0x3e0>
 80039e0:	e07a      	b.n	8003ad8 <generate_waveforms+0x518>
				buffer_lfo_float[i] = gen_sawtooth_angle(theta_lfo);
			}
		}

		// If FM mod, need integral of modulating signal.  Integral of ramp is right side of parabola.
		else if(osc.fm_mod == ON)
 80039e2:	4b4b      	ldr	r3, [pc, #300]	; (8003b10 <generate_waveforms+0x550>)
 80039e4:	8adb      	ldrh	r3, [r3, #22]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d176      	bne.n	8003ad8 <generate_waveforms+0x518>
		{
			for(i = start; i < end; i++)
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	e01b      	b.n	8003a28 <generate_waveforms+0x468>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 80039f0:	4b48      	ldr	r3, [pc, #288]	; (8003b14 <generate_waveforms+0x554>)
 80039f2:	ed93 7a00 	vldr	s14, [r3]
 80039f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80039fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039fe:	4b45      	ldr	r3, [pc, #276]	; (8003b14 <generate_waveforms+0x554>)
 8003a00:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_sawtooth_integral_angle(theta_lfo);
 8003a04:	69bc      	ldr	r4, [r7, #24]
 8003a06:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <generate_waveforms+0x554>)
 8003a08:	edd3 7a00 	vldr	s15, [r3]
 8003a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a10:	f001 f966 	bl	8004ce0 <gen_sawtooth_integral_angle>
 8003a14:	eef0 7a40 	vmov.f32	s15, s0
 8003a18:	4a3f      	ldr	r2, [pc, #252]	; (8003b18 <generate_waveforms+0x558>)
 8003a1a:	00a3      	lsls	r3, r4, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	edc3 7a00 	vstr	s15, [r3]
		}

		// If FM mod, need integral of modulating signal.  Integral of ramp is right side of parabola.
		else if(osc.fm_mod == ON)
		{
			for(i = start; i < end; i++)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	3301      	adds	r3, #1
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	88ba      	ldrh	r2, [r7, #4]
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d8df      	bhi.n	80039f0 <generate_waveforms+0x430>
 8003a30:	e052      	b.n	8003ad8 <generate_waveforms+0x518>
			}
		}
	}

	// Triangle LFO
	else if(osc.lfo_wav == triangle)
 8003a32:	4b37      	ldr	r3, [pc, #220]	; (8003b10 <generate_waveforms+0x550>)
 8003a34:	8a5b      	ldrh	r3, [r3, #18]
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d14e      	bne.n	8003ad8 <generate_waveforms+0x518>
	{
		if(osc.am_mod == ON)
 8003a3a:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <generate_waveforms+0x550>)
 8003a3c:	8a9b      	ldrh	r3, [r3, #20]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d123      	bne.n	8003a8a <generate_waveforms+0x4ca>
		{
			for(i = start; i < end; i++)
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e01b      	b.n	8003a80 <generate_waveforms+0x4c0>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003a48:	4b32      	ldr	r3, [pc, #200]	; (8003b14 <generate_waveforms+0x554>)
 8003a4a:	ed93 7a00 	vldr	s14, [r3]
 8003a4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a56:	4b2f      	ldr	r3, [pc, #188]	; (8003b14 <generate_waveforms+0x554>)
 8003a58:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
 8003a5c:	69bc      	ldr	r4, [r7, #24]
 8003a5e:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <generate_waveforms+0x554>)
 8003a60:	edd3 7a00 	vldr	s15, [r3]
 8003a64:	eeb0 0a67 	vmov.f32	s0, s15
 8003a68:	f001 f9f4 	bl	8004e54 <gen_triangle_angle>
 8003a6c:	eef0 7a40 	vmov.f32	s15, s0
 8003a70:	4a29      	ldr	r2, [pc, #164]	; (8003b18 <generate_waveforms+0x558>)
 8003a72:	00a3      	lsls	r3, r4, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	edc3 7a00 	vstr	s15, [r3]
	// Triangle LFO
	else if(osc.lfo_wav == triangle)
	{
		if(osc.am_mod == ON)
		{
			for(i = start; i < end; i++)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	88ba      	ldrh	r2, [r7, #4]
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d8df      	bhi.n	8003a48 <generate_waveforms+0x488>
 8003a88:	e026      	b.n	8003ad8 <generate_waveforms+0x518>
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
			}
		}

		// If FM mod, need integral of modulating signal.
		else if(osc.fm_mod == ON)
 8003a8a:	4b21      	ldr	r3, [pc, #132]	; (8003b10 <generate_waveforms+0x550>)
 8003a8c:	8adb      	ldrh	r3, [r3, #22]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d122      	bne.n	8003ad8 <generate_waveforms+0x518>
		{
			for(i = start; i < end; i++)
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	e01b      	b.n	8003ad0 <generate_waveforms+0x510>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003a98:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <generate_waveforms+0x554>)
 8003a9a:	ed93 7a00 	vldr	s14, [r3]
 8003a9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <generate_waveforms+0x554>)
 8003aa8:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_triangle_integral_angle(theta_lfo);
 8003aac:	69bc      	ldr	r4, [r7, #24]
 8003aae:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <generate_waveforms+0x554>)
 8003ab0:	edd3 7a00 	vldr	s15, [r3]
 8003ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab8:	f001 fa12 	bl	8004ee0 <gen_triangle_integral_angle>
 8003abc:	eef0 7a40 	vmov.f32	s15, s0
 8003ac0:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <generate_waveforms+0x558>)
 8003ac2:	00a3      	lsls	r3, r4, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	edc3 7a00 	vstr	s15, [r3]
		}

		// If FM mod, need integral of modulating signal.
		else if(osc.fm_mod == ON)
		{
			for(i = start; i < end; i++)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	3301      	adds	r3, #1
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	88ba      	ldrh	r2, [r7, #4]
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d8df      	bhi.n	8003a98 <generate_waveforms+0x4d8>
		}

	}

	// No VCO
	if(osc.vco_wav == nowave)
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <generate_waveforms+0x550>)
 8003ada:	8a1b      	ldrh	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10e      	bne.n	8003afe <generate_waveforms+0x53e>
	{
		for(i = start; i < end; i++)
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	e007      	b.n	8003af6 <generate_waveforms+0x536>
		{
			buffer_output[i] = 0;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <generate_waveforms+0x55c>)
 8003aea:	2100      	movs	r1, #0
 8003aec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// No VCO
	if(osc.vco_wav == nowave)
	{
		for(i = start; i < end; i++)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	3301      	adds	r3, #1
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	88ba      	ldrh	r2, [r7, #4]
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d8f3      	bhi.n	8003ae6 <generate_waveforms+0x526>
			buffer_output[i] = 0;
		}
	}

	// Sine VCO
	if(osc.vco_wav == sine)
 8003afe:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <generate_waveforms+0x550>)
 8003b00:	8a1b      	ldrh	r3, [r3, #16]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	f040 810c 	bne.w	8003d20 <generate_waveforms+0x760>
	{
		for(i = start; i < end; i++)
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	e102      	b.n	8003d14 <generate_waveforms+0x754>
 8003b0e:	bf00      	nop
 8003b10:	20000054 	.word	0x20000054
 8003b14:	200054e8 	.word	0x200054e8
 8003b18:	200001c4 	.word	0x200001c4
 8003b1c:	200000c4 	.word	0x200000c4
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8003b20:	4b83      	ldr	r3, [pc, #524]	; (8003d30 <generate_waveforms+0x770>)
 8003b22:	ed93 7a00 	vldr	s14, [r3]
 8003b26:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b2e:	4b80      	ldr	r3, [pc, #512]	; (8003d30 <generate_waveforms+0x770>)
 8003b30:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 8003b34:	4b7f      	ldr	r3, [pc, #508]	; (8003d34 <generate_waveforms+0x774>)
 8003b36:	ed93 7a00 	vldr	s14, [r3]
 8003b3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b42:	4b7c      	ldr	r3, [pc, #496]	; (8003d34 <generate_waveforms+0x774>)
 8003b44:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 8003b48:	4b7b      	ldr	r3, [pc, #492]	; (8003d38 <generate_waveforms+0x778>)
 8003b4a:	8adb      	ldrh	r3, [r3, #22]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d17c      	bne.n	8003c4a <generate_waveforms+0x68a>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32(theta_vco + osc.lfo_amp_fm * buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8003b50:	69bc      	ldr	r4, [r7, #24]
 8003b52:	4b79      	ldr	r3, [pc, #484]	; (8003d38 <generate_waveforms+0x778>)
 8003b54:	ed93 8a06 	vldr	s16, [r3, #24]
 8003b58:	4b77      	ldr	r3, [pc, #476]	; (8003d38 <generate_waveforms+0x778>)
 8003b5a:	edd3 8a06 	vldr	s17, [r3, #24]
 8003b5e:	4b76      	ldr	r3, [pc, #472]	; (8003d38 <generate_waveforms+0x778>)
 8003b60:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	4a75      	ldr	r2, [pc, #468]	; (8003d3c <generate_waveforms+0x77c>)
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	edd3 7a00 	vldr	s15, [r3]
 8003b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b74:	4b6e      	ldr	r3, [pc, #440]	; (8003d30 <generate_waveforms+0x770>)
 8003b76:	edd3 7a00 	vldr	s15, [r3]
 8003b7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	4a6f      	ldr	r2, [pc, #444]	; (8003d40 <generate_waveforms+0x780>)
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	edd3 7a00 	vldr	s15, [r3]
 8003b8a:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003d44 <generate_waveforms+0x784>
 8003b8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b96:	eeb0 0a67 	vmov.f32	s0, s15
 8003b9a:	f001 fd8d 	bl	80056b8 <arm_sin_f32>
 8003b9e:	eef0 7a40 	vmov.f32	s15, s0
 8003ba2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003ba6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bae:	edc7 7a00 	vstr	s15, [r7]
 8003bb2:	883b      	ldrh	r3, [r7, #0]
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	4b64      	ldr	r3, [pc, #400]	; (8003d48 <generate_waveforms+0x788>)
 8003bb8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32(theta_vco2 + osc.lfo_amp_fm * buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8003bbc:	69bc      	ldr	r4, [r7, #24]
 8003bbe:	4b5e      	ldr	r3, [pc, #376]	; (8003d38 <generate_waveforms+0x778>)
 8003bc0:	ed93 8a06 	vldr	s16, [r3, #24]
 8003bc4:	4b5c      	ldr	r3, [pc, #368]	; (8003d38 <generate_waveforms+0x778>)
 8003bc6:	edd3 8a06 	vldr	s17, [r3, #24]
 8003bca:	4b5b      	ldr	r3, [pc, #364]	; (8003d38 <generate_waveforms+0x778>)
 8003bcc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	4a5a      	ldr	r2, [pc, #360]	; (8003d3c <generate_waveforms+0x77c>)
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	edd3 7a00 	vldr	s15, [r3]
 8003bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003be0:	4b54      	ldr	r3, [pc, #336]	; (8003d34 <generate_waveforms+0x774>)
 8003be2:	edd3 7a00 	vldr	s15, [r3]
 8003be6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	4a54      	ldr	r2, [pc, #336]	; (8003d40 <generate_waveforms+0x780>)
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	edd3 7a00 	vldr	s15, [r3]
 8003bf6:	eddf 6a53 	vldr	s13, [pc, #332]	; 8003d44 <generate_waveforms+0x784>
 8003bfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c02:	eeb0 0a67 	vmov.f32	s0, s15
 8003c06:	f001 fd57 	bl	80056b8 <arm_sin_f32>
 8003c0a:	eef0 7a40 	vmov.f32	s15, s0
 8003c0e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003c12:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c1a:	edc7 7a00 	vstr	s15, [r7]
 8003c1e:	883b      	ldrh	r3, [r7, #0]
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	4b4a      	ldr	r3, [pc, #296]	; (8003d4c <generate_waveforms+0x78c>)
 8003c24:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4946      	ldr	r1, [pc, #280]	; (8003d48 <generate_waveforms+0x788>)
 8003c2e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003c32:	b291      	uxth	r1, r2
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4845      	ldr	r0, [pc, #276]	; (8003d4c <generate_waveforms+0x78c>)
 8003c38:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8003c3c:	b292      	uxth	r2, r2
 8003c3e:	440a      	add	r2, r1
 8003c40:	b291      	uxth	r1, r2
 8003c42:	4a41      	ldr	r2, [pc, #260]	; (8003d48 <generate_waveforms+0x788>)
 8003c44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003c48:	e061      	b.n	8003d0e <generate_waveforms+0x74e>
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32(theta_vco + 0.3f * buffer_adsr_fm[i]);
 8003c4a:	69bc      	ldr	r4, [r7, #24]
 8003c4c:	4b3a      	ldr	r3, [pc, #232]	; (8003d38 <generate_waveforms+0x778>)
 8003c4e:	ed93 8a06 	vldr	s16, [r3, #24]
 8003c52:	4b39      	ldr	r3, [pc, #228]	; (8003d38 <generate_waveforms+0x778>)
 8003c54:	edd3 8a06 	vldr	s17, [r3, #24]
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	4a39      	ldr	r2, [pc, #228]	; (8003d40 <generate_waveforms+0x780>)
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	edd3 7a00 	vldr	s15, [r3]
 8003c64:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003d44 <generate_waveforms+0x784>
 8003c68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c6c:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <generate_waveforms+0x770>)
 8003c6e:	edd3 7a00 	vldr	s15, [r3]
 8003c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c76:	eeb0 0a67 	vmov.f32	s0, s15
 8003c7a:	f001 fd1d 	bl	80056b8 <arm_sin_f32>
 8003c7e:	eef0 7a40 	vmov.f32	s15, s0
 8003c82:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003c86:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c8e:	edc7 7a00 	vstr	s15, [r7]
 8003c92:	883b      	ldrh	r3, [r7, #0]
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	4b2c      	ldr	r3, [pc, #176]	; (8003d48 <generate_waveforms+0x788>)
 8003c98:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 8003c9c:	69bc      	ldr	r4, [r7, #24]
 8003c9e:	4b26      	ldr	r3, [pc, #152]	; (8003d38 <generate_waveforms+0x778>)
 8003ca0:	ed93 8a06 	vldr	s16, [r3, #24]
 8003ca4:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <generate_waveforms+0x778>)
 8003ca6:	edd3 8a06 	vldr	s17, [r3, #24]
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	4a24      	ldr	r2, [pc, #144]	; (8003d40 <generate_waveforms+0x780>)
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	edd3 7a00 	vldr	s15, [r3]
 8003cb6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003d44 <generate_waveforms+0x784>
 8003cba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003cbe:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <generate_waveforms+0x774>)
 8003cc0:	edd3 7a00 	vldr	s15, [r3]
 8003cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ccc:	f001 fcf4 	bl	80056b8 <arm_sin_f32>
 8003cd0:	eef0 7a40 	vmov.f32	s15, s0
 8003cd4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003cd8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce0:	edc7 7a00 	vstr	s15, [r7]
 8003ce4:	883b      	ldrh	r3, [r7, #0]
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <generate_waveforms+0x78c>)
 8003cea:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4915      	ldr	r1, [pc, #84]	; (8003d48 <generate_waveforms+0x788>)
 8003cf4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003cf8:	b291      	uxth	r1, r2
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4813      	ldr	r0, [pc, #76]	; (8003d4c <generate_waveforms+0x78c>)
 8003cfe:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8003d02:	b292      	uxth	r2, r2
 8003d04:	440a      	add	r2, r1
 8003d06:	b291      	uxth	r1, r2
 8003d08:	4a0f      	ldr	r2, [pc, #60]	; (8003d48 <generate_waveforms+0x788>)
 8003d0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Sine VCO
	if(osc.vco_wav == sine)
	{
		for(i = start; i < end; i++)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	3301      	adds	r3, #1
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	88ba      	ldrh	r2, [r7, #4]
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	f63f af01 	bhi.w	8003b20 <generate_waveforms+0x560>
 8003d1e:	e346      	b.n	80043ae <generate_waveforms+0xdee>
			}
		}
	}

	// Square VCO
	else if(osc.vco_wav == square)
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <generate_waveforms+0x778>)
 8003d22:	8a1b      	ldrh	r3, [r3, #16]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	f040 8113 	bne.w	8003f50 <generate_waveforms+0x990>
	{
		for(i = start; i < end; i++)
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	e109      	b.n	8003f44 <generate_waveforms+0x984>
 8003d30:	200054e0 	.word	0x200054e0
 8003d34:	200054e4 	.word	0x200054e4
 8003d38:	20000054 	.word	0x20000054
 8003d3c:	200001c4 	.word	0x200001c4
 8003d40:	200003c4 	.word	0x200003c4
 8003d44:	3e99999a 	.word	0x3e99999a
 8003d48:	200000c4 	.word	0x200000c4
 8003d4c:	20000144 	.word	0x20000144
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8003d50:	4b83      	ldr	r3, [pc, #524]	; (8003f60 <generate_waveforms+0x9a0>)
 8003d52:	ed93 7a00 	vldr	s14, [r3]
 8003d56:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d5e:	4b80      	ldr	r3, [pc, #512]	; (8003f60 <generate_waveforms+0x9a0>)
 8003d60:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 8003d64:	4b7f      	ldr	r3, [pc, #508]	; (8003f64 <generate_waveforms+0x9a4>)
 8003d66:	ed93 7a00 	vldr	s14, [r3]
 8003d6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d72:	4b7c      	ldr	r3, [pc, #496]	; (8003f64 <generate_waveforms+0x9a4>)
 8003d74:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 8003d78:	4b7b      	ldr	r3, [pc, #492]	; (8003f68 <generate_waveforms+0x9a8>)
 8003d7a:	8adb      	ldrh	r3, [r3, #22]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d17c      	bne.n	8003e7a <generate_waveforms+0x8ba>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_square_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8003d80:	69bc      	ldr	r4, [r7, #24]
 8003d82:	4b79      	ldr	r3, [pc, #484]	; (8003f68 <generate_waveforms+0x9a8>)
 8003d84:	ed93 8a06 	vldr	s16, [r3, #24]
 8003d88:	4b77      	ldr	r3, [pc, #476]	; (8003f68 <generate_waveforms+0x9a8>)
 8003d8a:	edd3 8a06 	vldr	s17, [r3, #24]
 8003d8e:	4b76      	ldr	r3, [pc, #472]	; (8003f68 <generate_waveforms+0x9a8>)
 8003d90:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	4a75      	ldr	r2, [pc, #468]	; (8003f6c <generate_waveforms+0x9ac>)
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003da4:	4b6e      	ldr	r3, [pc, #440]	; (8003f60 <generate_waveforms+0x9a0>)
 8003da6:	edd3 7a00 	vldr	s15, [r3]
 8003daa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	4a6f      	ldr	r2, [pc, #444]	; (8003f70 <generate_waveforms+0x9b0>)
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	edd3 7a00 	vldr	s15, [r3]
 8003dba:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003f74 <generate_waveforms+0x9b4>
 8003dbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dca:	f000 ff33 	bl	8004c34 <gen_square_angle>
 8003dce:	eef0 7a40 	vmov.f32	s15, s0
 8003dd2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003dd6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dde:	edc7 7a00 	vstr	s15, [r7]
 8003de2:	883b      	ldrh	r3, [r7, #0]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	4b64      	ldr	r3, [pc, #400]	; (8003f78 <generate_waveforms+0x9b8>)
 8003de8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco_amp + osc.vco_amp*gen_square_angle(theta_vco2 + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8003dec:	69bc      	ldr	r4, [r7, #24]
 8003dee:	4b5e      	ldr	r3, [pc, #376]	; (8003f68 <generate_waveforms+0x9a8>)
 8003df0:	ed93 8a06 	vldr	s16, [r3, #24]
 8003df4:	4b5c      	ldr	r3, [pc, #368]	; (8003f68 <generate_waveforms+0x9a8>)
 8003df6:	edd3 8a06 	vldr	s17, [r3, #24]
 8003dfa:	4b5b      	ldr	r3, [pc, #364]	; (8003f68 <generate_waveforms+0x9a8>)
 8003dfc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	4a5a      	ldr	r2, [pc, #360]	; (8003f6c <generate_waveforms+0x9ac>)
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	edd3 7a00 	vldr	s15, [r3]
 8003e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e10:	4b54      	ldr	r3, [pc, #336]	; (8003f64 <generate_waveforms+0x9a4>)
 8003e12:	edd3 7a00 	vldr	s15, [r3]
 8003e16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	4a54      	ldr	r2, [pc, #336]	; (8003f70 <generate_waveforms+0x9b0>)
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	edd3 7a00 	vldr	s15, [r3]
 8003e26:	eddf 6a53 	vldr	s13, [pc, #332]	; 8003f74 <generate_waveforms+0x9b4>
 8003e2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e32:	eeb0 0a67 	vmov.f32	s0, s15
 8003e36:	f000 fefd 	bl	8004c34 <gen_square_angle>
 8003e3a:	eef0 7a40 	vmov.f32	s15, s0
 8003e3e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003e42:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e4a:	edc7 7a00 	vstr	s15, [r7]
 8003e4e:	883b      	ldrh	r3, [r7, #0]
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	4b4a      	ldr	r3, [pc, #296]	; (8003f7c <generate_waveforms+0x9bc>)
 8003e54:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4946      	ldr	r1, [pc, #280]	; (8003f78 <generate_waveforms+0x9b8>)
 8003e5e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003e62:	b291      	uxth	r1, r2
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4845      	ldr	r0, [pc, #276]	; (8003f7c <generate_waveforms+0x9bc>)
 8003e68:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8003e6c:	b292      	uxth	r2, r2
 8003e6e:	440a      	add	r2, r1
 8003e70:	b291      	uxth	r1, r2
 8003e72:	4a41      	ldr	r2, [pc, #260]	; (8003f78 <generate_waveforms+0x9b8>)
 8003e74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003e78:	e061      	b.n	8003f3e <generate_waveforms+0x97e>
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_square_angle(theta_vco + 0.3f * buffer_adsr_fm[i]);
 8003e7a:	69bc      	ldr	r4, [r7, #24]
 8003e7c:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <generate_waveforms+0x9a8>)
 8003e7e:	ed93 8a06 	vldr	s16, [r3, #24]
 8003e82:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <generate_waveforms+0x9a8>)
 8003e84:	edd3 8a06 	vldr	s17, [r3, #24]
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	4a39      	ldr	r2, [pc, #228]	; (8003f70 <generate_waveforms+0x9b0>)
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	edd3 7a00 	vldr	s15, [r3]
 8003e94:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003f74 <generate_waveforms+0x9b4>
 8003e98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e9c:	4b30      	ldr	r3, [pc, #192]	; (8003f60 <generate_waveforms+0x9a0>)
 8003e9e:	edd3 7a00 	vldr	s15, [r3]
 8003ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8003eaa:	f000 fec3 	bl	8004c34 <gen_square_angle>
 8003eae:	eef0 7a40 	vmov.f32	s15, s0
 8003eb2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003eb6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ebe:	edc7 7a00 	vstr	s15, [r7]
 8003ec2:	883b      	ldrh	r3, [r7, #0]
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	4b2c      	ldr	r3, [pc, #176]	; (8003f78 <generate_waveforms+0x9b8>)
 8003ec8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco_amp + osc.vco_amp*gen_square_angle(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 8003ecc:	69bc      	ldr	r4, [r7, #24]
 8003ece:	4b26      	ldr	r3, [pc, #152]	; (8003f68 <generate_waveforms+0x9a8>)
 8003ed0:	ed93 8a06 	vldr	s16, [r3, #24]
 8003ed4:	4b24      	ldr	r3, [pc, #144]	; (8003f68 <generate_waveforms+0x9a8>)
 8003ed6:	edd3 8a06 	vldr	s17, [r3, #24]
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	4a24      	ldr	r2, [pc, #144]	; (8003f70 <generate_waveforms+0x9b0>)
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	edd3 7a00 	vldr	s15, [r3]
 8003ee6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003f74 <generate_waveforms+0x9b4>
 8003eea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003eee:	4b1d      	ldr	r3, [pc, #116]	; (8003f64 <generate_waveforms+0x9a4>)
 8003ef0:	edd3 7a00 	vldr	s15, [r3]
 8003ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8003efc:	f000 fe9a 	bl	8004c34 <gen_square_angle>
 8003f00:	eef0 7a40 	vmov.f32	s15, s0
 8003f04:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003f08:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f10:	edc7 7a00 	vstr	s15, [r7]
 8003f14:	883b      	ldrh	r3, [r7, #0]
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <generate_waveforms+0x9bc>)
 8003f1a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4915      	ldr	r1, [pc, #84]	; (8003f78 <generate_waveforms+0x9b8>)
 8003f24:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003f28:	b291      	uxth	r1, r2
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4813      	ldr	r0, [pc, #76]	; (8003f7c <generate_waveforms+0x9bc>)
 8003f2e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8003f32:	b292      	uxth	r2, r2
 8003f34:	440a      	add	r2, r1
 8003f36:	b291      	uxth	r1, r2
 8003f38:	4a0f      	ldr	r2, [pc, #60]	; (8003f78 <generate_waveforms+0x9b8>)
 8003f3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Square VCO
	else if(osc.vco_wav == square)
	{
		for(i = start; i < end; i++)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	3301      	adds	r3, #1
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	88ba      	ldrh	r2, [r7, #4]
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	f63f af01 	bhi.w	8003d50 <generate_waveforms+0x790>
 8003f4e:	e22e      	b.n	80043ae <generate_waveforms+0xdee>
			}
		}
	}

	// Sawtooth VCO
	else if(osc.vco_wav == sawtooth)
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <generate_waveforms+0x9a8>)
 8003f52:	8a1b      	ldrh	r3, [r3, #16]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	f040 8113 	bne.w	8004180 <generate_waveforms+0xbc0>
	{
		for(i = start; i < end; i++)
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	e109      	b.n	8004174 <generate_waveforms+0xbb4>
 8003f60:	200054e0 	.word	0x200054e0
 8003f64:	200054e4 	.word	0x200054e4
 8003f68:	20000054 	.word	0x20000054
 8003f6c:	200001c4 	.word	0x200001c4
 8003f70:	200003c4 	.word	0x200003c4
 8003f74:	3e99999a 	.word	0x3e99999a
 8003f78:	200000c4 	.word	0x200000c4
 8003f7c:	20000144 	.word	0x20000144
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8003f80:	4b83      	ldr	r3, [pc, #524]	; (8004190 <generate_waveforms+0xbd0>)
 8003f82:	ed93 7a00 	vldr	s14, [r3]
 8003f86:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f8e:	4b80      	ldr	r3, [pc, #512]	; (8004190 <generate_waveforms+0xbd0>)
 8003f90:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 8003f94:	4b7f      	ldr	r3, [pc, #508]	; (8004194 <generate_waveforms+0xbd4>)
 8003f96:	ed93 7a00 	vldr	s14, [r3]
 8003f9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fa2:	4b7c      	ldr	r3, [pc, #496]	; (8004194 <generate_waveforms+0xbd4>)
 8003fa4:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 8003fa8:	4b7b      	ldr	r3, [pc, #492]	; (8004198 <generate_waveforms+0xbd8>)
 8003faa:	8adb      	ldrh	r3, [r3, #22]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d17c      	bne.n	80040aa <generate_waveforms+0xaea>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_sawtooth_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8003fb0:	69bc      	ldr	r4, [r7, #24]
 8003fb2:	4b79      	ldr	r3, [pc, #484]	; (8004198 <generate_waveforms+0xbd8>)
 8003fb4:	ed93 8a06 	vldr	s16, [r3, #24]
 8003fb8:	4b77      	ldr	r3, [pc, #476]	; (8004198 <generate_waveforms+0xbd8>)
 8003fba:	edd3 8a06 	vldr	s17, [r3, #24]
 8003fbe:	4b76      	ldr	r3, [pc, #472]	; (8004198 <generate_waveforms+0xbd8>)
 8003fc0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	4a75      	ldr	r2, [pc, #468]	; (800419c <generate_waveforms+0xbdc>)
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	edd3 7a00 	vldr	s15, [r3]
 8003fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fd4:	4b6e      	ldr	r3, [pc, #440]	; (8004190 <generate_waveforms+0xbd0>)
 8003fd6:	edd3 7a00 	vldr	s15, [r3]
 8003fda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	4a6f      	ldr	r2, [pc, #444]	; (80041a0 <generate_waveforms+0xbe0>)
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	edd3 7a00 	vldr	s15, [r3]
 8003fea:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80041a4 <generate_waveforms+0xbe4>
 8003fee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8003ffa:	f000 fe43 	bl	8004c84 <gen_sawtooth_angle>
 8003ffe:	eef0 7a40 	vmov.f32	s15, s0
 8004002:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004006:	ee78 7a27 	vadd.f32	s15, s16, s15
 800400a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800400e:	edc7 7a00 	vstr	s15, [r7]
 8004012:	883b      	ldrh	r3, [r7, #0]
 8004014:	b29a      	uxth	r2, r3
 8004016:	4b64      	ldr	r3, [pc, #400]	; (80041a8 <generate_waveforms+0xbe8>)
 8004018:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco_amp + osc.vco_amp*gen_sawtooth_angle(theta_vco2 + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 800401c:	69bc      	ldr	r4, [r7, #24]
 800401e:	4b5e      	ldr	r3, [pc, #376]	; (8004198 <generate_waveforms+0xbd8>)
 8004020:	ed93 8a06 	vldr	s16, [r3, #24]
 8004024:	4b5c      	ldr	r3, [pc, #368]	; (8004198 <generate_waveforms+0xbd8>)
 8004026:	edd3 8a06 	vldr	s17, [r3, #24]
 800402a:	4b5b      	ldr	r3, [pc, #364]	; (8004198 <generate_waveforms+0xbd8>)
 800402c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	4a5a      	ldr	r2, [pc, #360]	; (800419c <generate_waveforms+0xbdc>)
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	edd3 7a00 	vldr	s15, [r3]
 800403c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004040:	4b54      	ldr	r3, [pc, #336]	; (8004194 <generate_waveforms+0xbd4>)
 8004042:	edd3 7a00 	vldr	s15, [r3]
 8004046:	ee37 7a27 	vadd.f32	s14, s14, s15
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	4a54      	ldr	r2, [pc, #336]	; (80041a0 <generate_waveforms+0xbe0>)
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	edd3 7a00 	vldr	s15, [r3]
 8004056:	eddf 6a53 	vldr	s13, [pc, #332]	; 80041a4 <generate_waveforms+0xbe4>
 800405a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800405e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004062:	eeb0 0a67 	vmov.f32	s0, s15
 8004066:	f000 fe0d 	bl	8004c84 <gen_sawtooth_angle>
 800406a:	eef0 7a40 	vmov.f32	s15, s0
 800406e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004072:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800407a:	edc7 7a00 	vstr	s15, [r7]
 800407e:	883b      	ldrh	r3, [r7, #0]
 8004080:	b29a      	uxth	r2, r3
 8004082:	4b4a      	ldr	r3, [pc, #296]	; (80041ac <generate_waveforms+0xbec>)
 8004084:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4946      	ldr	r1, [pc, #280]	; (80041a8 <generate_waveforms+0xbe8>)
 800408e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004092:	b291      	uxth	r1, r2
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4845      	ldr	r0, [pc, #276]	; (80041ac <generate_waveforms+0xbec>)
 8004098:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800409c:	b292      	uxth	r2, r2
 800409e:	440a      	add	r2, r1
 80040a0:	b291      	uxth	r1, r2
 80040a2:	4a41      	ldr	r2, [pc, #260]	; (80041a8 <generate_waveforms+0xbe8>)
 80040a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80040a8:	e061      	b.n	800416e <generate_waveforms+0xbae>

			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_sawtooth_angle(theta_vco + 0.3f * buffer_adsr_fm[i]);
 80040aa:	69bc      	ldr	r4, [r7, #24]
 80040ac:	4b3a      	ldr	r3, [pc, #232]	; (8004198 <generate_waveforms+0xbd8>)
 80040ae:	ed93 8a06 	vldr	s16, [r3, #24]
 80040b2:	4b39      	ldr	r3, [pc, #228]	; (8004198 <generate_waveforms+0xbd8>)
 80040b4:	edd3 8a06 	vldr	s17, [r3, #24]
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	4a39      	ldr	r2, [pc, #228]	; (80041a0 <generate_waveforms+0xbe0>)
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	edd3 7a00 	vldr	s15, [r3]
 80040c4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80041a4 <generate_waveforms+0xbe4>
 80040c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040cc:	4b30      	ldr	r3, [pc, #192]	; (8004190 <generate_waveforms+0xbd0>)
 80040ce:	edd3 7a00 	vldr	s15, [r3]
 80040d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040d6:	eeb0 0a67 	vmov.f32	s0, s15
 80040da:	f000 fdd3 	bl	8004c84 <gen_sawtooth_angle>
 80040de:	eef0 7a40 	vmov.f32	s15, s0
 80040e2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80040e6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80040ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ee:	edc7 7a00 	vstr	s15, [r7]
 80040f2:	883b      	ldrh	r3, [r7, #0]
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <generate_waveforms+0xbe8>)
 80040f8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco_amp + osc.vco_amp*gen_sawtooth_angle(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 80040fc:	69bc      	ldr	r4, [r7, #24]
 80040fe:	4b26      	ldr	r3, [pc, #152]	; (8004198 <generate_waveforms+0xbd8>)
 8004100:	ed93 8a06 	vldr	s16, [r3, #24]
 8004104:	4b24      	ldr	r3, [pc, #144]	; (8004198 <generate_waveforms+0xbd8>)
 8004106:	edd3 8a06 	vldr	s17, [r3, #24]
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	4a24      	ldr	r2, [pc, #144]	; (80041a0 <generate_waveforms+0xbe0>)
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	edd3 7a00 	vldr	s15, [r3]
 8004116:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80041a4 <generate_waveforms+0xbe4>
 800411a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800411e:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <generate_waveforms+0xbd4>)
 8004120:	edd3 7a00 	vldr	s15, [r3]
 8004124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004128:	eeb0 0a67 	vmov.f32	s0, s15
 800412c:	f000 fdaa 	bl	8004c84 <gen_sawtooth_angle>
 8004130:	eef0 7a40 	vmov.f32	s15, s0
 8004134:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004138:	ee78 7a27 	vadd.f32	s15, s16, s15
 800413c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004140:	edc7 7a00 	vstr	s15, [r7]
 8004144:	883b      	ldrh	r3, [r7, #0]
 8004146:	b29a      	uxth	r2, r3
 8004148:	4b18      	ldr	r3, [pc, #96]	; (80041ac <generate_waveforms+0xbec>)
 800414a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4915      	ldr	r1, [pc, #84]	; (80041a8 <generate_waveforms+0xbe8>)
 8004154:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004158:	b291      	uxth	r1, r2
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4813      	ldr	r0, [pc, #76]	; (80041ac <generate_waveforms+0xbec>)
 800415e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8004162:	b292      	uxth	r2, r2
 8004164:	440a      	add	r2, r1
 8004166:	b291      	uxth	r1, r2
 8004168:	4a0f      	ldr	r2, [pc, #60]	; (80041a8 <generate_waveforms+0xbe8>)
 800416a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Sawtooth VCO
	else if(osc.vco_wav == sawtooth)
	{
		for(i = start; i < end; i++)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	3301      	adds	r3, #1
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	88ba      	ldrh	r2, [r7, #4]
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	429a      	cmp	r2, r3
 800417a:	f63f af01 	bhi.w	8003f80 <generate_waveforms+0x9c0>
 800417e:	e116      	b.n	80043ae <generate_waveforms+0xdee>
			}
		}
	}

	// Triangle VCO
	else if(osc.vco_wav == triangle)
 8004180:	4b05      	ldr	r3, [pc, #20]	; (8004198 <generate_waveforms+0xbd8>)
 8004182:	8a1b      	ldrh	r3, [r3, #16]
 8004184:	2b04      	cmp	r3, #4
 8004186:	f040 8112 	bne.w	80043ae <generate_waveforms+0xdee>
	{
		for(i = start; i < end; i++)
 800418a:	88fb      	ldrh	r3, [r7, #6]
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e109      	b.n	80043a4 <generate_waveforms+0xde4>
 8004190:	200054e0 	.word	0x200054e0
 8004194:	200054e4 	.word	0x200054e4
 8004198:	20000054 	.word	0x20000054
 800419c:	200001c4 	.word	0x200001c4
 80041a0:	200003c4 	.word	0x200003c4
 80041a4:	3e99999a 	.word	0x3e99999a
 80041a8:	200000c4 	.word	0x200000c4
 80041ac:	20000144 	.word	0x20000144
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 80041b0:	4b9c      	ldr	r3, [pc, #624]	; (8004424 <generate_waveforms+0xe64>)
 80041b2:	ed93 7a00 	vldr	s14, [r3]
 80041b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80041ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041be:	4b99      	ldr	r3, [pc, #612]	; (8004424 <generate_waveforms+0xe64>)
 80041c0:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 80041c4:	4b98      	ldr	r3, [pc, #608]	; (8004428 <generate_waveforms+0xe68>)
 80041c6:	ed93 7a00 	vldr	s14, [r3]
 80041ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80041ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041d2:	4b95      	ldr	r3, [pc, #596]	; (8004428 <generate_waveforms+0xe68>)
 80041d4:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 80041d8:	4b94      	ldr	r3, [pc, #592]	; (800442c <generate_waveforms+0xe6c>)
 80041da:	8adb      	ldrh	r3, [r3, #22]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d17c      	bne.n	80042da <generate_waveforms+0xd1a>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_triangle_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 80041e0:	69bc      	ldr	r4, [r7, #24]
 80041e2:	4b92      	ldr	r3, [pc, #584]	; (800442c <generate_waveforms+0xe6c>)
 80041e4:	ed93 8a06 	vldr	s16, [r3, #24]
 80041e8:	4b90      	ldr	r3, [pc, #576]	; (800442c <generate_waveforms+0xe6c>)
 80041ea:	edd3 8a06 	vldr	s17, [r3, #24]
 80041ee:	4b8f      	ldr	r3, [pc, #572]	; (800442c <generate_waveforms+0xe6c>)
 80041f0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	4a8e      	ldr	r2, [pc, #568]	; (8004430 <generate_waveforms+0xe70>)
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	edd3 7a00 	vldr	s15, [r3]
 8004200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004204:	4b87      	ldr	r3, [pc, #540]	; (8004424 <generate_waveforms+0xe64>)
 8004206:	edd3 7a00 	vldr	s15, [r3]
 800420a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	4a88      	ldr	r2, [pc, #544]	; (8004434 <generate_waveforms+0xe74>)
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	edd3 7a00 	vldr	s15, [r3]
 800421a:	eddf 6a87 	vldr	s13, [pc, #540]	; 8004438 <generate_waveforms+0xe78>
 800421e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004226:	eeb0 0a67 	vmov.f32	s0, s15
 800422a:	f000 fe13 	bl	8004e54 <gen_triangle_angle>
 800422e:	eef0 7a40 	vmov.f32	s15, s0
 8004232:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004236:	ee78 7a27 	vadd.f32	s15, s16, s15
 800423a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800423e:	edc7 7a00 	vstr	s15, [r7]
 8004242:	883b      	ldrh	r3, [r7, #0]
 8004244:	b29a      	uxth	r2, r3
 8004246:	4b7d      	ldr	r3, [pc, #500]	; (800443c <generate_waveforms+0xe7c>)
 8004248:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco_amp + osc.vco_amp*gen_triangle_angle(theta_vco2 + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 800424c:	69bc      	ldr	r4, [r7, #24]
 800424e:	4b77      	ldr	r3, [pc, #476]	; (800442c <generate_waveforms+0xe6c>)
 8004250:	ed93 8a06 	vldr	s16, [r3, #24]
 8004254:	4b75      	ldr	r3, [pc, #468]	; (800442c <generate_waveforms+0xe6c>)
 8004256:	edd3 8a06 	vldr	s17, [r3, #24]
 800425a:	4b74      	ldr	r3, [pc, #464]	; (800442c <generate_waveforms+0xe6c>)
 800425c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	4a73      	ldr	r2, [pc, #460]	; (8004430 <generate_waveforms+0xe70>)
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	edd3 7a00 	vldr	s15, [r3]
 800426c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004270:	4b6d      	ldr	r3, [pc, #436]	; (8004428 <generate_waveforms+0xe68>)
 8004272:	edd3 7a00 	vldr	s15, [r3]
 8004276:	ee37 7a27 	vadd.f32	s14, s14, s15
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	4a6d      	ldr	r2, [pc, #436]	; (8004434 <generate_waveforms+0xe74>)
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	edd3 7a00 	vldr	s15, [r3]
 8004286:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8004438 <generate_waveforms+0xe78>
 800428a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800428e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004292:	eeb0 0a67 	vmov.f32	s0, s15
 8004296:	f000 fddd 	bl	8004e54 <gen_triangle_angle>
 800429a:	eef0 7a40 	vmov.f32	s15, s0
 800429e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80042a2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80042a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042aa:	edc7 7a00 	vstr	s15, [r7]
 80042ae:	883b      	ldrh	r3, [r7, #0]
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	4b63      	ldr	r3, [pc, #396]	; (8004440 <generate_waveforms+0xe80>)
 80042b4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	495f      	ldr	r1, [pc, #380]	; (800443c <generate_waveforms+0xe7c>)
 80042be:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80042c2:	b291      	uxth	r1, r2
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	485e      	ldr	r0, [pc, #376]	; (8004440 <generate_waveforms+0xe80>)
 80042c8:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80042cc:	b292      	uxth	r2, r2
 80042ce:	440a      	add	r2, r1
 80042d0:	b291      	uxth	r1, r2
 80042d2:	4a5a      	ldr	r2, [pc, #360]	; (800443c <generate_waveforms+0xe7c>)
 80042d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80042d8:	e061      	b.n	800439e <generate_waveforms+0xdde>
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_triangle_angle(theta_vco + 0.3f * buffer_adsr_fm[i]);
 80042da:	69bc      	ldr	r4, [r7, #24]
 80042dc:	4b53      	ldr	r3, [pc, #332]	; (800442c <generate_waveforms+0xe6c>)
 80042de:	ed93 8a06 	vldr	s16, [r3, #24]
 80042e2:	4b52      	ldr	r3, [pc, #328]	; (800442c <generate_waveforms+0xe6c>)
 80042e4:	edd3 8a06 	vldr	s17, [r3, #24]
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	4a52      	ldr	r2, [pc, #328]	; (8004434 <generate_waveforms+0xe74>)
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	edd3 7a00 	vldr	s15, [r3]
 80042f4:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004438 <generate_waveforms+0xe78>
 80042f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042fc:	4b49      	ldr	r3, [pc, #292]	; (8004424 <generate_waveforms+0xe64>)
 80042fe:	edd3 7a00 	vldr	s15, [r3]
 8004302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004306:	eeb0 0a67 	vmov.f32	s0, s15
 800430a:	f000 fda3 	bl	8004e54 <gen_triangle_angle>
 800430e:	eef0 7a40 	vmov.f32	s15, s0
 8004312:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004316:	ee78 7a27 	vadd.f32	s15, s16, s15
 800431a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800431e:	edc7 7a00 	vstr	s15, [r7]
 8004322:	883b      	ldrh	r3, [r7, #0]
 8004324:	b29a      	uxth	r2, r3
 8004326:	4b45      	ldr	r3, [pc, #276]	; (800443c <generate_waveforms+0xe7c>)
 8004328:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco_amp + osc.vco_amp*gen_triangle_angle(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 800432c:	69bc      	ldr	r4, [r7, #24]
 800432e:	4b3f      	ldr	r3, [pc, #252]	; (800442c <generate_waveforms+0xe6c>)
 8004330:	ed93 8a06 	vldr	s16, [r3, #24]
 8004334:	4b3d      	ldr	r3, [pc, #244]	; (800442c <generate_waveforms+0xe6c>)
 8004336:	edd3 8a06 	vldr	s17, [r3, #24]
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	4a3d      	ldr	r2, [pc, #244]	; (8004434 <generate_waveforms+0xe74>)
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	edd3 7a00 	vldr	s15, [r3]
 8004346:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004438 <generate_waveforms+0xe78>
 800434a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800434e:	4b36      	ldr	r3, [pc, #216]	; (8004428 <generate_waveforms+0xe68>)
 8004350:	edd3 7a00 	vldr	s15, [r3]
 8004354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004358:	eeb0 0a67 	vmov.f32	s0, s15
 800435c:	f000 fd7a 	bl	8004e54 <gen_triangle_angle>
 8004360:	eef0 7a40 	vmov.f32	s15, s0
 8004364:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004368:	ee78 7a27 	vadd.f32	s15, s16, s15
 800436c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004370:	edc7 7a00 	vstr	s15, [r7]
 8004374:	883b      	ldrh	r3, [r7, #0]
 8004376:	b29a      	uxth	r2, r3
 8004378:	4b31      	ldr	r3, [pc, #196]	; (8004440 <generate_waveforms+0xe80>)
 800437a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	492e      	ldr	r1, [pc, #184]	; (800443c <generate_waveforms+0xe7c>)
 8004384:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004388:	b291      	uxth	r1, r2
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	482c      	ldr	r0, [pc, #176]	; (8004440 <generate_waveforms+0xe80>)
 800438e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8004392:	b292      	uxth	r2, r2
 8004394:	440a      	add	r2, r1
 8004396:	b291      	uxth	r1, r2
 8004398:	4a28      	ldr	r2, [pc, #160]	; (800443c <generate_waveforms+0xe7c>)
 800439a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Triangle VCO
	else if(osc.vco_wav == triangle)
	{
		for(i = start; i < end; i++)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	3301      	adds	r3, #1
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	88ba      	ldrh	r2, [r7, #4]
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	f63f af01 	bhi.w	80041b0 <generate_waveforms+0xbf0>
			}
		}
	}

	// AM Modulate VCO with LFO
	if(osc.am_mod == ON)
 80043ae:	4b1f      	ldr	r3, [pc, #124]	; (800442c <generate_waveforms+0xe6c>)
 80043b0:	8a9b      	ldrh	r3, [r3, #20]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d12e      	bne.n	8004414 <generate_waveforms+0xe54>
	{
		for(i = start; i < end; i++)
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	e027      	b.n	800440c <generate_waveforms+0xe4c>
		{
			buffer_output[i] = buffer_output[i]*(osc.lfo_amp_am + osc.lfo_amp_am*buffer_lfo_float[i]);
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	491e      	ldr	r1, [pc, #120]	; (800443c <generate_waveforms+0xe7c>)
 80043c2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80043c6:	b292      	uxth	r2, r2
 80043c8:	ee07 2a90 	vmov	s15, r2
 80043cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043d0:	4a16      	ldr	r2, [pc, #88]	; (800442c <generate_waveforms+0xe6c>)
 80043d2:	edd2 6a09 	vldr	s13, [r2, #36]	; 0x24
 80043d6:	4a15      	ldr	r2, [pc, #84]	; (800442c <generate_waveforms+0xe6c>)
 80043d8:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4914      	ldr	r1, [pc, #80]	; (8004430 <generate_waveforms+0xe70>)
 80043e0:	0092      	lsls	r2, r2, #2
 80043e2:	440a      	add	r2, r1
 80043e4:	edd2 7a00 	vldr	s15, [r2]
 80043e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80043ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f8:	edc7 7a00 	vstr	s15, [r7]
 80043fc:	883a      	ldrh	r2, [r7, #0]
 80043fe:	b291      	uxth	r1, r2
 8004400:	4a0e      	ldr	r2, [pc, #56]	; (800443c <generate_waveforms+0xe7c>)
 8004402:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// AM Modulate VCO with LFO
	if(osc.am_mod == ON)
	{
		for(i = start; i < end; i++)
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	3301      	adds	r3, #1
 800440a:	61bb      	str	r3, [r7, #24]
 800440c:	88ba      	ldrh	r2, [r7, #4]
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	429a      	cmp	r2, r3
 8004412:	d8d3      	bhi.n	80043bc <generate_waveforms+0xdfc>
			buffer_output[i] = buffer_output[i]*(osc.lfo_amp_am + osc.lfo_amp_am*buffer_lfo_float[i]);
		}
	}

	// AM Modulate VCO with ADSR
	if(adsr_settings.am_mod == ON)
 8004414:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <generate_waveforms+0xe84>)
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	d136      	bne.n	800448c <generate_waveforms+0xecc>
	{
		for(i = start; i < end; i++)
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	e02f      	b.n	8004484 <generate_waveforms+0xec4>
 8004424:	200054e0 	.word	0x200054e0
 8004428:	200054e4 	.word	0x200054e4
 800442c:	20000054 	.word	0x20000054
 8004430:	200001c4 	.word	0x200001c4
 8004434:	200003c4 	.word	0x200003c4
 8004438:	3e99999a 	.word	0x3e99999a
 800443c:	200000c4 	.word	0x200000c4
 8004440:	20000144 	.word	0x20000144
 8004444:	2000559c 	.word	0x2000559c
		{
			buffer_output[i] = buffer_output[i]*buffer_adsr_am[i];
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4927      	ldr	r1, [pc, #156]	; (80044ec <generate_waveforms+0xf2c>)
 800444e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004452:	b292      	uxth	r2, r2
 8004454:	ee07 2a90 	vmov	s15, r2
 8004458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4924      	ldr	r1, [pc, #144]	; (80044f0 <generate_waveforms+0xf30>)
 8004460:	0092      	lsls	r2, r2, #2
 8004462:	440a      	add	r2, r1
 8004464:	edd2 7a00 	vldr	s15, [r2]
 8004468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004470:	edc7 7a00 	vstr	s15, [r7]
 8004474:	883a      	ldrh	r2, [r7, #0]
 8004476:	b291      	uxth	r1, r2
 8004478:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <generate_waveforms+0xf2c>)
 800447a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// AM Modulate VCO with ADSR
	if(adsr_settings.am_mod == ON)
	{
		for(i = start; i < end; i++)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	3301      	adds	r3, #1
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	88ba      	ldrh	r2, [r7, #4]
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	429a      	cmp	r2, r3
 800448a:	d8dd      	bhi.n	8004448 <generate_waveforms+0xe88>
		{
			buffer_output[i] = buffer_output[i]*buffer_adsr_am[i];
		}
	}

	theta_vco = fast_fmod(theta_vco, TWO_PI);
 800448c:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <generate_waveforms+0xf34>)
 800448e:	edd3 7a00 	vldr	s15, [r3]
 8004492:	eddf 0a19 	vldr	s1, [pc, #100]	; 80044f8 <generate_waveforms+0xf38>
 8004496:	eeb0 0a67 	vmov.f32	s0, s15
 800449a:	f000 fda5 	bl	8004fe8 <fast_fmod>
 800449e:	eef0 7a40 	vmov.f32	s15, s0
 80044a2:	4b14      	ldr	r3, [pc, #80]	; (80044f4 <generate_waveforms+0xf34>)
 80044a4:	edc3 7a00 	vstr	s15, [r3]
	// theta_vco2 = fast_fmod(theta_vco2, TWO_PI);
	theta_lfo = fast_fmod(theta_lfo, TWO_PI);
 80044a8:	4b14      	ldr	r3, [pc, #80]	; (80044fc <generate_waveforms+0xf3c>)
 80044aa:	edd3 7a00 	vldr	s15, [r3]
 80044ae:	eddf 0a12 	vldr	s1, [pc, #72]	; 80044f8 <generate_waveforms+0xf38>
 80044b2:	eeb0 0a67 	vmov.f32	s0, s15
 80044b6:	f000 fd97 	bl	8004fe8 <fast_fmod>
 80044ba:	eef0 7a40 	vmov.f32	s15, s0
 80044be:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <generate_waveforms+0xf3c>)
 80044c0:	edc3 7a00 	vstr	s15, [r3]
	theta_adsr = fast_fmod(theta_adsr, TWO_PI);
 80044c4:	4b0e      	ldr	r3, [pc, #56]	; (8004500 <generate_waveforms+0xf40>)
 80044c6:	edd3 7a00 	vldr	s15, [r3]
 80044ca:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80044f8 <generate_waveforms+0xf38>
 80044ce:	eeb0 0a67 	vmov.f32	s0, s15
 80044d2:	f000 fd89 	bl	8004fe8 <fast_fmod>
 80044d6:	eef0 7a40 	vmov.f32	s15, s0
 80044da:	4b09      	ldr	r3, [pc, #36]	; (8004500 <generate_waveforms+0xf40>)
 80044dc:	edc3 7a00 	vstr	s15, [r3]

	return;
 80044e0:	bf00      	nop
}
 80044e2:	3724      	adds	r7, #36	; 0x24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	ecbd 8b02 	vpop	{d8}
 80044ea:	bd90      	pop	{r4, r7, pc}
 80044ec:	200000c4 	.word	0x200000c4
 80044f0:	200002c4 	.word	0x200002c4
 80044f4:	200054e0 	.word	0x200054e0
 80044f8:	40c90fdb 	.word	0x40c90fdb
 80044fc:	200054e8 	.word	0x200054e8
 8004500:	2000009c 	.word	0x2000009c

08004504 <adsr>:
	return;
}


void adsr(uint16_t start, uint16_t end)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	ed2d 8b02 	vpush	{d8}
 800450a:	b08f      	sub	sp, #60	; 0x3c
 800450c:	af02      	add	r7, sp, #8
 800450e:	4603      	mov	r3, r0
 8004510:	460a      	mov	r2, r1
 8004512:	80fb      	strh	r3, [r7, #6]
 8004514:	4613      	mov	r3, r2
 8004516:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	// adsr_settings = adsr_03;
	adsr_settings.attack_len =  (ADCBuffer[4] & 0xfffc)*20;		// A5
 800451c:	4baf      	ldr	r3, [pc, #700]	; (80047dc <adsr+0x2d8>)
 800451e:	891b      	ldrh	r3, [r3, #8]
 8004520:	b29b      	uxth	r3, r3
 8004522:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8004526:	401a      	ands	r2, r3
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	461a      	mov	r2, r3
 8004532:	4bab      	ldr	r3, [pc, #684]	; (80047e0 <adsr+0x2dc>)
 8004534:	609a      	str	r2, [r3, #8]
	adsr_settings.decay_len =   (ADCBuffer[9] & 0xfffc)*20;	// C1
 8004536:	4ba9      	ldr	r3, [pc, #676]	; (80047dc <adsr+0x2d8>)
 8004538:	8a5b      	ldrh	r3, [r3, #18]
 800453a:	b29b      	uxth	r3, r3
 800453c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8004540:	401a      	ands	r2, r3
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	461a      	mov	r2, r3
 800454c:	4ba4      	ldr	r3, [pc, #656]	; (80047e0 <adsr+0x2dc>)
 800454e:	60da      	str	r2, [r3, #12]
	adsr_settings.sustain_len = (ADCBuffer[5] & 0xfffc)*20;	// A7
 8004550:	4ba2      	ldr	r3, [pc, #648]	; (80047dc <adsr+0x2d8>)
 8004552:	895b      	ldrh	r3, [r3, #10]
 8004554:	b29b      	uxth	r3, r3
 8004556:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800455a:	401a      	ands	r2, r3
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	461a      	mov	r2, r3
 8004566:	4b9e      	ldr	r3, [pc, #632]	; (80047e0 <adsr+0x2dc>)
 8004568:	611a      	str	r2, [r3, #16]
	adsr_settings.release_len = (ADCBuffer[6] & 0xfffc)*20;	// B0
 800456a:	4b9c      	ldr	r3, [pc, #624]	; (80047dc <adsr+0x2d8>)
 800456c:	899b      	ldrh	r3, [r3, #12]
 800456e:	b29b      	uxth	r3, r3
 8004570:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8004574:	401a      	ands	r2, r3
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	461a      	mov	r2, r3
 8004580:	4b97      	ldr	r3, [pc, #604]	; (80047e0 <adsr+0x2dc>)
 8004582:	615a      	str	r2, [r3, #20]
	adsr_settings.blank_len =   (ADCBuffer[8] & 0xfffc)*20;		// C0
 8004584:	4b95      	ldr	r3, [pc, #596]	; (80047dc <adsr+0x2d8>)
 8004586:	8a1b      	ldrh	r3, [r3, #16]
 8004588:	b29b      	uxth	r3, r3
 800458a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800458e:	401a      	ands	r2, r3
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	461a      	mov	r2, r3
 800459a:	4b91      	ldr	r3, [pc, #580]	; (80047e0 <adsr+0x2dc>)
 800459c:	619a      	str	r2, [r3, #24]
	volatile uint32_t samples_cycle_adsr = adsr_settings.attack_len + adsr_settings.decay_len + adsr_settings.sustain_len + adsr_settings.release_len + adsr_settings.blank_len;
 800459e:	4b90      	ldr	r3, [pc, #576]	; (80047e0 <adsr+0x2dc>)
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	4b8f      	ldr	r3, [pc, #572]	; (80047e0 <adsr+0x2dc>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	441a      	add	r2, r3
 80045a8:	4b8d      	ldr	r3, [pc, #564]	; (80047e0 <adsr+0x2dc>)
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	441a      	add	r2, r3
 80045ae:	4b8c      	ldr	r3, [pc, #560]	; (80047e0 <adsr+0x2dc>)
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	441a      	add	r2, r3
 80045b4:	4b8a      	ldr	r3, [pc, #552]	; (80047e0 <adsr+0x2dc>)
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	4413      	add	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

	// C4
	uint16_t tempf = pseudo_log(ADCBuffer[11] & 0xfffc);
 80045bc:	4b87      	ldr	r3, [pc, #540]	; (80047dc <adsr+0x2d8>)
 80045be:	8adb      	ldrh	r3, [r3, #22]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f023 0303 	bic.w	r3, r3, #3
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fd55 	bl	8005078 <pseudo_log>
 80045ce:	4603      	mov	r3, r0
 80045d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
	adsr_settings.sustain_amp = moving_avg(mov_avg4, &mov_avg_sum4, mov_avg_index4, MOV_AVG_LENGTH_BUFFER, tempf);
 80045d2:	4b84      	ldr	r3, [pc, #528]	; (80047e4 <adsr+0x2e0>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045de:	4982      	ldr	r1, [pc, #520]	; (80047e8 <adsr+0x2e4>)
 80045e0:	4882      	ldr	r0, [pc, #520]	; (80047ec <adsr+0x2e8>)
 80045e2:	f000 fd25 	bl	8005030 <moving_avg>
 80045e6:	ee07 0a90 	vmov	s15, r0
 80045ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ee:	4b7c      	ldr	r3, [pc, #496]	; (80047e0 <adsr+0x2dc>)
 80045f0:	edc3 7a01 	vstr	s15, [r3, #4]
	mov_avg_index4++;
 80045f4:	4b7b      	ldr	r3, [pc, #492]	; (80047e4 <adsr+0x2e0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3301      	adds	r3, #1
 80045fa:	4a7a      	ldr	r2, [pc, #488]	; (80047e4 <adsr+0x2e0>)
 80045fc:	6013      	str	r3, [r2, #0]
	if (mov_avg_index4 >= MOV_AVG_LENGTH_BUFFER)
 80045fe:	4b79      	ldr	r3, [pc, #484]	; (80047e4 <adsr+0x2e0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004606:	d302      	bcc.n	800460e <adsr+0x10a>
	{
		mov_avg_index4 = 0;
 8004608:	4b76      	ldr	r3, [pc, #472]	; (80047e4 <adsr+0x2e0>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
	}

	adsr_settings.sustain_amp = adsr_settings.sustain_amp/8000.0f;
 800460e:	4b74      	ldr	r3, [pc, #464]	; (80047e0 <adsr+0x2dc>)
 8004610:	ed93 7a01 	vldr	s14, [r3, #4]
 8004614:	eddf 6a76 	vldr	s13, [pc, #472]	; 80047f0 <adsr+0x2ec>
 8004618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800461c:	4b70      	ldr	r3, [pc, #448]	; (80047e0 <adsr+0x2dc>)
 800461e:	edc3 7a01 	vstr	s15, [r3, #4]
	// adsr_settings.sustain_amp = pseudo_log(adsr_settings.sustain_amp, ???);

	// Calculate ADSR boundaries.
	uint32_t decay_start = adsr_settings.attack_len;
 8004622:	4b6f      	ldr	r3, [pc, #444]	; (80047e0 <adsr+0x2dc>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t sustain_start = decay_start + adsr_settings.decay_len;
 8004628:	4b6d      	ldr	r3, [pc, #436]	; (80047e0 <adsr+0x2dc>)
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	4413      	add	r3, r2
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t release_start = sustain_start + adsr_settings.sustain_len;
 8004632:	4b6b      	ldr	r3, [pc, #428]	; (80047e0 <adsr+0x2dc>)
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	4413      	add	r3, r2
 800463a:	623b      	str	r3, [r7, #32]
	uint32_t blank_start = release_start + adsr_settings.release_len;
 800463c:	4b68      	ldr	r3, [pc, #416]	; (80047e0 <adsr+0x2dc>)
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	4413      	add	r3, r2
 8004644:	61fb      	str	r3, [r7, #28]
	uint32_t blank_end = blank_start + adsr_settings.blank_len;
 8004646:	4b66      	ldr	r3, [pc, #408]	; (80047e0 <adsr+0x2dc>)
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	4413      	add	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]


	volatile float32_t angle_attack = PI/adsr_settings.attack_len;
 8004650:	4b63      	ldr	r3, [pc, #396]	; (80047e0 <adsr+0x2dc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	ee07 3a90 	vmov	s15, r3
 8004658:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800465c:	eddf 6a65 	vldr	s13, [pc, #404]	; 80047f4 <adsr+0x2f0>
 8004660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004664:	edc7 7a04 	vstr	s15, [r7, #16]
	volatile float32_t angle_decay = PI/adsr_settings.decay_len;
 8004668:	4b5d      	ldr	r3, [pc, #372]	; (80047e0 <adsr+0x2dc>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	ee07 3a90 	vmov	s15, r3
 8004670:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004674:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047f4 <adsr+0x2f0>
 8004678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800467c:	edc7 7a03 	vstr	s15, [r7, #12]
	volatile float32_t angle_release = PI/adsr_settings.release_len;
 8004680:	4b57      	ldr	r3, [pc, #348]	; (80047e0 <adsr+0x2dc>)
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	ee07 3a90 	vmov	s15, r3
 8004688:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800468c:	eddf 6a59 	vldr	s13, [pc, #356]	; 80047f4 <adsr+0x2f0>
 8004690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004694:	edc7 7a02 	vstr	s15, [r7, #8]

	if(adsr_settings.am_mod == OFF && adsr_settings.fm_mod == OFF)
 8004698:	4b51      	ldr	r3, [pc, #324]	; (80047e0 <adsr+0x2dc>)
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d11c      	bne.n	80046dc <adsr+0x1d8>
 80046a2:	4b4f      	ldr	r3, [pc, #316]	; (80047e0 <adsr+0x2dc>)
 80046a4:	885b      	ldrh	r3, [r3, #2]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d117      	bne.n	80046dc <adsr+0x1d8>
	{
		for(i = start; i < end; i++)
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80046b0:	e010      	b.n	80046d4 <adsr+0x1d0>
		{
			buffer_adsr_am[i] = 0;
 80046b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046b4:	4a50      	ldr	r2, [pc, #320]	; (80047f8 <adsr+0x2f4>)
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
			buffer_adsr_fm[i] = 0;
 80046c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046c2:	4a4e      	ldr	r2, [pc, #312]	; (80047fc <adsr+0x2f8>)
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
	volatile float32_t angle_decay = PI/adsr_settings.decay_len;
	volatile float32_t angle_release = PI/adsr_settings.release_len;

	if(adsr_settings.am_mod == OFF && adsr_settings.fm_mod == OFF)
	{
		for(i = start; i < end; i++)
 80046ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046d0:	3301      	adds	r3, #1
 80046d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80046d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80046d6:	88bb      	ldrh	r3, [r7, #4]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d3ea      	bcc.n	80046b2 <adsr+0x1ae>
		}
	}

	// Generic ADSR envelope
	// The waveform contains 5 segments (asdr + a blank space)
	if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
 80046dc:	4b40      	ldr	r3, [pc, #256]	; (80047e0 <adsr+0x2dc>)
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d005      	beq.n	80046f2 <adsr+0x1ee>
 80046e6:	4b3e      	ldr	r3, [pc, #248]	; (80047e0 <adsr+0x2dc>)
 80046e8:	885b      	ldrh	r3, [r3, #2]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	f040 80f9 	bne.w	80048e4 <adsr+0x3e0>
	{
		for(i = start; i < end; i++)
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80046f6:	e0f0      	b.n	80048da <adsr+0x3d6>
		{
			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			if( (sample_count_adsr+(i-start))%samples_cycle_adsr < decay_start)
 80046f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	4b3f      	ldr	r3, [pc, #252]	; (8004800 <adsr+0x2fc>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4413      	add	r3, r2
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	fbb3 f1f2 	udiv	r1, r3, r2
 800470c:	fb02 f201 	mul.w	r2, r2, r1
 8004710:	1a9a      	subs	r2, r3, r2
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	429a      	cmp	r2, r3
 8004716:	d225      	bcs.n	8004764 <adsr+0x260>
			{
				// Attack
				// Sine, FM --> Try 1.0
				// Square, FM --> Use 0.4
				// Triangle, FM ---> Try 2.0
				buffer_adsr_am[i] = 1.0f + 1.0f * gen_sawtooth_angle( (sample_count_adsr+(i-start)) % samples_cycle_adsr * angle_attack);
 8004718:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 800471a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800471c:	88fb      	ldrh	r3, [r7, #6]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	461a      	mov	r2, r3
 8004722:	4b37      	ldr	r3, [pc, #220]	; (8004800 <adsr+0x2fc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4413      	add	r3, r2
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	fbb3 f1f2 	udiv	r1, r3, r2
 800472e:	fb02 f201 	mul.w	r2, r2, r1
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	ee07 3a90 	vmov	s15, r3
 8004738:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800473c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004744:	eeb0 0a67 	vmov.f32	s0, s15
 8004748:	f000 fa9c 	bl	8004c84 <gen_sawtooth_angle>
 800474c:	eeb0 7a40 	vmov.f32	s14, s0
 8004750:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004758:	4a27      	ldr	r2, [pc, #156]	; (80047f8 <adsr+0x2f4>)
 800475a:	00a3      	lsls	r3, r4, #2
 800475c:	4413      	add	r3, r2
 800475e:	edc3 7a00 	vstr	s15, [r3]
 8004762:	e0b7      	b.n	80048d4 <adsr+0x3d0>
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < sustain_start)
 8004764:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004766:	88fb      	ldrh	r3, [r7, #6]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	461a      	mov	r2, r3
 800476c:	4b24      	ldr	r3, [pc, #144]	; (8004800 <adsr+0x2fc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4413      	add	r3, r2
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	fbb3 f1f2 	udiv	r1, r3, r2
 8004778:	fb02 f201 	mul.w	r2, r2, r1
 800477c:	1a9a      	subs	r2, r3, r2
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	429a      	cmp	r2, r3
 8004782:	d23f      	bcs.n	8004804 <adsr+0x300>
			{
				// Decay
				buffer_adsr_am[i] = 1.0f * gen_rampdown_angle2( (sample_count_adsr+(i-start-decay_start)) % samples_cycle_adsr * angle_decay, adsr_settings.sustain_amp, 1.0);
 8004784:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8004786:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004788:	88fb      	ldrh	r3, [r7, #6]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	461a      	mov	r2, r3
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	1ad2      	subs	r2, r2, r3
 8004792:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <adsr+0x2fc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4413      	add	r3, r2
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	fbb3 f1f2 	udiv	r1, r3, r2
 800479e:	fb02 f201 	mul.w	r2, r2, r1
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	ee07 3a90 	vmov	s15, r3
 80047a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80047b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <adsr+0x2dc>)
 80047b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80047ba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80047be:	eef0 0a47 	vmov.f32	s1, s14
 80047c2:	eeb0 0a67 	vmov.f32	s0, s15
 80047c6:	f000 fafb 	bl	8004dc0 <gen_rampdown_angle2>
 80047ca:	eef0 7a40 	vmov.f32	s15, s0
 80047ce:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <adsr+0x2f4>)
 80047d0:	00a3      	lsls	r3, r4, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	edc3 7a00 	vstr	s15, [r3]
 80047d8:	e07c      	b.n	80048d4 <adsr+0x3d0>
 80047da:	bf00      	nop
 80047dc:	20005570 	.word	0x20005570
 80047e0:	2000559c 	.word	0x2000559c
 80047e4:	200044d4 	.word	0x200044d4
 80047e8:	20005594 	.word	0x20005594
 80047ec:	200034d4 	.word	0x200034d4
 80047f0:	45fa0000 	.word	0x45fa0000
 80047f4:	40490fdb 	.word	0x40490fdb
 80047f8:	200002c4 	.word	0x200002c4
 80047fc:	200003c4 	.word	0x200003c4
 8004800:	200004c4 	.word	0x200004c4
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < release_start)
 8004804:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	461a      	mov	r2, r3
 800480c:	4baf      	ldr	r3, [pc, #700]	; (8004acc <adsr+0x5c8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4413      	add	r3, r2
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	fbb3 f1f2 	udiv	r1, r3, r2
 8004818:	fb02 f201 	mul.w	r2, r2, r1
 800481c:	1a9a      	subs	r2, r3, r2
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	429a      	cmp	r2, r3
 8004822:	d207      	bcs.n	8004834 <adsr+0x330>
			{
				// Sustain
				buffer_adsr_am[i] = adsr_settings.sustain_amp;
 8004824:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004826:	4aaa      	ldr	r2, [pc, #680]	; (8004ad0 <adsr+0x5cc>)
 8004828:	6852      	ldr	r2, [r2, #4]
 800482a:	49aa      	ldr	r1, [pc, #680]	; (8004ad4 <adsr+0x5d0>)
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e04f      	b.n	80048d4 <adsr+0x3d0>
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_start)
 8004834:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004836:	88fb      	ldrh	r3, [r7, #6]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	461a      	mov	r2, r3
 800483c:	4ba3      	ldr	r3, [pc, #652]	; (8004acc <adsr+0x5c8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4413      	add	r3, r2
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	fbb3 f1f2 	udiv	r1, r3, r2
 8004848:	fb02 f201 	mul.w	r2, r2, r1
 800484c:	1a9a      	subs	r2, r3, r2
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	429a      	cmp	r2, r3
 8004852:	d228      	bcs.n	80048a6 <adsr+0x3a2>
			{
				// Release
				buffer_adsr_am[i] = adsr_settings.sustain_amp * gen_rampdown_angle( (sample_count_adsr+(i-start-release_start)) % samples_cycle_adsr * angle_release);
 8004854:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8004856:	4b9e      	ldr	r3, [pc, #632]	; (8004ad0 <adsr+0x5cc>)
 8004858:	ed93 8a01 	vldr	s16, [r3, #4]
 800485c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	461a      	mov	r2, r3
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	1ad2      	subs	r2, r2, r3
 8004868:	4b98      	ldr	r3, [pc, #608]	; (8004acc <adsr+0x5c8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4413      	add	r3, r2
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	fbb3 f1f2 	udiv	r1, r3, r2
 8004874:	fb02 f201 	mul.w	r2, r2, r1
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004882:	edd7 7a02 	vldr	s15, [r7, #8]
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	eeb0 0a67 	vmov.f32	s0, s15
 800488e:	f000 fa67 	bl	8004d60 <gen_rampdown_angle>
 8004892:	eef0 7a40 	vmov.f32	s15, s0
 8004896:	ee68 7a27 	vmul.f32	s15, s16, s15
 800489a:	4a8e      	ldr	r2, [pc, #568]	; (8004ad4 <adsr+0x5d0>)
 800489c:	00a3      	lsls	r3, r4, #2
 800489e:	4413      	add	r3, r2
 80048a0:	edc3 7a00 	vstr	s15, [r3]
 80048a4:	e016      	b.n	80048d4 <adsr+0x3d0>

			}
			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_end)
 80048a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	4b87      	ldr	r3, [pc, #540]	; (8004acc <adsr+0x5c8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4413      	add	r3, r2
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80048ba:	fb02 f201 	mul.w	r2, r2, r1
 80048be:	1a9a      	subs	r2, r3, r2
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d206      	bcs.n	80048d4 <adsr+0x3d0>
			{
				// Blank
				buffer_adsr_am[i] = 0;
 80048c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048c8:	4a82      	ldr	r2, [pc, #520]	; (8004ad4 <adsr+0x5d0>)
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]

	// Generic ADSR envelope
	// The waveform contains 5 segments (asdr + a blank space)
	if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
	{
		for(i = start; i < end; i++)
 80048d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048d6:	3301      	adds	r3, #1
 80048d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048dc:	88bb      	ldrh	r3, [r7, #4]
 80048de:	429a      	cmp	r2, r3
 80048e0:	f4ff af0a 	bcc.w	80046f8 <adsr+0x1f4>

	/*
	 * ADSR frequency envelope.
	 * Uses the ADSR amplitude envelope and integrates each of the shapes.
	 */
	if(adsr_settings.fm_mod == ON)
 80048e4:	4b7a      	ldr	r3, [pc, #488]	; (8004ad0 <adsr+0x5cc>)
 80048e6:	885b      	ldrh	r3, [r3, #2]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	f040 8181 	bne.w	8004bf2 <adsr+0x6ee>
	{
		for(i = start; i < end; i++)
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048f4:	e178      	b.n	8004be8 <adsr+0x6e4>
		{
			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			if( (sample_count_adsr+(i-start))%samples_cycle_adsr < decay_start)
 80048f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048f8:	88fb      	ldrh	r3, [r7, #6]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	4b73      	ldr	r3, [pc, #460]	; (8004acc <adsr+0x5c8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4413      	add	r3, r2
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	fbb3 f1f2 	udiv	r1, r3, r2
 800490a:	fb02 f201 	mul.w	r2, r2, r1
 800490e:	1a9a      	subs	r2, r3, r2
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	429a      	cmp	r2, r3
 8004914:	d234      	bcs.n	8004980 <adsr+0x47c>
			{
				// Attack
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8004916:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004918:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800491a:	496e      	ldr	r1, [pc, #440]	; (8004ad4 <adsr+0x5d0>)
 800491c:	0092      	lsls	r2, r2, #2
 800491e:	440a      	add	r2, r1
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	496d      	ldr	r1, [pc, #436]	; (8004ad8 <adsr+0x5d4>)
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	601a      	str	r2, [r3, #0]
				if(i > 0)
 800492a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800492c:	2b00      	cmp	r3, #0
 800492e:	d015      	beq.n	800495c <adsr+0x458>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 8004930:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004932:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004934:	4968      	ldr	r1, [pc, #416]	; (8004ad8 <adsr+0x5d4>)
 8004936:	0092      	lsls	r2, r2, #2
 8004938:	440a      	add	r2, r1
 800493a:	ed92 7a00 	vldr	s14, [r2]
 800493e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004940:	3a01      	subs	r2, #1
 8004942:	4965      	ldr	r1, [pc, #404]	; (8004ad8 <adsr+0x5d4>)
 8004944:	0092      	lsls	r2, r2, #2
 8004946:	440a      	add	r2, r1
 8004948:	edd2 7a00 	vldr	s15, [r2]
 800494c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004950:	4a61      	ldr	r2, [pc, #388]	; (8004ad8 <adsr+0x5d4>)
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	edc3 7a00 	vstr	s15, [r3]
 800495a:	e142      	b.n	8004be2 <adsr+0x6de>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 800495c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800495e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004960:	495d      	ldr	r1, [pc, #372]	; (8004ad8 <adsr+0x5d4>)
 8004962:	0092      	lsls	r2, r2, #2
 8004964:	440a      	add	r2, r1
 8004966:	ed92 7a00 	vldr	s14, [r2]
 800496a:	4a5b      	ldr	r2, [pc, #364]	; (8004ad8 <adsr+0x5d4>)
 800496c:	edd2 7a3f 	vldr	s15, [r2, #252]	; 0xfc
 8004970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004974:	4a58      	ldr	r2, [pc, #352]	; (8004ad8 <adsr+0x5d4>)
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	edc3 7a00 	vstr	s15, [r3]
 800497e:	e130      	b.n	8004be2 <adsr+0x6de>
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < sustain_start)
 8004980:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	461a      	mov	r2, r3
 8004988:	4b50      	ldr	r3, [pc, #320]	; (8004acc <adsr+0x5c8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4413      	add	r3, r2
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	fbb3 f1f2 	udiv	r1, r3, r2
 8004994:	fb02 f201 	mul.w	r2, r2, r1
 8004998:	1a9a      	subs	r2, r3, r2
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	429a      	cmp	r2, r3
 800499e:	d234      	bcs.n	8004a0a <adsr+0x506>
			{
				// Decay
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 80049a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80049a4:	494b      	ldr	r1, [pc, #300]	; (8004ad4 <adsr+0x5d0>)
 80049a6:	0092      	lsls	r2, r2, #2
 80049a8:	440a      	add	r2, r1
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	494a      	ldr	r1, [pc, #296]	; (8004ad8 <adsr+0x5d4>)
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	601a      	str	r2, [r3, #0]
				if(i > 0)
 80049b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d015      	beq.n	80049e6 <adsr+0x4e2>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 80049ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80049be:	4946      	ldr	r1, [pc, #280]	; (8004ad8 <adsr+0x5d4>)
 80049c0:	0092      	lsls	r2, r2, #2
 80049c2:	440a      	add	r2, r1
 80049c4:	ed92 7a00 	vldr	s14, [r2]
 80049c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80049ca:	3a01      	subs	r2, #1
 80049cc:	4942      	ldr	r1, [pc, #264]	; (8004ad8 <adsr+0x5d4>)
 80049ce:	0092      	lsls	r2, r2, #2
 80049d0:	440a      	add	r2, r1
 80049d2:	edd2 7a00 	vldr	s15, [r2]
 80049d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049da:	4a3f      	ldr	r2, [pc, #252]	; (8004ad8 <adsr+0x5d4>)
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	edc3 7a00 	vstr	s15, [r3]
 80049e4:	e0fd      	b.n	8004be2 <adsr+0x6de>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 80049e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80049ea:	493b      	ldr	r1, [pc, #236]	; (8004ad8 <adsr+0x5d4>)
 80049ec:	0092      	lsls	r2, r2, #2
 80049ee:	440a      	add	r2, r1
 80049f0:	ed92 7a00 	vldr	s14, [r2]
 80049f4:	4a38      	ldr	r2, [pc, #224]	; (8004ad8 <adsr+0x5d4>)
 80049f6:	edd2 7a3f 	vldr	s15, [r2, #252]	; 0xfc
 80049fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049fe:	4a36      	ldr	r2, [pc, #216]	; (8004ad8 <adsr+0x5d4>)
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	edc3 7a00 	vstr	s15, [r3]
 8004a08:	e0eb      	b.n	8004be2 <adsr+0x6de>
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < release_start)
 8004a0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	4b2e      	ldr	r3, [pc, #184]	; (8004acc <adsr+0x5c8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4413      	add	r3, r2
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a1e:	fb02 f201 	mul.w	r2, r2, r1
 8004a22:	1a9a      	subs	r2, r3, r2
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d27f      	bcs.n	8004b2a <adsr+0x626>
			{
				// Sustain
				// DO this only once--get last delta from previous section.
				if( (sample_count_adsr+(i-start))%samples_cycle_adsr == sustain_start)
 8004a2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b26      	ldr	r3, [pc, #152]	; (8004acc <adsr+0x5c8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4413      	add	r3, r2
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a3e:	fb02 f201 	mul.w	r2, r2, r1
 8004a42:	1a9a      	subs	r2, r3, r2
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d14a      	bne.n	8004ae0 <adsr+0x5dc>
				{
					if(i > 1)
 8004a4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d913      	bls.n	8004a78 <adsr+0x574>
					{
						delta = buffer_adsr_fm[i-1] - buffer_adsr_fm[i-2];
 8004a50:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a52:	3b01      	subs	r3, #1
 8004a54:	4a20      	ldr	r2, [pc, #128]	; (8004ad8 <adsr+0x5d4>)
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	ed93 7a00 	vldr	s14, [r3]
 8004a5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a60:	3b02      	subs	r3, #2
 8004a62:	4a1d      	ldr	r2, [pc, #116]	; (8004ad8 <adsr+0x5d4>)
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	edd3 7a00 	vldr	s15, [r3]
 8004a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a70:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <adsr+0x5d8>)
 8004a72:	edc3 7a00 	vstr	s15, [r3]
 8004a76:	e020      	b.n	8004aba <adsr+0x5b6>
					}
					else if(i == 0)
 8004a78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10b      	bne.n	8004a96 <adsr+0x592>
					{
						delta = buffer_adsr_fm[LENGTH_BUFFER-1] - buffer_adsr_fm[LENGTH_BUFFER-2];
 8004a7e:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <adsr+0x5d4>)
 8004a80:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 8004a84:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <adsr+0x5d4>)
 8004a86:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8004a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <adsr+0x5d8>)
 8004a90:	edc3 7a00 	vstr	s15, [r3]
 8004a94:	e011      	b.n	8004aba <adsr+0x5b6>
					}
					else if(i == 1)
 8004a96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d10e      	bne.n	8004aba <adsr+0x5b6>
					{
						delta = buffer_adsr_fm[i-1] - buffer_adsr_fm[LENGTH_BUFFER-1];
 8004a9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	4a0d      	ldr	r2, [pc, #52]	; (8004ad8 <adsr+0x5d4>)
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	ed93 7a00 	vldr	s14, [r3]
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <adsr+0x5d4>)
 8004aac:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8004ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ab4:	4b09      	ldr	r3, [pc, #36]	; (8004adc <adsr+0x5d8>)
 8004ab6:	edc3 7a00 	vstr	s15, [r3]
					}
					buffer_adsr_fm[i] = 0.0f;
 8004aba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004abc:	4a06      	ldr	r2, [pc, #24]	; (8004ad8 <adsr+0x5d4>)
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e08b      	b.n	8004be2 <adsr+0x6de>
 8004aca:	bf00      	nop
 8004acc:	200004c4 	.word	0x200004c4
 8004ad0:	2000559c 	.word	0x2000559c
 8004ad4:	200002c4 	.word	0x200002c4
 8004ad8:	200003c4 	.word	0x200003c4
 8004adc:	200054dc 	.word	0x200054dc
				}
				else
				{
					if(i > 0)
 8004ae0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d012      	beq.n	8004b0c <adsr+0x608>
					{
						buffer_adsr_fm[i] = buffer_adsr_fm[i-1] + delta;
 8004ae6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ae8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004aea:	3a01      	subs	r2, #1
 8004aec:	494d      	ldr	r1, [pc, #308]	; (8004c24 <adsr+0x720>)
 8004aee:	0092      	lsls	r2, r2, #2
 8004af0:	440a      	add	r2, r1
 8004af2:	ed92 7a00 	vldr	s14, [r2]
 8004af6:	4a4c      	ldr	r2, [pc, #304]	; (8004c28 <adsr+0x724>)
 8004af8:	edd2 7a00 	vldr	s15, [r2]
 8004afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b00:	4a48      	ldr	r2, [pc, #288]	; (8004c24 <adsr+0x720>)
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	edc3 7a00 	vstr	s15, [r3]
 8004b0a:	e06a      	b.n	8004be2 <adsr+0x6de>
					}
					else
					{
						buffer_adsr_fm[i] = buffer_adsr_fm[LENGTH_BUFFER-1] + delta;
 8004b0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b0e:	4a45      	ldr	r2, [pc, #276]	; (8004c24 <adsr+0x720>)
 8004b10:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 8004b14:	4a44      	ldr	r2, [pc, #272]	; (8004c28 <adsr+0x724>)
 8004b16:	edd2 7a00 	vldr	s15, [r2]
 8004b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b1e:	4a41      	ldr	r2, [pc, #260]	; (8004c24 <adsr+0x720>)
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	edc3 7a00 	vstr	s15, [r3]
 8004b28:	e05b      	b.n	8004be2 <adsr+0x6de>
					}
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_start)
 8004b2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b2c:	88fb      	ldrh	r3, [r7, #6]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	4b3e      	ldr	r3, [pc, #248]	; (8004c2c <adsr+0x728>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4413      	add	r3, r2
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b3e:	fb02 f201 	mul.w	r2, r2, r1
 8004b42:	1a9a      	subs	r2, r3, r2
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d234      	bcs.n	8004bb4 <adsr+0x6b0>
			{
				// Release
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8004b4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b4e:	4938      	ldr	r1, [pc, #224]	; (8004c30 <adsr+0x72c>)
 8004b50:	0092      	lsls	r2, r2, #2
 8004b52:	440a      	add	r2, r1
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	4933      	ldr	r1, [pc, #204]	; (8004c24 <adsr+0x720>)
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	601a      	str	r2, [r3, #0]
				if(i > 0)
 8004b5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d015      	beq.n	8004b90 <adsr+0x68c>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 8004b64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b68:	492e      	ldr	r1, [pc, #184]	; (8004c24 <adsr+0x720>)
 8004b6a:	0092      	lsls	r2, r2, #2
 8004b6c:	440a      	add	r2, r1
 8004b6e:	ed92 7a00 	vldr	s14, [r2]
 8004b72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b74:	3a01      	subs	r2, #1
 8004b76:	492b      	ldr	r1, [pc, #172]	; (8004c24 <adsr+0x720>)
 8004b78:	0092      	lsls	r2, r2, #2
 8004b7a:	440a      	add	r2, r1
 8004b7c:	edd2 7a00 	vldr	s15, [r2]
 8004b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b84:	4a27      	ldr	r2, [pc, #156]	; (8004c24 <adsr+0x720>)
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	edc3 7a00 	vstr	s15, [r3]
 8004b8e:	e028      	b.n	8004be2 <adsr+0x6de>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 8004b90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b94:	4923      	ldr	r1, [pc, #140]	; (8004c24 <adsr+0x720>)
 8004b96:	0092      	lsls	r2, r2, #2
 8004b98:	440a      	add	r2, r1
 8004b9a:	ed92 7a00 	vldr	s14, [r2]
 8004b9e:	4a21      	ldr	r2, [pc, #132]	; (8004c24 <adsr+0x720>)
 8004ba0:	edd2 7a3f 	vldr	s15, [r2, #252]	; 0xfc
 8004ba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ba8:	4a1e      	ldr	r2, [pc, #120]	; (8004c24 <adsr+0x720>)
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	edc3 7a00 	vstr	s15, [r3]
 8004bb2:	e016      	b.n	8004be2 <adsr+0x6de>
				}
			}
			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_end)
 8004bb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004bb6:	88fb      	ldrh	r3, [r7, #6]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <adsr+0x728>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bc8:	fb02 f201 	mul.w	r2, r2, r1
 8004bcc:	1a9a      	subs	r2, r3, r2
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d206      	bcs.n	8004be2 <adsr+0x6de>
			{
				// Blank
				buffer_adsr_fm[i] = 0.0f;
 8004bd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bd6:	4a13      	ldr	r2, [pc, #76]	; (8004c24 <adsr+0x720>)
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
	 * ADSR frequency envelope.
	 * Uses the ADSR amplitude envelope and integrates each of the shapes.
	 */
	if(adsr_settings.fm_mod == ON)
	{
		for(i = start; i < end; i++)
 8004be2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004be4:	3301      	adds	r3, #1
 8004be6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004be8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004bea:	88bb      	ldrh	r3, [r7, #4]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	f4ff ae82 	bcc.w	80048f6 <adsr+0x3f2>
				// Blank
				buffer_adsr_fm[i] = 0.0f;
			}
		}
	}
	sample_count_adsr = sample_count_adsr + (i - start);
 8004bf2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <adsr+0x728>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4413      	add	r3, r2
 8004c00:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <adsr+0x728>)
 8004c02:	6013      	str	r3, [r2, #0]
	sample_count_adsr = sample_count_adsr % samples_cycle_adsr;
 8004c04:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <adsr+0x728>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c0e:	fb02 f201 	mul.w	r2, r2, r1
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	4a05      	ldr	r2, [pc, #20]	; (8004c2c <adsr+0x728>)
 8004c16:	6013      	str	r3, [r2, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	3734      	adds	r7, #52	; 0x34
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	ecbd 8b02 	vpop	{d8}
 8004c22:	bd90      	pop	{r4, r7, pc}
 8004c24:	200003c4 	.word	0x200003c4
 8004c28:	200054dc 	.word	0x200054dc
 8004c2c:	200004c4 	.word	0x200004c4
 8004c30:	200002c4 	.word	0x200002c4

08004c34 <gen_square_angle>:

/* Parameters:
 * 	angle: normalized angle between 0 and 2*PI.  Similar to sine function.
 */
float32_t gen_square_angle(float32_t angle)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	ed87 0a01 	vstr	s0, [r7, #4]
	angle = fast_fmod(angle, 2*PI);
 8004c3e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8004c78 <gen_square_angle+0x44>
 8004c42:	ed97 0a01 	vldr	s0, [r7, #4]
 8004c46:	f000 f9cf 	bl	8004fe8 <fast_fmod>
 8004c4a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (angle < PI)
 8004c4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c52:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004c7c <gen_square_angle+0x48>
 8004c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5e:	d501      	bpl.n	8004c64 <gen_square_angle+0x30>
	{
		return -1;
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <gen_square_angle+0x4c>)
 8004c62:	e001      	b.n	8004c68 <gen_square_angle+0x34>
	}
	return 1;
 8004c64:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004c68:	ee07 3a90 	vmov	s15, r3
}
 8004c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40c90fdb 	.word	0x40c90fdb
 8004c7c:	40490fdb 	.word	0x40490fdb
 8004c80:	bf800000 	.word	0xbf800000

08004c84 <gen_sawtooth_angle>:


float32_t gen_sawtooth_angle(float32_t angle)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0f;
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
	float32_t val = 0.0f;
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8004c9a:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8004cd8 <gen_sawtooth_angle+0x54>
 8004c9e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004ca2:	f000 f9a1 	bl	8004fe8 <fast_fmod>
 8004ca6:	ed87 0a01 	vstr	s0, [r7, #4]

	// y = mx + b
	m = ONE_DIV_PI;
 8004caa:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <gen_sawtooth_angle+0x58>)
 8004cac:	60fb      	str	r3, [r7, #12]
	val = -1+angle*m;
 8004cae:	ed97 7a01 	vldr	s14, [r7, #4]
 8004cb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cc2:	edc7 7a02 	vstr	s15, [r7, #8]
	return val;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	ee07 3a90 	vmov	s15, r3
}
 8004ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40c90fdb 	.word	0x40c90fdb
 8004cdc:	3ea2f983 	.word	0x3ea2f983

08004ce0 <gen_sawtooth_integral_angle>:


float32_t gen_sawtooth_integral_angle(float32_t angle)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0f;
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0f;
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8004cf6:	eddf 0a18 	vldr	s1, [pc, #96]	; 8004d58 <gen_sawtooth_integral_angle+0x78>
 8004cfa:	ed97 0a01 	vldr	s0, [r7, #4]
 8004cfe:	f000 f973 	bl	8004fe8 <fast_fmod>
 8004d02:	ed87 0a01 	vstr	s0, [r7, #4]
	m = ONE_DIV_2_PI;
 8004d06:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <gen_sawtooth_integral_angle+0x7c>)
 8004d08:	60bb      	str	r3, [r7, #8]
	val = m*angle;			// Generate linear value between 0 and 1
 8004d0a:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d16:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*val;			// Square it.  Produces parabola y: 0 to 1
 8004d1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d26:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*2.0f;			// Double it.
 8004d2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d32:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val - 1.0f;			// Shift it down
 8004d36:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d42:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	ee07 3a90 	vmov	s15, r3
}
 8004d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40c90fdb 	.word	0x40c90fdb
 8004d5c:	3e22f983 	.word	0x3e22f983

08004d60 <gen_rampdown_angle>:
/*
 * Generate ramp value from +1 down to 0 based on angle.
 * Parameter angle is a radian.
 */
float32_t gen_rampdown_angle(float32_t angle)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0f;
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
	float32_t val = 0.0f;
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8004d76:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8004db4 <gen_rampdown_angle+0x54>
 8004d7a:	ed97 0a01 	vldr	s0, [r7, #4]
 8004d7e:	f000 f933 	bl	8004fe8 <fast_fmod>
 8004d82:	ed87 0a01 	vstr	s0, [r7, #4]

	// y = mx + b
	m = -ONE_DIV_PI;
 8004d86:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <gen_rampdown_angle+0x58>)
 8004d88:	60fb      	str	r3, [r7, #12]
	val = 1.0f + angle*m;
 8004d8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d9e:	edc7 7a02 	vstr	s15, [r7, #8]
	return val;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	ee07 3a90 	vmov	s15, r3
}
 8004da8:	eeb0 0a67 	vmov.f32	s0, s15
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40c90fdb 	.word	0x40c90fdb
 8004db8:	bea2f983 	.word	0xbea2f983
 8004dbc:	00000000 	.word	0x00000000

08004dc0 <gen_rampdown_angle2>:


float32_t gen_rampdown_angle2( float32_t angle, float32_t min, float32_t max)
{
 8004dc0:	b590      	push	{r4, r7, lr}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	ed87 0a03 	vstr	s0, [r7, #12]
 8004dca:	edc7 0a02 	vstr	s1, [r7, #8]
 8004dce:	ed87 1a01 	vstr	s2, [r7, #4]
	float32_t m = 0.0f;
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
	float32_t val = 0.0f;
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	613b      	str	r3, [r7, #16]

	angle = fast_fmod(angle, TWO_PI);
 8004dde:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8004e50 <gen_rampdown_angle2+0x90>
 8004de2:	ed97 0a03 	vldr	s0, [r7, #12]
 8004de6:	f000 f8ff 	bl	8004fe8 <fast_fmod>
 8004dea:	ed87 0a03 	vstr	s0, [r7, #12]

	// y = mx + b
	m = (min - max) * ONE_DIV_PI;
 8004dee:	ed97 7a02 	vldr	s14, [r7, #8]
 8004df2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dfa:	ee17 0a90 	vmov	r0, s15
 8004dfe:	f7fb fb47 	bl	8000490 <__aeabi_f2d>
 8004e02:	a311      	add	r3, pc, #68	; (adr r3, 8004e48 <gen_rampdown_angle2+0x88>)
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f7fb fb96 	bl	8000538 <__aeabi_dmul>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	460c      	mov	r4, r1
 8004e10:	4618      	mov	r0, r3
 8004e12:	4621      	mov	r1, r4
 8004e14:	f7fb fda2 	bl	800095c <__aeabi_d2f>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	617b      	str	r3, [r7, #20]
	val = 1.0 + angle*m;
 8004e1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e20:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e30:	edc7 7a04 	vstr	s15, [r7, #16]


	return val;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	ee07 3a90 	vmov	s15, r3
}
 8004e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd90      	pop	{r4, r7, pc}
 8004e44:	f3af 8000 	nop.w
 8004e48:	6dc8bdc4 	.word	0x6dc8bdc4
 8004e4c:	3fd45f30 	.word	0x3fd45f30
 8004e50:	40c90fdb 	.word	0x40c90fdb

08004e54 <gen_triangle_angle>:


float32_t gen_triangle_angle(float32_t angle)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0f;
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0f;
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	60bb      	str	r3, [r7, #8]

	// Increase from a negative value to its opposite value. Eg. -1 to 1 over 1/2 the wave's period
	// Then decrease from 1 to -1 over 1/2 the wave's period

	angle = fast_fmod(angle, 2*PI);
 8004e6a:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8004ed4 <gen_triangle_angle+0x80>
 8004e6e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004e72:	f000 f8b9 	bl	8004fe8 <fast_fmod>
 8004e76:	ed87 0a01 	vstr	s0, [r7, #4]
	m = TWO_DIV_PI;
 8004e7a:	4b17      	ldr	r3, [pc, #92]	; (8004ed8 <gen_triangle_angle+0x84>)
 8004e7c:	60bb      	str	r3, [r7, #8]
	if (angle < PI)
 8004e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e82:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004edc <gen_triangle_angle+0x88>
 8004e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8e:	d50d      	bpl.n	8004eac <gen_triangle_angle+0x58>
	{
		val = -1 + m*angle;
 8004e90:	ed97 7a02 	vldr	s14, [r7, #8]
 8004e94:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ea0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ea4:	edc7 7a03 	vstr	s15, [r7, #12]
		return val;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	e00c      	b.n	8004ec6 <gen_triangle_angle+0x72>
	}
	// Make sure difference can be negative.
	// return amp + (m * (int32_t)(samples_half_cycle - current_sample));
	val =  3.0f - m*angle;
 8004eac:	ed97 7a02 	vldr	s14, [r7, #8]
 8004eb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ec0:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	ee07 3a90 	vmov	s15, r3
}
 8004eca:	eeb0 0a67 	vmov.f32	s0, s15
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40c90fdb 	.word	0x40c90fdb
 8004ed8:	3f22f983 	.word	0x3f22f983
 8004edc:	40490fdb 	.word	0x40490fdb

08004ee0 <gen_triangle_integral_angle>:

// Integral of triangle wave is convex parabola going up and then concave parabola going down.
float32_t gen_triangle_integral_angle(float32_t angle)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0f;
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0f;
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, 2*PI);		// TODO: pull this out into generate_waveforms().
 8004ef6:	eddf 0a39 	vldr	s1, [pc, #228]	; 8004fdc <gen_triangle_integral_angle+0xfc>
 8004efa:	ed97 0a01 	vldr	s0, [r7, #4]
 8004efe:	f000 f873 	bl	8004fe8 <fast_fmod>
 8004f02:	ed87 0a01 	vstr	s0, [r7, #4]
	m = ONE_DIV_PI;
 8004f06:	4b36      	ldr	r3, [pc, #216]	; (8004fe0 <gen_triangle_integral_angle+0x100>)
 8004f08:	60bb      	str	r3, [r7, #8]
	if (angle < PI)
 8004f0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f0e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004fe4 <gen_triangle_integral_angle+0x104>
 8004f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1a:	d528      	bpl.n	8004f6e <gen_triangle_integral_angle+0x8e>

	if(angle < PI)
 8004f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f20:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004fe4 <gen_triangle_integral_angle+0x104>
 8004f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2c:	d51f      	bpl.n	8004f6e <gen_triangle_integral_angle+0x8e>
	{
		val = m*angle;			// Generate linear value between 0 and 1
 8004f2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f32:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3a:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val*val;			// Square it.  Produces parabola y: 0 to 1
 8004f3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f42:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4a:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val*2;			// Double it.
 8004f4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004f56:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val - 1.0f;			// Shift it down
 8004f5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f66:	edc7 7a03 	vstr	s15, [r7, #12]
		return val;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	e02e      	b.n	8004fcc <gen_triangle_integral_angle+0xec>
	}

	angle = angle - PI;
 8004f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f72:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004fe4 <gen_triangle_integral_angle+0x104>
 8004f76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f7a:	edc7 7a01 	vstr	s15, [r7, #4]
	val = m*angle;			// Generate linear value between 0 and 1
 8004f7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f82:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f8a:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*val;			// Square it.  Produces parabola y: 0 to 1
 8004f8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f92:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9a:	edc7 7a03 	vstr	s15, [r7, #12]
	val = 1.0f - val;			// Turn it upside down
 8004f9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004faa:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*2.0f;			// Double it
 8004fae:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004fb6:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val - 1.0f;			// Shift it down
 8004fba:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004fc6:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	ee07 3a90 	vmov	s15, r3
}
 8004fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40c90fdb 	.word	0x40c90fdb
 8004fe0:	3ea2f983 	.word	0x3ea2f983
 8004fe4:	40490fdb 	.word	0x40490fdb

08004fe8 <fast_fmod>:
 * Modified it to work with float32_t.
 * NOTE: Possible alternative found here: https://stackoverflow.com/questions/26342823/implementation-of-fmod-function
 * 	return (a - b * floor(a / b));
 */
float32_t fast_fmod(float32_t x,float32_t y)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	ed87 0a01 	vstr	s0, [r7, #4]
 8004ff2:	edc7 0a00 	vstr	s1, [r7]
	float32_t a;
	return ( (a = x/y ) - (uint32_t)a ) * y;
 8004ff6:	edd7 6a01 	vldr	s13, [r7, #4]
 8004ffa:	ed97 7a00 	vldr	s14, [r7]
 8004ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005002:	edc7 7a03 	vstr	s15, [r7, #12]
 8005006:	edd7 7a03 	vldr	s15, [r7, #12]
 800500a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800500e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005012:	ed97 7a03 	vldr	s14, [r7, #12]
 8005016:	ee37 7a67 	vsub.f32	s14, s14, s15
 800501a:	edd7 7a00 	vldr	s15, [r7]
 800501e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8005022:	eeb0 0a67 	vmov.f32	s0, s15
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <moving_avg>:

/*
 * Found here: https://gist.github.com/bmccormack/d12f4bf0c96423d03f82
 */
uint32_t moving_avg(uint32_t *ptrArrNumbers, uint32_t *ptrSum, uint32_t pos, uint32_t len, uint16_t nextNum)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
  //Subtract the oldest number from the prev sum, add the new number
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	68f9      	ldr	r1, [r7, #12]
 8005048:	440b      	add	r3, r1
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	1ad2      	subs	r2, r2, r3
 800504e:	8b3b      	ldrh	r3, [r7, #24]
 8005050:	441a      	add	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	601a      	str	r2, [r3, #0]
  //Assign the nextNum to the position in the array
  ptrArrNumbers[pos] = nextNum;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	8b3a      	ldrh	r2, [r7, #24]
 8005060:	601a      	str	r2, [r3, #0]
  //return the average
  return (uint32_t) *ptrSum / len;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <pseudo_log>:
/*
 * Make adc values seems as though they came from a log-taper potentiometer.
 */
// TODO: use int as input instead ... otherwise difficult to compare taper cutoff.
uint16_t pseudo_log(uint16_t x)
{
 8005078:	b480      	push	{r7}
 800507a:	b089      	sub	sp, #36	; 0x24
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	80fb      	strh	r3, [r7, #6]
	float32_t y1 = 0.0f;
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	61fb      	str	r3, [r7, #28]
	float32_t y2 = 0.0f;
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	61bb      	str	r3, [r7, #24]
	const uint16_t max = 4095;
 800508e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005092:	82fb      	strh	r3, [r7, #22]
	const uint16_t xe = 3500;
 8005094:	f640 53ac 	movw	r3, #3500	; 0xdac
 8005098:	82bb      	strh	r3, [r7, #20]
	const float32_t m1 = 0.1f;
 800509a:	4b3a      	ldr	r3, [pc, #232]	; (8005184 <pseudo_log+0x10c>)
 800509c:	613b      	str	r3, [r7, #16]
	uint16_t ye = m1*xe;
 800509e:	8abb      	ldrh	r3, [r7, #20]
 80050a0:	ee07 3a90 	vmov	s15, r3
 80050a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80050ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b4:	edc7 7a00 	vstr	s15, [r7]
 80050b8:	883b      	ldrh	r3, [r7, #0]
 80050ba:	81fb      	strh	r3, [r7, #14]
	uint16_t m2 = (float32_t) (max - ye)/(max - xe);
 80050bc:	8afa      	ldrh	r2, [r7, #22]
 80050be:	89fb      	ldrh	r3, [r7, #14]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80050ca:	8afa      	ldrh	r2, [r7, #22]
 80050cc:	8abb      	ldrh	r3, [r7, #20]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	ee07 3a90 	vmov	s15, r3
 80050d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e0:	edc7 7a00 	vstr	s15, [r7]
 80050e4:	883b      	ldrh	r3, [r7, #0]
 80050e6:	81bb      	strh	r3, [r7, #12]

	float32_t b = 0.0f;
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	60bb      	str	r3, [r7, #8]

	y1 = (uint16_t) ((float32_t) m1 * x);
 80050ee:	88fb      	ldrh	r3, [r7, #6]
 80050f0:	ee07 3a90 	vmov	s15, r3
 80050f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80050fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005104:	edc7 7a00 	vstr	s15, [r7]
 8005108:	883b      	ldrh	r3, [r7, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	ee07 3a90 	vmov	s15, r3
 8005110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005114:	edc7 7a07 	vstr	s15, [r7, #28]

	// Gradual taper.
	if(x < xe)
 8005118:	88fa      	ldrh	r2, [r7, #6]
 800511a:	8abb      	ldrh	r3, [r7, #20]
 800511c:	429a      	cmp	r2, r3
 800511e:	d208      	bcs.n	8005132 <pseudo_log+0xba>
	{
		return (uint16_t) y1;
 8005120:	edd7 7a07 	vldr	s15, [r7, #28]
 8005124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005128:	edc7 7a00 	vstr	s15, [r7]
 800512c:	883b      	ldrh	r3, [r7, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	e021      	b.n	8005176 <pseudo_log+0xfe>
	}

	// Fast taper.
	b = ye - m2*xe;
 8005132:	89fa      	ldrh	r2, [r7, #14]
 8005134:	89bb      	ldrh	r3, [r7, #12]
 8005136:	8ab9      	ldrh	r1, [r7, #20]
 8005138:	fb01 f303 	mul.w	r3, r1, r3
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005146:	edc7 7a02 	vstr	s15, [r7, #8]
	y2 = m2*x + b;		// y = mx+b
 800514a:	89bb      	ldrh	r3, [r7, #12]
 800514c:	88fa      	ldrh	r2, [r7, #6]
 800514e:	fb02 f303 	mul.w	r3, r2, r3
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800515a:	edd7 7a02 	vldr	s15, [r7, #8]
 800515e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005162:	edc7 7a06 	vstr	s15, [r7, #24]

	return (uint16_t) y2;
 8005166:	edd7 7a06 	vldr	s15, [r7, #24]
 800516a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800516e:	edc7 7a00 	vstr	s15, [r7]
 8005172:	883b      	ldrh	r3, [r7, #0]
 8005174:	b29b      	uxth	r3, r3
}
 8005176:	4618      	mov	r0, r3
 8005178:	3724      	adds	r7, #36	; 0x24
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	3dcccccd 	.word	0x3dcccccd

08005188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800518c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800518e:	e003      	b.n	8005198 <LoopCopyDataInit>

08005190 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005190:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005192:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005194:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005196:	3104      	adds	r1, #4

08005198 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005198:	480b      	ldr	r0, [pc, #44]	; (80051c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800519a:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800519c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800519e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80051a0:	d3f6      	bcc.n	8005190 <CopyDataInit>
  ldr  r2, =_sbss
 80051a2:	4a0b      	ldr	r2, [pc, #44]	; (80051d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80051a4:	e002      	b.n	80051ac <LoopFillZerobss>

080051a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80051a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80051a8:	f842 3b04 	str.w	r3, [r2], #4

080051ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80051ac:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80051ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80051b0:	d3f9      	bcc.n	80051a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80051b2:	f000 f929 	bl	8005408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051b6:	f000 fabb 	bl	8005730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051ba:	f7fe f9af 	bl	800351c <main>
  bx  lr    
 80051be:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80051c0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80051c4:	08005fa8 	.word	0x08005fa8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80051c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80051cc:	200000a0 	.word	0x200000a0
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80051d0:	200000a0 	.word	0x200000a0
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80051d4:	200055dc 	.word	0x200055dc

080051d8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051d8:	e7fe      	b.n	80051d8 <CAN1_RX0_IRQHandler>
	...

080051dc <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
}
 80051e0:	bf00      	nop
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop

080051ec <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80051f0:	e7fe      	b.n	80051f0 <HardFault_Handler+0x4>
 80051f2:	bf00      	nop

080051f4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80051f8:	e7fe      	b.n	80051f8 <MemManage_Handler+0x4>
 80051fa:	bf00      	nop

080051fc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8005200:	e7fe      	b.n	8005200 <BusFault_Handler+0x4>
 8005202:	bf00      	nop

08005204 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8005208:	e7fe      	b.n	8005208 <UsageFault_Handler+0x4>
 800520a:	bf00      	nop

0800520c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
}
 8005210:	bf00      	nop
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop

0800521c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
}
 8005220:	bf00      	nop
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop

0800522c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
}
 8005230:	bf00      	nop
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop

0800523c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8005240:	bf00      	nop
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop

0800524c <EXTI0_IRQHandler>:


/*
 * interrupt handler for vco waveform button
 */
void EXTI0_IRQHandler(void){
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line0);
 8005250:	2001      	movs	r0, #1
 8005252:	f7fc f937 	bl	80014c4 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 8005256:	4b08      	ldr	r3, [pc, #32]	; (8005278 <EXTI0_IRQHandler+0x2c>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <EXTI0_IRQHandler+0x26>
		the_button.button = vco_wave_button;
 800525e:	4b06      	ldr	r3, [pc, #24]	; (8005278 <EXTI0_IRQHandler+0x2c>)
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 8005264:	4b04      	ldr	r3, [pc, #16]	; (8005278 <EXTI0_IRQHandler+0x2c>)
 8005266:	2201      	movs	r2, #1
 8005268:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 800526a:	2101      	movs	r1, #1
 800526c:	4803      	ldr	r0, [pc, #12]	; (800527c <EXTI0_IRQHandler+0x30>)
 800526e:	f7fd f873 	bl	8002358 <TIM_Cmd>
	}
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20005588 	.word	0x20005588
 800527c:	40000400 	.word	0x40000400

08005280 <EXTI1_IRQHandler>:


/*
 * interrupt handler for lfo waveform button
 */
void EXTI1_IRQHandler(void){
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line1);
 8005284:	2002      	movs	r0, #2
 8005286:	f7fc f91d 	bl	80014c4 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 800528a:	4b08      	ldr	r3, [pc, #32]	; (80052ac <EXTI1_IRQHandler+0x2c>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d109      	bne.n	80052a6 <EXTI1_IRQHandler+0x26>
		the_button.button = lfo_wave_button;
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <EXTI1_IRQHandler+0x2c>)
 8005294:	2201      	movs	r2, #1
 8005296:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 8005298:	4b04      	ldr	r3, [pc, #16]	; (80052ac <EXTI1_IRQHandler+0x2c>)
 800529a:	2201      	movs	r2, #1
 800529c:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 800529e:	2101      	movs	r1, #1
 80052a0:	4803      	ldr	r0, [pc, #12]	; (80052b0 <EXTI1_IRQHandler+0x30>)
 80052a2:	f7fd f859 	bl	8002358 <TIM_Cmd>
	}
}
 80052a6:	bf00      	nop
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20005588 	.word	0x20005588
 80052b0:	40000400 	.word	0x40000400

080052b4 <EXTI2_IRQHandler>:


/*
 * interrupt handler for lfo modulation type button
 */
void EXTI2_IRQHandler(void){
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line2);
 80052b8:	2004      	movs	r0, #4
 80052ba:	f7fc f903 	bl	80014c4 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 80052be:	4b08      	ldr	r3, [pc, #32]	; (80052e0 <EXTI2_IRQHandler+0x2c>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <EXTI2_IRQHandler+0x26>
		the_button.button = lfo_mod_button;
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <EXTI2_IRQHandler+0x2c>)
 80052c8:	2202      	movs	r2, #2
 80052ca:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 80052cc:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <EXTI2_IRQHandler+0x2c>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 80052d2:	2101      	movs	r1, #1
 80052d4:	4803      	ldr	r0, [pc, #12]	; (80052e4 <EXTI2_IRQHandler+0x30>)
 80052d6:	f7fd f83f 	bl	8002358 <TIM_Cmd>
	}

}
 80052da:	bf00      	nop
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20005588 	.word	0x20005588
 80052e4:	40000400 	.word	0x40000400

080052e8 <EXTI3_IRQHandler>:


/*
 * interrupt handler for adsr modulation type button
 */
void EXTI3_IRQHandler(void){
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line3);
 80052ec:	2008      	movs	r0, #8
 80052ee:	f7fc f8e9 	bl	80014c4 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 80052f2:	4b08      	ldr	r3, [pc, #32]	; (8005314 <EXTI3_IRQHandler+0x2c>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <EXTI3_IRQHandler+0x26>
		the_button.button = adsr_mod_button;
 80052fa:	4b06      	ldr	r3, [pc, #24]	; (8005314 <EXTI3_IRQHandler+0x2c>)
 80052fc:	2203      	movs	r2, #3
 80052fe:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 8005300:	4b04      	ldr	r3, [pc, #16]	; (8005314 <EXTI3_IRQHandler+0x2c>)
 8005302:	2201      	movs	r2, #1
 8005304:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8005306:	2101      	movs	r1, #1
 8005308:	4803      	ldr	r0, [pc, #12]	; (8005318 <EXTI3_IRQHandler+0x30>)
 800530a:	f7fd f825 	bl	8002358 <TIM_Cmd>
	}
}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20005588 	.word	0x20005588
 8005318:	40000400 	.word	0x40000400

0800531c <EXTI9_5_IRQHandler>:

//EXTI9_5_IRQn used for selector
void EXTI9_5_IRQHandler(void){
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
	// TODO: Is this a mistake?  Looks like EXTI_Line6 is twice.  Maybe should be EXTI_Line5.
	// EXTI_ClearITPendingBit(EXTI_Line6 | EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9);
	EXTI_ClearITPendingBit(EXTI_Line5 | EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9);
 8005320:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8005324:	f7fc f8ce 	bl	80014c4 <EXTI_ClearITPendingBit>
	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){			//is debounce timer off
 8005328:	4b06      	ldr	r3, [pc, #24]	; (8005344 <EXTI9_5_IRQHandler+0x28>)
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d103      	bne.n	800533e <EXTI9_5_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);								//turn on debounce timer
 8005336:	2101      	movs	r1, #1
 8005338:	4802      	ldr	r0, [pc, #8]	; (8005344 <EXTI9_5_IRQHandler+0x28>)
 800533a:	f7fd f80d 	bl	8002358 <TIM_Cmd>
	}
	// update_state();
}
 800533e:	bf00      	nop
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40000800 	.word	0x40000800

08005348 <EXTI15_10_IRQHandler>:

//EXTI15_10_IRQn used for selector
void EXTI15_10_IRQHandler(void){
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15);
 800534c:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8005350:	f7fc f8b8 	bl	80014c4 <EXTI_ClearITPendingBit>

	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){		//is debounce timer off
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <EXTI15_10_IRQHandler+0x28>)
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	b29b      	uxth	r3, r3
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d103      	bne.n	800536a <EXTI15_10_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);							//turn on debounce timer
 8005362:	2101      	movs	r1, #1
 8005364:	4802      	ldr	r0, [pc, #8]	; (8005370 <EXTI15_10_IRQHandler+0x28>)
 8005366:	f7fc fff7 	bl	8002358 <TIM_Cmd>
	}
}
 800536a:	bf00      	nop
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40000800 	.word	0x40000800

08005374 <TIM3_IRQHandler>:

// Timer for limiting button pushes 100ms
void TIM3_IRQHandler()
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
	// Note: the_button.button is set to vco_wave or whatever by
	// EXTI0_IRQHandler() or whatever.
	// That routine is called first and then this one.
	// It enables the TIM3 timer.  Then this function disables it.

	TIM_Cmd(TIM3, DISABLE);				//stop timer
 800537a:	2100      	movs	r1, #0
 800537c:	4813      	ldr	r0, [pc, #76]	; (80053cc <TIM3_IRQHandler+0x58>)
 800537e:	f7fc ffeb 	bl	8002358 <TIM_Cmd>
	int temp = the_button.button;
 8005382:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <TIM3_IRQHandler+0x5c>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	607b      	str	r3, [r7, #4]

	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);			//clear interrupt
 8005388:	2101      	movs	r1, #1
 800538a:	4810      	ldr	r0, [pc, #64]	; (80053cc <TIM3_IRQHandler+0x58>)
 800538c:	f7fd f828 	bl	80023e0 <TIM_ClearITPendingBit>
	the_button.button_state = NOT_ACTIVE;
 8005390:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <TIM3_IRQHandler+0x5c>)
 8005392:	2200      	movs	r2, #0
 8005394:	605a      	str	r2, [r3, #4]
	if(temp == vco_wave_button)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d102      	bne.n	80053a2 <TIM3_IRQHandler+0x2e>
	{
		// handle_enter();			// TODO
		update_vco_wave();
 800539c:	f000 f8fe 	bl	800559c <update_vco_wave>
	else if(temp == adsr_mod_button)
	{
		// handle_down();			// TODO
		update_adsr_mod();
	}
}
 80053a0:	e010      	b.n	80053c4 <TIM3_IRQHandler+0x50>
	{
		// handle_enter();			// TODO
		update_vco_wave();

	}
	else if(temp == lfo_wave_button)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d102      	bne.n	80053ae <TIM3_IRQHandler+0x3a>
	{
		// handle_back();			// TODO
		update_lfo_wave();
 80053a8:	f000 f90e 	bl	80055c8 <update_lfo_wave>
	else if(temp == adsr_mod_button)
	{
		// handle_down();			// TODO
		update_adsr_mod();
	}
}
 80053ac:	e00a      	b.n	80053c4 <TIM3_IRQHandler+0x50>
	else if(temp == lfo_wave_button)
	{
		// handle_back();			// TODO
		update_lfo_wave();
	}
	else if(temp == lfo_mod_button)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d102      	bne.n	80053ba <TIM3_IRQHandler+0x46>
	{
		// handle_up();			// TODO
		update_lfo_mod();
 80053b4:	f000 f91e 	bl	80055f4 <update_lfo_mod>
	else if(temp == adsr_mod_button)
	{
		// handle_down();			// TODO
		update_adsr_mod();
	}
}
 80053b8:	e004      	b.n	80053c4 <TIM3_IRQHandler+0x50>
	else if(temp == lfo_mod_button)
	{
		// handle_up();			// TODO
		update_lfo_mod();
	}
	else if(temp == adsr_mod_button)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d101      	bne.n	80053c4 <TIM3_IRQHandler+0x50>
	{
		// handle_down();			// TODO
		update_adsr_mod();
 80053c0:	f000 f938 	bl	8005634 <update_adsr_mod>
	}
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40000400 	.word	0x40000400
 80053d0:	20005588 	.word	0x20005588

080053d4 <TIM4_IRQHandler>:

// Timer for debouncing selectors 50ms
void TIM4_IRQHandler()
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM4, DISABLE);								//stop timer
 80053d8:	2100      	movs	r1, #0
 80053da:	4804      	ldr	r0, [pc, #16]	; (80053ec <TIM4_IRQHandler+0x18>)
 80053dc:	f7fc ffbc 	bl	8002358 <TIM_Cmd>
	TIM_ClearITPendingBit(TIM4, TIM_IT_Update);			//clear interrupt
 80053e0:	2101      	movs	r1, #1
 80053e2:	4802      	ldr	r0, [pc, #8]	; (80053ec <TIM4_IRQHandler+0x18>)
 80053e4:	f7fc fffc 	bl	80023e0 <TIM_ClearITPendingBit>

	// update_selector_state();							//update state
	// update_state();
}
 80053e8:	bf00      	nop
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40000800 	.word	0x40000800

080053f0 <ADC_IRQHandler>:

// not set up yet but might to see if the adc is working
void ADC_IRQHandler() {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
	/* acknowledge interrupt */
	ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 80053f4:	f240 2105 	movw	r1, #517	; 0x205
 80053f8:	4802      	ldr	r0, [pc, #8]	; (8005404 <ADC_IRQHandler+0x14>)
 80053fa:	f7fb fd41 	bl	8000e80 <ADC_ClearITPendingBit>
}
 80053fe:	bf00      	nop
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40012000 	.word	0x40012000

08005408 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  // Mike Beard
  // #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800540c:	4a16      	ldr	r2, [pc, #88]	; (8005468 <SystemInit+0x60>)
 800540e:	4b16      	ldr	r3, [pc, #88]	; (8005468 <SystemInit+0x60>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  // #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800541c:	4a13      	ldr	r2, [pc, #76]	; (800546c <SystemInit+0x64>)
 800541e:	4b13      	ldr	r3, [pc, #76]	; (800546c <SystemInit+0x64>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f043 0301 	orr.w	r3, r3, #1
 8005426:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005428:	4b10      	ldr	r3, [pc, #64]	; (800546c <SystemInit+0x64>)
 800542a:	2200      	movs	r2, #0
 800542c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800542e:	4a0f      	ldr	r2, [pc, #60]	; (800546c <SystemInit+0x64>)
 8005430:	4b0e      	ldr	r3, [pc, #56]	; (800546c <SystemInit+0x64>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800543c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800543e:	4b0b      	ldr	r3, [pc, #44]	; (800546c <SystemInit+0x64>)
 8005440:	4a0b      	ldr	r2, [pc, #44]	; (8005470 <SystemInit+0x68>)
 8005442:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005444:	4a09      	ldr	r2, [pc, #36]	; (800546c <SystemInit+0x64>)
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <SystemInit+0x64>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800544e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005450:	4b06      	ldr	r3, [pc, #24]	; (800546c <SystemInit+0x64>)
 8005452:	2200      	movs	r2, #0
 8005454:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8005456:	f000 f80d 	bl	8005474 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800545a:	4b03      	ldr	r3, [pc, #12]	; (8005468 <SystemInit+0x60>)
 800545c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005460:	609a      	str	r2, [r3, #8]
#endif
}
 8005462:	bf00      	nop
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	e000ed00 	.word	0xe000ed00
 800546c:	40023800 	.word	0x40023800
 8005470:	24003010 	.word	0x24003010

08005474 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	2300      	movs	r3, #0
 8005480:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8005482:	4a41      	ldr	r2, [pc, #260]	; (8005588 <SetSysClock+0x114>)
 8005484:	4b40      	ldr	r3, [pc, #256]	; (8005588 <SetSysClock+0x114>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800548c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800548e:	4b3e      	ldr	r3, [pc, #248]	; (8005588 <SetSysClock+0x114>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3301      	adds	r3, #1
 800549c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d103      	bne.n	80054ac <SetSysClock+0x38>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80054aa:	d1f0      	bne.n	800548e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80054ac:	4b36      	ldr	r3, [pc, #216]	; (8005588 <SetSysClock+0x114>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80054b8:	2301      	movs	r3, #1
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	e001      	b.n	80054c2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80054be:	2300      	movs	r3, #0
 80054c0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d142      	bne.n	800554e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80054c8:	4a2f      	ldr	r2, [pc, #188]	; (8005588 <SetSysClock+0x114>)
 80054ca:	4b2f      	ldr	r3, [pc, #188]	; (8005588 <SetSysClock+0x114>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80054d4:	4a2d      	ldr	r2, [pc, #180]	; (800558c <SetSysClock+0x118>)
 80054d6:	4b2d      	ldr	r3, [pc, #180]	; (800558c <SetSysClock+0x118>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054de:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80054e0:	4a29      	ldr	r2, [pc, #164]	; (8005588 <SetSysClock+0x114>)
 80054e2:	4b29      	ldr	r3, [pc, #164]	; (8005588 <SetSysClock+0x114>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80054e8:	4a27      	ldr	r2, [pc, #156]	; (8005588 <SetSysClock+0x114>)
 80054ea:	4b27      	ldr	r3, [pc, #156]	; (8005588 <SetSysClock+0x114>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80054f4:	4a24      	ldr	r2, [pc, #144]	; (8005588 <SetSysClock+0x114>)
 80054f6:	4b24      	ldr	r3, [pc, #144]	; (8005588 <SetSysClock+0x114>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80054fe:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8005500:	4b21      	ldr	r3, [pc, #132]	; (8005588 <SetSysClock+0x114>)
 8005502:	4a23      	ldr	r2, [pc, #140]	; (8005590 <SetSysClock+0x11c>)
 8005504:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005506:	4a20      	ldr	r2, [pc, #128]	; (8005588 <SetSysClock+0x114>)
 8005508:	4b1f      	ldr	r3, [pc, #124]	; (8005588 <SetSysClock+0x114>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005510:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005512:	bf00      	nop
 8005514:	4b1c      	ldr	r3, [pc, #112]	; (8005588 <SetSysClock+0x114>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0f9      	beq.n	8005514 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8005520:	4b1c      	ldr	r3, [pc, #112]	; (8005594 <SetSysClock+0x120>)
 8005522:	f240 6205 	movw	r2, #1541	; 0x605
 8005526:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005528:	4a17      	ldr	r2, [pc, #92]	; (8005588 <SetSysClock+0x114>)
 800552a:	4b17      	ldr	r3, [pc, #92]	; (8005588 <SetSysClock+0x114>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005534:	4a14      	ldr	r2, [pc, #80]	; (8005588 <SetSysClock+0x114>)
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <SetSysClock+0x114>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f043 0302 	orr.w	r3, r3, #2
 800553e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8005540:	bf00      	nop
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <SetSysClock+0x114>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 030c 	and.w	r3, r3, #12
 800554a:	2b08      	cmp	r3, #8
 800554c:	d1f9      	bne.n	8005542 <SetSysClock+0xce>
// Re-added by Mike Beard
/******************************************************************************/
/*                          I2S clock configuration                           */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 800554e:	4a0e      	ldr	r2, [pc, #56]	; (8005588 <SetSysClock+0x114>)
 8005550:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <SetSysClock+0x114>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005558:	6093      	str	r3, [r2, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <SetSysClock+0x114>)
 800555c:	4a0e      	ldr	r2, [pc, #56]	; (8005598 <SetSysClock+0x124>)
 800555e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8005562:	4a09      	ldr	r2, [pc, #36]	; (8005588 <SetSysClock+0x114>)
 8005564:	4b08      	ldr	r3, [pc, #32]	; (8005588 <SetSysClock+0x114>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800556c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 800556e:	bf00      	nop
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <SetSysClock+0x114>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f9      	beq.n	8005570 <SetSysClock+0xfc>
  {
  }
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	40023800 	.word	0x40023800
 800558c:	40007000 	.word	0x40007000
 8005590:	07405408 	.word	0x07405408
 8005594:	40023c00 	.word	0x40023c00
 8005598:	30004080 	.word	0x30004080

0800559c <update_vco_wave>:
// #include "lcd.h"
#include "main.h"


void update_vco_wave()
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
	vco_wave++;
 80055a0:	4b08      	ldr	r3, [pc, #32]	; (80055c4 <update_vco_wave+0x28>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <update_vco_wave+0x28>)
 80055aa:	701a      	strb	r2, [r3, #0]
	if(vco_wave >= lastwave)
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <update_vco_wave+0x28>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d902      	bls.n	80055ba <update_vco_wave+0x1e>
	{
		vco_wave = 0;
 80055b4:	4b03      	ldr	r3, [pc, #12]	; (80055c4 <update_vco_wave+0x28>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
	}
}
 80055ba:	bf00      	nop
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	20005569 	.word	0x20005569

080055c8 <update_lfo_wave>:

void update_lfo_wave()
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
	lfo_wave++;
 80055cc:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <update_lfo_wave+0x28>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <update_lfo_wave+0x28>)
 80055d6:	701a      	strb	r2, [r3, #0]
	if(lfo_wave >= lastwave)
 80055d8:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <update_lfo_wave+0x28>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d902      	bls.n	80055e6 <update_lfo_wave+0x1e>
	{
		lfo_wave = 0;
 80055e0:	4b03      	ldr	r3, [pc, #12]	; (80055f0 <update_lfo_wave+0x28>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]
	}
}
 80055e6:	bf00      	nop
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	20005568 	.word	0x20005568

080055f4 <update_lfo_mod>:

void update_lfo_mod()
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
	if(lfo_mod.fm_mod == OFF)
 80055f8:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <update_lfo_mod+0x3c>)
 80055fa:	885b      	ldrh	r3, [r3, #2]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d103      	bne.n	8005608 <update_lfo_mod+0x14>
	{
		lfo_mod.fm_mod = ON;
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <update_lfo_mod+0x3c>)
 8005602:	2201      	movs	r2, #1
 8005604:	805a      	strh	r2, [r3, #2]
		else
		{
			lfo_mod.am_mod = OFF;
		}
	}
}
 8005606:	e00d      	b.n	8005624 <update_lfo_mod+0x30>

		// Note: leave adsr_mod.am_mod as-is.
	}
	else
	{
		lfo_mod.fm_mod = OFF;
 8005608:	4b09      	ldr	r3, [pc, #36]	; (8005630 <update_lfo_mod+0x3c>)
 800560a:	2200      	movs	r2, #0
 800560c:	805a      	strh	r2, [r3, #2]

		// Toggle adsr_mod.am_mod.
		if(lfo_mod.am_mod == OFF)
 800560e:	4b08      	ldr	r3, [pc, #32]	; (8005630 <update_lfo_mod+0x3c>)
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d103      	bne.n	800561e <update_lfo_mod+0x2a>
		{
			lfo_mod.am_mod = ON;
 8005616:	4b06      	ldr	r3, [pc, #24]	; (8005630 <update_lfo_mod+0x3c>)
 8005618:	2201      	movs	r2, #1
 800561a:	801a      	strh	r2, [r3, #0]
		else
		{
			lfo_mod.am_mod = OFF;
		}
	}
}
 800561c:	e002      	b.n	8005624 <update_lfo_mod+0x30>
		{
			lfo_mod.am_mod = ON;
		}
		else
		{
			lfo_mod.am_mod = OFF;
 800561e:	4b04      	ldr	r3, [pc, #16]	; (8005630 <update_lfo_mod+0x3c>)
 8005620:	2200      	movs	r2, #0
 8005622:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8005624:	bf00      	nop
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	20005590 	.word	0x20005590

08005634 <update_adsr_mod>:

void update_adsr_mod()
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
	if(adsr_mod.fm_mod == OFF)
 8005638:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <update_adsr_mod+0x3c>)
 800563a:	885b      	ldrh	r3, [r3, #2]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d103      	bne.n	8005648 <update_adsr_mod+0x14>
	{
		adsr_mod.fm_mod = ON;
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <update_adsr_mod+0x3c>)
 8005642:	2201      	movs	r2, #1
 8005644:	805a      	strh	r2, [r3, #2]
		else
		{
			adsr_mod.am_mod = OFF;
		}
	}
}
 8005646:	e00d      	b.n	8005664 <update_adsr_mod+0x30>

		// Note: leave adsr_mod.am_mod as-is.
	}
	else
	{
		adsr_mod.fm_mod = OFF;
 8005648:	4b09      	ldr	r3, [pc, #36]	; (8005670 <update_adsr_mod+0x3c>)
 800564a:	2200      	movs	r2, #0
 800564c:	805a      	strh	r2, [r3, #2]

		// Toggle adsr_mod.am_mod.
		if(adsr_mod.am_mod == OFF)
 800564e:	4b08      	ldr	r3, [pc, #32]	; (8005670 <update_adsr_mod+0x3c>)
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <update_adsr_mod+0x2a>
		{
			adsr_mod.am_mod = ON;
 8005656:	4b06      	ldr	r3, [pc, #24]	; (8005670 <update_adsr_mod+0x3c>)
 8005658:	2201      	movs	r2, #1
 800565a:	801a      	strh	r2, [r3, #0]
		else
		{
			adsr_mod.am_mod = OFF;
		}
	}
}
 800565c:	e002      	b.n	8005664 <update_adsr_mod+0x30>
		{
			adsr_mod.am_mod = ON;
		}
		else
		{
			adsr_mod.am_mod = OFF;
 800565e:	4b04      	ldr	r3, [pc, #16]	; (8005670 <update_adsr_mod+0x3c>)
 8005660:	2200      	movs	r2, #0
 8005662:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8005664:	bf00      	nop
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	2000556c 	.word	0x2000556c

08005674 <init_state>:
//	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_6) == 1){
//		lfo_state = other2;
//	}
//}

void init_state(){
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
//	current_menu_state.lfo_mod = NO_MOD;
//	current_menu_state.filterst8 = no_filter;
//	current_menu_state.secondary_vco = 0;
//	display_new_menu();

	vco_wave = sine;
 8005678:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <init_state+0x34>)
 800567a:	2201      	movs	r2, #1
 800567c:	701a      	strb	r2, [r3, #0]
	lfo_wave = sine;
 800567e:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <init_state+0x38>)
 8005680:	2201      	movs	r2, #1
 8005682:	701a      	strb	r2, [r3, #0]

	lfo_mod.am_mod = OFF;
 8005684:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <init_state+0x3c>)
 8005686:	2200      	movs	r2, #0
 8005688:	801a      	strh	r2, [r3, #0]
	lfo_mod.fm_mod = OFF;
 800568a:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <init_state+0x3c>)
 800568c:	2200      	movs	r2, #0
 800568e:	805a      	strh	r2, [r3, #2]

	adsr_mod.am_mod = OFF;
 8005690:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <init_state+0x40>)
 8005692:	2200      	movs	r2, #0
 8005694:	801a      	strh	r2, [r3, #0]
	adsr_mod.fm_mod = OFF;
 8005696:	4b07      	ldr	r3, [pc, #28]	; (80056b4 <init_state+0x40>)
 8005698:	2200      	movs	r2, #0
 800569a:	805a      	strh	r2, [r3, #2]

}
 800569c:	bf00      	nop
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20005569 	.word	0x20005569
 80056ac:	20005568 	.word	0x20005568
 80056b0:	20005590 	.word	0x20005590
 80056b4:	2000556c 	.word	0x2000556c

080056b8 <arm_sin_f32>:
 80056b8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005724 <arm_sin_f32+0x6c>
 80056bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80056c0:	ee20 7a07 	vmul.f32	s14, s0, s14
 80056c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80056cc:	d504      	bpl.n	80056d8 <arm_sin_f32+0x20>
 80056ce:	ee17 3a90 	vmov	r3, s15
 80056d2:	3b01      	subs	r3, #1
 80056d4:	ee07 3a90 	vmov	s15, r3
 80056d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056dc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005728 <arm_sin_f32+0x70>
 80056e0:	4a12      	ldr	r2, [pc, #72]	; (800572c <arm_sin_f32+0x74>)
 80056e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80056ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80056ee:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80056f2:	ee16 3a90 	vmov	r3, s13
 80056f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056fa:	ee06 3a90 	vmov	s13, r3
 80056fe:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 8005702:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005706:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800570a:	edd1 6a00 	vldr	s13, [r1]
 800570e:	ed91 7a01 	vldr	s14, [r1, #4]
 8005712:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800571a:	ee20 0a26 	vmul.f32	s0, s0, s13
 800571e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005722:	4770      	bx	lr
 8005724:	3e22f983 	.word	0x3e22f983
 8005728:	44000000 	.word	0x44000000
 800572c:	0800579c 	.word	0x0800579c

08005730 <__libc_init_array>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	4b0e      	ldr	r3, [pc, #56]	; (800576c <__libc_init_array+0x3c>)
 8005734:	4c0e      	ldr	r4, [pc, #56]	; (8005770 <__libc_init_array+0x40>)
 8005736:	1ae4      	subs	r4, r4, r3
 8005738:	10a4      	asrs	r4, r4, #2
 800573a:	2500      	movs	r5, #0
 800573c:	461e      	mov	r6, r3
 800573e:	42a5      	cmp	r5, r4
 8005740:	d004      	beq.n	800574c <__libc_init_array+0x1c>
 8005742:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005746:	4798      	blx	r3
 8005748:	3501      	adds	r5, #1
 800574a:	e7f8      	b.n	800573e <__libc_init_array+0xe>
 800574c:	f000 f816 	bl	800577c <_init>
 8005750:	4c08      	ldr	r4, [pc, #32]	; (8005774 <__libc_init_array+0x44>)
 8005752:	4b09      	ldr	r3, [pc, #36]	; (8005778 <__libc_init_array+0x48>)
 8005754:	1ae4      	subs	r4, r4, r3
 8005756:	10a4      	asrs	r4, r4, #2
 8005758:	2500      	movs	r5, #0
 800575a:	461e      	mov	r6, r3
 800575c:	42a5      	cmp	r5, r4
 800575e:	d004      	beq.n	800576a <__libc_init_array+0x3a>
 8005760:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005764:	4798      	blx	r3
 8005766:	3501      	adds	r5, #1
 8005768:	e7f8      	b.n	800575c <__libc_init_array+0x2c>
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	08005fa0 	.word	0x08005fa0
 8005770:	08005fa0 	.word	0x08005fa0
 8005774:	08005fa4 	.word	0x08005fa4
 8005778:	08005fa0 	.word	0x08005fa0

0800577c <_init>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	bf00      	nop
 8005780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005782:	bc08      	pop	{r3}
 8005784:	469e      	mov	lr, r3
 8005786:	4770      	bx	lr

08005788 <_fini>:
 8005788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578a:	bf00      	nop
 800578c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578e:	bc08      	pop	{r3}
 8005790:	469e      	mov	lr, r3
 8005792:	4770      	bx	lr
