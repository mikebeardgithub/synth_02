
C:\stm32_workspace\synth_02\Debug\synth_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  08007c78  08007c78  00017c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080088e8  080088e8  000188e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080088ec  080088ec  000188ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000005a4  20000000  080088f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000205a4  2**0
                  CONTENTS
  7 .bss          0000453c  200005a4  200005a4  000205a4  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20004ae0  20004ae0  000205a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000205a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c828  00000000  00000000  000205d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fd4  00000000  00000000  0002cdfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f28  00000000  00000000  0002edd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000db8  00000000  00000000  0002fcf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000585a  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004d03  00000000  00000000  0003630a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000ee  00000000  00000000  0003b00d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000045dc  00000000  00000000  0003b0fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000000c8  00000000  00000000  0003f6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000001c5  00000000  00000000  0003f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200005a4 	.word	0x200005a4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c60 	.word	0x08007c60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200005a8 	.word	0x200005a8
 80001c4:	08007c60 	.word	0x08007c60

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	73bb      	strb	r3, [r7, #14]
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	78db      	ldrb	r3, [r3, #3]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d038      	beq.n	8000b9a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <NVIC_Init+0xbc>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	f1c3 0304 	rsb	r3, r3, #4
 8000b3c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000b3e:	7b7a      	ldrb	r2, [r7, #13]
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	fa42 f303 	asr.w	r3, r2, r3
 8000b46:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	785b      	ldrb	r3, [r3, #1]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	7bbb      	ldrb	r3, [r7, #14]
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	789a      	ldrb	r2, [r3, #2]
 8000b5a:	7b7b      	ldrb	r3, [r7, #13]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	011b      	lsls	r3, r3, #4
 8000b6a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000b6c:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <NVIC_Init+0xc0>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	7bfa      	ldrb	r2, [r7, #15]
 8000b76:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b7a:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <NVIC_Init+0xc0>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	095b      	lsrs	r3, r3, #5
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f003 031f 	and.w	r3, r3, #31
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b94:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000b98:	e00f      	b.n	8000bba <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b9a:	490c      	ldr	r1, [pc, #48]	; (8000bcc <NVIC_Init+0xc0>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	095b      	lsrs	r3, r3, #5
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	f003 031f 	and.w	r3, r3, #31
 8000bae:	2201      	movs	r2, #1
 8000bb0:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bb2:	f100 0320 	add.w	r3, r0, #32
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bda:	f001 f973 	bl	8001ec4 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8000bde:	2100      	movs	r1, #0
 8000be0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000be4:	f001 f96e 	bl	8001ec4 <RCC_APB2PeriphResetCmd>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000c0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c0e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	791b      	ldrb	r3, [r3, #4]
 8000c14:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <ADC_Init+0xa8>)
 8000c32:	4013      	ands	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c3e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000c44:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	795b      	ldrb	r3, [r3, #5]
 8000c4a:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000c66:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	7d1b      	ldrb	r3, [r3, #20]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	7afb      	ldrb	r3, [r7, #11]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000c76:	7afb      	ldrb	r3, [r7, #11]
 8000c78:	051b      	lsls	r3, r3, #20
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	c0fff7fd 	.word	0xc0fff7fd

08000c98 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	751a      	strb	r2, [r3, #20]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <ADC_CommonInit+0x48>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <ADC_CommonInit+0x4c>)
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000cfa:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000d00:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000d06:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <ADC_CommonInit+0x48>)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6053      	str	r3, [r2, #4]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	40012300 	.word	0x40012300
 8000d24:	fffc30e0 	.word	0xfffc30e0

08000d28 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d006      	beq.n	8000d74 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f043 0201 	orr.w	r2, r3, #1
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000d72:	e005      	b.n	8000d80 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f023 0201 	bic.w	r2, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
  }
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	4608      	mov	r0, r1
 8000d96:	4611      	mov	r1, r2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	70fb      	strb	r3, [r7, #3]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	70bb      	strb	r3, [r7, #2]
 8000da2:	4613      	mov	r3, r2
 8000da4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000dae:	78fb      	ldrb	r3, [r7, #3]
 8000db0:	2b09      	cmp	r3, #9
 8000db2:	d923      	bls.n	8000dfc <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	f1a3 020a 	sub.w	r2, r3, #10
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000dd8:	7879      	ldrb	r1, [r7, #1]
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	f1a3 020a 	sub.w	r2, r3, #10
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	e01e      	b.n	8000e3a <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000e02:	78fa      	ldrb	r2, [r7, #3]
 8000e04:	4613      	mov	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000e1c:	7879      	ldrb	r1, [r7, #1]
 8000e1e:	78fa      	ldrb	r2, [r7, #3]
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000e3a:	78bb      	ldrb	r3, [r7, #2]
 8000e3c:	2b06      	cmp	r3, #6
 8000e3e:	d821      	bhi.n	8000e84 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e44:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000e46:	78bb      	ldrb	r3, [r7, #2]
 8000e48:	1e5a      	subs	r2, r3, #1
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	221f      	movs	r2, #31
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000e62:	78f9      	ldrb	r1, [r7, #3]
 8000e64:	78bb      	ldrb	r3, [r7, #2]
 8000e66:	1e5a      	subs	r2, r3, #1
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000e82:	e047      	b.n	8000f14 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000e84:	78bb      	ldrb	r3, [r7, #2]
 8000e86:	2b0c      	cmp	r3, #12
 8000e88:	d821      	bhi.n	8000ece <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000e90:	78bb      	ldrb	r3, [r7, #2]
 8000e92:	1fda      	subs	r2, r3, #7
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	221f      	movs	r2, #31
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000eac:	78f9      	ldrb	r1, [r7, #3]
 8000eae:	78bb      	ldrb	r3, [r7, #2]
 8000eb0:	1fda      	subs	r2, r3, #7
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000ecc:	e022      	b.n	8000f14 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000ed4:	78bb      	ldrb	r3, [r7, #2]
 8000ed6:	f1a3 020d 	sub.w	r2, r3, #13
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	221f      	movs	r2, #31
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000ef2:	78f9      	ldrb	r1, [r7, #3]
 8000ef4:	78bb      	ldrb	r3, [r7, #2]
 8000ef6:	f1a3 020d 	sub.w	r2, r3, #13
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	fa01 f303 	lsl.w	r3, r1, r3
 8000f04:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000f3e:	e005      	b.n	8000f4c <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d006      	beq.n	8000f78 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8000f76:	e005      	b.n	8000f84 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	609a      	str	r2, [r3, #8]
  }
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	43da      	mvns	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	601a      	str	r2, [r3, #0]
}                    
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <DAC_Init+0x64>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000fd4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ff4:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <DAC_Init+0x64>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6013      	str	r3, [r2, #0]
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40007400 	.word	0x40007400

08001024 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d009      	beq.n	800104a <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8001036:	490d      	ldr	r1, [pc, #52]	; (800106c <DAC_Cmd+0x48>)
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <DAC_Cmd+0x48>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2001      	movs	r0, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	fa00 f303 	lsl.w	r3, r0, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8001048:	e009      	b.n	800105e <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <DAC_Cmd+0x48>)
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <DAC_Cmd+0x48>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2001      	movs	r0, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	fa00 f303 	lsl.w	r3, r0, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	4013      	ands	r3, r2
 800105c:	600b      	str	r3, [r1, #0]
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40007400 	.word	0x40007400

08001070 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <DAC_SetChannel1Data+0x34>)
 8001082:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	3308      	adds	r3, #8
 800108c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	461a      	mov	r2, r3
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40007400 	.word	0x40007400

080010a8 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f023 0201 	bic.w	r2, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2221      	movs	r2, #33	; 0x21
 80010de:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a46      	ldr	r2, [pc, #280]	; (80011fc <DMA_DeInit+0x154>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d103      	bne.n	80010f0 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80010e8:	4b45      	ldr	r3, [pc, #276]	; (8001200 <DMA_DeInit+0x158>)
 80010ea:	223d      	movs	r2, #61	; 0x3d
 80010ec:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80010ee:	e07e      	b.n	80011ee <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a44      	ldr	r2, [pc, #272]	; (8001204 <DMA_DeInit+0x15c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d104      	bne.n	8001102 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80010f8:	4b41      	ldr	r3, [pc, #260]	; (8001200 <DMA_DeInit+0x158>)
 80010fa:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80010fe:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001100:	e075      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a40      	ldr	r2, [pc, #256]	; (8001208 <DMA_DeInit+0x160>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d104      	bne.n	8001114 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800110a:	4b3d      	ldr	r3, [pc, #244]	; (8001200 <DMA_DeInit+0x158>)
 800110c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001110:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001112:	e06c      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a3d      	ldr	r2, [pc, #244]	; (800120c <DMA_DeInit+0x164>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d104      	bne.n	8001126 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800111c:	4b38      	ldr	r3, [pc, #224]	; (8001200 <DMA_DeInit+0x158>)
 800111e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8001122:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001124:	e063      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a39      	ldr	r2, [pc, #228]	; (8001210 <DMA_DeInit+0x168>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d103      	bne.n	8001136 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800112e:	4b34      	ldr	r3, [pc, #208]	; (8001200 <DMA_DeInit+0x158>)
 8001130:	4a38      	ldr	r2, [pc, #224]	; (8001214 <DMA_DeInit+0x16c>)
 8001132:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001134:	e05b      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a37      	ldr	r2, [pc, #220]	; (8001218 <DMA_DeInit+0x170>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d103      	bne.n	8001146 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800113e:	4b30      	ldr	r3, [pc, #192]	; (8001200 <DMA_DeInit+0x158>)
 8001140:	4a36      	ldr	r2, [pc, #216]	; (800121c <DMA_DeInit+0x174>)
 8001142:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001144:	e053      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a35      	ldr	r2, [pc, #212]	; (8001220 <DMA_DeInit+0x178>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d103      	bne.n	8001156 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <DMA_DeInit+0x158>)
 8001150:	4a34      	ldr	r2, [pc, #208]	; (8001224 <DMA_DeInit+0x17c>)
 8001152:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001154:	e04b      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a33      	ldr	r2, [pc, #204]	; (8001228 <DMA_DeInit+0x180>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d104      	bne.n	8001168 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800115e:	4b28      	ldr	r3, [pc, #160]	; (8001200 <DMA_DeInit+0x158>)
 8001160:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001164:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001166:	e042      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a30      	ldr	r2, [pc, #192]	; (800122c <DMA_DeInit+0x184>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d103      	bne.n	8001178 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8001170:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <DMA_DeInit+0x188>)
 8001172:	223d      	movs	r2, #61	; 0x3d
 8001174:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001176:	e03a      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a2e      	ldr	r2, [pc, #184]	; (8001234 <DMA_DeInit+0x18c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d104      	bne.n	800118a <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8001180:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <DMA_DeInit+0x188>)
 8001182:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8001186:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001188:	e031      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a2a      	ldr	r2, [pc, #168]	; (8001238 <DMA_DeInit+0x190>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d104      	bne.n	800119c <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8001192:	4b27      	ldr	r3, [pc, #156]	; (8001230 <DMA_DeInit+0x188>)
 8001194:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001198:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800119a:	e028      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a27      	ldr	r2, [pc, #156]	; (800123c <DMA_DeInit+0x194>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d104      	bne.n	80011ae <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80011a4:	4b22      	ldr	r3, [pc, #136]	; (8001230 <DMA_DeInit+0x188>)
 80011a6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80011aa:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011ac:	e01f      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a23      	ldr	r2, [pc, #140]	; (8001240 <DMA_DeInit+0x198>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d103      	bne.n	80011be <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <DMA_DeInit+0x188>)
 80011b8:	4a16      	ldr	r2, [pc, #88]	; (8001214 <DMA_DeInit+0x16c>)
 80011ba:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011bc:	e017      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a20      	ldr	r2, [pc, #128]	; (8001244 <DMA_DeInit+0x19c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d103      	bne.n	80011ce <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <DMA_DeInit+0x188>)
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <DMA_DeInit+0x174>)
 80011ca:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011cc:	e00f      	b.n	80011ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <DMA_DeInit+0x1a0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d103      	bne.n	80011de <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <DMA_DeInit+0x188>)
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <DMA_DeInit+0x17c>)
 80011da:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011dc:	e007      	b.n	80011ee <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a1a      	ldr	r2, [pc, #104]	; (800124c <DMA_DeInit+0x1a4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d103      	bne.n	80011ee <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80011e6:	4b12      	ldr	r3, [pc, #72]	; (8001230 <DMA_DeInit+0x188>)
 80011e8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80011ec:	60da      	str	r2, [r3, #12]
    }
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40026010 	.word	0x40026010
 8001200:	40026000 	.word	0x40026000
 8001204:	40026028 	.word	0x40026028
 8001208:	40026040 	.word	0x40026040
 800120c:	40026058 	.word	0x40026058
 8001210:	40026070 	.word	0x40026070
 8001214:	2000003d 	.word	0x2000003d
 8001218:	40026088 	.word	0x40026088
 800121c:	20000f40 	.word	0x20000f40
 8001220:	400260a0 	.word	0x400260a0
 8001224:	203d0000 	.word	0x203d0000
 8001228:	400260b8 	.word	0x400260b8
 800122c:	40026410 	.word	0x40026410
 8001230:	40026400 	.word	0x40026400
 8001234:	40026428 	.word	0x40026428
 8001238:	40026440 	.word	0x40026440
 800123c:	40026458 	.word	0x40026458
 8001240:	40026470 	.word	0x40026470
 8001244:	40026488 	.word	0x40026488
 8001248:	400264a0 	.word	0x400264a0
 800124c:	400264b8 	.word	0x400264b8

08001250 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <DMA_Init+0xac>)
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800127a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001286:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001292:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800129e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a4:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f023 0307 	bic.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	4313      	orrs	r3, r2
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	691a      	ldr	r2, [r3, #16]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60da      	str	r2, [r3, #12]
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	f01c803f 	.word	0xf01c803f

08001300 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d006      	beq.n	8001390 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800138e:	e005      	b.n	800139c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 0201 	bic.w	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	601a      	str	r2, [r3, #0]
  }
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a15      	ldr	r2, [pc, #84]	; (8001414 <DMA_GetFlagStatus+0x6c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d802      	bhi.n	80013c8 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <DMA_GetFlagStatus+0x70>)
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	e001      	b.n	80013cc <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <DMA_GetFlagStatus+0x74>)
 80013ca:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	e002      	b.n	80013e4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80013ea:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80013fa:	2301      	movs	r3, #1
 80013fc:	75fb      	strb	r3, [r7, #23]
 80013fe:	e001      	b.n	8001404 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001404:	7dfb      	ldrb	r3, [r7, #23]
}
 8001406:	4618      	mov	r0, r3
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	4002640f 	.word	0x4002640f
 8001418:	40026000 	.word	0x40026000
 800141c:	40026400 	.word	0x40026400

08001420 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a10      	ldr	r2, [pc, #64]	; (8001470 <DMA_ClearFlag+0x50>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d802      	bhi.n	8001438 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <DMA_ClearFlag+0x54>)
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	e001      	b.n	800143c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <DMA_ClearFlag+0x58>)
 800143a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800144c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8001454:	e006      	b.n	8001464 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800145c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	6093      	str	r3, [r2, #8]
  }    
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	4002640f 	.word	0x4002640f
 8001474:	40026000 	.word	0x40026000
 8001478:	40026400 	.word	0x40026400

0800147c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	4613      	mov	r3, r2
 8001488:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00f      	beq.n	80014b4 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	e005      	b.n	80014b4 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b80      	cmp	r3, #128	; 0x80
 80014b8:	d014      	beq.n	80014e4 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d008      	beq.n	80014d2 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f003 031e 	and.w	r3, r3, #30
 80014ca:	431a      	orrs	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80014d0:	e008      	b.n	80014e4 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f003 031e 	and.w	r3, r3, #30
 80014dc:	43db      	mvns	r3, r3
 80014de:	401a      	ands	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80014fc:	4b34      	ldr	r3, [pc, #208]	; (80015d0 <EXTI_Init+0xe0>)
 80014fe:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	799b      	ldrb	r3, [r3, #6]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d04f      	beq.n	80015a8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001508:	4931      	ldr	r1, [pc, #196]	; (80015d0 <EXTI_Init+0xe0>)
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <EXTI_Init+0xe0>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	43db      	mvns	r3, r3
 8001514:	4013      	ands	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001518:	492d      	ldr	r1, [pc, #180]	; (80015d0 <EXTI_Init+0xe0>)
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <EXTI_Init+0xe0>)
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	43db      	mvns	r3, r3
 8001524:	4013      	ands	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	791b      	ldrb	r3, [r3, #4]
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	6811      	ldr	r1, [r2, #0]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001542:	4923      	ldr	r1, [pc, #140]	; (80015d0 <EXTI_Init+0xe0>)
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <EXTI_Init+0xe0>)
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	43db      	mvns	r3, r3
 800154e:	4013      	ands	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001552:	491f      	ldr	r1, [pc, #124]	; (80015d0 <EXTI_Init+0xe0>)
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <EXTI_Init+0xe0>)
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	43db      	mvns	r3, r3
 800155e:	4013      	ands	r3, r2
 8001560:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	795b      	ldrb	r3, [r3, #5]
 8001566:	2b10      	cmp	r3, #16
 8001568:	d10e      	bne.n	8001588 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800156a:	4919      	ldr	r1, [pc, #100]	; (80015d0 <EXTI_Init+0xe0>)
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <EXTI_Init+0xe0>)
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4313      	orrs	r3, r2
 8001576:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001578:	4915      	ldr	r1, [pc, #84]	; (80015d0 <EXTI_Init+0xe0>)
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <EXTI_Init+0xe0>)
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4313      	orrs	r3, r2
 8001584:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001586:	e01d      	b.n	80015c4 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <EXTI_Init+0xe0>)
 800158a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	795b      	ldrb	r3, [r3, #5]
 8001590:	461a      	mov	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4413      	add	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	6811      	ldr	r1, [r2, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80015a6:	e00d      	b.n	80015c4 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	791b      	ldrb	r3, [r3, #4]
 80015ac:	461a      	mov	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4413      	add	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	6811      	ldr	r1, [r2, #0]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	43d2      	mvns	r2, r2
 80015c0:	400a      	ands	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
  }
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <EXTI_ClearITPendingBit+0x1c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6153      	str	r3, [r2, #20]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40013c00 	.word	0x40013c00

080015f4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e076      	b.n	80016fe <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001610:	2201      	movs	r2, #1
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	429a      	cmp	r2, r3
 800162a:	d165      	bne.n	80016f8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2103      	movs	r1, #3
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	401a      	ands	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	791b      	ldrb	r3, [r3, #4]
 800164a:	4619      	mov	r1, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	791b      	ldrb	r3, [r3, #4]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d003      	beq.n	800166a <GPIO_Init+0x76>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	791b      	ldrb	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d12e      	bne.n	80016c8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2103      	movs	r1, #3
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	401a      	ands	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	795b      	ldrb	r3, [r3, #5]
 8001688:	4619      	mov	r1, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	2101      	movs	r1, #1
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	401a      	ands	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	799b      	ldrb	r3, [r3, #6]
 80016b6:	4619      	mov	r1, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2103      	movs	r1, #3
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	401a      	ands	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	79db      	ldrb	r3, [r3, #7]
 80016e8:	4619      	mov	r1, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d985      	bls.n	8001610 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001704:	bf00      	nop
 8001706:	371c      	adds	r7, #28
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	71da      	strb	r2, [r3, #7]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
 8001750:	4613      	mov	r3, r2
 8001752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001754:	787b      	ldrb	r3, [r7, #1]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	887a      	ldrh	r2, [r7, #2]
 800175e:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8001760:	e002      	b.n	8001768 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	887a      	ldrh	r2, [r7, #2]
 8001766:	835a      	strh	r2, [r3, #26]
  }
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800178c:	787a      	ldrb	r2, [r7, #1]
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	08db      	lsrs	r3, r3, #3
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3208      	adds	r2, #8
 80017b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	210f      	movs	r1, #15
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	ea02 0103 	and.w	r1, r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f100 0208 	add.w	r2, r0, #8
 80017ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80017d2:	887b      	ldrh	r3, [r7, #2]
 80017d4:	08db      	lsrs	r3, r3, #3
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3208      	adds	r2, #8
 80017de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80017e8:	887b      	ldrh	r3, [r7, #2]
 80017ea:	08db      	lsrs	r3, r3, #3
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3208      	adds	r2, #8
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop

08001808 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a17      	ldr	r2, [pc, #92]	; (8001870 <I2C_DeInit+0x68>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d10a      	bne.n	800182e <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001818:	2101      	movs	r1, #1
 800181a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800181e:	f000 fb31 	bl	8001e84 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8001822:	2100      	movs	r1, #0
 8001824:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001828:	f000 fb2c 	bl	8001e84 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800182c:	e01c      	b.n	8001868 <I2C_DeInit+0x60>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a10      	ldr	r2, [pc, #64]	; (8001874 <I2C_DeInit+0x6c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d10a      	bne.n	800184c <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001836:	2101      	movs	r1, #1
 8001838:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800183c:	f000 fb22 	bl	8001e84 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8001840:	2100      	movs	r1, #0
 8001842:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001846:	f000 fb1d 	bl	8001e84 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800184a:	e00d      	b.n	8001868 <I2C_DeInit+0x60>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <I2C_DeInit+0x70>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d109      	bne.n	8001868 <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8001854:	2101      	movs	r1, #1
 8001856:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800185a:	f000 fb13 	bl	8001e84 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800185e:	2100      	movs	r1, #0
 8001860:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001864:	f000 fb0e 	bl	8001e84 <RCC_APB1PeriphResetCmd>
    }
  }
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40005400 	.word	0x40005400
 8001874:	40005800 	.word	0x40005800
 8001878:	40005c00 	.word	0x40005c00

0800187c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	84fb      	strh	r3, [r7, #38]	; 0x26
 800188a:	2300      	movs	r3, #0
 800188c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800188e:	2304      	movs	r3, #4
 8001890:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8001892:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <I2C_Init+0x174>)
 8001894:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	889b      	ldrh	r3, [r3, #4]
 800189a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800189c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800189e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f9e1 	bl	8001c70 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4a4f      	ldr	r2, [pc, #316]	; (80019f4 <I2C_Init+0x178>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	0c9b      	lsrs	r3, r3, #18
 80018bc:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80018be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018c2:	4313      	orrs	r3, r2
 80018c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018ca:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a44      	ldr	r2, [pc, #272]	; (80019f8 <I2C_Init+0x17c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d815      	bhi.n	8001916 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80018f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d801      	bhi.n	8001902 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80018fe:	2304      	movs	r3, #4
 8001900:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001902:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001904:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001906:	4313      	orrs	r3, r2
 8001908:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800190a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800190c:	3301      	adds	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	841a      	strh	r2, [r3, #32]
 8001914:	e040      	b.n	8001998 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	88db      	ldrh	r3, [r3, #6]
 800191a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800191e:	4293      	cmp	r3, r2
 8001920:	d109      	bne.n	8001936 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001934:	e00e      	b.n	8001954 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	009a      	lsls	r2, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800194c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800194e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001952:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800195a:	2b00      	cmp	r3, #0
 800195c:	d103      	bne.n	8001966 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800195e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001968:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800196a:	4313      	orrs	r3, r2
 800196c:	b29b      	uxth	r3, r3
 800196e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001976:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001978:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800197a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <I2C_Init+0x180>)
 8001984:	fb82 1203 	smull	r1, r2, r2, r3
 8001988:	1192      	asrs	r2, r2, #6
 800198a:	17db      	asrs	r3, r3, #31
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	b29b      	uxth	r3, r3
 8001990:	3301      	adds	r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800199c:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80019b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019b6:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80019ba:	f023 0302 	bic.w	r3, r3, #2
 80019be:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	889a      	ldrh	r2, [r3, #4]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	895b      	ldrh	r3, [r3, #10]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019ce:	4313      	orrs	r3, r2
 80019d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80019d6:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	899a      	ldrh	r2, [r3, #12]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	891b      	ldrh	r3, [r3, #8]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	811a      	strh	r2, [r3, #8]
}
 80019e8:	bf00      	nop
 80019ea:	3728      	adds	r7, #40	; 0x28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	007a1200 	.word	0x007a1200
 80019f4:	431bde83 	.word	0x431bde83
 80019f8:	000186a0 	.word	0x000186a0
 80019fc:	10624dd3 	.word	0x10624dd3

08001a00 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8001a22:	e007      	b.n	8001a34 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	801a      	strh	r2, [r3, #0]
  }
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8001a62:	e007      	b.n	8001a74 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	801a      	strh	r2, [r3, #0]
  }
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d008      	beq.n	8001aa4 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8001aa2:	e007      	b.n	8001ab4 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	801a      	strh	r2, [r3, #0]
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
 8001acc:	4613      	mov	r3, r2
 8001ace:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001ad0:	78bb      	ldrb	r3, [r7, #2]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	70fb      	strb	r3, [r7, #3]
 8001ade:	e003      	b.n	8001ae8 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	f023 0301 	bic.w	r3, r3, #1
 8001ae6:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	821a      	strh	r2, [r3, #16]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d008      	beq.n	8001b20 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8001b1e:	e007      	b.n	8001b30 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	801a      	strh	r2, [r3, #0]
  }
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	821a      	strh	r2, [r3, #16]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	8a1b      	ldrh	r3, [r3, #16]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	8a9b      	ldrh	r3, [r3, #20]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	8b1b      	ldrh	r3, [r3, #24]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	041b      	lsls	r3, r3, #16
 8001ba6:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bb2:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	401a      	ands	r2, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d102      	bne.n	8001bc6 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	75fb      	strb	r3, [r7, #23]
 8001bc4:	e001      	b.n	8001bca <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	0f1b      	lsrs	r3, r3, #28
 8001bf6:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bfe:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3314      	adds	r3, #20
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e005      	b.n	8001c1a <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3318      	adds	r3, #24
 8001c18:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001c26:	2301      	movs	r3, #1
 8001c28:	75fb      	strb	r3, [r7, #23]
 8001c2a:	e001      	b.n	8001c30 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	371c      	adds	r7, #28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop

08001c40 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c54:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	829a      	strh	r2, [r3, #20]
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop

08001c70 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
 8001c84:	2302      	movs	r3, #2
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001c90:	4b48      	ldr	r3, [pc, #288]	; (8001db4 <RCC_GetClocksFreq+0x144>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d007      	beq.n	8001cb0 <RCC_GetClocksFreq+0x40>
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d009      	beq.n	8001cb8 <RCC_GetClocksFreq+0x48>
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d13f      	bne.n	8001d28 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a43      	ldr	r2, [pc, #268]	; (8001db8 <RCC_GetClocksFreq+0x148>)
 8001cac:	601a      	str	r2, [r3, #0]
      break;
 8001cae:	e03f      	b.n	8001d30 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a42      	ldr	r2, [pc, #264]	; (8001dbc <RCC_GetClocksFreq+0x14c>)
 8001cb4:	601a      	str	r2, [r3, #0]
      break;
 8001cb6:	e03b      	b.n	8001d30 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001cb8:	4b3e      	ldr	r3, [pc, #248]	; (8001db4 <RCC_GetClocksFreq+0x144>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc0:	0d9b      	lsrs	r3, r3, #22
 8001cc2:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc4:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <RCC_GetClocksFreq+0x144>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ccc:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00d      	beq.n	8001cf0 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001cd4:	4a39      	ldr	r2, [pc, #228]	; (8001dbc <RCC_GetClocksFreq+0x14c>)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cdc:	4b35      	ldr	r3, [pc, #212]	; (8001db4 <RCC_GetClocksFreq+0x144>)
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	099b      	lsrs	r3, r3, #6
 8001ce8:	fb03 f302 	mul.w	r3, r3, r2
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	e00c      	b.n	8001d0a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001cf0:	4a31      	ldr	r2, [pc, #196]	; (8001db8 <RCC_GetClocksFreq+0x148>)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cf8:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <RCC_GetClocksFreq+0x144>)
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d00:	400b      	ands	r3, r1
 8001d02:	099b      	lsrs	r3, r3, #6
 8001d04:	fb03 f302 	mul.w	r3, r3, r2
 8001d08:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001d0a:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <RCC_GetClocksFreq+0x144>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d12:	0c1b      	lsrs	r3, r3, #16
 8001d14:	3301      	adds	r3, #1
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	601a      	str	r2, [r3, #0]
      break;
 8001d26:	e003      	b.n	8001d30 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a23      	ldr	r2, [pc, #140]	; (8001db8 <RCC_GetClocksFreq+0x148>)
 8001d2c:	601a      	str	r2, [r3, #0]
      break;
 8001d2e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <RCC_GetClocksFreq+0x144>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d38:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001d40:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <RCC_GetClocksFreq+0x150>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4413      	add	r3, r2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	40da      	lsrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001d58:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <RCC_GetClocksFreq+0x144>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001d60:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	0a9b      	lsrs	r3, r3, #10
 8001d66:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001d68:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <RCC_GetClocksFreq+0x150>)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	40da      	lsrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <RCC_GetClocksFreq+0x144>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001d88:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	0b5b      	lsrs	r3, r3, #13
 8001d8e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001d90:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <RCC_GetClocksFreq+0x150>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4413      	add	r3, r2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	40da      	lsrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	60da      	str	r2, [r3, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3724      	adds	r7, #36	; 0x24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	40023800 	.word	0x40023800
 8001db8:	00f42400 	.word	0x00f42400
 8001dbc:	007a1200 	.word	0x007a1200
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001dd6:	490a      	ldr	r1, [pc, #40]	; (8001e00 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001de2:	e006      	b.n	8001df2 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001de4:	4906      	ldr	r1, [pc, #24]	; (8001e00 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	4013      	ands	r3, r2
 8001df0:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001e16:	490a      	ldr	r1, [pc, #40]	; (8001e40 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001e22:	e006      	b.n	8001e32 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001e24:	4906      	ldr	r1, [pc, #24]	; (8001e40 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <RCC_APB1PeriphClockCmd+0x3c>)
 8001e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	4013      	ands	r3, r2
 8001e30:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800

08001e44 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d006      	beq.n	8001e64 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001e56:	490a      	ldr	r1, [pc, #40]	; (8001e80 <RCC_APB2PeriphClockCmd+0x3c>)
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <RCC_APB2PeriphClockCmd+0x3c>)
 8001e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001e62:	e006      	b.n	8001e72 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001e64:	4906      	ldr	r1, [pc, #24]	; (8001e80 <RCC_APB2PeriphClockCmd+0x3c>)
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <RCC_APB2PeriphClockCmd+0x3c>)
 8001e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	4013      	ands	r3, r2
 8001e70:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001e96:	490a      	ldr	r1, [pc, #40]	; (8001ec0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001e9a:	6a1a      	ldr	r2, [r3, #32]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001ea2:	e006      	b.n	8001eb2 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001ea4:	4906      	ldr	r1, [pc, #24]	; (8001ec0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <RCC_APB1PeriphResetCmd+0x3c>)
 8001ea8:	6a1a      	ldr	r2, [r3, #32]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	4013      	ands	r3, r2
 8001eb0:	620b      	str	r3, [r1, #32]
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d006      	beq.n	8001ee4 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001ed6:	490a      	ldr	r1, [pc, #40]	; (8001f00 <RCC_APB2PeriphResetCmd+0x3c>)
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <RCC_APB2PeriphResetCmd+0x3c>)
 8001eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001ee2:	e006      	b.n	8001ef2 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001ee4:	4906      	ldr	r1, [pc, #24]	; (8001f00 <RCC_APB2PeriphResetCmd+0x3c>)
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <RCC_APB2PeriphResetCmd+0x3c>)
 8001ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	4013      	ands	r3, r2
 8001ef0:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800

08001f04 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a2e      	ldr	r2, [pc, #184]	; (8001fc8 <SPI_I2S_DeInit+0xc4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d10a      	bne.n	8001f2a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001f14:	2101      	movs	r1, #1
 8001f16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f1a:	f7ff ffd3 	bl	8001ec4 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001f1e:	2100      	movs	r1, #0
 8001f20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f24:	f7ff ffce 	bl	8001ec4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001f28:	e049      	b.n	8001fbe <SPI_I2S_DeInit+0xba>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a27      	ldr	r2, [pc, #156]	; (8001fcc <SPI_I2S_DeInit+0xc8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10a      	bne.n	8001f48 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001f32:	2101      	movs	r1, #1
 8001f34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f38:	f7ff ffa4 	bl	8001e84 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f42:	f7ff ff9f 	bl	8001e84 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001f46:	e03a      	b.n	8001fbe <SPI_I2S_DeInit+0xba>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a21      	ldr	r2, [pc, #132]	; (8001fd0 <SPI_I2S_DeInit+0xcc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d10a      	bne.n	8001f66 <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001f50:	2101      	movs	r1, #1
 8001f52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f56:	f7ff ff95 	bl	8001e84 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f60:	f7ff ff90 	bl	8001e84 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001f64:	e02b      	b.n	8001fbe <SPI_I2S_DeInit+0xba>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <SPI_I2S_DeInit+0xd0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d10a      	bne.n	8001f84 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8001f6e:	2101      	movs	r1, #1
 8001f70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f74:	f7ff ffa6 	bl	8001ec4 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8001f78:	2100      	movs	r1, #0
 8001f7a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f7e:	f7ff ffa1 	bl	8001ec4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001f82:	e01c      	b.n	8001fbe <SPI_I2S_DeInit+0xba>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <SPI_I2S_DeInit+0xd4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d10a      	bne.n	8001fa2 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f92:	f7ff ff97 	bl	8001ec4 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8001f96:	2100      	movs	r1, #0
 8001f98:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f9c:	f7ff ff92 	bl	8001ec4 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001fa0:	e00d      	b.n	8001fbe <SPI_I2S_DeInit+0xba>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	; (8001fdc <SPI_I2S_DeInit+0xd8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d109      	bne.n	8001fbe <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8001faa:	2101      	movs	r1, #1
 8001fac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001fb0:	f7ff ff88 	bl	8001ec4 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001fba:	f7ff ff83 	bl	8001ec4 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40013000 	.word	0x40013000
 8001fcc:	40003800 	.word	0x40003800
 8001fd0:	40003c00 	.word	0x40003c00
 8001fd4:	40013400 	.word	0x40013400
 8001fd8:	40015000 	.word	0x40015000
 8001fdc:	40015400 	.word	0x40015400

08001fe0 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b08b      	sub	sp, #44	; 0x2c
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8001fea:	2300      	movs	r3, #0
 8001fec:	837b      	strh	r3, [r7, #26]
 8001fee:	2302      	movs	r3, #2
 8001ff0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	8b9b      	ldrh	r3, [r3, #28]
 8002012:	b29b      	uxth	r3, r3
 8002014:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002018:	f023 030f 	bic.w	r3, r3, #15
 800201c:	b29a      	uxth	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	8b9b      	ldrh	r3, [r3, #28]
 800202c:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d104      	bne.n	8002040 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 8002036:	2300      	movs	r3, #0
 8002038:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800203a:	2302      	movs	r3, #2
 800203c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800203e:	e072      	b.n	8002126 <I2S_Init+0x146>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	889b      	ldrh	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8002048:	2301      	movs	r3, #1
 800204a:	847b      	strh	r3, [r7, #34]	; 0x22
 800204c:	e001      	b.n	8002052 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800204e:	2302      	movs	r3, #2
 8002050:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8002052:	4b4d      	ldr	r3, [pc, #308]	; (8002188 <I2S_Init+0x1a8>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 800205e:	4a4a      	ldr	r2, [pc, #296]	; (8002188 <I2S_Init+0x1a8>)
 8002060:	4b49      	ldr	r3, [pc, #292]	; (8002188 <I2S_Init+0x1a8>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002068:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <I2S_Init+0x1a8>)
 800206c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002070:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002074:	4013      	ands	r3, r2
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800207c:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800207e:	4b42      	ldr	r3, [pc, #264]	; (8002188 <I2S_Init+0x1a8>)
 8002080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002084:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8002088:	0f1b      	lsrs	r3, r3, #28
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8002090:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <I2S_Init+0x1a8>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002098:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800209a:	4a3c      	ldr	r2, [pc, #240]	; (800218c <I2S_Init+0x1ac>)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	fb02 f203 	mul.w	r2, r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	88db      	ldrh	r3, [r3, #6]
 80020b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b8:	d10f      	bne.n	80020da <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	0a1a      	lsrs	r2, r3, #8
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	461a      	mov	r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3305      	adds	r3, #5
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	e012      	b.n	8002100 <I2S_Init+0x120>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80020da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020dc:	015b      	lsls	r3, r3, #5
 80020de:	461a      	mov	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	461a      	mov	r2, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3305      	adds	r3, #5
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	4a23      	ldr	r2, [pc, #140]	; (8002190 <I2S_Init+0x1b0>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	08db      	lsrs	r3, r3, #3
 800210a:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	b29b      	uxth	r3, r3
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	085b      	lsrs	r3, r3, #1
 800211e:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8002120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8002126:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002128:	2b01      	cmp	r3, #1
 800212a:	d902      	bls.n	8002132 <I2S_Init+0x152>
 800212c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800212e:	2bff      	cmp	r3, #255	; 0xff
 8002130:	d903      	bls.n	800213a <I2S_Init+0x15a>
  {
    /* Set the default values */
    i2sdiv = 2;
 8002132:	2302      	movs	r3, #2
 8002134:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	88da      	ldrh	r2, [r3, #6]
 800213e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002140:	4313      	orrs	r3, r2
 8002142:	b29a      	uxth	r2, r3
 8002144:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002146:	4313      	orrs	r3, r2
 8002148:	b29a      	uxth	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	8859      	ldrh	r1, [r3, #2]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800215e:	4303      	orrs	r3, r0
 8002160:	b29b      	uxth	r3, r3
 8002162:	430b      	orrs	r3, r1
 8002164:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8002166:	4313      	orrs	r3, r2
 8002168:	b29a      	uxth	r2, r3
 800216a:	8b7b      	ldrh	r3, [r7, #26]
 800216c:	4313      	orrs	r3, r2
 800216e:	b29b      	uxth	r3, r3
 8002170:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002174:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	8b7a      	ldrh	r2, [r7, #26]
 800217a:	839a      	strh	r2, [r3, #28]
}
 800217c:	bf00      	nop
 800217e:	372c      	adds	r7, #44	; 0x2c
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	40023800 	.word	0x40023800
 800218c:	007a1200 	.word	0x007a1200
 8002190:	cccccccd 	.word	0xcccccccd

08002194 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	8b9b      	ldrh	r3, [r3, #28]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 80021b6:	e007      	b.n	80021c8 <I2S_Cmd+0x34>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	8b9b      	ldrh	r3, [r3, #28]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	839a      	strh	r2, [r3, #28]
  }
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	819a      	strh	r2, [r3, #12]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop

080021f4 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
 8002200:	4613      	mov	r3, r2
 8002202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8002204:	787b      	ldrb	r3, [r7, #1]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	889b      	ldrh	r3, [r3, #4]
 800220e:	b29a      	uxth	r2, r3
 8002210:	887b      	ldrh	r3, [r7, #2]
 8002212:	4313      	orrs	r3, r2
 8002214:	b29a      	uxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 800221a:	e009      	b.n	8002230 <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	889b      	ldrh	r3, [r3, #4]
 8002220:	b29a      	uxth	r2, r3
 8002222:	887b      	ldrh	r3, [r7, #2]
 8002224:	43db      	mvns	r3, r3
 8002226:	b29b      	uxth	r3, r3
 8002228:	4013      	ands	r3, r2
 800222a:	b29a      	uxth	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	809a      	strh	r2, [r3, #4]
  }
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	70fb      	strb	r3, [r7, #3]
 8002248:	4613      	mov	r3, r2
 800224a:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800224c:	2300      	movs	r3, #0
 800224e:	81fb      	strh	r3, [r7, #14]
 8002250:	2300      	movs	r3, #0
 8002252:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	b2db      	uxtb	r3, r3
 800225a:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800225c:	89fb      	ldrh	r3, [r7, #14]
 800225e:	2201      	movs	r2, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 8002266:	78bb      	ldrb	r3, [r7, #2]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	889b      	ldrh	r3, [r3, #4]
 8002270:	b29a      	uxth	r2, r3
 8002272:	89bb      	ldrh	r3, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	b29a      	uxth	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 800227c:	e009      	b.n	8002292 <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	889b      	ldrh	r3, [r3, #4]
 8002282:	b29a      	uxth	r2, r3
 8002284:	89bb      	ldrh	r3, [r7, #12]
 8002286:	43db      	mvns	r3, r3
 8002288:	b29b      	uxth	r3, r3
 800228a:	4013      	ands	r3, r2
 800228c:	b29a      	uxth	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	809a      	strh	r2, [r3, #4]
  }
}
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop

080022a0 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	891b      	ldrh	r3, [r3, #8]
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	887b      	ldrh	r3, [r7, #2]
 80022b8:	4013      	ands	r3, r2
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e001      	b.n	80022ca <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80022c6:	2300      	movs	r3, #0
 80022c8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80022d8:	b490      	push	{r4, r7}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	460a      	mov	r2, r1
 80022e2:	71fb      	strb	r3, [r7, #7]
 80022e4:	4613      	mov	r3, r2
 80022e6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80022ec:	79bb      	ldrb	r3, [r7, #6]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80022fc:	4916      	ldr	r1, [pc, #88]	; (8002358 <SYSCFG_EXTILineConfig+0x80>)
 80022fe:	79bb      	ldrb	r3, [r7, #6]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	b2db      	uxtb	r3, r3
 8002304:	4618      	mov	r0, r3
 8002306:	4a14      	ldr	r2, [pc, #80]	; (8002358 <SYSCFG_EXTILineConfig+0x80>)
 8002308:	79bb      	ldrb	r3, [r7, #6]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3302      	adds	r3, #2
 8002310:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43db      	mvns	r3, r3
 8002318:	401a      	ands	r2, r3
 800231a:	1c83      	adds	r3, r0, #2
 800231c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <SYSCFG_EXTILineConfig+0x80>)
 8002322:	79bb      	ldrb	r3, [r7, #6]
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461c      	mov	r4, r3
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <SYSCFG_EXTILineConfig+0x80>)
 800232c:	79bb      	ldrb	r3, [r7, #6]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	b2db      	uxtb	r3, r3
 8002332:	3302      	adds	r3, #2
 8002334:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002338:	79f9      	ldrb	r1, [r7, #7]
 800233a:	79bb      	ldrb	r3, [r7, #6]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	431a      	orrs	r2, r3
 8002348:	1ca3      	adds	r3, r4, #2
 800234a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bc90      	pop	{r4, r7}
 8002356:	4770      	bx	lr
 8002358:	40013800 	.word	0x40013800

0800235c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a29      	ldr	r2, [pc, #164]	; (8002418 <TIM_TimeBaseInit+0xbc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d013      	beq.n	80023a0 <TIM_TimeBaseInit+0x44>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a28      	ldr	r2, [pc, #160]	; (800241c <TIM_TimeBaseInit+0xc0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00f      	beq.n	80023a0 <TIM_TimeBaseInit+0x44>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002386:	d00b      	beq.n	80023a0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a25      	ldr	r2, [pc, #148]	; (8002420 <TIM_TimeBaseInit+0xc4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d007      	beq.n	80023a0 <TIM_TimeBaseInit+0x44>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a24      	ldr	r2, [pc, #144]	; (8002424 <TIM_TimeBaseInit+0xc8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d003      	beq.n	80023a0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a23      	ldr	r2, [pc, #140]	; (8002428 <TIM_TimeBaseInit+0xcc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d108      	bne.n	80023b2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80023a0:	89fb      	ldrh	r3, [r7, #14]
 80023a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	885a      	ldrh	r2, [r3, #2]
 80023ac:	89fb      	ldrh	r3, [r7, #14]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a1d      	ldr	r2, [pc, #116]	; (800242c <TIM_TimeBaseInit+0xd0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00c      	beq.n	80023d4 <TIM_TimeBaseInit+0x78>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <TIM_TimeBaseInit+0xd4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d008      	beq.n	80023d4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80023c2:	89fb      	ldrh	r3, [r7, #14]
 80023c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	891a      	ldrh	r2, [r3, #8]
 80023ce:	89fb      	ldrh	r3, [r7, #14]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	89fa      	ldrh	r2, [r7, #14]
 80023d8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	881a      	ldrh	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <TIM_TimeBaseInit+0xbc>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d003      	beq.n	80023fa <TIM_TimeBaseInit+0x9e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a09      	ldr	r2, [pc, #36]	; (800241c <TIM_TimeBaseInit+0xc0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d104      	bne.n	8002404 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	7a9b      	ldrb	r3, [r3, #10]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	829a      	strh	r2, [r3, #20]
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40010000 	.word	0x40010000
 800241c:	40010400 	.word	0x40010400
 8002420:	40000400 	.word	0x40000400
 8002424:	40000800 	.word	0x40000800
 8002428:	40000c00 	.word	0x40000c00
 800242c:	40001000 	.word	0x40001000
 8002430:	40001400 	.word	0x40001400

08002434 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f04f 32ff 	mov.w	r2, #4294967295
 8002442:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	729a      	strb	r2, [r3, #10]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800248a:	e007      	b.n	800249c <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	b29b      	uxth	r3, r3
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	801a      	strh	r2, [r3, #0]
  }
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
 80024b4:	4613      	mov	r3, r2
 80024b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80024b8:	787b      	ldrb	r3, [r7, #1]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	899b      	ldrh	r3, [r3, #12]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80024ce:	e009      	b.n	80024e4 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	899b      	ldrh	r3, [r3, #12]
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	43db      	mvns	r3, r3
 80024da:	b29b      	uxth	r3, r3
 80024dc:	4013      	ands	r3, r2
 80024de:	b29a      	uxth	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	819a      	strh	r2, [r3, #12]
  }
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80024fc:	887b      	ldrh	r3, [r7, #2]
 80024fe:	43db      	mvns	r3, r3
 8002500:	b29a      	uxth	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	821a      	strh	r2, [r3, #16]
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop

08002514 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	889b      	ldrh	r3, [r3, #4]
 8002524:	b29b      	uxth	r3, r3
 8002526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252a:	b29a      	uxth	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	889b      	ldrh	r3, [r3, #4]
 8002534:	b29a      	uxth	r2, r3
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	4313      	orrs	r3, r2
 800253a:	b29a      	uxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	809a      	strh	r2, [r3, #4]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	4a06      	ldr	r2, [pc, #24]	; (8002574 <STM_EVAL_LEDOn+0x28>)
 800255a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255e:	79fa      	ldrb	r2, [r7, #7]
 8002560:	4905      	ldr	r1, [pc, #20]	; (8002578 <STM_EVAL_LEDOn+0x2c>)
 8002562:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002566:	831a      	strh	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	20000010 	.word	0x20000010
 8002578:	08007c78 	.word	0x08007c78

0800257c <EVAL_AUDIO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	603a      	str	r2, [r7, #0]
 8002586:	80fb      	strh	r3, [r7, #6]
 8002588:	460b      	mov	r3, r1
 800258a:	717b      	strb	r3, [r7, #5]
  /* Perform low layer Codec initialization */
  if (Codec_Init(OutputDevice, VOLUME_CONVERT(Volume), AudioFreq) != 0)
 800258c:	797b      	ldrb	r3, [r7, #5]
 800258e:	2b64      	cmp	r3, #100	; 0x64
 8002590:	d80b      	bhi.n	80025aa <EVAL_AUDIO_Init+0x2e>
 8002592:	797a      	ldrb	r2, [r7, #5]
 8002594:	4613      	mov	r3, r2
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	4a0d      	ldr	r2, [pc, #52]	; (80025d0 <EVAL_AUDIO_Init+0x54>)
 800259c:	fb82 1203 	smull	r1, r2, r2, r3
 80025a0:	1152      	asrs	r2, r2, #5
 80025a2:	17db      	asrs	r3, r3, #31
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	e000      	b.n	80025ac <EVAL_AUDIO_Init+0x30>
 80025aa:	2364      	movs	r3, #100	; 0x64
 80025ac:	88f8      	ldrh	r0, [r7, #6]
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	f000 f8f3 	bl	800279c <Codec_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <EVAL_AUDIO_Init+0x44>
  {
    return 1;                
 80025bc:	2301      	movs	r3, #1
 80025be:	e002      	b.n	80025c6 <EVAL_AUDIO_Init+0x4a>
  }
  else
  {    
    /* I2S data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    Audio_MAL_Init();
 80025c0:	f000 fcb4 	bl	8002f2c <Audio_MAL_Init>
    
    /* Return 0 when all operations are OK */
    return 0;
 80025c4:	2300      	movs	r3, #0
  }
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	51eb851f 	.word	0x51eb851f

080025d4 <EVAL_AUDIO_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data half-words (16bits).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Play(uint16_t* pBuffer, uint32_t Size)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  /* Set the total number of data to be played (count in half-word) */
  AudioTotalSize = Size;
 80025de:	4a15      	ldr	r2, [pc, #84]	; (8002634 <EVAL_AUDIO_Play+0x60>)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6013      	str	r3, [r2, #0]

  /* Call the audio Codec Play function */
  Codec_Play();
 80025e4:	f000 f986 	bl	80028f4 <Codec_Play>
  
  /* Update the Media layer and enable it for play */  
  Audio_MAL_Play((uint32_t)pBuffer, (uint32_t)(DMA_MAX(Size)));
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f0:	4293      	cmp	r3, r2
 80025f2:	bf28      	it	cs
 80025f4:	4613      	movcs	r3, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	f000 fd40 	bl	800307c <Audio_MAL_Play>
  
  /* Update the remaining number of data to be played */
  AudioRemSize = Size - DMA_MAX(AudioTotalSize);
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <EVAL_AUDIO_Play+0x60>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002604:	4293      	cmp	r3, r2
 8002606:	bf28      	it	cs
 8002608:	4613      	movcs	r3, r2
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <EVAL_AUDIO_Play+0x64>)
 8002610:	6013      	str	r3, [r2, #0]
  
  /* Update the current audio pointer position */
  CurrentPos = pBuffer + DMA_MAX(AudioTotalSize);
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <EVAL_AUDIO_Play+0x60>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800261a:	4293      	cmp	r3, r2
 800261c:	bf28      	it	cs
 800261e:	4613      	movcs	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	4a05      	ldr	r2, [pc, #20]	; (800263c <EVAL_AUDIO_Play+0x68>)
 8002628:	6013      	str	r3, [r2, #0]
  
  return 0;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000020 	.word	0x20000020
 8002638:	20000024 	.word	0x20000024
 800263c:	200049b0 	.word	0x200049b0

08002640 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
#ifndef AUDIO_MAL_MODE_NORMAL
  uint16_t *pAddr = (uint16_t *)CurrentPos;
 8002646:	4b36      	ldr	r3, [pc, #216]	; (8002720 <Audio_MAL_IRQHandler+0xe0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	603b      	str	r3, [r7, #0]
  uint32_t Size = AudioRemSize;
 800264c:	4b35      	ldr	r3, [pc, #212]	; (8002724 <Audio_MAL_IRQHandler+0xe4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	607b      	str	r3, [r7, #4]
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002652:	4b35      	ldr	r3, [pc, #212]	; (8002728 <Audio_MAL_IRQHandler+0xe8>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b35      	ldr	r3, [pc, #212]	; (800272c <Audio_MAL_IRQHandler+0xec>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f7fe fea3 	bl	80013a8 <DMA_GetFlagStatus>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00c      	beq.n	8002682 <Audio_MAL_IRQHandler+0x42>
    }
    
 #elif defined(AUDIO_MAL_MODE_CIRCULAR)
    /* Manage the remaining file size and new address offset: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_TransferComplete_CallBack((uint32_t)pAddr, Size);    
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4618      	mov	r0, r3
 800266e:	f001 fa1d 	bl	8003aac <EVAL_AUDIO_TransferComplete_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 8002672:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <Audio_MAL_IRQHandler+0xe8>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4b2d      	ldr	r3, [pc, #180]	; (800272c <Audio_MAL_IRQHandler+0xec>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4619      	mov	r1, r3
 800267c:	4610      	mov	r0, r2
 800267e:	f7fe fecf 	bl	8001420 <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_TC_EN */

#ifdef AUDIO_MAL_DMA_IT_HT_EN
  /* Half Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT) != RESET)
 8002682:	4b29      	ldr	r3, [pc, #164]	; (8002728 <Audio_MAL_IRQHandler+0xe8>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <Audio_MAL_IRQHandler+0xf0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4619      	mov	r1, r3
 800268c:	4610      	mov	r0, r2
 800268e:	f7fe fe8b 	bl	80013a8 <DMA_GetFlagStatus>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00c      	beq.n	80026b2 <Audio_MAL_IRQHandler+0x72>
  {
    /* Manage the remaining file size and new address offset: This function
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */
    EVAL_AUDIO_HalfTransfer_CallBack((uint32_t)pAddr, Size);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4618      	mov	r0, r3
 800269e:	f001 f9f7 	bl	8003a90 <EVAL_AUDIO_HalfTransfer_CallBack>

    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT);
 80026a2:	4b21      	ldr	r3, [pc, #132]	; (8002728 <Audio_MAL_IRQHandler+0xe8>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <Audio_MAL_IRQHandler+0xf0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4610      	mov	r0, r2
 80026ae:	f7fe feb7 	bl	8001420 <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <Audio_MAL_IRQHandler+0xe8>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <Audio_MAL_IRQHandler+0xf4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f7fe fe73 	bl	80013a8 <DMA_GetFlagStatus>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d115      	bne.n	80026f4 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 80026c8:	4b17      	ldr	r3, [pc, #92]	; (8002728 <Audio_MAL_IRQHandler+0xe8>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <Audio_MAL_IRQHandler+0xf8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	4610      	mov	r0, r2
 80026d4:	f7fe fe68 	bl	80013a8 <DMA_GetFlagStatus>
 80026d8:	4603      	mov	r3, r0
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
 80026de:	4b12      	ldr	r3, [pc, #72]	; (8002728 <Audio_MAL_IRQHandler+0xe8>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4b16      	ldr	r3, [pc, #88]	; (800273c <Audio_MAL_IRQHandler+0xfc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4619      	mov	r1, r3
 80026e8:	4610      	mov	r0, r2
 80026ea:	f7fe fe5d 	bl	80013a8 <DMA_GetFlagStatus>
 80026ee:	4603      	mov	r3, r0
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d010      	beq.n	8002716 <Audio_MAL_IRQHandler+0xd6>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
    
  {
    /* Manage the error generated on DMA FIFO: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_Error_CallBack((uint32_t*)&pAddr);    
 80026f4:	463b      	mov	r3, r7
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 f9f0 	bl	8003adc <EVAL_AUDIO_Error_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <Audio_MAL_IRQHandler+0xe8>)
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <Audio_MAL_IRQHandler+0xf4>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <Audio_MAL_IRQHandler+0xf8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	431a      	orrs	r2, r3
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <Audio_MAL_IRQHandler+0xfc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	4619      	mov	r1, r3
 8002712:	f7fe fe85 	bl	8001420 <DMA_ClearFlag>
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200049b0 	.word	0x200049b0
 8002724:	20000024 	.word	0x20000024
 8002728:	20000034 	.word	0x20000034
 800272c:	20000040 	.word	0x20000040
 8002730:	20000044 	.word	0x20000044
 8002734:	2000004c 	.word	0x2000004c
 8002738:	20000048 	.word	0x20000048
 800273c:	20000050 	.word	0x20000050

08002740 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002744:	f7ff ff7c 	bl	8002640 <Audio_MAL_IRQHandler>
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}

0800274c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002750:	f7ff ff76 	bl	8002640 <Audio_MAL_IRQHandler>
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}

08002758 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 800275c:	2102      	movs	r1, #2
 800275e:	480d      	ldr	r0, [pc, #52]	; (8002794 <SPI3_IRQHandler+0x3c>)
 8002760:	f7ff fd9e 	bl	80022a0 <SPI_I2S_GetFlagStatus>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d011      	beq.n	800278e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <SPI3_IRQHandler+0x40>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d106      	bne.n	8002780 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8002772:	f001 f9ab 	bl	8003acc <EVAL_AUDIO_GetSampleCallBack>
 8002776:	4603      	mov	r3, r0
 8002778:	4619      	mov	r1, r3
 800277a:	2004      	movs	r0, #4
 800277c:	f7fe fc78 	bl	8001070 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8002780:	f001 f9a4 	bl	8003acc <EVAL_AUDIO_GetSampleCallBack>
 8002784:	4603      	mov	r3, r0
 8002786:	4619      	mov	r1, r3
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <SPI3_IRQHandler+0x3c>)
 800278a:	f7ff fd23 	bl	80021d4 <SPI_I2S_SendData>
  }
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40003c00 	.word	0x40003c00
 8002798:	2000002c 	.word	0x2000002c

0800279c <Codec_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	603a      	str	r2, [r7, #0]
 80027a6:	80fb      	strh	r3, [r7, #6]
 80027a8:	460b      	mov	r3, r1
 80027aa:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Configure the Codec related IOs */
  Codec_GPIO_Init();   
 80027b0:	f000 fb1a 	bl	8002de8 <Codec_GPIO_Init>
  
  /* Reset the Codec Registers */
  Codec_Reset();
 80027b4:	f000 f8e2 	bl	800297c <Codec_Reset>

  /* Initialize the Control interface of the Audio Codec */
  Codec_CtrlInterface_Init();     
 80027b8:	f000 faa8 	bl	8002d0c <Codec_CtrlInterface_Init>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);  
 80027bc:	2101      	movs	r1, #1
 80027be:	2002      	movs	r0, #2
 80027c0:	f000 f8f0 	bl	80029a4 <Codec_WriteRegister>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4413      	add	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
      
  counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
 80027cc:	21af      	movs	r1, #175	; 0xaf
 80027ce:	2004      	movs	r0, #4
 80027d0:	f000 f8e8 	bl	80029a4 <Codec_WriteRegister>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4413      	add	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
  OutputDev = 0xAF;
 80027dc:	4b43      	ldr	r3, [pc, #268]	; (80028ec <Codec_Init+0x150>)
 80027de:	22af      	movs	r2, #175	; 0xaf
 80027e0:	701a      	strb	r2, [r3, #0]
  
  /* Clock configuration: Auto detection */  
  counter += Codec_WriteRegister(0x05, 0x81);
 80027e2:	2181      	movs	r1, #129	; 0x81
 80027e4:	2005      	movs	r0, #5
 80027e6:	f000 f8dd 	bl	80029a4 <Codec_WriteRegister>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += Codec_WriteRegister(0x06, CODEC_STANDARD);
 80027f2:	2104      	movs	r1, #4
 80027f4:	2006      	movs	r0, #6
 80027f6:	f000 f8d5 	bl	80029a4 <Codec_WriteRegister>
 80027fa:	4602      	mov	r2, r0
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
      
  /* Set the Master volume */
  Codec_VolumeCtrl(Volume);
 8002802:	797b      	ldrb	r3, [r7, #5]
 8002804:	4618      	mov	r0, r3
 8002806:	f000 f87d 	bl	8002904 <Codec_VolumeCtrl>
  
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800280a:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <Codec_Init+0x154>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d127      	bne.n	8002862 <Codec_Init+0xc6>
  {
    /* Enable the PassThrough on AIN1A and AIN1B */
    counter += Codec_WriteRegister(0x08, 0x01);
 8002812:	2101      	movs	r1, #1
 8002814:	2008      	movs	r0, #8
 8002816:	f000 f8c5 	bl	80029a4 <Codec_WriteRegister>
 800281a:	4602      	mov	r2, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x09, 0x01);
 8002822:	2101      	movs	r1, #1
 8002824:	2009      	movs	r0, #9
 8002826:	f000 f8bd 	bl	80029a4 <Codec_WriteRegister>
 800282a:	4602      	mov	r2, r0
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
    
    /* Route the analog input to the HP line */
    counter += Codec_WriteRegister(0x0E, 0xC0);
 8002832:	21c0      	movs	r1, #192	; 0xc0
 8002834:	200e      	movs	r0, #14
 8002836:	f000 f8b5 	bl	80029a4 <Codec_WriteRegister>
 800283a:	4602      	mov	r2, r0
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
    
    /* Set the Passthough volume */
    counter += Codec_WriteRegister(0x14, 0x00);
 8002842:	2100      	movs	r1, #0
 8002844:	2014      	movs	r0, #20
 8002846:	f000 f8ad 	bl	80029a4 <Codec_WriteRegister>
 800284a:	4602      	mov	r2, r0
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x15, 0x00);
 8002852:	2100      	movs	r1, #0
 8002854:	2015      	movs	r0, #21
 8002856:	f000 f8a5 	bl	80029a4 <Codec_WriteRegister>
 800285a:	4602      	mov	r2, r0
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
  }

  /* Power on the Codec */
  counter += Codec_WriteRegister(0x02, 0x9E);  
 8002862:	219e      	movs	r1, #158	; 0x9e
 8002864:	2002      	movs	r0, #2
 8002866:	f000 f89d 	bl	80029a4 <Codec_WriteRegister>
 800286a:	4602      	mov	r2, r0
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
      off the I2S peripheral MCLK clock (which is the operating clock for Codec).
      If this delay is not inserted, then the codec will not shut down properly and
      it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += Codec_WriteRegister(0x0A, 0x00);
 8002872:	2100      	movs	r1, #0
 8002874:	200a      	movs	r0, #10
 8002876:	f000 f895 	bl	80029a4 <Codec_WriteRegister>
 800287a:	4602      	mov	r2, r0
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  if (CurrAudioInterface != AUDIO_INTERFACE_DAC)
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <Codec_Init+0x154>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d007      	beq.n	800289a <Codec_Init+0xfe>
  {  
    /* Disable the digital soft ramp */
    counter += Codec_WriteRegister(0x0E, 0x04);
 800288a:	2104      	movs	r1, #4
 800288c:	200e      	movs	r0, #14
 800288e:	f000 f889 	bl	80029a4 <Codec_WriteRegister>
 8002892:	4602      	mov	r2, r0
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4413      	add	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  }
  /* Disable the limiter attack level */
  counter += Codec_WriteRegister(0x27, 0x00);
 800289a:	2100      	movs	r1, #0
 800289c:	2027      	movs	r0, #39	; 0x27
 800289e:	f000 f881 	bl	80029a4 <Codec_WriteRegister>
 80028a2:	4602      	mov	r2, r0
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4413      	add	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  /* Adjust Bass and Treble levels */
  counter += Codec_WriteRegister(0x1F, 0x0F);
 80028aa:	210f      	movs	r1, #15
 80028ac:	201f      	movs	r0, #31
 80028ae:	f000 f879 	bl	80029a4 <Codec_WriteRegister>
 80028b2:	4602      	mov	r2, r0
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Adjust PCM volume level */
  counter += Codec_WriteRegister(0x1A, 0x0A);
 80028ba:	210a      	movs	r1, #10
 80028bc:	201a      	movs	r0, #26
 80028be:	f000 f871 	bl	80029a4 <Codec_WriteRegister>
 80028c2:	4602      	mov	r2, r0
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4413      	add	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  counter += Codec_WriteRegister(0x1B, 0x0A);
 80028ca:	210a      	movs	r1, #10
 80028cc:	201b      	movs	r0, #27
 80028ce:	f000 f869 	bl	80029a4 <Codec_WriteRegister>
 80028d2:	4602      	mov	r2, r0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Configure the I2S peripheral */
  Codec_AudioInterface_Init(AudioFreq);  
 80028da:	6838      	ldr	r0, [r7, #0]
 80028dc:	f000 fa42 	bl	8002d64 <Codec_AudioInterface_Init>
  
  /* Return communication control value */
  return counter;  
 80028e0:	68fb      	ldr	r3, [r7, #12]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200005c0 	.word	0x200005c0
 80028f0:	2000002c 	.word	0x2000002c

080028f4 <Codec_Play>:
  * @note   For this codec no Play options are required.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Play(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* 
     No actions required on Codec level for play command
     */  

  /* Return communication control value */
  return 0;  
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <Codec_VolumeCtrl>:
  * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_VolumeCtrl(uint8_t Volume)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
  
  if (Volume > 0xE6)
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	2be6      	cmp	r3, #230	; 0xe6
 8002916:	d916      	bls.n	8002946 <Codec_VolumeCtrl+0x42>
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	3319      	adds	r3, #25
 800291c:	b2db      	uxtb	r3, r3
 800291e:	4619      	mov	r1, r3
 8002920:	2020      	movs	r0, #32
 8002922:	f000 f83f 	bl	80029a4 <Codec_WriteRegister>
 8002926:	4602      	mov	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	3319      	adds	r3, #25
 8002932:	b2db      	uxtb	r3, r3
 8002934:	4619      	mov	r1, r3
 8002936:	2021      	movs	r0, #33	; 0x21
 8002938:	f000 f834 	bl	80029a4 <Codec_WriteRegister>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4413      	add	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	e015      	b.n	8002972 <Codec_VolumeCtrl+0x6e>
  }
  else
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume + 0x19); 
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	3319      	adds	r3, #25
 800294a:	b2db      	uxtb	r3, r3
 800294c:	4619      	mov	r1, r3
 800294e:	2020      	movs	r0, #32
 8002950:	f000 f828 	bl	80029a4 <Codec_WriteRegister>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4413      	add	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume + 0x19); 
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	3319      	adds	r3, #25
 8002960:	b2db      	uxtb	r3, r3
 8002962:	4619      	mov	r1, r3
 8002964:	2021      	movs	r0, #33	; 0x21
 8002966:	f000 f81d 	bl	80029a4 <Codec_WriteRegister>
 800296a:	4602      	mov	r2, r0
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  return counter;  
 8002972:	68fb      	ldr	r3, [r7, #12]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <Codec_Reset>:
  * @note   This function calls an external driver function: The IO Expander driver.
  * @param  None
  * @retval None
  */
static void Codec_Reset(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Power Down the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 8002980:	2200      	movs	r2, #0
 8002982:	2110      	movs	r1, #16
 8002984:	4806      	ldr	r0, [pc, #24]	; (80029a0 <Codec_Reset+0x24>)
 8002986:	f7fe fedd 	bl	8001744 <GPIO_WriteBit>

  /* wait for a delay to insure registers erasing */
  Delay(CODEC_RESET_DELAY); 
 800298a:	f644 70ff 	movw	r0, #20479	; 0x4fff
 800298e:	f000 fabb 	bl	8002f08 <Delay>
  
  /* Power on the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_SET);
 8002992:	2201      	movs	r2, #1
 8002994:	2110      	movs	r1, #16
 8002996:	4802      	ldr	r0, [pc, #8]	; (80029a0 <Codec_Reset+0x24>)
 8002998:	f7fe fed4 	bl	8001744 <GPIO_WriteBit>
}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40020c00 	.word	0x40020c00

080029a4 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	460a      	mov	r2, r1
 80029ae:	71fb      	strb	r3, [r7, #7]
 80029b0:	4613      	mov	r3, r2
 80029b2:	71bb      	strb	r3, [r7, #6]
  uint32_t result = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 80029b8:	4b4c      	ldr	r3, [pc, #304]	; (8002aec <Codec_WriteRegister+0x148>)
 80029ba:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 80029be:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 80029c0:	e00a      	b.n	80029d8 <Codec_WriteRegister+0x34>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80029c2:	4b4a      	ldr	r3, [pc, #296]	; (8002aec <Codec_WriteRegister+0x148>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	1e5a      	subs	r2, r3, #1
 80029c8:	4948      	ldr	r1, [pc, #288]	; (8002aec <Codec_WriteRegister+0x148>)
 80029ca:	600a      	str	r2, [r1, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d103      	bne.n	80029d8 <Codec_WriteRegister+0x34>
 80029d0:	f001 f856 	bl	8003a80 <Codec_TIMEOUT_UserCallback>
 80029d4:	4603      	mov	r3, r0
 80029d6:	e085      	b.n	8002ae4 <Codec_WriteRegister+0x140>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 80029d8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80029dc:	4844      	ldr	r0, [pc, #272]	; (8002af0 <Codec_WriteRegister+0x14c>)
 80029de:	f7ff f8fb 	bl	8001bd8 <I2C_GetFlagStatus>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1ec      	bne.n	80029c2 <Codec_WriteRegister+0x1e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 80029e8:	2101      	movs	r1, #1
 80029ea:	4841      	ldr	r0, [pc, #260]	; (8002af0 <Codec_WriteRegister+0x14c>)
 80029ec:	f7ff f828 	bl	8001a40 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80029f0:	4b3e      	ldr	r3, [pc, #248]	; (8002aec <Codec_WriteRegister+0x148>)
 80029f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029f6:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 80029f8:	e00a      	b.n	8002a10 <Codec_WriteRegister+0x6c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80029fa:	4b3c      	ldr	r3, [pc, #240]	; (8002aec <Codec_WriteRegister+0x148>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	1e5a      	subs	r2, r3, #1
 8002a00:	493a      	ldr	r1, [pc, #232]	; (8002aec <Codec_WriteRegister+0x148>)
 8002a02:	600a      	str	r2, [r1, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d103      	bne.n	8002a10 <Codec_WriteRegister+0x6c>
 8002a08:	f001 f83a 	bl	8003a80 <Codec_TIMEOUT_UserCallback>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	e069      	b.n	8002ae4 <Codec_WriteRegister+0x140>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002a10:	4938      	ldr	r1, [pc, #224]	; (8002af4 <Codec_WriteRegister+0x150>)
 8002a12:	4837      	ldr	r0, [pc, #220]	; (8002af0 <Codec_WriteRegister+0x14c>)
 8002a14:	f7ff f8b0 	bl	8001b78 <I2C_CheckEvent>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ed      	beq.n	80029fa <Codec_WriteRegister+0x56>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2194      	movs	r1, #148	; 0x94
 8002a22:	4833      	ldr	r0, [pc, #204]	; (8002af0 <Codec_WriteRegister+0x14c>)
 8002a24:	f7ff f84c 	bl	8001ac0 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002a28:	4b30      	ldr	r3, [pc, #192]	; (8002aec <Codec_WriteRegister+0x148>)
 8002a2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a2e:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002a30:	e00a      	b.n	8002a48 <Codec_WriteRegister+0xa4>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a32:	4b2e      	ldr	r3, [pc, #184]	; (8002aec <Codec_WriteRegister+0x148>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	1e5a      	subs	r2, r3, #1
 8002a38:	492c      	ldr	r1, [pc, #176]	; (8002aec <Codec_WriteRegister+0x148>)
 8002a3a:	600a      	str	r2, [r1, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d103      	bne.n	8002a48 <Codec_WriteRegister+0xa4>
 8002a40:	f001 f81e 	bl	8003a80 <Codec_TIMEOUT_UserCallback>
 8002a44:	4603      	mov	r3, r0
 8002a46:	e04d      	b.n	8002ae4 <Codec_WriteRegister+0x140>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002a48:	492b      	ldr	r1, [pc, #172]	; (8002af8 <Codec_WriteRegister+0x154>)
 8002a4a:	4829      	ldr	r0, [pc, #164]	; (8002af0 <Codec_WriteRegister+0x14c>)
 8002a4c:	f7ff f894 	bl	8001b78 <I2C_CheckEvent>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ed      	beq.n	8002a32 <Codec_WriteRegister+0x8e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4825      	ldr	r0, [pc, #148]	; (8002af0 <Codec_WriteRegister+0x14c>)
 8002a5c:	f7ff f86e 	bl	8001b3c <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002a60:	4b22      	ldr	r3, [pc, #136]	; (8002aec <Codec_WriteRegister+0x148>)
 8002a62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a66:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8002a68:	e00a      	b.n	8002a80 <Codec_WriteRegister+0xdc>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <Codec_WriteRegister+0x148>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	1e5a      	subs	r2, r3, #1
 8002a70:	491e      	ldr	r1, [pc, #120]	; (8002aec <Codec_WriteRegister+0x148>)
 8002a72:	600a      	str	r2, [r1, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d103      	bne.n	8002a80 <Codec_WriteRegister+0xdc>
 8002a78:	f001 f802 	bl	8003a80 <Codec_TIMEOUT_UserCallback>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	e031      	b.n	8002ae4 <Codec_WriteRegister+0x140>
  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8002a80:	491e      	ldr	r1, [pc, #120]	; (8002afc <Codec_WriteRegister+0x158>)
 8002a82:	481b      	ldr	r0, [pc, #108]	; (8002af0 <Codec_WriteRegister+0x14c>)
 8002a84:	f7ff f878 	bl	8001b78 <I2C_CheckEvent>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0ed      	beq.n	8002a6a <Codec_WriteRegister+0xc6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
 8002a8e:	79bb      	ldrb	r3, [r7, #6]
 8002a90:	4619      	mov	r1, r3
 8002a92:	4817      	ldr	r0, [pc, #92]	; (8002af0 <Codec_WriteRegister+0x14c>)
 8002a94:	f7ff f852 	bl	8001b3c <I2C_SendData>
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <Codec_WriteRegister+0x148>)
 8002a9a:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002a9e:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8002aa0:	e008      	b.n	8002ab4 <Codec_WriteRegister+0x110>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <Codec_WriteRegister+0x148>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	1e5a      	subs	r2, r3, #1
 8002aa8:	4910      	ldr	r1, [pc, #64]	; (8002aec <Codec_WriteRegister+0x148>)
 8002aaa:	600a      	str	r2, [r1, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <Codec_WriteRegister+0x110>
 8002ab0:	f000 ffe6 	bl	8003a80 <Codec_TIMEOUT_UserCallback>
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8002ab4:	4912      	ldr	r1, [pc, #72]	; (8002b00 <Codec_WriteRegister+0x15c>)
 8002ab6:	480e      	ldr	r0, [pc, #56]	; (8002af0 <Codec_WriteRegister+0x14c>)
 8002ab8:	f7ff f88e 	bl	8001bd8 <I2C_GetFlagStatus>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ef      	beq.n	8002aa2 <Codec_WriteRegister+0xfe>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);  
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	480a      	ldr	r0, [pc, #40]	; (8002af0 <Codec_WriteRegister+0x14c>)
 8002ac6:	f7fe ffdb 	bl	8001a80 <I2C_GenerateSTOP>
  
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (Codec_ReadRegister(RegisterAddr) == RegisterValue)? 0:1;
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 f819 	bl	8002b04 <Codec_ReadRegister>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	79bb      	ldrb	r3, [r7, #6]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	bf14      	ite	ne
 8002ada:	2301      	movne	r3, #1
 8002adc:	2300      	moveq	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	60fb      	str	r3, [r7, #12]
#endif /* VERIFY_WRITTENDATA */

  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return result;  
 8002ae2:	68fb      	ldr	r3, [r7, #12]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000028 	.word	0x20000028
 8002af0:	40005400 	.word	0x40005400
 8002af4:	00030001 	.word	0x00030001
 8002af8:	00070082 	.word	0x00070082
 8002afc:	00070080 	.word	0x00070080
 8002b00:	10000004 	.word	0x10000004

08002b04 <Codec_ReadRegister>:
  * @param  RegisterAddr: Address of the register to be read.
  * @retval Value of the register to be read or dummy value if the communication
  *         fails.
  */
static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  uint32_t result = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002b12:	4b76      	ldr	r3, [pc, #472]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002b14:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002b18:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002b1a:	e00a      	b.n	8002b32 <Codec_ReadRegister+0x2e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002b1c:	4b73      	ldr	r3, [pc, #460]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	1e5a      	subs	r2, r3, #1
 8002b22:	4972      	ldr	r1, [pc, #456]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002b24:	600a      	str	r2, [r1, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <Codec_ReadRegister+0x2e>
 8002b2a:	f000 ffa9 	bl	8003a80 <Codec_TIMEOUT_UserCallback>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	e0d7      	b.n	8002ce2 <Codec_ReadRegister+0x1de>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002b32:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002b36:	486e      	ldr	r0, [pc, #440]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002b38:	f7ff f84e 	bl	8001bd8 <I2C_GetFlagStatus>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ec      	bne.n	8002b1c <Codec_ReadRegister+0x18>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002b42:	2101      	movs	r1, #1
 8002b44:	486a      	ldr	r0, [pc, #424]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002b46:	f7fe ff7b 	bl	8001a40 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002b4a:	4b68      	ldr	r3, [pc, #416]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b50:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002b52:	e00a      	b.n	8002b6a <Codec_ReadRegister+0x66>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002b54:	4b65      	ldr	r3, [pc, #404]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	1e5a      	subs	r2, r3, #1
 8002b5a:	4964      	ldr	r1, [pc, #400]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002b5c:	600a      	str	r2, [r1, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d103      	bne.n	8002b6a <Codec_ReadRegister+0x66>
 8002b62:	f000 ff8d 	bl	8003a80 <Codec_TIMEOUT_UserCallback>
 8002b66:	4603      	mov	r3, r0
 8002b68:	e0bb      	b.n	8002ce2 <Codec_ReadRegister+0x1de>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002b6a:	4962      	ldr	r1, [pc, #392]	; (8002cf4 <Codec_ReadRegister+0x1f0>)
 8002b6c:	4860      	ldr	r0, [pc, #384]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002b6e:	f7ff f803 	bl	8001b78 <I2C_CheckEvent>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ed      	beq.n	8002b54 <Codec_ReadRegister+0x50>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2194      	movs	r1, #148	; 0x94
 8002b7c:	485c      	ldr	r0, [pc, #368]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002b7e:	f7fe ff9f 	bl	8001ac0 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002b82:	4b5a      	ldr	r3, [pc, #360]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002b84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b88:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002b8a:	e00a      	b.n	8002ba2 <Codec_ReadRegister+0x9e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002b8c:	4b57      	ldr	r3, [pc, #348]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	1e5a      	subs	r2, r3, #1
 8002b92:	4956      	ldr	r1, [pc, #344]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002b94:	600a      	str	r2, [r1, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <Codec_ReadRegister+0x9e>
 8002b9a:	f000 ff71 	bl	8003a80 <Codec_TIMEOUT_UserCallback>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	e09f      	b.n	8002ce2 <Codec_ReadRegister+0x1de>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002ba2:	4955      	ldr	r1, [pc, #340]	; (8002cf8 <Codec_ReadRegister+0x1f4>)
 8002ba4:	4852      	ldr	r0, [pc, #328]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002ba6:	f7fe ffe7 	bl	8001b78 <I2C_CheckEvent>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0ed      	beq.n	8002b8c <Codec_ReadRegister+0x88>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	484e      	ldr	r0, [pc, #312]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002bb6:	f7fe ffc1 	bl	8001b3c <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002bba:	4b4c      	ldr	r3, [pc, #304]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002bbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bc0:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002bc2:	e00a      	b.n	8002bda <Codec_ReadRegister+0xd6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002bc4:	4b49      	ldr	r3, [pc, #292]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	1e5a      	subs	r2, r3, #1
 8002bca:	4948      	ldr	r1, [pc, #288]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002bcc:	600a      	str	r2, [r1, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <Codec_ReadRegister+0xd6>
 8002bd2:	f000 ff55 	bl	8003a80 <Codec_TIMEOUT_UserCallback>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	e083      	b.n	8002ce2 <Codec_ReadRegister+0x1de>
  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002bda:	4948      	ldr	r1, [pc, #288]	; (8002cfc <Codec_ReadRegister+0x1f8>)
 8002bdc:	4844      	ldr	r0, [pc, #272]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002bde:	f7fe fffb 	bl	8001bd8 <I2C_GetFlagStatus>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0ed      	beq.n	8002bc4 <Codec_ReadRegister+0xc0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002be8:	2101      	movs	r1, #1
 8002bea:	4841      	ldr	r0, [pc, #260]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002bec:	f7fe ff28 	bl	8001a40 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002bf0:	4b3e      	ldr	r3, [pc, #248]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002bf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bf6:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002bf8:	e00a      	b.n	8002c10 <Codec_ReadRegister+0x10c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002bfa:	4b3c      	ldr	r3, [pc, #240]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	1e5a      	subs	r2, r3, #1
 8002c00:	493a      	ldr	r1, [pc, #232]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002c02:	600a      	str	r2, [r1, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d103      	bne.n	8002c10 <Codec_ReadRegister+0x10c>
 8002c08:	f000 ff3a 	bl	8003a80 <Codec_TIMEOUT_UserCallback>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	e068      	b.n	8002ce2 <Codec_ReadRegister+0x1de>
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002c10:	4938      	ldr	r1, [pc, #224]	; (8002cf4 <Codec_ReadRegister+0x1f0>)
 8002c12:	4837      	ldr	r0, [pc, #220]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002c14:	f7fe ffb0 	bl	8001b78 <I2C_CheckEvent>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0ed      	beq.n	8002bfa <Codec_ReadRegister+0xf6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  } 
  
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
 8002c1e:	2201      	movs	r2, #1
 8002c20:	2194      	movs	r1, #148	; 0x94
 8002c22:	4833      	ldr	r0, [pc, #204]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002c24:	f7fe ff4c 	bl	8001ac0 <I2C_Send7bitAddress>
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002c28:	4b30      	ldr	r3, [pc, #192]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002c2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c2e:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002c30:	e00a      	b.n	8002c48 <Codec_ReadRegister+0x144>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002c32:	4b2e      	ldr	r3, [pc, #184]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	1e5a      	subs	r2, r3, #1
 8002c38:	492c      	ldr	r1, [pc, #176]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002c3a:	600a      	str	r2, [r1, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d103      	bne.n	8002c48 <Codec_ReadRegister+0x144>
 8002c40:	f000 ff1e 	bl	8003a80 <Codec_TIMEOUT_UserCallback>
 8002c44:	4603      	mov	r3, r0
 8002c46:	e04c      	b.n	8002ce2 <Codec_ReadRegister+0x1de>
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002c48:	492d      	ldr	r1, [pc, #180]	; (8002d00 <Codec_ReadRegister+0x1fc>)
 8002c4a:	4829      	ldr	r0, [pc, #164]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002c4c:	f7fe ffc4 	bl	8001bd8 <I2C_GetFlagStatus>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0ed      	beq.n	8002c32 <Codec_ReadRegister+0x12e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }     
  
  /*!< Disable Acknowledgment */
  I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);   
 8002c56:	2100      	movs	r1, #0
 8002c58:	4825      	ldr	r0, [pc, #148]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002c5a:	f7fe ff4f 	bl	8001afc <I2C_AcknowledgeConfig>
  
  /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
  (void)CODEC_I2C->SR2;
 8002c5e:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002c60:	8b1b      	ldrh	r3, [r3, #24]
  
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 8002c62:	2101      	movs	r1, #1
 8002c64:	4822      	ldr	r0, [pc, #136]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002c66:	f7fe ff0b 	bl	8001a80 <I2C_GenerateSTOP>
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c70:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002c72:	e00a      	b.n	8002c8a <Codec_ReadRegister+0x186>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002c74:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	1e5a      	subs	r2, r3, #1
 8002c7a:	491c      	ldr	r1, [pc, #112]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002c7c:	600a      	str	r2, [r1, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <Codec_ReadRegister+0x186>
 8002c82:	f000 fefd 	bl	8003a80 <Codec_TIMEOUT_UserCallback>
 8002c86:	4603      	mov	r3, r0
 8002c88:	e02b      	b.n	8002ce2 <Codec_ReadRegister+0x1de>
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002c8a:	491e      	ldr	r1, [pc, #120]	; (8002d04 <Codec_ReadRegister+0x200>)
 8002c8c:	4818      	ldr	r0, [pc, #96]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002c8e:	f7fe ffa3 	bl	8001bd8 <I2C_GetFlagStatus>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ed      	beq.n	8002c74 <Codec_ReadRegister+0x170>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
 8002c98:	4815      	ldr	r0, [pc, #84]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002c9a:	f7fe ff5f 	bl	8001b5c <I2C_ReceiveData>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	60fb      	str	r3, [r7, #12]
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002ca4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ca8:	601a      	str	r2, [r3, #0]
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 8002caa:	e00a      	b.n	8002cc2 <Codec_ReadRegister+0x1be>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002cac:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	1e5a      	subs	r2, r3, #1
 8002cb2:	490e      	ldr	r1, [pc, #56]	; (8002cec <Codec_ReadRegister+0x1e8>)
 8002cb4:	600a      	str	r2, [r1, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d103      	bne.n	8002cc2 <Codec_ReadRegister+0x1be>
 8002cba:	f000 fee1 	bl	8003a80 <Codec_TIMEOUT_UserCallback>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	e00f      	b.n	8002ce2 <Codec_ReadRegister+0x1de>
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ed      	bne.n	8002cac <Codec_ReadRegister+0x1a8>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }  
  
  /*!< Re-Enable Acknowledgment to be ready for another reception */
  I2C_AcknowledgeConfig(CODEC_I2C, ENABLE);  
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	4807      	ldr	r0, [pc, #28]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002cd4:	f7fe ff12 	bl	8001afc <I2C_AcknowledgeConfig>
  
  /* Clear AF flag for next communication */
  I2C_ClearFlag(CODEC_I2C, I2C_FLAG_AF); 
 8002cd8:	490b      	ldr	r1, [pc, #44]	; (8002d08 <Codec_ReadRegister+0x204>)
 8002cda:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <Codec_ReadRegister+0x1ec>)
 8002cdc:	f7fe ffb0 	bl	8001c40 <I2C_ClearFlag>
  
  /* Return the byte read from Codec */
  return result;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000028 	.word	0x20000028
 8002cf0:	40005400 	.word	0x40005400
 8002cf4:	00030001 	.word	0x00030001
 8002cf8:	00070082 	.word	0x00070082
 8002cfc:	10000004 	.word	0x10000004
 8002d00:	10000002 	.word	0x10000002
 8002d04:	10000040 	.word	0x10000040
 8002d08:	10000400 	.word	0x10000400

08002d0c <Codec_CtrlInterface_Init>:
  * @brief  Initializes the Audio Codec control interface (I2C).
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* Enable the CODEC_I2C peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2C_CLK, ENABLE);
 8002d12:	2101      	movs	r1, #1
 8002d14:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002d18:	f7ff f874 	bl	8001e04 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(CODEC_I2C);
 8002d1c:	480f      	ldr	r0, [pc, #60]	; (8002d5c <Codec_CtrlInterface_Init+0x50>)
 8002d1e:	f7fe fd73 	bl	8001808 <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8002d22:	2300      	movs	r3, #0
 8002d24:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8002d26:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002d2a:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 8002d2c:	2333      	movs	r3, #51	; 0x33
 8002d2e:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d34:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002d36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d3a:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <Codec_CtrlInterface_Init+0x54>)
 8002d3e:	603b      	str	r3, [r7, #0]
  /* Enable the I2C peripheral */
  I2C_Cmd(CODEC_I2C, ENABLE);  
 8002d40:	2101      	movs	r1, #1
 8002d42:	4806      	ldr	r0, [pc, #24]	; (8002d5c <Codec_CtrlInterface_Init+0x50>)
 8002d44:	f7fe fe5c 	bl	8001a00 <I2C_Cmd>
  I2C_Init(CODEC_I2C, &I2C_InitStructure);
 8002d48:	463b      	mov	r3, r7
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4803      	ldr	r0, [pc, #12]	; (8002d5c <Codec_CtrlInterface_Init+0x50>)
 8002d4e:	f7fe fd95 	bl	800187c <I2C_Init>
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40005400 	.word	0x40005400
 8002d60:	000186a0 	.word	0x000186a0

08002d64 <Codec_AudioInterface_Init>:
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  * @retval None
  */
static void Codec_AudioInterface_Init(uint32_t AudioFreq)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  I2S_InitTypeDef I2S_InitStructure;
  DAC_InitTypeDef  DAC_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, ENABLE);
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002d72:	f7ff f847 	bl	8001e04 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(CODEC_I2S);
 8002d76:	481a      	ldr	r0, [pc, #104]	; (8002de0 <Codec_AudioInterface_Init+0x7c>)
 8002d78:	f7ff f8c4 	bl	8001f04 <SPI_I2S_DeInit>
  I2S_InitStructure.I2S_AudioFreq = AudioFreq;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	623b      	str	r3, [r7, #32]
  I2S_InitStructure.I2S_Standard = I2S_STANDARD;
 8002d80:	2300      	movs	r3, #0
 8002d82:	837b      	strh	r3, [r7, #26]
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 8002d84:	2300      	movs	r3, #0
 8002d86:	83bb      	strh	r3, [r7, #28]
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	84bb      	strh	r3, [r7, #36]	; 0x24
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterRx;
  }
  else
  {
#else
   I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 8002d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d90:	833b      	strh	r3, [r7, #24]
#endif
#ifdef DAC_USE_I2S_DMA
  }
#endif /* DAC_USE_I2S_DMA */
#ifdef CODEC_MCLK_ENABLED
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 8002d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d96:	83fb      	strh	r3, [r7, #30]
#else
#error "No selection for the MCLK output has been defined !"
#endif /* CODEC_MCLK_ENABLED */
  
  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(CODEC_I2S, &I2S_InitStructure);
 8002d98:	f107 0318 	add.w	r3, r7, #24
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4810      	ldr	r0, [pc, #64]	; (8002de0 <Codec_AudioInterface_Init+0x7c>)
 8002da0:	f7ff f91e 	bl	8001fe0 <I2S_Init>


  /* Configure the DAC interface */
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <Codec_AudioInterface_Init+0x80>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d114      	bne.n	8002dd6 <Codec_AudioInterface_Init+0x72>
  {    
    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8002dac:	2101      	movs	r1, #1
 8002dae:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002db2:	f7ff f827 	bl	8001e04 <RCC_APB1PeriphClockCmd>
    
    /* DAC channel1 Configuration */
    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
    DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 8002dc2:	f107 0308 	add.w	r3, r7, #8
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7fe f8f7 	bl	8000fbc <DAC_Init>
    
    /* Enable DAC Channel1 */
    DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);  
 8002dce:	2101      	movs	r1, #1
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f7fe f927 	bl	8001024 <DAC_Cmd>
  }
  
  /* The I2S peripheral will be enabled only in the EVAL_AUDIO_Play() function 
       or by user functions if DMA mode not enabled */  
}
 8002dd6:	bf00      	nop
 8002dd8:	3728      	adds	r7, #40	; 0x28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40003c00 	.word	0x40003c00
 8002de4:	2000002c 	.word	0x2000002c

08002de8 <Codec_GPIO_Init>:
  *        interfaces).
  * @param  None
  * @retval None
  */
static void Codec_GPIO_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable Reset GPIO Clock */
  RCC_AHB1PeriphClockCmd(AUDIO_RESET_GPIO_CLK,ENABLE);
 8002dee:	2101      	movs	r1, #1
 8002df0:	2008      	movs	r0, #8
 8002df2:	f7fe ffe7 	bl	8001dc4 <RCC_AHB1PeriphClockCmd>
  
  /* Audio reset pin configuration -------------------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = AUDIO_RESET_PIN; 
 8002df6:	2310      	movs	r3, #16
 8002df8:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002e02:	2300      	movs	r3, #0
 8002e04:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
 8002e0a:	463b      	mov	r3, r7
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4839      	ldr	r0, [pc, #228]	; (8002ef4 <Codec_GPIO_Init+0x10c>)
 8002e10:	f7fe fbf0 	bl	80015f4 <GPIO_Init>
  
  /* Enable I2S and I2C GPIO clocks */
  RCC_AHB1PeriphClockCmd(CODEC_I2C_GPIO_CLOCK | CODEC_I2S_GPIO_CLOCK, ENABLE);
 8002e14:	2101      	movs	r1, #1
 8002e16:	2007      	movs	r0, #7
 8002e18:	f7fe ffd4 	bl	8001dc4 <RCC_AHB1PeriphClockCmd>

  /* CODEC_I2C SCL and SDA pins configuration -------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2C_SCL_PIN | CODEC_I2C_SDA_PIN; 
 8002e1c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002e20:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002e22:	2302      	movs	r3, #2
 8002e24:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e26:	2302      	movs	r3, #2
 8002e28:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2C_GPIO, &GPIO_InitStructure);     
 8002e32:	463b      	mov	r3, r7
 8002e34:	4619      	mov	r1, r3
 8002e36:	4830      	ldr	r0, [pc, #192]	; (8002ef8 <Codec_GPIO_Init+0x110>)
 8002e38:	f7fe fbdc 	bl	80015f4 <GPIO_Init>
  /* Connect pins to I2C peripheral */
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SCL_PINSRC, CODEC_I2C_GPIO_AF);  
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	2106      	movs	r1, #6
 8002e40:	482d      	ldr	r0, [pc, #180]	; (8002ef8 <Codec_GPIO_Init+0x110>)
 8002e42:	f7fe fc97 	bl	8001774 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SDA_PINSRC, CODEC_I2C_GPIO_AF);  
 8002e46:	2204      	movs	r2, #4
 8002e48:	2109      	movs	r1, #9
 8002e4a:	482b      	ldr	r0, [pc, #172]	; (8002ef8 <Codec_GPIO_Init+0x110>)
 8002e4c:	f7fe fc92 	bl	8001774 <GPIO_PinAFConfig>

  /* CODEC_I2S pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
 8002e50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e54:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002e56:	2302      	movs	r3, #2
 8002e58:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
 8002e66:	463b      	mov	r3, r7
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4824      	ldr	r0, [pc, #144]	; (8002efc <Codec_GPIO_Init+0x114>)
 8002e6c:	f7fe fbc2 	bl	80015f4 <GPIO_Init>
  
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, CODEC_I2S_GPIO_AF);  
 8002e70:	2206      	movs	r2, #6
 8002e72:	2104      	movs	r1, #4
 8002e74:	4822      	ldr	r0, [pc, #136]	; (8002f00 <Codec_GPIO_Init+0x118>)
 8002e76:	f7fe fc7d 	bl	8001774 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, CODEC_I2S_GPIO_AF);
 8002e7a:	2206      	movs	r2, #6
 8002e7c:	210a      	movs	r1, #10
 8002e7e:	481f      	ldr	r0, [pc, #124]	; (8002efc <Codec_GPIO_Init+0x114>)
 8002e80:	f7fe fc78 	bl	8001774 <GPIO_PinAFConfig>

  if (CurrAudioInterface != AUDIO_INTERFACE_DAC) 
 8002e84:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <Codec_GPIO_Init+0x11c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d00c      	beq.n	8002ea6 <Codec_GPIO_Init+0xbe>
  {
    GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 8002e8c:	2310      	movs	r3, #16
 8002e8e:	603b      	str	r3, [r7, #0]
    GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 8002e90:	463b      	mov	r3, r7
 8002e92:	4619      	mov	r1, r3
 8002e94:	481a      	ldr	r0, [pc, #104]	; (8002f00 <Codec_GPIO_Init+0x118>)
 8002e96:	f7fe fbad 	bl	80015f4 <GPIO_Init>
    GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, CODEC_I2S_GPIO_AF);
 8002e9a:	2206      	movs	r2, #6
 8002e9c:	210c      	movs	r1, #12
 8002e9e:	4817      	ldr	r0, [pc, #92]	; (8002efc <Codec_GPIO_Init+0x114>)
 8002ea0:	f7fe fc68 	bl	8001774 <GPIO_PinAFConfig>
 8002ea4:	e00e      	b.n	8002ec4 <Codec_GPIO_Init+0xdc>
  }
  else
  {
    /* GPIOA clock enable (to be used with DAC) */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f7fe ff8b 	bl	8001dc4 <RCC_AHB1PeriphClockCmd>
   
    /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8002eae:	2310      	movs	r3, #16
 8002eb0:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002eba:	463b      	mov	r3, r7
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4810      	ldr	r0, [pc, #64]	; (8002f00 <Codec_GPIO_Init+0x118>)
 8002ec0:	f7fe fb98 	bl	80015f4 <GPIO_Init>
  }

#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 8002ed8:	463b      	mov	r3, r7
 8002eda:	4619      	mov	r1, r3
 8002edc:	4807      	ldr	r0, [pc, #28]	; (8002efc <Codec_GPIO_Init+0x114>)
 8002ede:	f7fe fb89 	bl	80015f4 <GPIO_Init>
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 8002ee2:	2206      	movs	r2, #6
 8002ee4:	2107      	movs	r1, #7
 8002ee6:	4805      	ldr	r0, [pc, #20]	; (8002efc <Codec_GPIO_Init+0x114>)
 8002ee8:	f7fe fc44 	bl	8001774 <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */ 
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40020c00 	.word	0x40020c00
 8002ef8:	40020400 	.word	0x40020400
 8002efc:	40020800 	.word	0x40020800
 8002f00:	40020000 	.word	0x40020000
 8002f04:	2000002c 	.word	0x2000002c

08002f08 <Delay>:
  * @param  nCount: specifies the delay time length.
  * @retval None
  */

static void Delay( __IO uint32_t nCount)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  for (; nCount != 0; nCount--);
 8002f10:	e002      	b.n	8002f18 <Delay+0x10>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	607b      	str	r3, [r7, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f9      	bne.n	8002f12 <Delay+0xa>
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop

08002f2c <Audio_MAL_Init>:
  *         from Media to the I2S peripheral.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Init(void)  
{ 
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
#else  
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;
#endif

  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002f32:	4b4a      	ldr	r3, [pc, #296]	; (800305c <Audio_MAL_Init+0x130>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d16e      	bne.n	8003018 <Audio_MAL_Init+0xec>
  {
    /* Enable the DMA clock */
    RCC_AHB1PeriphClockCmd(AUDIO_MAL_DMA_CLOCK, ENABLE); 
 8002f3a:	4b49      	ldr	r3, [pc, #292]	; (8003060 <Audio_MAL_Init+0x134>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe ff3f 	bl	8001dc4 <RCC_AHB1PeriphClockCmd>
    
    /* Configure the DMA Stream */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 8002f46:	4b47      	ldr	r3, [pc, #284]	; (8003064 <Audio_MAL_Init+0x138>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe fa0f 	bl	8001370 <DMA_Cmd>
    DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 8002f52:	4b44      	ldr	r3, [pc, #272]	; (8003064 <Audio_MAL_Init+0x138>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe f8a6 	bl	80010a8 <DMA_DeInit>
    /* Set the parameters to be configured */
    DMA_InitStructure.DMA_Channel = AUDIO_MAL_DMA_CHANNEL;  
 8002f5c:	4b42      	ldr	r3, [pc, #264]	; (8003068 <Audio_MAL_Init+0x13c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a42      	ldr	r2, [pc, #264]	; (800306c <Audio_MAL_Init+0x140>)
 8002f62:	6013      	str	r3, [r2, #0]
    DMA_InitStructure.DMA_PeripheralBaseAddr = AUDIO_MAL_DMA_DREG;
 8002f64:	4b42      	ldr	r3, [pc, #264]	; (8003070 <Audio_MAL_Init+0x144>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a40      	ldr	r2, [pc, #256]	; (800306c <Audio_MAL_Init+0x140>)
 8002f6a:	6053      	str	r3, [r2, #4]
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 8002f6c:	4b3f      	ldr	r3, [pc, #252]	; (800306c <Audio_MAL_Init+0x140>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8002f72:	4b3e      	ldr	r3, [pc, #248]	; (800306c <Audio_MAL_Init+0x140>)
 8002f74:	2240      	movs	r2, #64	; 0x40
 8002f76:	60da      	str	r2, [r3, #12]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)0xFFFE;      /* This field will be configured in play function */
 8002f78:	4b3c      	ldr	r3, [pc, #240]	; (800306c <Audio_MAL_Init+0x140>)
 8002f7a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002f7e:	611a      	str	r2, [r3, #16]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002f80:	4b3a      	ldr	r3, [pc, #232]	; (800306c <Audio_MAL_Init+0x140>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	615a      	str	r2, [r3, #20]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002f86:	4b39      	ldr	r3, [pc, #228]	; (800306c <Audio_MAL_Init+0x140>)
 8002f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f8c:	619a      	str	r2, [r3, #24]
    DMA_InitStructure.DMA_PeripheralDataSize = AUDIO_MAL_DMA_PERIPH_DATA_SIZE;
 8002f8e:	4b37      	ldr	r3, [pc, #220]	; (800306c <Audio_MAL_Init+0x140>)
 8002f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f94:	61da      	str	r2, [r3, #28]
    DMA_InitStructure.DMA_MemoryDataSize = AUDIO_MAL_DMA_MEM_DATA_SIZE; 
 8002f96:	4b35      	ldr	r3, [pc, #212]	; (800306c <Audio_MAL_Init+0x140>)
 8002f98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f9c:	621a      	str	r2, [r3, #32]
#ifdef AUDIO_MAL_MODE_NORMAL
    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
#elif defined(AUDIO_MAL_MODE_CIRCULAR)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8002f9e:	4b33      	ldr	r3, [pc, #204]	; (800306c <Audio_MAL_Init+0x140>)
 8002fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error "AUDIO_MAL_MODE_NORMAL or AUDIO_MAL_MODE_CIRCULAR should be selected !!"
#endif /* AUDIO_MAL_MODE_NORMAL */  
    DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8002fa6:	4b31      	ldr	r3, [pc, #196]	; (800306c <Audio_MAL_Init+0x140>)
 8002fa8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002fac:	629a      	str	r2, [r3, #40]	; 0x28
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 8002fae:	4b2f      	ldr	r3, [pc, #188]	; (800306c <Audio_MAL_Init+0x140>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	62da      	str	r2, [r3, #44]	; 0x2c
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	; (800306c <Audio_MAL_Init+0x140>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002fba:	4b2c      	ldr	r3, [pc, #176]	; (800306c <Audio_MAL_Init+0x140>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	635a      	str	r2, [r3, #52]	; 0x34
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;  
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	; (800306c <Audio_MAL_Init+0x140>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);  
 8002fc6:	4b27      	ldr	r3, [pc, #156]	; (8003064 <Audio_MAL_Init+0x138>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4928      	ldr	r1, [pc, #160]	; (800306c <Audio_MAL_Init+0x140>)
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fe f93f 	bl	8001250 <DMA_Init>
    
    /* Enable the selected DMA interrupts (selected in "stm32f4_discovery_eval_audio_codec.h" defines) */
#ifdef AUDIO_MAL_DMA_IT_TC_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TC, ENABLE);
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <Audio_MAL_Init+0x138>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	2110      	movs	r1, #16
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fa4e 	bl	800147c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TC_EN */
#ifdef AUDIO_MAL_DMA_IT_HT_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_HT, ENABLE);
 8002fe0:	4b20      	ldr	r3, [pc, #128]	; (8003064 <Audio_MAL_Init+0x138>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	2108      	movs	r1, #8
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fa47 	bl	800147c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
#ifdef AUDIO_MAL_DMA_IT_TE_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <Audio_MAL_Init+0x138>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	2186      	movs	r1, #134	; 0x86
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe fa40 	bl	800147c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
    
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 8002ffc:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <Audio_MAL_Init+0x148>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 8003004:	2300      	movs	r3, #0
 8003006:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 8003008:	2300      	movs	r3, #0
 800300a:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800300c:	2301      	movs	r3, #1
 800300e:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8003010:	1d3b      	adds	r3, r7, #4
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fd7a 	bl	8000b0c <NVIC_Init>
    NVIC_Init(&NVIC_InitStructure);
#endif 
  }
#endif /* DAC_USE_I2S_DMA */
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8003018:	4b10      	ldr	r3, [pc, #64]	; (800305c <Audio_MAL_Init+0x130>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <Audio_MAL_Init+0x100>
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
 8003020:	2201      	movs	r2, #1
 8003022:	2102      	movs	r1, #2
 8003024:	4814      	ldr	r0, [pc, #80]	; (8003078 <Audio_MAL_Init+0x14c>)
 8003026:	f7ff f8e5 	bl	80021f4 <SPI_I2S_DMACmd>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 800302a:	e012      	b.n	8003052 <Audio_MAL_Init+0x126>
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
  }
  else
  {
    /* Configure the STM32 DAC to geenrate audio analog signal */
    DAC_Config();
 800302c:	f000 f86c 	bl	8003108 <DAC_Config>
    
#ifndef DAC_USE_I2S_DMA
    /* Enable the I2S interrupt used to write into the DAC register */
    SPI_I2S_ITConfig(SPI3, SPI_I2S_IT_TXE, ENABLE);
 8003030:	2201      	movs	r2, #1
 8003032:	2171      	movs	r1, #113	; 0x71
 8003034:	4810      	ldr	r0, [pc, #64]	; (8003078 <Audio_MAL_Init+0x14c>)
 8003036:	f7ff f901 	bl	800223c <SPI_I2S_ITConfig>
    
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = CODEC_I2S_IRQ;
 800303a:	2333      	movs	r3, #51	; 0x33
 800303c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 800303e:	2300      	movs	r3, #0
 8003040:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 8003042:	2300      	movs	r3, #0
 8003044:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003046:	2301      	movs	r3, #1
 8003048:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure); 
 800304a:	1d3b      	adds	r3, r7, #4
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fd5d 	bl	8000b0c <NVIC_Init>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2000002c 	.word	0x2000002c
 8003060:	20000030 	.word	0x20000030
 8003064:	20000034 	.word	0x20000034
 8003068:	200005c4 	.word	0x200005c4
 800306c:	200049f0 	.word	0x200049f0
 8003070:	20000038 	.word	0x20000038
 8003074:	2000003c 	.word	0x2000003c
 8003078:	40003c00 	.word	0x40003c00

0800307c <Audio_MAL_Play>:
  * @brief  Starts playing audio stream from the audio Media.
  * @param  None
  * @retval None
  */
void Audio_MAL_Play(uint32_t Addr, uint32_t Size)
{         
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8003086:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <Audio_MAL_Play+0x7c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d112      	bne.n	80030b4 <Audio_MAL_Play+0x38>
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 800308e:	4a1b      	ldr	r2, [pc, #108]	; (80030fc <Audio_MAL_Play+0x80>)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 8003094:	4a19      	ldr	r2, [pc, #100]	; (80030fc <Audio_MAL_Play+0x80>)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800309a:	4b19      	ldr	r3, [pc, #100]	; (8003100 <Audio_MAL_Play+0x84>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4917      	ldr	r1, [pc, #92]	; (80030fc <Audio_MAL_Play+0x80>)
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fe f8d5 	bl	8001250 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);   
 80030a6:	4b16      	ldr	r3, [pc, #88]	; (8003100 <Audio_MAL_Play+0x84>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2101      	movs	r1, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe f95f 	bl	8001370 <DMA_Cmd>
 80030b2:	e011      	b.n	80030d8 <Audio_MAL_Play+0x5c>
  }
#ifndef DAC_USE_I2S_DMA
  else
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 80030b4:	4a11      	ldr	r2, [pc, #68]	; (80030fc <Audio_MAL_Play+0x80>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 80030ba:	4a10      	ldr	r2, [pc, #64]	; (80030fc <Audio_MAL_Play+0x80>)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80030c0:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <Audio_MAL_Play+0x84>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	490d      	ldr	r1, [pc, #52]	; (80030fc <Audio_MAL_Play+0x80>)
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe f8c2 	bl	8001250 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <Audio_MAL_Play+0x84>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe f94c 	bl	8001370 <DMA_Cmd>
  }
#endif /* DAC_USE_I2S_DMA */
  
  /* If the I2S peripheral is still not enabled, enable it */
  if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <Audio_MAL_Play+0x88>)
 80030da:	8b9b      	ldrh	r3, [r3, #28]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <Audio_MAL_Play+0x72>
  {
    I2S_Cmd(CODEC_I2S, ENABLE);
 80030e6:	2101      	movs	r1, #1
 80030e8:	4806      	ldr	r0, [pc, #24]	; (8003104 <Audio_MAL_Play+0x88>)
 80030ea:	f7ff f853 	bl	8002194 <I2S_Cmd>
  }
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	2000002c 	.word	0x2000002c
 80030fc:	200049f0 	.word	0x200049f0
 8003100:	20000034 	.word	0x20000034
 8003104:	40003c00 	.word	0x40003c00

08003108 <DAC_Config>:
  * @brief  DAC  Channel1 Configuration
  * @param  None
  * @retval None
  */
void DAC_Config(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
  DAC_InitTypeDef  DAC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;

  /* DMA1 clock and GPIOA clock enable (to be used with DAC) */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 800310e:	2101      	movs	r1, #1
 8003110:	4813      	ldr	r0, [pc, #76]	; (8003160 <DAC_Config+0x58>)
 8003112:	f7fe fe57 	bl	8001dc4 <RCC_AHB1PeriphClockCmd>

  /* DAC Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8003116:	2101      	movs	r1, #1
 8003118:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800311c:	f7fe fe72 	bl	8001e04 <RCC_APB1PeriphClockCmd>

  /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8003120:	2310      	movs	r3, #16
 8003122:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8003124:	2303      	movs	r3, #3
 8003126:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 800312c:	463b      	mov	r3, r7
 800312e:	4619      	mov	r1, r3
 8003130:	480c      	ldr	r0, [pc, #48]	; (8003164 <DAC_Config+0x5c>)
 8003132:	f7fe fa5f 	bl	80015f4 <GPIO_Init>

  /* DAC channel1 Configuration */
  DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
  DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 8003142:	f107 0308 	add.w	r3, r7, #8
 8003146:	4619      	mov	r1, r3
 8003148:	2000      	movs	r0, #0
 800314a:	f7fd ff37 	bl	8000fbc <DAC_Init>

  /* Enable DAC Channel1 */
  DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);
 800314e:	2101      	movs	r1, #1
 8003150:	2000      	movs	r0, #0
 8003152:	f7fd ff67 	bl	8001024 <DAC_Cmd>
}
 8003156:	bf00      	nop
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	00200001 	.word	0x00200001
 8003164:	40020000 	.word	0x40020000

08003168 <sf_biquad_process>:
// the biquad filter processes a sound using 10 parameters:
//   b0, b1, b2, a1, a2      transformation coefficients
//   xn0, xn1, xn2           the unfiltered sample at position x[n], x[n-1], and x[n-2]
//   yn1, yn2                the filtered sample at position y[n-1] and y[n-2]
void sf_biquad_process(sf_biquad_state_st *state, int size, sf_sample_st *input,
	sf_sample_st *output){
 8003168:	b480      	push	{r7}
 800316a:	b097      	sub	sp, #92	; 0x5c
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
 8003174:	603b      	str	r3, [r7, #0]

	// pull out the state into local variables
	float b0 = state->b0;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	653b      	str	r3, [r7, #80]	; 0x50
	float b1 = state->b1;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	64fb      	str	r3, [r7, #76]	; 0x4c
	float b2 = state->b2;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	64bb      	str	r3, [r7, #72]	; 0x48
	float a1 = state->a1;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	647b      	str	r3, [r7, #68]	; 0x44
	float a2 = state->a2;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	643b      	str	r3, [r7, #64]	; 0x40
	sf_sample_st xn1 = state->xn1;
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800319a:	3214      	adds	r2, #20
 800319c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031a0:	e883 0003 	stmia.w	r3, {r0, r1}
	sf_sample_st xn2 = state->xn2;
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031aa:	321c      	adds	r2, #28
 80031ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031b0:	e883 0003 	stmia.w	r3, {r0, r1}
	sf_sample_st yn1 = state->yn1;
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	f107 0320 	add.w	r3, r7, #32
 80031ba:	3224      	adds	r2, #36	; 0x24
 80031bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031c0:	e883 0003 	stmia.w	r3, {r0, r1}
	sf_sample_st yn2 = state->yn2;
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	f107 0318 	add.w	r3, r7, #24
 80031ca:	322c      	adds	r2, #44	; 0x2c
 80031cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031d0:	e883 0003 	stmia.w	r3, {r0, r1}

	// loop for each sample
	for (int n = 0; n < size; n++){
 80031d4:	2300      	movs	r3, #0
 80031d6:	657b      	str	r3, [r7, #84]	; 0x54
 80031d8:	e086      	b.n	80032e8 <sf_biquad_process+0x180>
		// get the current sample
		sf_sample_st xn0 = input[n];
 80031da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	441a      	add	r2, r3
 80031e2:	f107 0310 	add.w	r3, r7, #16
 80031e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031ea:	e883 0003 	stmia.w	r3, {r0, r1}

		// the formula is the same for each channel
		float L =
			b0 * xn0.L +
 80031ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80031f2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80031f6:	ee27 7a27 	vmul.f32	s14, s14, s15
			b1 * xn1.L +
 80031fa:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80031fe:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003202:	ee66 7aa7 	vmul.f32	s15, s13, s15
		// get the current sample
		sf_sample_st xn0 = input[n];

		// the formula is the same for each channel
		float L =
			b0 * xn0.L +
 8003206:	ee37 7a27 	vadd.f32	s14, s14, s15
			b1 * xn1.L +
			b2 * xn2.L -
 800320a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800320e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003212:	ee66 7aa7 	vmul.f32	s15, s13, s15
		sf_sample_st xn0 = input[n];

		// the formula is the same for each channel
		float L =
			b0 * xn0.L +
			b1 * xn1.L +
 8003216:	ee37 7a27 	vadd.f32	s14, s14, s15
			b2 * xn2.L -
			a1 * yn1.L -
 800321a:	edd7 6a08 	vldr	s13, [r7, #32]
 800321e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003222:	ee66 7aa7 	vmul.f32	s15, s13, s15

		// the formula is the same for each channel
		float L =
			b0 * xn0.L +
			b1 * xn1.L +
			b2 * xn2.L -
 8003226:	ee37 7a67 	vsub.f32	s14, s14, s15
			a1 * yn1.L -
			a2 * yn2.L;
 800322a:	edd7 6a06 	vldr	s13, [r7, #24]
 800322e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003232:	ee66 7aa7 	vmul.f32	s15, s13, s15
	for (int n = 0; n < size; n++){
		// get the current sample
		sf_sample_st xn0 = input[n];

		// the formula is the same for each channel
		float L =
 8003236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800323a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			b1 * xn1.L +
			b2 * xn2.L -
			a1 * yn1.L -
			a2 * yn2.L;
		float R =
			b0 * xn0.R +
 800323e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003242:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003246:	ee27 7a27 	vmul.f32	s14, s14, s15
			b1 * xn1.R +
 800324a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800324e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003252:	ee66 7aa7 	vmul.f32	s15, s13, s15
			b1 * xn1.L +
			b2 * xn2.L -
			a1 * yn1.L -
			a2 * yn2.L;
		float R =
			b0 * xn0.R +
 8003256:	ee37 7a27 	vadd.f32	s14, s14, s15
			b1 * xn1.R +
			b2 * xn2.R -
 800325a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800325e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003262:	ee66 7aa7 	vmul.f32	s15, s13, s15
			b2 * xn2.L -
			a1 * yn1.L -
			a2 * yn2.L;
		float R =
			b0 * xn0.R +
			b1 * xn1.R +
 8003266:	ee37 7a27 	vadd.f32	s14, s14, s15
			b2 * xn2.R -
			a1 * yn1.R -
 800326a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800326e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003272:	ee66 7aa7 	vmul.f32	s15, s13, s15
			a1 * yn1.L -
			a2 * yn2.L;
		float R =
			b0 * xn0.R +
			b1 * xn1.R +
			b2 * xn2.R -
 8003276:	ee37 7a67 	vsub.f32	s14, s14, s15
			a1 * yn1.R -
			a2 * yn2.R;
 800327a:	edd7 6a07 	vldr	s13, [r7, #28]
 800327e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003282:	ee66 7aa7 	vmul.f32	s15, s13, s15
			b0 * xn0.L +
			b1 * xn1.L +
			b2 * xn2.L -
			a1 * yn1.L -
			a2 * yn2.L;
		float R =
 8003286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800328a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			b2 * xn2.R -
			a1 * yn1.R -
			a2 * yn2.R;

		// save the result
		output[n] = (sf_sample_st){ L, R };
 800328e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4413      	add	r3, r2
 8003296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800329c:	605a      	str	r2, [r3, #4]

		// slide everything down one sample
		xn2 = xn1;
 800329e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80032a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032aa:	e883 0003 	stmia.w	r3, {r0, r1}
		xn1 = xn0;
 80032ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032b2:	f107 0210 	add.w	r2, r7, #16
 80032b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032ba:	e883 0003 	stmia.w	r3, {r0, r1}
		yn2 = yn1;
 80032be:	f107 0318 	add.w	r3, r7, #24
 80032c2:	f107 0220 	add.w	r2, r7, #32
 80032c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032ca:	e883 0003 	stmia.w	r3, {r0, r1}
		yn1 = output[n];
 80032ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	441a      	add	r2, r3
 80032d6:	f107 0320 	add.w	r3, r7, #32
 80032da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032de:	e883 0003 	stmia.w	r3, {r0, r1}
	sf_sample_st xn2 = state->xn2;
	sf_sample_st yn1 = state->yn1;
	sf_sample_st yn2 = state->yn2;

	// loop for each sample
	for (int n = 0; n < size; n++){
 80032e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e4:	3301      	adds	r3, #1
 80032e6:	657b      	str	r3, [r7, #84]	; 0x54
 80032e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	f6ff af74 	blt.w	80031da <sf_biquad_process+0x72>
		yn2 = yn1;
		yn1 = output[n];
	}

	// save the state for future processing
	state->xn1 = xn1;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3314      	adds	r3, #20
 80032f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80032fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032fe:	e883 0003 	stmia.w	r3, {r0, r1}
	state->xn2 = xn2;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	331c      	adds	r3, #28
 8003306:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800330a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800330e:	e883 0003 	stmia.w	r3, {r0, r1}
	state->yn1 = yn1;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3324      	adds	r3, #36	; 0x24
 8003316:	f107 0220 	add.w	r2, r7, #32
 800331a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800331e:	e883 0003 	stmia.w	r3, {r0, r1}
	state->yn2 = yn2;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	332c      	adds	r3, #44	; 0x2c
 8003326:	f107 0218 	add.w	r2, r7, #24
 800332a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800332e:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8003332:	bf00      	nop
 8003334:	375c      	adds	r7, #92	; 0x5c
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop

08003340 <state_reset>:
//
// formulas extracted and massaged from Chromium source, Biquad.cpp, here:
//   https://git.io/v10H2

// clear the samples saved across process boundaries
static inline void state_reset(sf_biquad_state_st *state){
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	state->xn1 = (sf_sample_st){ 0, 0 };
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	615a      	str	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
	state->xn2 = (sf_sample_st){ 0, 0 };
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	61da      	str	r2, [r3, #28]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	621a      	str	r2, [r3, #32]
	state->yn1 = (sf_sample_st){ 0, 0 };
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	625a      	str	r2, [r3, #36]	; 0x24
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	629a      	str	r2, [r3, #40]	; 0x28
	state->yn2 = (sf_sample_st){ 0, 0 };
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <state_scale>:

// set the coefficients so that the output is the input scaled by `amt`
static inline void state_scale(sf_biquad_state_st *state, float amt){
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	ed87 0a00 	vstr	s0, [r7]
	state->b0 = amt;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	601a      	str	r2, [r3, #0]
	state->b1 = 0.0f;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	605a      	str	r2, [r3, #4]
	state->b2 = 0.0f;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
	state->a1 = 0.0f;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
	state->a2 = 0.0f;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	611a      	str	r2, [r3, #16]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop

080033d4 <state_passthrough>:

// set the coefficients so that the output is an exact copy of the input
static inline void state_passthrough(sf_biquad_state_st *state){
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	state_scale(state, 1.0f);
 80033dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ffd7 	bl	8003394 <state_scale>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop

080033f0 <state_zero>:

// set the coefficients so that the output is zeroed out
static inline void state_zero(sf_biquad_state_st *state){
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	state_scale(state, 0.0f);
 80033f8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800340c <state_zero+0x1c>
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ffc9 	bl	8003394 <state_scale>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	00000000 	.word	0x00000000

08003410 <sf_lowpass>:

// initialize the biquad state to be a lowpass filter
void sf_lowpass(sf_biquad_state_st *state, int rate, float cutoff, float resonance){
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	ed87 0a01 	vstr	s0, [r7, #4]
 800341e:	edc7 0a00 	vstr	s1, [r7]
	state_reset(state);
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f7ff ff8c 	bl	8003340 <state_reset>
	float nyquist = rate * 0.5f;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003432:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800343a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	cutoff /= nyquist;
 800343e:	edd7 6a01 	vldr	s13, [r7, #4]
 8003442:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800344a:	edc7 7a01 	vstr	s15, [r7, #4]

	if (cutoff >= 1.0f)
 800344e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	db03      	blt.n	8003468 <sf_lowpass+0x58>
		state_passthrough(state);
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f7ff ffb7 	bl	80033d4 <state_passthrough>
		state->b1 = a0inv * 2.0f * beta;
		state->b2 = a0inv * beta;
		state->a1 = a0inv * -2.0f * cosw;
		state->a2 = a0inv * (1.0f - alpha);
	}
}
 8003466:	e083      	b.n	8003570 <sf_lowpass+0x160>
	float nyquist = rate * 0.5f;
	cutoff /= nyquist;

	if (cutoff >= 1.0f)
		state_passthrough(state);
	else if (cutoff <= 0.0f)
 8003468:	edd7 7a01 	vldr	s15, [r7, #4]
 800346c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003474:	d803      	bhi.n	800347e <sf_lowpass+0x6e>
		state_zero(state);
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f7ff ffba 	bl	80033f0 <state_zero>
		state->b1 = a0inv * 2.0f * beta;
		state->b2 = a0inv * beta;
		state->a1 = a0inv * -2.0f * cosw;
		state->a2 = a0inv * (1.0f - alpha);
	}
}
 800347c:	e078      	b.n	8003570 <sf_lowpass+0x160>
	if (cutoff >= 1.0f)
		state_passthrough(state);
	else if (cutoff <= 0.0f)
		state_zero(state);
	else{
		resonance = powf(10.0f, resonance * 0.05f); // convert resonance from dB to linear
 800347e:	edd7 7a00 	vldr	s15, [r7]
 8003482:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003578 <sf_lowpass+0x168>
 8003486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800348a:	eef0 0a67 	vmov.f32	s1, s15
 800348e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003492:	f003 f9c1 	bl	8006818 <powf>
 8003496:	ed87 0a00 	vstr	s0, [r7]
		float theta = (float)M_PI * 2.0f * cutoff;
 800349a:	edd7 7a01 	vldr	s15, [r7, #4]
 800349e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800357c <sf_lowpass+0x16c>
 80034a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a6:	edc7 7a08 	vstr	s15, [r7, #32]
		float alpha = sinf(theta) / (2.0f * resonance);
 80034aa:	ed97 0a08 	vldr	s0, [r7, #32]
 80034ae:	f003 f971 	bl	8006794 <sinf>
 80034b2:	eef0 6a40 	vmov.f32	s13, s0
 80034b6:	edd7 7a00 	vldr	s15, [r7]
 80034ba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80034be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c2:	edc7 7a07 	vstr	s15, [r7, #28]
		float cosw  = cosf(theta);
 80034c6:	ed97 0a08 	vldr	s0, [r7, #32]
 80034ca:	f003 f923 	bl	8006714 <cosf>
 80034ce:	ed87 0a06 	vstr	s0, [r7, #24]
		float beta  = (1.0f - cosw) * 0.5f;
 80034d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80034da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80034e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034e6:	edc7 7a05 	vstr	s15, [r7, #20]
		float a0inv = 1.0f / (1.0f + alpha);
 80034ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80034ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034fe:	edc7 7a04 	vstr	s15, [r7, #16]
		state->b0 = a0inv * beta;
 8003502:	ed97 7a04 	vldr	s14, [r7, #16]
 8003506:	edd7 7a05 	vldr	s15, [r7, #20]
 800350a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	edc3 7a00 	vstr	s15, [r3]
		state->b1 = a0inv * 2.0f * beta;
 8003514:	edd7 7a04 	vldr	s15, [r7, #16]
 8003518:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800351c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	edc3 7a01 	vstr	s15, [r3, #4]
		state->b2 = a0inv * beta;
 800352a:	ed97 7a04 	vldr	s14, [r7, #16]
 800352e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	edc3 7a02 	vstr	s15, [r3, #8]
		state->a1 = a0inv * -2.0f * cosw;
 800353c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003540:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003544:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003548:	edd7 7a06 	vldr	s15, [r7, #24]
 800354c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	edc3 7a03 	vstr	s15, [r3, #12]
		state->a2 = a0inv * (1.0f - alpha);
 8003556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800355a:	edd7 7a07 	vldr	s15, [r7, #28]
 800355e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003562:	edd7 7a04 	vldr	s15, [r7, #16]
 8003566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	edc3 7a04 	vstr	s15, [r3, #16]
	}
}
 8003570:	bf00      	nop
 8003572:	3728      	adds	r7, #40	; 0x28
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	3d4ccccd 	.word	0x3d4ccccd
 800357c:	40c90fdb 	.word	0x40c90fdb

08003580 <init_adc>:
 * Initializes the ADC to work in scan mode with 13 channels for pots
 * Uses DMA to transfer data and a timer to throttle the ADC conversion
 * The conversion cycle occurs every 75ms this function starts the timer.
 */
void init_adc(volatile uint16_t ADCBuffer[NUM_CHANNELS])
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b0a0      	sub	sp, #128	; 0x80
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	DMA_InitTypeDef DMA_Init_struct;
	GPIO_InitTypeDef GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef time_base_struct;

	/* Enable timer (timer runs at 13.3 Hz)*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8003588:	2101      	movs	r1, #1
 800358a:	2001      	movs	r0, #1
 800358c:	f7fe fc3a 	bl	8001e04 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&time_base_struct);
 8003590:	f107 0308 	add.w	r3, r7, #8
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe ff4d 	bl	8002434 <TIM_TimeBaseStructInit>
	time_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 800359a:	2300      	movs	r3, #0
 800359c:	823b      	strh	r3, [r7, #16]
	time_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 800359e:	2300      	movs	r3, #0
 80035a0:	817b      	strh	r3, [r7, #10]
	time_base_struct.TIM_Period = myTIM2_PERIOD;
 80035a2:	f243 1338 	movw	r3, #12600	; 0x3138
 80035a6:	60fb      	str	r3, [r7, #12]
	time_base_struct.TIM_Prescaler = myTIM2_PRESCALER;
 80035a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ac:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM2, &time_base_struct);
 80035ae:	f107 0308 	add.w	r3, r7, #8
 80035b2:	4619      	mov	r1, r3
 80035b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035b8:	f7fe fed0 	bl	800235c <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM2,TIM_TRGOSource_Update);
 80035bc:	2120      	movs	r1, #32
 80035be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035c2:	f7fe ffa7 	bl	8002514 <TIM_SelectOutputTrigger>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80035c6:	2201      	movs	r2, #1
 80035c8:	2101      	movs	r1, #1
 80035ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80035ce:	f7fe ff6b 	bl	80024a8 <TIM_ITConfig>

	/* Enable clock on DMA1 & GPIO's */
	/* Enable DMA2, thats where ADC peripheral is used */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 80035d2:	2101      	movs	r1, #1
 80035d4:	2001      	movs	r0, #1
 80035d6:	f7fe fbf5 	bl	8001dc4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 80035da:	2101      	movs	r1, #1
 80035dc:	2002      	movs	r0, #2
 80035de:	f7fe fbf1 	bl	8001dc4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 80035e2:	2101      	movs	r1, #1
 80035e4:	2004      	movs	r0, #4
 80035e6:	f7fe fbed 	bl	8001dc4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,ENABLE);
 80035ea:	2101      	movs	r1, #1
 80035ec:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80035f0:	f7fe fbe8 	bl	8001dc4 <RCC_AHB1PeriphClockCmd>
	//GPIO_Pin_1	VFO-Frequency
	//GPIO_Pin_2	LFO-Amplitude
	//GPIO_Pin_3	LFO-Frequency
	//GPIO_Pin_5	ENVELOPE-Attack
	//GPIO_Pin_7	ENVELOPE-Sustain-time
	GPIO_StructInit(&GPIO_InitStructure);
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe f889 	bl	8001710 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_5  | GPIO_Pin_7;
 80035fe:	23af      	movs	r3, #175	; 0xaf
 8003600:	617b      	str	r3, [r7, #20]
	//GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_5  | GPIO_Pin_6  | GPIO_Pin_7; // MB: test - A6 doesn't seem to work
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8003602:	2303      	movs	r3, #3
 8003604:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003606:	2302      	movs	r3, #2
 8003608:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800360e:	f107 0314 	add.w	r3, r7, #20
 8003612:	4619      	mov	r1, r3
 8003614:	4879      	ldr	r0, [pc, #484]	; (80037fc <init_adc+0x27c>)
 8003616:	f7fd ffed 	bl	80015f4 <GPIO_Init>

	//B bank pins
	//GPIO_Pin_0	ENVELOPE-Release
	//GPIO_Pin_1	FILTER-FreqLow
	GPIO_StructInit(&GPIO_InitStructure);
 800361a:	f107 0314 	add.w	r3, r7, #20
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe f876 	bl	8001710 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1;
 8003624:	2303      	movs	r3, #3
 8003626:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8003628:	2303      	movs	r3, #3
 800362a:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800362c:	2302      	movs	r3, #2
 800362e:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4619      	mov	r1, r3
 800363a:	4871      	ldr	r0, [pc, #452]	; (8003800 <init_adc+0x280>)
 800363c:	f7fd ffda 	bl	80015f4 <GPIO_Init>
	//C bank pins//GPIO_Pin_0
	//GPIO_Pin_0	ENVELOPE blsnk_len
	//GPIO_Pin_1	ENVELOPE-decay
	//GPIO_Pin_2	VC02 Amplitude
	//GPIO_Pin_4	ENVELOPE-sustain-amp
	GPIO_StructInit(&GPIO_InitStructure);
 8003640:	f107 0314 	add.w	r3, r7, #20
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe f863 	bl	8001710 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_4;
 800364a:	2317      	movs	r3, #23
 800364c:	617b      	str	r3, [r7, #20]
	// GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4;		// MB turned off C2
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 800364e:	2303      	movs	r3, #3
 8003650:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003652:	2302      	movs	r3, #2
 8003654:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003656:	2300      	movs	r3, #0
 8003658:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 800365a:	f107 0314 	add.w	r3, r7, #20
 800365e:	4619      	mov	r1, r3
 8003660:	4868      	ldr	r0, [pc, #416]	; (8003804 <init_adc+0x284>)
 8003662:	f7fd ffc7 	bl	80015f4 <GPIO_Init>


	/*  Initialise DMA */
	DMA_StructInit(&DMA_Init_struct);							// reset struct
 8003666:	f107 031c 	add.w	r3, r7, #28
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd fe48 	bl	8001300 <DMA_StructInit>

	/* config of DMA */
	DMA_Init_struct.DMA_Channel = DMA_Channel_0; 				/* See Tab 43 */
 8003670:	2300      	movs	r3, #0
 8003672:	61fb      	str	r3, [r7, #28]
	DMA_Init_struct.DMA_BufferSize = NUM_CHANNELS;				/*  13adc channels */
 8003674:	230d      	movs	r3, #13
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_Init_struct.DMA_DIR = DMA_DIR_PeripheralToMemory; 		/* ADC to mem */
 8003678:	2300      	movs	r3, #0
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_Init_struct.DMA_FIFOMode = DMA_FIFOMode_Disable; 		/* no FIFO */
 800367c:	2300      	movs	r3, #0
 800367e:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_Init_struct.DMA_FIFOThreshold = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_Init_struct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003684:	2300      	movs	r3, #0
 8003686:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_Init_struct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8003688:	2300      	movs	r3, #0
 800368a:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_Init_struct.DMA_Mode = DMA_Mode_Circular; 				/* circular buffer */
 800368c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003690:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_Init_struct.DMA_Priority = DMA_Priority_High; 			/* high priority */
 8003692:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003696:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init_struct.DMA_Memory0BaseAddr = (uint32_t)ADCBuffer; 	/* target addr */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_Init_struct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; /* 16 bit */
 800369c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_Init_struct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 80036a2:	4b59      	ldr	r3, [pc, #356]	; (8003808 <init_adc+0x288>)
 80036a4:	623b      	str	r3, [r7, #32]
	DMA_Init_struct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80036a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036aa:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_Init_struct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80036ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036b0:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_Init_struct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80036b2:	2300      	movs	r3, #0
 80036b4:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init(DMA2_Stream0, &DMA_Init_struct); 					/* See Table 43 for mapping */
 80036b6:	f107 031c 	add.w	r3, r7, #28
 80036ba:	4619      	mov	r1, r3
 80036bc:	4853      	ldr	r0, [pc, #332]	; (800380c <init_adc+0x28c>)
 80036be:	f7fd fdc7 	bl	8001250 <DMA_Init>
	DMA_Cmd(DMA2_Stream0, ENABLE);
 80036c2:	2101      	movs	r1, #1
 80036c4:	4851      	ldr	r0, [pc, #324]	; (800380c <init_adc+0x28c>)
 80036c6:	f7fd fe53 	bl	8001370 <DMA_Cmd>

	/*Initialize ADC*/
	ADC_StructInit(&adc_init_struct);						//populates structs with reset defaults
 80036ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd fae2 	bl	8000c98 <ADC_StructInit>
	ADC_CommonStructInit(&adc_com_init_struct);
 80036d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fd fb25 	bl	8000d28 <ADC_CommonStructInit>
	ADC_Cmd(ADC1, DISABLE);
 80036de:	2100      	movs	r1, #0
 80036e0:	484b      	ldr	r0, [pc, #300]	; (8003810 <init_adc+0x290>)
 80036e2:	f7fd fb37 	bl	8000d54 <ADC_Cmd>
	ADC_DeInit();
 80036e6:	f7fd fa73 	bl	8000bd0 <ADC_DeInit>

	/* init ADC clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80036ea:	2101      	movs	r1, #1
 80036ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80036f0:	f7fe fba8 	bl	8001e44 <RCC_APB2PeriphClockCmd>

	/*Initialize Common ADC */
	adc_com_init_struct.ADC_Mode = ADC_Mode_Independent;
 80036f4:	2300      	movs	r3, #0
 80036f6:	65bb      	str	r3, [r7, #88]	; 0x58
	adc_com_init_struct.ADC_Prescaler = ADC_Prescaler_Div2;
 80036f8:	2300      	movs	r3, #0
 80036fa:	65fb      	str	r3, [r7, #92]	; 0x5c
	adc_com_init_struct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80036fc:	2300      	movs	r3, #0
 80036fe:	663b      	str	r3, [r7, #96]	; 0x60
	adc_com_init_struct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_20Cycles;
 8003700:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003704:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CommonInit(&adc_com_init_struct);
 8003706:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd fae4 	bl	8000cd8 <ADC_CommonInit>

	/* Initialize ADC1 */
	adc_init_struct.ADC_Resolution = ADC_Resolution_12b;
 8003710:	2300      	movs	r3, #0
 8003712:	66bb      	str	r3, [r7, #104]	; 0x68
	adc_init_struct.ADC_ScanConvMode = ENABLE;
 8003714:	2301      	movs	r3, #1
 8003716:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	adc_init_struct.ADC_ContinuousConvMode = DISABLE;
 800371a:	2300      	movs	r3, #0
 800371c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	adc_init_struct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 8003720:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003724:	673b      	str	r3, [r7, #112]	; 0x70
	adc_init_struct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;
 8003726:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800372a:	677b      	str	r3, [r7, #116]	; 0x74
	adc_init_struct.ADC_DataAlign = ADC_DataAlign_Right;
 800372c:	2300      	movs	r3, #0
 800372e:	67bb      	str	r3, [r7, #120]	; 0x78
	adc_init_struct.ADC_NbrOfConversion = NUM_CHANNELS;			// 5 channels in total MB: I think it's 12 now.
 8003730:	230d      	movs	r3, #13
 8003732:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	ADC_Init(ADC1, &adc_init_struct);
 8003736:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800373a:	4619      	mov	r1, r3
 800373c:	4834      	ldr	r0, [pc, #208]	; (8003810 <init_adc+0x290>)
 800373e:	f7fd fa55 	bl	8000bec <ADC_Init>

	/* Configure channels */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_480Cycles);		//VCO-Amplitude
 8003742:	2307      	movs	r3, #7
 8003744:	2201      	movs	r2, #1
 8003746:	2100      	movs	r1, #0
 8003748:	4831      	ldr	r0, [pc, #196]	; (8003810 <init_adc+0x290>)
 800374a:	f7fd fb1f 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_480Cycles);		//VCO-Frequency
 800374e:	2307      	movs	r3, #7
 8003750:	2202      	movs	r2, #2
 8003752:	2101      	movs	r1, #1
 8003754:	482e      	ldr	r0, [pc, #184]	; (8003810 <init_adc+0x290>)
 8003756:	f7fd fb19 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 3, ADC_SampleTime_480Cycles);		//LFO-Amplitude
 800375a:	2307      	movs	r3, #7
 800375c:	2203      	movs	r2, #3
 800375e:	2102      	movs	r1, #2
 8003760:	482b      	ldr	r0, [pc, #172]	; (8003810 <init_adc+0x290>)
 8003762:	f7fd fb13 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 4, ADC_SampleTime_480Cycles);		//LFO-Frequency
 8003766:	2307      	movs	r3, #7
 8003768:	2204      	movs	r2, #4
 800376a:	2103      	movs	r1, #3
 800376c:	4828      	ldr	r0, [pc, #160]	; (8003810 <init_adc+0x290>)
 800376e:	f7fd fb0d 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 5, ADC_SampleTime_480Cycles);		//ENVELOPE-Attack
 8003772:	2307      	movs	r3, #7
 8003774:	2205      	movs	r2, #5
 8003776:	2105      	movs	r1, #5
 8003778:	4825      	ldr	r0, [pc, #148]	; (8003810 <init_adc+0x290>)
 800377a:	f7fd fb07 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 6, ADC_SampleTime_480Cycles);		//ENVELOPE-Sustain-time
 800377e:	2307      	movs	r3, #7
 8003780:	2206      	movs	r2, #6
 8003782:	2107      	movs	r1, #7
 8003784:	4822      	ldr	r0, [pc, #136]	; (8003810 <init_adc+0x290>)
 8003786:	f7fd fb01 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 7, ADC_SampleTime_480Cycles);		//ENVELOPE-Release
 800378a:	2307      	movs	r3, #7
 800378c:	2207      	movs	r2, #7
 800378e:	2108      	movs	r1, #8
 8003790:	481f      	ldr	r0, [pc, #124]	; (8003810 <init_adc+0x290>)
 8003792:	f7fd fafb 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 8, ADC_SampleTime_480Cycles);		//FILTER-FreqLow
 8003796:	2307      	movs	r3, #7
 8003798:	2208      	movs	r2, #8
 800379a:	2109      	movs	r1, #9
 800379c:	481c      	ldr	r0, [pc, #112]	; (8003810 <init_adc+0x290>)
 800379e:	f7fd faf5 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 9, ADC_SampleTime_480Cycles);	//ENVELOPE blsnk_len
 80037a2:	2307      	movs	r3, #7
 80037a4:	2209      	movs	r2, #9
 80037a6:	210a      	movs	r1, #10
 80037a8:	4819      	ldr	r0, [pc, #100]	; (8003810 <init_adc+0x290>)
 80037aa:	f7fd faef 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 10, ADC_SampleTime_480Cycles);	//ENVELOPE-decay
 80037ae:	2307      	movs	r3, #7
 80037b0:	220a      	movs	r2, #10
 80037b2:	210b      	movs	r1, #11
 80037b4:	4816      	ldr	r0, [pc, #88]	; (8003810 <init_adc+0x290>)
 80037b6:	f7fd fae9 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 11, ADC_SampleTime_480Cycles);	//VCO2-Amplitude (MB)
 80037ba:	2307      	movs	r3, #7
 80037bc:	220b      	movs	r2, #11
 80037be:	210c      	movs	r1, #12
 80037c0:	4813      	ldr	r0, [pc, #76]	; (8003810 <init_adc+0x290>)
 80037c2:	f7fd fae3 	bl	8000d8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 12, ADC_SampleTime_480Cycles);	//ENVELOPE-sustain-amp
 80037c6:	2307      	movs	r3, #7
 80037c8:	220c      	movs	r2, #12
 80037ca:	210e      	movs	r1, #14
 80037cc:	4810      	ldr	r0, [pc, #64]	; (8003810 <init_adc+0x290>)
 80037ce:	f7fd fadd 	bl	8000d8c <ADC_RegularChannelConfig>

	/* Enable ADC1 DMA */
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);			//enables DMA request after all adc conversions
 80037d2:	2101      	movs	r1, #1
 80037d4:	480e      	ldr	r0, [pc, #56]	; (8003810 <init_adc+0x290>)
 80037d6:	f7fd fbbf 	bl	8000f58 <ADC_DMARequestAfterLastTransferCmd>
	ADC_DMACmd(ADC1, ENABLE);
 80037da:	2101      	movs	r1, #1
 80037dc:	480c      	ldr	r0, [pc, #48]	; (8003810 <init_adc+0x290>)
 80037de:	f7fd fb9f 	bl	8000f20 <ADC_DMACmd>

	/* Enable ADC1 **************************************************************/
	ADC_Cmd(ADC1, ENABLE);
 80037e2:	2101      	movs	r1, #1
 80037e4:	480a      	ldr	r0, [pc, #40]	; (8003810 <init_adc+0x290>)
 80037e6:	f7fd fab5 	bl	8000d54 <ADC_Cmd>

	TIM_Cmd(TIM2, ENABLE);		//This could be dine in the main however gonna leave it here
 80037ea:	2101      	movs	r1, #1
 80037ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80037f0:	f7fe fe3a 	bl	8002468 <TIM_Cmd>
}
 80037f4:	bf00      	nop
 80037f6:	3780      	adds	r7, #128	; 0x80
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40020000 	.word	0x40020000
 8003800:	40020400 	.word	0x40020400
 8003804:	40020800 	.word	0x40020800
 8003808:	4001204c 	.word	0x4001204c
 800380c:	40026410 	.word	0x40026410
 8003810:	40012000 	.word	0x40012000

08003814 <init_gpios>:
/*
 * Sets up the 5 position selectors and TIM4 to be used to debounce
 * if the interrupt priorities need to be changed make sure timer is higher than EXTI
 */

void init_gpios(){
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef EXTI_init_struct;
	NVIC_InitTypeDef EXTI_NVIC_init_struct;
	NVIC_InitTypeDef TIM4_NVIC_init_struct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE); 			//This is already turned on in ADC Init function
 800381a:	2101      	movs	r1, #1
 800381c:	2004      	movs	r0, #4
 800381e:	f7fe fad1 	bl	8001dc4 <RCC_AHB1PeriphClockCmd>

	/*
	 * C bank pins
	 * PC6		lfo_other2
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 8003822:	f107 0320 	add.w	r3, r7, #32
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd ff72 	bl	8001710 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_6;
 800382c:	2340      	movs	r3, #64	; 0x40
 800382e:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 8003830:	2300      	movs	r3, #0
 8003832:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;				//slow
 8003836:	2300      	movs	r3, #0
 8003838:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//no pull
 800383c:	2300      	movs	r3, #0
 800383e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003842:	f107 0320 	add.w	r3, r7, #32
 8003846:	4619      	mov	r1, r3
 8003848:	4829      	ldr	r0, [pc, #164]	; (80038f0 <init_gpios+0xdc>)
 800384a:	f7fd fed3 	bl	80015f4 <GPIO_Init>


	/*Configure Tim4 for debouncing	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 800384e:	2101      	movs	r1, #1
 8003850:	2004      	movs	r0, #4
 8003852:	f7fe fad7 	bl	8001e04 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&tim4_base_struct);
 8003856:	f107 0314 	add.w	r3, r7, #20
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fdea 	bl	8002434 <TIM_TimeBaseStructInit>
	tim4_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 8003860:	2300      	movs	r3, #0
 8003862:	83bb      	strh	r3, [r7, #28]
	tim4_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 8003864:	2300      	movs	r3, #0
 8003866:	82fb      	strh	r3, [r7, #22]
	tim4_base_struct.TIM_Period = MYTIM4_PERIOD;
 8003868:	f643 136c 	movw	r3, #14700	; 0x396c
 800386c:	61bb      	str	r3, [r7, #24]
	tim4_base_struct.TIM_Prescaler = myTIM4_PRESCALER;
 800386e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003872:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM4, &tim4_base_struct);
 8003874:	f107 0314 	add.w	r3, r7, #20
 8003878:	4619      	mov	r1, r3
 800387a:	481e      	ldr	r0, [pc, #120]	; (80038f4 <init_gpios+0xe0>)
 800387c:	f7fe fd6e 	bl	800235c <TIM_TimeBaseInit>

	TIM4_NVIC_init_struct.NVIC_IRQChannel = TIM4_IRQn;
 8003880:	231e      	movs	r3, #30
 8003882:	713b      	strb	r3, [r7, #4]
	TIM4_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003884:	2301      	movs	r3, #1
 8003886:	71fb      	strb	r3, [r7, #7]
	TIM4_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x00;
 8003888:	2300      	movs	r3, #0
 800388a:	717b      	strb	r3, [r7, #5]
	TIM4_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x00;
 800388c:	2300      	movs	r3, #0
 800388e:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&TIM4_NVIC_init_struct);
 8003890:	1d3b      	adds	r3, r7, #4
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd f93a 	bl	8000b0c <NVIC_Init>

	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8003898:	2201      	movs	r2, #1
 800389a:	2101      	movs	r1, #1
 800389c:	4815      	ldr	r0, [pc, #84]	; (80038f4 <init_gpios+0xe0>)
 800389e:	f7fe fe03 	bl	80024a8 <TIM_ITConfig>


	/*Configure pins as EXTI*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 80038a2:	2101      	movs	r1, #1
 80038a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80038a8:	f7fe facc 	bl	8001e44 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource6);
 80038ac:	2106      	movs	r1, #6
 80038ae:	2002      	movs	r0, #2
 80038b0:	f7fe fd12 	bl	80022d8 <SYSCFG_EXTILineConfig>
//	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource15);


	//init EXTI
	// MB EXTI_init_struct.EXTI_Line = EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9 | EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15;
	EXTI_init_struct.EXTI_Line = EXTI_Line6;
 80038b4:	2340      	movs	r3, #64	; 0x40
 80038b6:	60fb      	str	r3, [r7, #12]
	EXTI_init_struct.EXTI_LineCmd = ENABLE;
 80038b8:	2301      	movs	r3, #1
 80038ba:	74bb      	strb	r3, [r7, #18]
	EXTI_init_struct.EXTI_Mode =  EXTI_Mode_Interrupt;
 80038bc:	2300      	movs	r3, #0
 80038be:	743b      	strb	r3, [r7, #16]
	EXTI_init_struct.EXTI_Trigger = EXTI_Trigger_Rising;
 80038c0:	2308      	movs	r3, #8
 80038c2:	747b      	strb	r3, [r7, #17]
	EXTI_Init(&EXTI_init_struct);
 80038c4:	f107 030c 	add.w	r3, r7, #12
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd fe11 	bl	80014f0 <EXTI_Init>

	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI9_5_IRQn;
 80038ce:	2317      	movs	r3, #23
 80038d0:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80038d2:	230f      	movs	r3, #15
 80038d4:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80038d6:	230f      	movs	r3, #15
 80038d8:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80038da:	2301      	movs	r3, #1
 80038dc:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80038de:	f107 0308 	add.w	r3, r7, #8
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fd f912 	bl	8000b0c <NVIC_Init>
//	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI15_10_IRQn;
//	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
//	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
//	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
//	NVIC_Init(&EXTI_NVIC_init_struct);
}
 80038e8:	bf00      	nop
 80038ea:	3728      	adds	r7, #40	; 0x28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40020800 	.word	0x40020800
 80038f4:	40000800 	.word	0x40000800

080038f8 <init_push_buttons>:

/*
 * Initialzes the pushbutton and pushbutton interrupts and limiting timer,
 * if the interrupt priorities need to be changed make sure timer is higher than EXTI
 */
void  init_push_buttons(){
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	; 0x28
 80038fc:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef tim3_base_struct;
	EXTI_InitTypeDef EXTI_init_struct;
	NVIC_InitTypeDef EXTI_NVIC_init_struct, TIM3_NVIC_init_struct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE,ENABLE); 			//This is already turned on in init gpio's but turn on incase
 80038fe:	2101      	movs	r1, #1
 8003900:	2010      	movs	r0, #16
 8003902:	f7fe fa5f 	bl	8001dc4 <RCC_AHB1PeriphClockCmd>
	 * PE0		Menu up
	 * PE1		Menu down
	 * PE2		Menu back
	 * PE3		Menu enter
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 8003906:	f107 0320 	add.w	r3, r7, #32
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd ff00 	bl	8001710 <GPIO_StructInit>
	// GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;		// MB - to turn filter on
 8003910:	231f      	movs	r3, #31
 8003912:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 8003914:	2300      	movs	r3, #0
 8003916:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;				//medium
 800391a:	2301      	movs	r3, #1
 800391c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//pull down
 8003920:	2300      	movs	r3, #0
 8003922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003926:	f107 0320 	add.w	r3, r7, #32
 800392a:	4619      	mov	r1, r3
 800392c:	4843      	ldr	r0, [pc, #268]	; (8003a3c <init_push_buttons+0x144>)
 800392e:	f7fd fe61 	bl	80015f4 <GPIO_Init>


	/*Configure Tim3 for debouncing	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8003932:	2101      	movs	r1, #1
 8003934:	2002      	movs	r0, #2
 8003936:	f7fe fa65 	bl	8001e04 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&tim3_base_struct);
 800393a:	f107 0314 	add.w	r3, r7, #20
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fd78 	bl	8002434 <TIM_TimeBaseStructInit>
	tim3_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 8003944:	2300      	movs	r3, #0
 8003946:	83bb      	strh	r3, [r7, #28]
	tim3_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 8003948:	2300      	movs	r3, #0
 800394a:	82fb      	strh	r3, [r7, #22]
	tim3_base_struct.TIM_Period = MYTIM3_PERIOD;
 800394c:	f643 136c 	movw	r3, #14700	; 0x396c
 8003950:	61bb      	str	r3, [r7, #24]
	tim3_base_struct.TIM_Prescaler = myTIM3_PRESCALER;
 8003952:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003956:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM3, &tim3_base_struct);
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	4619      	mov	r1, r3
 800395e:	4838      	ldr	r0, [pc, #224]	; (8003a40 <init_push_buttons+0x148>)
 8003960:	f7fe fcfc 	bl	800235c <TIM_TimeBaseInit>

	TIM3_NVIC_init_struct.NVIC_IRQChannel = TIM3_IRQn;
 8003964:	231d      	movs	r3, #29
 8003966:	713b      	strb	r3, [r7, #4]
	TIM3_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003968:	2301      	movs	r3, #1
 800396a:	71fb      	strb	r3, [r7, #7]
	TIM3_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x00;
 800396c:	2300      	movs	r3, #0
 800396e:	717b      	strb	r3, [r7, #5]
	TIM3_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x00;
 8003970:	2300      	movs	r3, #0
 8003972:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&TIM3_NVIC_init_struct);
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	4618      	mov	r0, r3
 8003978:	f7fd f8c8 	bl	8000b0c <NVIC_Init>

	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 800397c:	2201      	movs	r2, #1
 800397e:	2101      	movs	r1, #1
 8003980:	482f      	ldr	r0, [pc, #188]	; (8003a40 <init_push_buttons+0x148>)
 8003982:	f7fe fd91 	bl	80024a8 <TIM_ITConfig>


	/*Configure pins as EXTI*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 8003986:	2101      	movs	r1, #1
 8003988:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800398c:	f7fe fa5a 	bl	8001e44 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource0);
 8003990:	2100      	movs	r1, #0
 8003992:	2004      	movs	r0, #4
 8003994:	f7fe fca0 	bl	80022d8 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource1);
 8003998:	2101      	movs	r1, #1
 800399a:	2004      	movs	r0, #4
 800399c:	f7fe fc9c 	bl	80022d8 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource2);
 80039a0:	2102      	movs	r1, #2
 80039a2:	2004      	movs	r0, #4
 80039a4:	f7fe fc98 	bl	80022d8 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource3);
 80039a8:	2103      	movs	r1, #3
 80039aa:	2004      	movs	r0, #4
 80039ac:	f7fe fc94 	bl	80022d8 <SYSCFG_EXTILineConfig>



	//init EXTI
	EXTI_init_struct.EXTI_Line = EXTI_Line0 | EXTI_Line1 | EXTI_Line2 | EXTI_Line3;
 80039b0:	230f      	movs	r3, #15
 80039b2:	60fb      	str	r3, [r7, #12]
	EXTI_init_struct.EXTI_LineCmd = ENABLE;
 80039b4:	2301      	movs	r3, #1
 80039b6:	74bb      	strb	r3, [r7, #18]
	EXTI_init_struct.EXTI_Mode =  EXTI_Mode_Interrupt;
 80039b8:	2300      	movs	r3, #0
 80039ba:	743b      	strb	r3, [r7, #16]
	EXTI_init_struct.EXTI_Trigger = EXTI_Trigger_Rising;
 80039bc:	2308      	movs	r3, #8
 80039be:	747b      	strb	r3, [r7, #17]
	EXTI_Init(&EXTI_init_struct);
 80039c0:	f107 030c 	add.w	r3, r7, #12
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd fd93 	bl	80014f0 <EXTI_Init>

	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI0_IRQn;
 80039ca:	2306      	movs	r3, #6
 80039cc:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80039ce:	230f      	movs	r3, #15
 80039d0:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80039d2:	230f      	movs	r3, #15
 80039d4:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80039d6:	2301      	movs	r3, #1
 80039d8:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80039da:	f107 0308 	add.w	r3, r7, #8
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd f894 	bl	8000b0c <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI1_IRQn;;
 80039e4:	2307      	movs	r3, #7
 80039e6:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80039e8:	230f      	movs	r3, #15
 80039ea:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80039ec:	230f      	movs	r3, #15
 80039ee:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80039f0:	2301      	movs	r3, #1
 80039f2:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80039f4:	f107 0308 	add.w	r3, r7, #8
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fd f887 	bl	8000b0c <NVIC_Init>
	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI2_IRQn;
 80039fe:	2308      	movs	r3, #8
 8003a00:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003a02:	230f      	movs	r3, #15
 8003a04:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8003a06:	230f      	movs	r3, #15
 8003a08:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8003a0e:	f107 0308 	add.w	r3, r7, #8
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd f87a 	bl	8000b0c <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI3_IRQn;;
 8003a18:	2309      	movs	r3, #9
 8003a1a:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003a1c:	230f      	movs	r3, #15
 8003a1e:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8003a20:	230f      	movs	r3, #15
 8003a22:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8003a28:	f107 0308 	add.w	r3, r7, #8
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fd f86d 	bl	8000b0c <NVIC_Init>
}
 8003a32:	bf00      	nop
 8003a34:	3728      	adds	r7, #40	; 0x28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40000400 	.word	0x40000400

08003a44 <main>:




int main(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
	*/

	/**************************** Run Initialization functions timer for tim2 started in init_adc*****************************/

	// menubutton.button=back;					//initializes menubutton state for startup
	init_gpios();								//initialize gpios
 8003a48:	f7ff fee4 	bl	8003814 <init_gpios>
	init_push_buttons();						//initialize menu navigation buttons
 8003a4c:	f7ff ff54 	bl	80038f8 <init_push_buttons>
	init_adc(ADCBuffer);						//initialize ADC, do this last because it starts the timer
 8003a50:	4809      	ldr	r0, [pc, #36]	; (8003a78 <main+0x34>)
 8003a52:	f7ff fd95 	bl	8003580 <init_adc>
	//init_spi();								//initialize the SPI for LCD not using SPI any more don't need this
	// init_parallel();							//initializes all the GPIO's for parallel LCD communication
	// lcd_init();								//initializes LCD screen
	// update_selector_state();					// get startup state
	init_state();								//initialize the global state variable for the menu, filterstate, secondary VCO and modlulation
 8003a56:	f002 fa51 	bl	8005efc <init_state>
	// display_new_menu();

	biquad_setup();								// TODO: make sure filter is setup properly.
 8003a5a:	f001 fec9 	bl	80057f0 <biquad_setup>

	EVAL_AUDIO_Init( OUTPUT_DEVICE_AUTO, VOL, SAMPLERATE);
 8003a5e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003a62:	2150      	movs	r1, #80	; 0x50
 8003a64:	2004      	movs	r0, #4
 8003a66:	f7fe fd89 	bl	800257c <EVAL_AUDIO_Init>
	EVAL_AUDIO_Play(buffer_output, LENGTH_BUFFER);
 8003a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a6e:	4803      	ldr	r0, [pc, #12]	; (8003a7c <main+0x38>)
 8003a70:	f7fe fdb0 	bl	80025d4 <EVAL_AUDIO_Play>

	while (1)
	{

	}
 8003a74:	e7fe      	b.n	8003a74 <main+0x30>
 8003a76:	bf00      	nop
 8003a78:	20004a34 	.word	0x20004a34
 8003a7c:	200005c8 	.word	0x200005c8

08003a80 <Codec_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None
  * @retval None
  */
uint32_t Codec_TIMEOUT_UserCallback(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
	// TODO: See instructions in function declaration.  I've seen this LED turn on, which may signal an issue.
	STM_EVAL_LEDOn(LED5); 				/*  alert : red LED !  */
 8003a84:	2002      	movs	r0, #2
 8003a86:	f7fe fd61 	bl	800254c <STM_EVAL_LEDOn>
	return (0);
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <EVAL_AUDIO_HalfTransfer_CallBack>:
* @brief  Manages the DMA Half Transfer complete interrupt.
* @param  None
* @retval None
*/
void EVAL_AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
	the new data to the first half of buffer while DMA is transferring data from
	the second half. And when Transfer complete occurs, load the second half of
	the buffer while the DMA is transferring from the first half ...
	 */

	generate_waveforms(0, BUFF_LEN_HALF);
 8003a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f000 f82a 	bl	8003af8 <generate_waveforms>
	return;
 8003aa4:	bf00      	nop
}
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
	generate_waveforms(BUFF_LEN_HALF, LENGTH_BUFFER);
 8003ab6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003aba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003abe:	f000 f81b 	bl	8003af8 <generate_waveforms>
	return;
 8003ac2:	bf00      	nop
}
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop

08003acc <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0

  // return -1;
	return 0;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <EVAL_AUDIO_Error_CallBack>:

void EVAL_AUDIO_Error_CallBack(void* pData)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	STM_EVAL_LEDOn(LED3);
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7fe fd31 	bl	800254c <STM_EVAL_LEDOn>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	0000      	movs	r0, r0
	...

08003af8 <generate_waveforms>:
// For filters.
sf_biquad_state_st lowpass;
// sf_biquad_state_st lowpass_test;

void generate_waveforms(uint16_t start, uint16_t end)
{
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	ed2d 8b02 	vpush	{d8}
 8003afe:	b08b      	sub	sp, #44	; 0x2c
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	4603      	mov	r3, r0
 8003b04:	460a      	mov	r2, r1
 8003b06:	80fb      	strh	r3, [r7, #6]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	80bb      	strh	r3, [r7, #4]
	osc.vco_wav = vco_wave;				// VCO wave type.
 8003b0c:	4ba8      	ldr	r3, [pc, #672]	; (8003db0 <generate_waveforms+0x2b8>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	4ba8      	ldr	r3, [pc, #672]	; (8003db4 <generate_waveforms+0x2bc>)
 8003b14:	821a      	strh	r2, [r3, #16]
	osc.lfo_wav = lfo_wave;				// LFO wave type.
 8003b16:	4ba8      	ldr	r3, [pc, #672]	; (8003db8 <generate_waveforms+0x2c0>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	4ba5      	ldr	r3, [pc, #660]	; (8003db4 <generate_waveforms+0x2bc>)
 8003b1e:	825a      	strh	r2, [r3, #18]

	osc.am_mod = OFF; // TODO: *** get value of pushbutton ***
 8003b20:	4ba4      	ldr	r3, [pc, #656]	; (8003db4 <generate_waveforms+0x2bc>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	829a      	strh	r2, [r3, #20]
	osc.fm_mod = OFF; // TODO: *** get value of pushbutton ***
 8003b26:	4ba3      	ldr	r3, [pc, #652]	; (8003db4 <generate_waveforms+0x2bc>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	82da      	strh	r2, [r3, #22]

	osc.am_mod = lfo_mod.am_mod;
 8003b2c:	4ba3      	ldr	r3, [pc, #652]	; (8003dbc <generate_waveforms+0x2c4>)
 8003b2e:	881a      	ldrh	r2, [r3, #0]
 8003b30:	4ba0      	ldr	r3, [pc, #640]	; (8003db4 <generate_waveforms+0x2bc>)
 8003b32:	829a      	strh	r2, [r3, #20]
	osc.fm_mod = lfo_mod.fm_mod;
 8003b34:	4ba1      	ldr	r3, [pc, #644]	; (8003dbc <generate_waveforms+0x2c4>)
 8003b36:	885a      	ldrh	r2, [r3, #2]
 8003b38:	4b9e      	ldr	r3, [pc, #632]	; (8003db4 <generate_waveforms+0x2bc>)
 8003b3a:	82da      	strh	r2, [r3, #22]
	// osc.mod = VCOfreq;			// TODO: comment-out when adding lcd and buttons
	// osc.mod = NO_MOD;
	// osc.mod = DualMode_VCO;

	// A0
	osc.vco_amp = moving_avg(mov_avg5, &mov_avg_sum5, mov_avg_index5, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[1] & 0xfffc));
 8003b3c:	4ba0      	ldr	r3, [pc, #640]	; (8003dc0 <generate_waveforms+0x2c8>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4ba0      	ldr	r3, [pc, #640]	; (8003dc4 <generate_waveforms+0x2cc>)
 8003b42:	885b      	ldrh	r3, [r3, #2]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	2320      	movs	r3, #32
 8003b50:	499d      	ldr	r1, [pc, #628]	; (8003dc8 <generate_waveforms+0x2d0>)
 8003b52:	489e      	ldr	r0, [pc, #632]	; (8003dcc <generate_waveforms+0x2d4>)
 8003b54:	f001 fda0 	bl	8005698 <moving_avg>
 8003b58:	ee07 0a90 	vmov	s15, r0
 8003b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b60:	4b94      	ldr	r3, [pc, #592]	; (8003db4 <generate_waveforms+0x2bc>)
 8003b62:	edc3 7a06 	vstr	s15, [r3, #24]
	mov_avg_index5++;
 8003b66:	4b96      	ldr	r3, [pc, #600]	; (8003dc0 <generate_waveforms+0x2c8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	4a94      	ldr	r2, [pc, #592]	; (8003dc0 <generate_waveforms+0x2c8>)
 8003b6e:	6013      	str	r3, [r2, #0]
	if (mov_avg_index5 >= MOV_AVG_LENGTH_BUFFER)
 8003b70:	4b93      	ldr	r3, [pc, #588]	; (8003dc0 <generate_waveforms+0x2c8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b1f      	cmp	r3, #31
 8003b76:	d902      	bls.n	8003b7e <generate_waveforms+0x86>
	{
		mov_avg_index5 = 0;
 8003b78:	4b91      	ldr	r3, [pc, #580]	; (8003dc0 <generate_waveforms+0x2c8>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]

//	osc.volume = (float32_t) osc.volume / 2048;
//	osc.vco_amp = osc.vco_amp * osc.volume;

	// A1
	uint16_t tempf = pseudo_log(ADCBuffer[0] & 0xfffc);
 8003b7e:	4b91      	ldr	r3, [pc, #580]	; (8003dc4 <generate_waveforms+0x2cc>)
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	f023 0303 	bic.w	r3, r3, #3
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 fda8 	bl	80056e0 <pseudo_log>
 8003b90:	4603      	mov	r3, r0
 8003b92:	83fb      	strh	r3, [r7, #30]
	// osc.vco_freq = moving_avg(mov_avg1, &mov_avg_sum1, mov_avg_index1, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[0] & 0xfffc)*2*PI);
	osc.vco_freq = moving_avg(mov_avg1, &mov_avg_sum1, mov_avg_index1, MOV_AVG_LENGTH_BUFFER, tempf * 2*PI);
 8003b94:	4b8e      	ldr	r3, [pc, #568]	; (8003dd0 <generate_waveforms+0x2d8>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	8bfb      	ldrh	r3, [r7, #30]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	ee07 3a90 	vmov	s15, r3
 8003ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ba4:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8003dd4 <generate_waveforms+0x2dc>
 8003ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb0:	edc7 7a00 	vstr	s15, [r7]
 8003bb4:	883b      	ldrh	r3, [r7, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	2320      	movs	r3, #32
 8003bbc:	4986      	ldr	r1, [pc, #536]	; (8003dd8 <generate_waveforms+0x2e0>)
 8003bbe:	4887      	ldr	r0, [pc, #540]	; (8003ddc <generate_waveforms+0x2e4>)
 8003bc0:	f001 fd6a 	bl	8005698 <moving_avg>
 8003bc4:	ee07 0a90 	vmov	s15, r0
 8003bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bcc:	4b79      	ldr	r3, [pc, #484]	; (8003db4 <generate_waveforms+0x2bc>)
 8003bce:	edc3 7a01 	vstr	s15, [r3, #4]
	mov_avg_index1++;
 8003bd2:	4b7f      	ldr	r3, [pc, #508]	; (8003dd0 <generate_waveforms+0x2d8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	4a7d      	ldr	r2, [pc, #500]	; (8003dd0 <generate_waveforms+0x2d8>)
 8003bda:	6013      	str	r3, [r2, #0]
	if (mov_avg_index1 >= MOV_AVG_LENGTH_BUFFER)
 8003bdc:	4b7c      	ldr	r3, [pc, #496]	; (8003dd0 <generate_waveforms+0x2d8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b1f      	cmp	r3, #31
 8003be2:	d902      	bls.n	8003bea <generate_waveforms+0xf2>
	{
		mov_avg_index1 = 0;
 8003be4:	4b7a      	ldr	r3, [pc, #488]	; (8003dd0 <generate_waveforms+0x2d8>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
	}

	// C2
	osc.vco2_amp = moving_avg(mov_avg6, &mov_avg_sum6, mov_avg_index6, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[10] & 0xfffc));
 8003bea:	4b7d      	ldr	r3, [pc, #500]	; (8003de0 <generate_waveforms+0x2e8>)
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4b75      	ldr	r3, [pc, #468]	; (8003dc4 <generate_waveforms+0x2cc>)
 8003bf0:	8a9b      	ldrh	r3, [r3, #20]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f023 0303 	bic.w	r3, r3, #3
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	4979      	ldr	r1, [pc, #484]	; (8003de4 <generate_waveforms+0x2ec>)
 8003c00:	4879      	ldr	r0, [pc, #484]	; (8003de8 <generate_waveforms+0x2f0>)
 8003c02:	f001 fd49 	bl	8005698 <moving_avg>
 8003c06:	ee07 0a90 	vmov	s15, r0
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	4b69      	ldr	r3, [pc, #420]	; (8003db4 <generate_waveforms+0x2bc>)
 8003c10:	edc3 7a07 	vstr	s15, [r3, #28]
	mov_avg_index6++;
 8003c14:	4b72      	ldr	r3, [pc, #456]	; (8003de0 <generate_waveforms+0x2e8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	4a71      	ldr	r2, [pc, #452]	; (8003de0 <generate_waveforms+0x2e8>)
 8003c1c:	6013      	str	r3, [r2, #0]
	if (mov_avg_index6 >= MOV_AVG_LENGTH_BUFFER)
 8003c1e:	4b70      	ldr	r3, [pc, #448]	; (8003de0 <generate_waveforms+0x2e8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b1f      	cmp	r3, #31
 8003c24:	d902      	bls.n	8003c2c <generate_waveforms+0x134>
	{
		mov_avg_index6 = 0;
 8003c26:	4b6e      	ldr	r3, [pc, #440]	; (8003de0 <generate_waveforms+0x2e8>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
	}

	// B1
	osc.vco2_freqoffset = moving_avg(mov_avg7, &mov_avg_sum7, mov_avg_index7, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[7] & 0xfffc));
 8003c2c:	4b6f      	ldr	r3, [pc, #444]	; (8003dec <generate_waveforms+0x2f4>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b64      	ldr	r3, [pc, #400]	; (8003dc4 <generate_waveforms+0x2cc>)
 8003c32:	89db      	ldrh	r3, [r3, #14]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f023 0303 	bic.w	r3, r3, #3
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	2320      	movs	r3, #32
 8003c40:	496b      	ldr	r1, [pc, #428]	; (8003df0 <generate_waveforms+0x2f8>)
 8003c42:	486c      	ldr	r0, [pc, #432]	; (8003df4 <generate_waveforms+0x2fc>)
 8003c44:	f001 fd28 	bl	8005698 <moving_avg>
 8003c48:	ee07 0a90 	vmov	s15, r0
 8003c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c50:	4b58      	ldr	r3, [pc, #352]	; (8003db4 <generate_waveforms+0x2bc>)
 8003c52:	edc3 7a02 	vstr	s15, [r3, #8]
	mov_avg_index7++;
 8003c56:	4b65      	ldr	r3, [pc, #404]	; (8003dec <generate_waveforms+0x2f4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	4a63      	ldr	r2, [pc, #396]	; (8003dec <generate_waveforms+0x2f4>)
 8003c5e:	6013      	str	r3, [r2, #0]
	if (mov_avg_index7 >= MOV_AVG_LENGTH_BUFFER)
 8003c60:	4b62      	ldr	r3, [pc, #392]	; (8003dec <generate_waveforms+0x2f4>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b1f      	cmp	r3, #31
 8003c66:	d902      	bls.n	8003c6e <generate_waveforms+0x176>
	{
		mov_avg_index7 = 0;
 8003c68:	4b60      	ldr	r3, [pc, #384]	; (8003dec <generate_waveforms+0x2f4>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
	}


	// A2
	osc.lfo_amp = moving_avg(mov_avg3, &mov_avg_sum3, mov_avg_index3, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[2] & 0xfffc));
 8003c6e:	4b62      	ldr	r3, [pc, #392]	; (8003df8 <generate_waveforms+0x300>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b54      	ldr	r3, [pc, #336]	; (8003dc4 <generate_waveforms+0x2cc>)
 8003c74:	889b      	ldrh	r3, [r3, #4]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	f023 0303 	bic.w	r3, r3, #3
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	2320      	movs	r3, #32
 8003c82:	495e      	ldr	r1, [pc, #376]	; (8003dfc <generate_waveforms+0x304>)
 8003c84:	485e      	ldr	r0, [pc, #376]	; (8003e00 <generate_waveforms+0x308>)
 8003c86:	f001 fd07 	bl	8005698 <moving_avg>
 8003c8a:	ee07 0a90 	vmov	s15, r0
 8003c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c92:	4b48      	ldr	r3, [pc, #288]	; (8003db4 <generate_waveforms+0x2bc>)
 8003c94:	edc3 7a08 	vstr	s15, [r3, #32]
	mov_avg_index3++;
 8003c98:	4b57      	ldr	r3, [pc, #348]	; (8003df8 <generate_waveforms+0x300>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	4a56      	ldr	r2, [pc, #344]	; (8003df8 <generate_waveforms+0x300>)
 8003ca0:	6013      	str	r3, [r2, #0]
	if (mov_avg_index3 >= MOV_AVG_LENGTH_BUFFER)
 8003ca2:	4b55      	ldr	r3, [pc, #340]	; (8003df8 <generate_waveforms+0x300>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b1f      	cmp	r3, #31
 8003ca8:	d902      	bls.n	8003cb0 <generate_waveforms+0x1b8>
	{
		mov_avg_index3 = 0;
 8003caa:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <generate_waveforms+0x300>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
	}
	osc.lfo_amp_am = osc.lfo_amp*LFO_AMP_AM;
 8003cb0:	4b40      	ldr	r3, [pc, #256]	; (8003db4 <generate_waveforms+0x2bc>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fc fbeb 	bl	8000490 <__aeabi_f2d>
 8003cba:	a339      	add	r3, pc, #228	; (adr r3, 8003da0 <generate_waveforms+0x2a8>)
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f7fc fc3a 	bl	8000538 <__aeabi_dmul>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	4621      	mov	r1, r4
 8003ccc:	f7fc fece 	bl	8000a6c <__aeabi_d2f>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b38      	ldr	r3, [pc, #224]	; (8003db4 <generate_waveforms+0x2bc>)
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24
	osc.lfo_amp_fm = osc.lfo_amp*LFO_AMP_FM;
 8003cd6:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <generate_waveforms+0x2bc>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc fbd8 	bl	8000490 <__aeabi_f2d>
 8003ce0:	a331      	add	r3, pc, #196	; (adr r3, 8003da8 <generate_waveforms+0x2b0>)
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	f7fc fc27 	bl	8000538 <__aeabi_dmul>
 8003cea:	4603      	mov	r3, r0
 8003cec:	460c      	mov	r4, r1
 8003cee:	4618      	mov	r0, r3
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	f7fc febb 	bl	8000a6c <__aeabi_d2f>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	4b2e      	ldr	r3, [pc, #184]	; (8003db4 <generate_waveforms+0x2bc>)
 8003cfa:	629a      	str	r2, [r3, #40]	; 0x28

	// A3
	tempf = pseudo_log(ADCBuffer[3] & 0xfffc);
 8003cfc:	4b31      	ldr	r3, [pc, #196]	; (8003dc4 <generate_waveforms+0x2cc>)
 8003cfe:	88db      	ldrh	r3, [r3, #6]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f001 fce9 	bl	80056e0 <pseudo_log>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	83fb      	strh	r3, [r7, #30]
	// osc.lfo_freq = moving_avg(mov_avg2, &mov_avg_sum2, mov_avg_index2, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[3] & 0xfffc));
	osc.lfo_freq = moving_avg(mov_avg2, &mov_avg_sum2, mov_avg_index2, MOV_AVG_LENGTH_BUFFER, tempf);
 8003d12:	4b3c      	ldr	r3, [pc, #240]	; (8003e04 <generate_waveforms+0x30c>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	8bfb      	ldrh	r3, [r7, #30]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2320      	movs	r3, #32
 8003d1c:	493a      	ldr	r1, [pc, #232]	; (8003e08 <generate_waveforms+0x310>)
 8003d1e:	483b      	ldr	r0, [pc, #236]	; (8003e0c <generate_waveforms+0x314>)
 8003d20:	f001 fcba 	bl	8005698 <moving_avg>
 8003d24:	ee07 0a90 	vmov	s15, r0
 8003d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2c:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <generate_waveforms+0x2bc>)
 8003d2e:	edc3 7a03 	vstr	s15, [r3, #12]
	mov_avg_index2++;
 8003d32:	4b34      	ldr	r3, [pc, #208]	; (8003e04 <generate_waveforms+0x30c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	4a32      	ldr	r2, [pc, #200]	; (8003e04 <generate_waveforms+0x30c>)
 8003d3a:	6013      	str	r3, [r2, #0]
	if (mov_avg_index2 >= MOV_AVG_LENGTH_BUFFER)
 8003d3c:	4b31      	ldr	r3, [pc, #196]	; (8003e04 <generate_waveforms+0x30c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b1f      	cmp	r3, #31
 8003d42:	d902      	bls.n	8003d4a <generate_waveforms+0x252>
	{
		mov_avg_index2 = 0;
 8003d44:	4b2f      	ldr	r3, [pc, #188]	; (8003e04 <generate_waveforms+0x30c>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
	}
	// osc.lfo_freq = pseudo_log(osc.lfo_freq, ???);

	volatile uint32_t i = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61bb      	str	r3, [r7, #24]
	// adsr_settings.am_mod = OFF;
	// adsr_settings.fm_mod = OFF;
	// adsr_settings.am_mod = current_menu_state.adsr_mod;
	// adsr_settings.fm_mod = current_menu_state.adsr_mod;
	adsr_settings.am_mod = adsr_mod.am_mod;
 8003d4e:	4b30      	ldr	r3, [pc, #192]	; (8003e10 <generate_waveforms+0x318>)
 8003d50:	881a      	ldrh	r2, [r3, #0]
 8003d52:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <generate_waveforms+0x31c>)
 8003d54:	801a      	strh	r2, [r3, #0]
	adsr_settings.fm_mod = adsr_mod.fm_mod;
 8003d56:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <generate_waveforms+0x318>)
 8003d58:	885a      	ldrh	r2, [r3, #2]
 8003d5a:	4b2e      	ldr	r3, [pc, #184]	; (8003e14 <generate_waveforms+0x31c>)
 8003d5c:	805a      	strh	r2, [r3, #2]
	// adsr_settings.mod = DualMode_VCO;
	// adsr_settings.mod = NO_MOD;
	// adsr_settings.mod = VCOfreq;

	//	// Calculate angle amount to increment per sample.
	volatile float32_t rads_per_sample_vco = osc.vco_freq / ONE_SECOND;		// Radians to increment for each iteration.
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <generate_waveforms+0x2bc>)
 8003d60:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d64:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8003e18 <generate_waveforms+0x320>
 8003d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d6c:	edc7 7a05 	vstr	s15, [r7, #20]
	// volatile float32_t rads_per_sample_vco2 = osc.vco_freq / TWO_SECOND;
	volatile float32_t rads_per_sample_vco2 = rads_per_sample_vco + osc.vco2_freqoffset / ONE_SECOND;
 8003d70:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <generate_waveforms+0x2bc>)
 8003d72:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d76:	eddf 6a28 	vldr	s13, [pc, #160]	; 8003e18 <generate_waveforms+0x320>
 8003d7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003d7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d86:	edc7 7a04 	vstr	s15, [r7, #16]
	//volatile float32_t rads_per_sample_vco2 = rads_per_sample_vco/2.0f;		// Radians to increment for each iteration.
	volatile float32_t rads_per_sample_lfo = osc.lfo_freq / ONE_SECOND;		// Radians to increment for each iteration.
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <generate_waveforms+0x2bc>)
 8003d8c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d90:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003e18 <generate_waveforms+0x320>
 8003d94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d98:	edc7 7a03 	vstr	s15, [r7, #12]

	// Fill adsr buffer.
//	if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
//	{
		adsr(start, end);
 8003d9c:	88ba      	ldrh	r2, [r7, #4]
 8003d9e:	e03d      	b.n	8003e1c <generate_waveforms+0x324>
 8003da0:	eb1c432d 	.word	0xeb1c432d
 8003da4:	3f1a36e2 	.word	0x3f1a36e2
 8003da8:	47ae147b 	.word	0x47ae147b
 8003dac:	3f847ae1 	.word	0x3f847ae1
 8003db0:	20004a2d 	.word	0x20004a2d
 8003db4:	20000054 	.word	0x20000054
 8003db8:	20004a2c 	.word	0x20004a2c
 8003dbc:	20004a58 	.word	0x20004a58
 8003dc0:	2000485c 	.word	0x2000485c
 8003dc4:	20004a34 	.word	0x20004a34
 8003dc8:	20004a60 	.word	0x20004a60
 8003dcc:	200047dc 	.word	0x200047dc
 8003dd0:	2000464c 	.word	0x2000464c
 8003dd4:	40490fdb 	.word	0x40490fdb
 8003dd8:	20004ac8 	.word	0x20004ac8
 8003ddc:	200045cc 	.word	0x200045cc
 8003de0:	200048e0 	.word	0x200048e0
 8003de4:	20004acc 	.word	0x20004acc
 8003de8:	20004860 	.word	0x20004860
 8003dec:	20004964 	.word	0x20004964
 8003df0:	20004ad8 	.word	0x20004ad8
 8003df4:	200048e4 	.word	0x200048e4
 8003df8:	20004754 	.word	0x20004754
 8003dfc:	20004ad4 	.word	0x20004ad4
 8003e00:	200046d4 	.word	0x200046d4
 8003e04:	200046d0 	.word	0x200046d0
 8003e08:	20004ad0 	.word	0x20004ad0
 8003e0c:	20004650 	.word	0x20004650
 8003e10:	20004a30 	.word	0x20004a30
 8003e14:	20004a64 	.word	0x20004a64
 8003e18:	47bb8000 	.word	0x47bb8000
 8003e1c:	88fb      	ldrh	r3, [r7, #6]
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fe91 	bl	8004b48 <adsr>
		// adsr_rad(start, end);
//	}

	// No LFO
	if(osc.lfo_wav == nowave)
 8003e26:	4baa      	ldr	r3, [pc, #680]	; (80040d0 <generate_waveforms+0x5d8>)
 8003e28:	8a5b      	ldrh	r3, [r3, #18]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d110      	bne.n	8003e50 <generate_waveforms+0x358>
	{
		for(i = start; i < end; i++)
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	e009      	b.n	8003e48 <generate_waveforms+0x350>
		{
			buffer_lfo_float[i] = 0;
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4aa7      	ldr	r2, [pc, #668]	; (80040d4 <generate_waveforms+0x5dc>)
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
//	}

	// No LFO
	if(osc.lfo_wav == nowave)
	{
		for(i = start; i < end; i++)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	3301      	adds	r3, #1
 8003e46:	61bb      	str	r3, [r7, #24]
 8003e48:	88ba      	ldrh	r2, [r7, #4]
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d8f1      	bhi.n	8003e34 <generate_waveforms+0x33c>
			buffer_lfo_float[i] = 0;
		}
	}

	// Sine LFO
	if(osc.lfo_wav == sine)
 8003e50:	4b9f      	ldr	r3, [pc, #636]	; (80040d0 <generate_waveforms+0x5d8>)
 8003e52:	8a5b      	ldrh	r3, [r3, #18]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d123      	bne.n	8003ea0 <generate_waveforms+0x3a8>
	{
		for(i = start; i < end; i++)
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	e01b      	b.n	8003e96 <generate_waveforms+0x39e>
		{
			theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003e5e:	4b9e      	ldr	r3, [pc, #632]	; (80040d8 <generate_waveforms+0x5e0>)
 8003e60:	ed93 7a00 	vldr	s14, [r3]
 8003e64:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e6c:	4b9a      	ldr	r3, [pc, #616]	; (80040d8 <generate_waveforms+0x5e0>)
 8003e6e:	edc3 7a00 	vstr	s15, [r3]
			buffer_lfo_float[i] = arm_sin_f32(theta_lfo);
 8003e72:	69bc      	ldr	r4, [r7, #24]
 8003e74:	4b98      	ldr	r3, [pc, #608]	; (80040d8 <generate_waveforms+0x5e0>)
 8003e76:	edd3 7a00 	vldr	s15, [r3]
 8003e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e7e:	f002 f85f 	bl	8005f40 <arm_sin_f32>
 8003e82:	eef0 7a40 	vmov.f32	s15, s0
 8003e86:	4a93      	ldr	r2, [pc, #588]	; (80040d4 <generate_waveforms+0x5dc>)
 8003e88:	00a3      	lsls	r3, r4, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	edc3 7a00 	vstr	s15, [r3]
	}

	// Sine LFO
	if(osc.lfo_wav == sine)
	{
		for(i = start; i < end; i++)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	3301      	adds	r3, #1
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	88ba      	ldrh	r2, [r7, #4]
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d8df      	bhi.n	8003e5e <generate_waveforms+0x366>
 8003e9e:	e0fb      	b.n	8004098 <generate_waveforms+0x5a0>
			buffer_lfo_float[i] = arm_sin_f32(theta_lfo);
		}
	}

	// Square LFO
	else if(osc.lfo_wav == square)
 8003ea0:	4b8b      	ldr	r3, [pc, #556]	; (80040d0 <generate_waveforms+0x5d8>)
 8003ea2:	8a5b      	ldrh	r3, [r3, #18]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d150      	bne.n	8003f4a <generate_waveforms+0x452>
	{
		// If osc modulation contains am
		if(osc.am_mod == ON)
 8003ea8:	4b89      	ldr	r3, [pc, #548]	; (80040d0 <generate_waveforms+0x5d8>)
 8003eaa:	8a9b      	ldrh	r3, [r3, #20]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d123      	bne.n	8003ef8 <generate_waveforms+0x400>
		{
			// AM
			for(i = start; i < end; i++)
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	e01b      	b.n	8003eee <generate_waveforms+0x3f6>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003eb6:	4b88      	ldr	r3, [pc, #544]	; (80040d8 <generate_waveforms+0x5e0>)
 8003eb8:	ed93 7a00 	vldr	s14, [r3]
 8003ebc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ec4:	4b84      	ldr	r3, [pc, #528]	; (80040d8 <generate_waveforms+0x5e0>)
 8003ec6:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_square_angle(theta_lfo);	// TODO: offset??
 8003eca:	69bc      	ldr	r4, [r7, #24]
 8003ecc:	4b82      	ldr	r3, [pc, #520]	; (80040d8 <generate_waveforms+0x5e0>)
 8003ece:	edd3 7a00 	vldr	s15, [r3]
 8003ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed6:	f001 f9e1 	bl	800529c <gen_square_angle>
 8003eda:	eef0 7a40 	vmov.f32	s15, s0
 8003ede:	4a7d      	ldr	r2, [pc, #500]	; (80040d4 <generate_waveforms+0x5dc>)
 8003ee0:	00a3      	lsls	r3, r4, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	edc3 7a00 	vstr	s15, [r3]
	{
		// If osc modulation contains am
		if(osc.am_mod == ON)
		{
			// AM
			for(i = start; i < end; i++)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	3301      	adds	r3, #1
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	88ba      	ldrh	r2, [r7, #4]
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d8df      	bhi.n	8003eb6 <generate_waveforms+0x3be>
 8003ef6:	e0cf      	b.n	8004098 <generate_waveforms+0x5a0>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
				buffer_lfo_float[i] = gen_square_angle(theta_lfo);	// TODO: offset??
			}
		}
		else if(osc.fm_mod == ON)
 8003ef8:	4b75      	ldr	r3, [pc, #468]	; (80040d0 <generate_waveforms+0x5d8>)
 8003efa:	8adb      	ldrh	r3, [r3, #22]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	f040 80cb 	bne.w	8004098 <generate_waveforms+0x5a0>
		{
			// FM
			for(i = start; i < end; i++)
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	e01b      	b.n	8003f40 <generate_waveforms+0x448>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003f08:	4b73      	ldr	r3, [pc, #460]	; (80040d8 <generate_waveforms+0x5e0>)
 8003f0a:	ed93 7a00 	vldr	s14, [r3]
 8003f0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f16:	4b70      	ldr	r3, [pc, #448]	; (80040d8 <generate_waveforms+0x5e0>)
 8003f18:	edc3 7a00 	vstr	s15, [r3]
				// Sawtooth is integral of triangle
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
 8003f1c:	69bc      	ldr	r4, [r7, #24]
 8003f1e:	4b6e      	ldr	r3, [pc, #440]	; (80040d8 <generate_waveforms+0x5e0>)
 8003f20:	edd3 7a00 	vldr	s15, [r3]
 8003f24:	eeb0 0a67 	vmov.f32	s0, s15
 8003f28:	f001 fac8 	bl	80054bc <gen_triangle_angle>
 8003f2c:	eef0 7a40 	vmov.f32	s15, s0
 8003f30:	4a68      	ldr	r2, [pc, #416]	; (80040d4 <generate_waveforms+0x5dc>)
 8003f32:	00a3      	lsls	r3, r4, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		else if(osc.fm_mod == ON)
		{
			// FM
			for(i = start; i < end; i++)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	88ba      	ldrh	r2, [r7, #4]
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d8df      	bhi.n	8003f08 <generate_waveforms+0x410>
 8003f48:	e0a6      	b.n	8004098 <generate_waveforms+0x5a0>
			}
		}
	}

	// Sawtooth LFO
	else if(osc.lfo_wav == sawtooth)
 8003f4a:	4b61      	ldr	r3, [pc, #388]	; (80040d0 <generate_waveforms+0x5d8>)
 8003f4c:	8a5b      	ldrh	r3, [r3, #18]
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d14f      	bne.n	8003ff2 <generate_waveforms+0x4fa>
	{

		if(osc.am_mod == ON)
 8003f52:	4b5f      	ldr	r3, [pc, #380]	; (80040d0 <generate_waveforms+0x5d8>)
 8003f54:	8a9b      	ldrh	r3, [r3, #20]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d123      	bne.n	8003fa2 <generate_waveforms+0x4aa>
		{
			for(i = start; i < end; i++)
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	e01b      	b.n	8003f98 <generate_waveforms+0x4a0>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003f60:	4b5d      	ldr	r3, [pc, #372]	; (80040d8 <generate_waveforms+0x5e0>)
 8003f62:	ed93 7a00 	vldr	s14, [r3]
 8003f66:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f6e:	4b5a      	ldr	r3, [pc, #360]	; (80040d8 <generate_waveforms+0x5e0>)
 8003f70:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_sawtooth_angle(theta_lfo);
 8003f74:	69bc      	ldr	r4, [r7, #24]
 8003f76:	4b58      	ldr	r3, [pc, #352]	; (80040d8 <generate_waveforms+0x5e0>)
 8003f78:	edd3 7a00 	vldr	s15, [r3]
 8003f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f80:	f001 f9b4 	bl	80052ec <gen_sawtooth_angle>
 8003f84:	eef0 7a40 	vmov.f32	s15, s0
 8003f88:	4a52      	ldr	r2, [pc, #328]	; (80040d4 <generate_waveforms+0x5dc>)
 8003f8a:	00a3      	lsls	r3, r4, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	edc3 7a00 	vstr	s15, [r3]
	else if(osc.lfo_wav == sawtooth)
	{

		if(osc.am_mod == ON)
		{
			for(i = start; i < end; i++)
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	3301      	adds	r3, #1
 8003f96:	61bb      	str	r3, [r7, #24]
 8003f98:	88ba      	ldrh	r2, [r7, #4]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d8df      	bhi.n	8003f60 <generate_waveforms+0x468>
 8003fa0:	e07a      	b.n	8004098 <generate_waveforms+0x5a0>
				buffer_lfo_float[i] = gen_sawtooth_angle(theta_lfo);
			}
		}

		// If FM mod, need integral of modulating signal.  Integral of ramp is right side of parabola.
		else if(osc.fm_mod == ON)
 8003fa2:	4b4b      	ldr	r3, [pc, #300]	; (80040d0 <generate_waveforms+0x5d8>)
 8003fa4:	8adb      	ldrh	r3, [r3, #22]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d176      	bne.n	8004098 <generate_waveforms+0x5a0>
		{
			for(i = start; i < end; i++)
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	e01b      	b.n	8003fe8 <generate_waveforms+0x4f0>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003fb0:	4b49      	ldr	r3, [pc, #292]	; (80040d8 <generate_waveforms+0x5e0>)
 8003fb2:	ed93 7a00 	vldr	s14, [r3]
 8003fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fbe:	4b46      	ldr	r3, [pc, #280]	; (80040d8 <generate_waveforms+0x5e0>)
 8003fc0:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_sawtooth_integral_angle(theta_lfo);
 8003fc4:	69bc      	ldr	r4, [r7, #24]
 8003fc6:	4b44      	ldr	r3, [pc, #272]	; (80040d8 <generate_waveforms+0x5e0>)
 8003fc8:	edd3 7a00 	vldr	s15, [r3]
 8003fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd0:	f001 f9ba 	bl	8005348 <gen_sawtooth_integral_angle>
 8003fd4:	eef0 7a40 	vmov.f32	s15, s0
 8003fd8:	4a3e      	ldr	r2, [pc, #248]	; (80040d4 <generate_waveforms+0x5dc>)
 8003fda:	00a3      	lsls	r3, r4, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	edc3 7a00 	vstr	s15, [r3]
		}

		// If FM mod, need integral of modulating signal.  Integral of ramp is right side of parabola.
		else if(osc.fm_mod == ON)
		{
			for(i = start; i < end; i++)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	61bb      	str	r3, [r7, #24]
 8003fe8:	88ba      	ldrh	r2, [r7, #4]
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d8df      	bhi.n	8003fb0 <generate_waveforms+0x4b8>
 8003ff0:	e052      	b.n	8004098 <generate_waveforms+0x5a0>
			}
		}
	}

	// Triangle LFO
	else if(osc.lfo_wav == triangle)
 8003ff2:	4b37      	ldr	r3, [pc, #220]	; (80040d0 <generate_waveforms+0x5d8>)
 8003ff4:	8a5b      	ldrh	r3, [r3, #18]
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d14e      	bne.n	8004098 <generate_waveforms+0x5a0>
	{
		if(osc.am_mod == ON)
 8003ffa:	4b35      	ldr	r3, [pc, #212]	; (80040d0 <generate_waveforms+0x5d8>)
 8003ffc:	8a9b      	ldrh	r3, [r3, #20]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d123      	bne.n	800404a <generate_waveforms+0x552>
		{
			for(i = start; i < end; i++)
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	e01b      	b.n	8004040 <generate_waveforms+0x548>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8004008:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <generate_waveforms+0x5e0>)
 800400a:	ed93 7a00 	vldr	s14, [r3]
 800400e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004016:	4b30      	ldr	r3, [pc, #192]	; (80040d8 <generate_waveforms+0x5e0>)
 8004018:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
 800401c:	69bc      	ldr	r4, [r7, #24]
 800401e:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <generate_waveforms+0x5e0>)
 8004020:	edd3 7a00 	vldr	s15, [r3]
 8004024:	eeb0 0a67 	vmov.f32	s0, s15
 8004028:	f001 fa48 	bl	80054bc <gen_triangle_angle>
 800402c:	eef0 7a40 	vmov.f32	s15, s0
 8004030:	4a28      	ldr	r2, [pc, #160]	; (80040d4 <generate_waveforms+0x5dc>)
 8004032:	00a3      	lsls	r3, r4, #2
 8004034:	4413      	add	r3, r2
 8004036:	edc3 7a00 	vstr	s15, [r3]
	// Triangle LFO
	else if(osc.lfo_wav == triangle)
	{
		if(osc.am_mod == ON)
		{
			for(i = start; i < end; i++)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	3301      	adds	r3, #1
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	88ba      	ldrh	r2, [r7, #4]
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	429a      	cmp	r2, r3
 8004046:	d8df      	bhi.n	8004008 <generate_waveforms+0x510>
 8004048:	e026      	b.n	8004098 <generate_waveforms+0x5a0>
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
			}
		}

		// If FM mod, need integral of modulating signal.
		else if(osc.fm_mod == ON)
 800404a:	4b21      	ldr	r3, [pc, #132]	; (80040d0 <generate_waveforms+0x5d8>)
 800404c:	8adb      	ldrh	r3, [r3, #22]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d122      	bne.n	8004098 <generate_waveforms+0x5a0>
		{
			for(i = start; i < end; i++)
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	e01b      	b.n	8004090 <generate_waveforms+0x598>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8004058:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <generate_waveforms+0x5e0>)
 800405a:	ed93 7a00 	vldr	s14, [r3]
 800405e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004066:	4b1c      	ldr	r3, [pc, #112]	; (80040d8 <generate_waveforms+0x5e0>)
 8004068:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_triangle_integral_angle(theta_lfo);
 800406c:	69bc      	ldr	r4, [r7, #24]
 800406e:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <generate_waveforms+0x5e0>)
 8004070:	edd3 7a00 	vldr	s15, [r3]
 8004074:	eeb0 0a67 	vmov.f32	s0, s15
 8004078:	f001 fa66 	bl	8005548 <gen_triangle_integral_angle>
 800407c:	eef0 7a40 	vmov.f32	s15, s0
 8004080:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <generate_waveforms+0x5dc>)
 8004082:	00a3      	lsls	r3, r4, #2
 8004084:	4413      	add	r3, r2
 8004086:	edc3 7a00 	vstr	s15, [r3]
		}

		// If FM mod, need integral of modulating signal.
		else if(osc.fm_mod == ON)
		{
			for(i = start; i < end; i++)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	3301      	adds	r3, #1
 800408e:	61bb      	str	r3, [r7, #24]
 8004090:	88ba      	ldrh	r2, [r7, #4]
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	429a      	cmp	r2, r3
 8004096:	d8df      	bhi.n	8004058 <generate_waveforms+0x560>
		}

	}

	// No VCO
	if(osc.vco_wav == nowave)
 8004098:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <generate_waveforms+0x5d8>)
 800409a:	8a1b      	ldrh	r3, [r3, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10e      	bne.n	80040be <generate_waveforms+0x5c6>
	{
		for(i = start; i < end; i++)
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	e007      	b.n	80040b6 <generate_waveforms+0x5be>
		{
			buffer_output[i] = 0;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	4a0c      	ldr	r2, [pc, #48]	; (80040dc <generate_waveforms+0x5e4>)
 80040aa:	2100      	movs	r1, #0
 80040ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// No VCO
	if(osc.vco_wav == nowave)
	{
		for(i = start; i < end; i++)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	3301      	adds	r3, #1
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	88ba      	ldrh	r2, [r7, #4]
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d8f3      	bhi.n	80040a6 <generate_waveforms+0x5ae>
			buffer_output[i] = 0;
		}
	}

	// Sine VCO
	if(osc.vco_wav == sine)
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <generate_waveforms+0x5d8>)
 80040c0:	8a1b      	ldrh	r3, [r3, #16]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	f040 810c 	bne.w	80042e0 <generate_waveforms+0x7e8>
	{
		for(i = start; i < end; i++)
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	e102      	b.n	80042d4 <generate_waveforms+0x7dc>
 80040ce:	bf00      	nop
 80040d0:	20000054 	.word	0x20000054
 80040d4:	200015c8 	.word	0x200015c8
 80040d8:	20004974 	.word	0x20004974
 80040dc:	200005c8 	.word	0x200005c8
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 80040e0:	4b83      	ldr	r3, [pc, #524]	; (80042f0 <generate_waveforms+0x7f8>)
 80040e2:	ed93 7a00 	vldr	s14, [r3]
 80040e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80040ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040ee:	4b80      	ldr	r3, [pc, #512]	; (80042f0 <generate_waveforms+0x7f8>)
 80040f0:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 80040f4:	4b7f      	ldr	r3, [pc, #508]	; (80042f4 <generate_waveforms+0x7fc>)
 80040f6:	ed93 7a00 	vldr	s14, [r3]
 80040fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80040fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004102:	4b7c      	ldr	r3, [pc, #496]	; (80042f4 <generate_waveforms+0x7fc>)
 8004104:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 8004108:	4b7b      	ldr	r3, [pc, #492]	; (80042f8 <generate_waveforms+0x800>)
 800410a:	8adb      	ldrh	r3, [r3, #22]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d17c      	bne.n	800420a <generate_waveforms+0x712>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32(theta_vco + osc.lfo_amp_fm * buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8004110:	69bc      	ldr	r4, [r7, #24]
 8004112:	4b79      	ldr	r3, [pc, #484]	; (80042f8 <generate_waveforms+0x800>)
 8004114:	ed93 8a06 	vldr	s16, [r3, #24]
 8004118:	4b77      	ldr	r3, [pc, #476]	; (80042f8 <generate_waveforms+0x800>)
 800411a:	edd3 8a06 	vldr	s17, [r3, #24]
 800411e:	4b76      	ldr	r3, [pc, #472]	; (80042f8 <generate_waveforms+0x800>)
 8004120:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	4a75      	ldr	r2, [pc, #468]	; (80042fc <generate_waveforms+0x804>)
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	edd3 7a00 	vldr	s15, [r3]
 8004130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004134:	4b6e      	ldr	r3, [pc, #440]	; (80042f0 <generate_waveforms+0x7f8>)
 8004136:	edd3 7a00 	vldr	s15, [r3]
 800413a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	4a6f      	ldr	r2, [pc, #444]	; (8004300 <generate_waveforms+0x808>)
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	edd3 7a00 	vldr	s15, [r3]
 800414a:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004304 <generate_waveforms+0x80c>
 800414e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004156:	eeb0 0a67 	vmov.f32	s0, s15
 800415a:	f001 fef1 	bl	8005f40 <arm_sin_f32>
 800415e:	eef0 7a40 	vmov.f32	s15, s0
 8004162:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004166:	ee78 7a27 	vadd.f32	s15, s16, s15
 800416a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800416e:	edc7 7a00 	vstr	s15, [r7]
 8004172:	883b      	ldrh	r3, [r7, #0]
 8004174:	b29a      	uxth	r2, r3
 8004176:	4b64      	ldr	r3, [pc, #400]	; (8004308 <generate_waveforms+0x810>)
 8004178:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*arm_sin_f32(theta_vco2 + osc.lfo_amp_fm * buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 800417c:	69bc      	ldr	r4, [r7, #24]
 800417e:	4b5e      	ldr	r3, [pc, #376]	; (80042f8 <generate_waveforms+0x800>)
 8004180:	ed93 8a07 	vldr	s16, [r3, #28]
 8004184:	4b5c      	ldr	r3, [pc, #368]	; (80042f8 <generate_waveforms+0x800>)
 8004186:	edd3 8a07 	vldr	s17, [r3, #28]
 800418a:	4b5b      	ldr	r3, [pc, #364]	; (80042f8 <generate_waveforms+0x800>)
 800418c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	4a5a      	ldr	r2, [pc, #360]	; (80042fc <generate_waveforms+0x804>)
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	edd3 7a00 	vldr	s15, [r3]
 800419c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041a0:	4b54      	ldr	r3, [pc, #336]	; (80042f4 <generate_waveforms+0x7fc>)
 80041a2:	edd3 7a00 	vldr	s15, [r3]
 80041a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	4a54      	ldr	r2, [pc, #336]	; (8004300 <generate_waveforms+0x808>)
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	edd3 7a00 	vldr	s15, [r3]
 80041b6:	eddf 6a53 	vldr	s13, [pc, #332]	; 8004304 <generate_waveforms+0x80c>
 80041ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80041be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041c2:	eeb0 0a67 	vmov.f32	s0, s15
 80041c6:	f001 febb 	bl	8005f40 <arm_sin_f32>
 80041ca:	eef0 7a40 	vmov.f32	s15, s0
 80041ce:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80041d2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80041d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041da:	edc7 7a00 	vstr	s15, [r7]
 80041de:	883b      	ldrh	r3, [r7, #0]
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	4b4a      	ldr	r3, [pc, #296]	; (800430c <generate_waveforms+0x814>)
 80041e4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4946      	ldr	r1, [pc, #280]	; (8004308 <generate_waveforms+0x810>)
 80041ee:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80041f2:	b291      	uxth	r1, r2
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4845      	ldr	r0, [pc, #276]	; (800430c <generate_waveforms+0x814>)
 80041f8:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80041fc:	b292      	uxth	r2, r2
 80041fe:	440a      	add	r2, r1
 8004200:	b291      	uxth	r1, r2
 8004202:	4a41      	ldr	r2, [pc, #260]	; (8004308 <generate_waveforms+0x810>)
 8004204:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004208:	e061      	b.n	80042ce <generate_waveforms+0x7d6>
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32(theta_vco + 0.3f * buffer_adsr_fm[i]);
 800420a:	69bc      	ldr	r4, [r7, #24]
 800420c:	4b3a      	ldr	r3, [pc, #232]	; (80042f8 <generate_waveforms+0x800>)
 800420e:	ed93 8a06 	vldr	s16, [r3, #24]
 8004212:	4b39      	ldr	r3, [pc, #228]	; (80042f8 <generate_waveforms+0x800>)
 8004214:	edd3 8a06 	vldr	s17, [r3, #24]
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	4a39      	ldr	r2, [pc, #228]	; (8004300 <generate_waveforms+0x808>)
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	edd3 7a00 	vldr	s15, [r3]
 8004224:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004304 <generate_waveforms+0x80c>
 8004228:	ee27 7a87 	vmul.f32	s14, s15, s14
 800422c:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <generate_waveforms+0x7f8>)
 800422e:	edd3 7a00 	vldr	s15, [r3]
 8004232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004236:	eeb0 0a67 	vmov.f32	s0, s15
 800423a:	f001 fe81 	bl	8005f40 <arm_sin_f32>
 800423e:	eef0 7a40 	vmov.f32	s15, s0
 8004242:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004246:	ee78 7a27 	vadd.f32	s15, s16, s15
 800424a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800424e:	edc7 7a00 	vstr	s15, [r7]
 8004252:	883b      	ldrh	r3, [r7, #0]
 8004254:	b29a      	uxth	r2, r3
 8004256:	4b2c      	ldr	r3, [pc, #176]	; (8004308 <generate_waveforms+0x810>)
 8004258:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*arm_sin_f32(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 800425c:	69bc      	ldr	r4, [r7, #24]
 800425e:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <generate_waveforms+0x800>)
 8004260:	ed93 8a07 	vldr	s16, [r3, #28]
 8004264:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <generate_waveforms+0x800>)
 8004266:	edd3 8a07 	vldr	s17, [r3, #28]
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	4a24      	ldr	r2, [pc, #144]	; (8004300 <generate_waveforms+0x808>)
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	edd3 7a00 	vldr	s15, [r3]
 8004276:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004304 <generate_waveforms+0x80c>
 800427a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800427e:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <generate_waveforms+0x7fc>)
 8004280:	edd3 7a00 	vldr	s15, [r3]
 8004284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004288:	eeb0 0a67 	vmov.f32	s0, s15
 800428c:	f001 fe58 	bl	8005f40 <arm_sin_f32>
 8004290:	eef0 7a40 	vmov.f32	s15, s0
 8004294:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004298:	ee78 7a27 	vadd.f32	s15, s16, s15
 800429c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042a0:	edc7 7a00 	vstr	s15, [r7]
 80042a4:	883b      	ldrh	r3, [r7, #0]
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	4b18      	ldr	r3, [pc, #96]	; (800430c <generate_waveforms+0x814>)
 80042aa:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4915      	ldr	r1, [pc, #84]	; (8004308 <generate_waveforms+0x810>)
 80042b4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80042b8:	b291      	uxth	r1, r2
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4813      	ldr	r0, [pc, #76]	; (800430c <generate_waveforms+0x814>)
 80042be:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80042c2:	b292      	uxth	r2, r2
 80042c4:	440a      	add	r2, r1
 80042c6:	b291      	uxth	r1, r2
 80042c8:	4a0f      	ldr	r2, [pc, #60]	; (8004308 <generate_waveforms+0x810>)
 80042ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Sine VCO
	if(osc.vco_wav == sine)
	{
		for(i = start; i < end; i++)
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	3301      	adds	r3, #1
 80042d2:	61bb      	str	r3, [r7, #24]
 80042d4:	88ba      	ldrh	r2, [r7, #4]
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	429a      	cmp	r2, r3
 80042da:	f63f af01 	bhi.w	80040e0 <generate_waveforms+0x5e8>
 80042de:	e381      	b.n	80049e4 <generate_waveforms+0xeec>
			}
		}
	}

	// Square VCO
	else if(osc.vco_wav == square)
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <generate_waveforms+0x800>)
 80042e2:	8a1b      	ldrh	r3, [r3, #16]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	f040 8113 	bne.w	8004510 <generate_waveforms+0xa18>
	{
		for(i = start; i < end; i++)
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	e109      	b.n	8004504 <generate_waveforms+0xa0c>
 80042f0:	2000496c 	.word	0x2000496c
 80042f4:	20004970 	.word	0x20004970
 80042f8:	20000054 	.word	0x20000054
 80042fc:	200015c8 	.word	0x200015c8
 8004300:	200035c8 	.word	0x200035c8
 8004304:	3e99999a 	.word	0x3e99999a
 8004308:	200005c8 	.word	0x200005c8
 800430c:	20000dc8 	.word	0x20000dc8
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8004310:	4b83      	ldr	r3, [pc, #524]	; (8004520 <generate_waveforms+0xa28>)
 8004312:	ed93 7a00 	vldr	s14, [r3]
 8004316:	edd7 7a05 	vldr	s15, [r7, #20]
 800431a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800431e:	4b80      	ldr	r3, [pc, #512]	; (8004520 <generate_waveforms+0xa28>)
 8004320:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 8004324:	4b7f      	ldr	r3, [pc, #508]	; (8004524 <generate_waveforms+0xa2c>)
 8004326:	ed93 7a00 	vldr	s14, [r3]
 800432a:	edd7 7a04 	vldr	s15, [r7, #16]
 800432e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004332:	4b7c      	ldr	r3, [pc, #496]	; (8004524 <generate_waveforms+0xa2c>)
 8004334:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 8004338:	4b7b      	ldr	r3, [pc, #492]	; (8004528 <generate_waveforms+0xa30>)
 800433a:	8adb      	ldrh	r3, [r3, #22]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d17c      	bne.n	800443a <generate_waveforms+0x942>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_square_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8004340:	69bc      	ldr	r4, [r7, #24]
 8004342:	4b79      	ldr	r3, [pc, #484]	; (8004528 <generate_waveforms+0xa30>)
 8004344:	ed93 8a06 	vldr	s16, [r3, #24]
 8004348:	4b77      	ldr	r3, [pc, #476]	; (8004528 <generate_waveforms+0xa30>)
 800434a:	edd3 8a06 	vldr	s17, [r3, #24]
 800434e:	4b76      	ldr	r3, [pc, #472]	; (8004528 <generate_waveforms+0xa30>)
 8004350:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	4a75      	ldr	r2, [pc, #468]	; (800452c <generate_waveforms+0xa34>)
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	edd3 7a00 	vldr	s15, [r3]
 8004360:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004364:	4b6e      	ldr	r3, [pc, #440]	; (8004520 <generate_waveforms+0xa28>)
 8004366:	edd3 7a00 	vldr	s15, [r3]
 800436a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	4a6f      	ldr	r2, [pc, #444]	; (8004530 <generate_waveforms+0xa38>)
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	edd3 7a00 	vldr	s15, [r3]
 800437a:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004534 <generate_waveforms+0xa3c>
 800437e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004386:	eeb0 0a67 	vmov.f32	s0, s15
 800438a:	f000 ff87 	bl	800529c <gen_square_angle>
 800438e:	eef0 7a40 	vmov.f32	s15, s0
 8004392:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004396:	ee78 7a27 	vadd.f32	s15, s16, s15
 800439a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800439e:	edc7 7a00 	vstr	s15, [r7]
 80043a2:	883b      	ldrh	r3, [r7, #0]
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	4b64      	ldr	r3, [pc, #400]	; (8004538 <generate_waveforms+0xa40>)
 80043a8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_square_angle(theta_vco2 + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 80043ac:	69bc      	ldr	r4, [r7, #24]
 80043ae:	4b5e      	ldr	r3, [pc, #376]	; (8004528 <generate_waveforms+0xa30>)
 80043b0:	ed93 8a07 	vldr	s16, [r3, #28]
 80043b4:	4b5c      	ldr	r3, [pc, #368]	; (8004528 <generate_waveforms+0xa30>)
 80043b6:	edd3 8a07 	vldr	s17, [r3, #28]
 80043ba:	4b5b      	ldr	r3, [pc, #364]	; (8004528 <generate_waveforms+0xa30>)
 80043bc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	4a5a      	ldr	r2, [pc, #360]	; (800452c <generate_waveforms+0xa34>)
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	edd3 7a00 	vldr	s15, [r3]
 80043cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043d0:	4b54      	ldr	r3, [pc, #336]	; (8004524 <generate_waveforms+0xa2c>)
 80043d2:	edd3 7a00 	vldr	s15, [r3]
 80043d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	4a54      	ldr	r2, [pc, #336]	; (8004530 <generate_waveforms+0xa38>)
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	edd3 7a00 	vldr	s15, [r3]
 80043e6:	eddf 6a53 	vldr	s13, [pc, #332]	; 8004534 <generate_waveforms+0xa3c>
 80043ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80043ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f2:	eeb0 0a67 	vmov.f32	s0, s15
 80043f6:	f000 ff51 	bl	800529c <gen_square_angle>
 80043fa:	eef0 7a40 	vmov.f32	s15, s0
 80043fe:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004402:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800440a:	edc7 7a00 	vstr	s15, [r7]
 800440e:	883b      	ldrh	r3, [r7, #0]
 8004410:	b29a      	uxth	r2, r3
 8004412:	4b4a      	ldr	r3, [pc, #296]	; (800453c <generate_waveforms+0xa44>)
 8004414:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4946      	ldr	r1, [pc, #280]	; (8004538 <generate_waveforms+0xa40>)
 800441e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004422:	b291      	uxth	r1, r2
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4845      	ldr	r0, [pc, #276]	; (800453c <generate_waveforms+0xa44>)
 8004428:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800442c:	b292      	uxth	r2, r2
 800442e:	440a      	add	r2, r1
 8004430:	b291      	uxth	r1, r2
 8004432:	4a41      	ldr	r2, [pc, #260]	; (8004538 <generate_waveforms+0xa40>)
 8004434:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004438:	e061      	b.n	80044fe <generate_waveforms+0xa06>
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_square_angle(theta_vco + 0.3f * buffer_adsr_fm[i]);
 800443a:	69bc      	ldr	r4, [r7, #24]
 800443c:	4b3a      	ldr	r3, [pc, #232]	; (8004528 <generate_waveforms+0xa30>)
 800443e:	ed93 8a06 	vldr	s16, [r3, #24]
 8004442:	4b39      	ldr	r3, [pc, #228]	; (8004528 <generate_waveforms+0xa30>)
 8004444:	edd3 8a06 	vldr	s17, [r3, #24]
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	4a39      	ldr	r2, [pc, #228]	; (8004530 <generate_waveforms+0xa38>)
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	edd3 7a00 	vldr	s15, [r3]
 8004454:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004534 <generate_waveforms+0xa3c>
 8004458:	ee27 7a87 	vmul.f32	s14, s15, s14
 800445c:	4b30      	ldr	r3, [pc, #192]	; (8004520 <generate_waveforms+0xa28>)
 800445e:	edd3 7a00 	vldr	s15, [r3]
 8004462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004466:	eeb0 0a67 	vmov.f32	s0, s15
 800446a:	f000 ff17 	bl	800529c <gen_square_angle>
 800446e:	eef0 7a40 	vmov.f32	s15, s0
 8004472:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004476:	ee78 7a27 	vadd.f32	s15, s16, s15
 800447a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800447e:	edc7 7a00 	vstr	s15, [r7]
 8004482:	883b      	ldrh	r3, [r7, #0]
 8004484:	b29a      	uxth	r2, r3
 8004486:	4b2c      	ldr	r3, [pc, #176]	; (8004538 <generate_waveforms+0xa40>)
 8004488:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_square_angle(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 800448c:	69bc      	ldr	r4, [r7, #24]
 800448e:	4b26      	ldr	r3, [pc, #152]	; (8004528 <generate_waveforms+0xa30>)
 8004490:	ed93 8a07 	vldr	s16, [r3, #28]
 8004494:	4b24      	ldr	r3, [pc, #144]	; (8004528 <generate_waveforms+0xa30>)
 8004496:	edd3 8a07 	vldr	s17, [r3, #28]
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	4a24      	ldr	r2, [pc, #144]	; (8004530 <generate_waveforms+0xa38>)
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	edd3 7a00 	vldr	s15, [r3]
 80044a6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004534 <generate_waveforms+0xa3c>
 80044aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80044ae:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <generate_waveforms+0xa2c>)
 80044b0:	edd3 7a00 	vldr	s15, [r3]
 80044b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b8:	eeb0 0a67 	vmov.f32	s0, s15
 80044bc:	f000 feee 	bl	800529c <gen_square_angle>
 80044c0:	eef0 7a40 	vmov.f32	s15, s0
 80044c4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80044c8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80044cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d0:	edc7 7a00 	vstr	s15, [r7]
 80044d4:	883b      	ldrh	r3, [r7, #0]
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	4b18      	ldr	r3, [pc, #96]	; (800453c <generate_waveforms+0xa44>)
 80044da:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4915      	ldr	r1, [pc, #84]	; (8004538 <generate_waveforms+0xa40>)
 80044e4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80044e8:	b291      	uxth	r1, r2
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4813      	ldr	r0, [pc, #76]	; (800453c <generate_waveforms+0xa44>)
 80044ee:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80044f2:	b292      	uxth	r2, r2
 80044f4:	440a      	add	r2, r1
 80044f6:	b291      	uxth	r1, r2
 80044f8:	4a0f      	ldr	r2, [pc, #60]	; (8004538 <generate_waveforms+0xa40>)
 80044fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Square VCO
	else if(osc.vco_wav == square)
	{
		for(i = start; i < end; i++)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	3301      	adds	r3, #1
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	88ba      	ldrh	r2, [r7, #4]
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	429a      	cmp	r2, r3
 800450a:	f63f af01 	bhi.w	8004310 <generate_waveforms+0x818>
 800450e:	e269      	b.n	80049e4 <generate_waveforms+0xeec>
			}
		}
	}

	// Sawtooth VCO
	else if(osc.vco_wav == sawtooth)
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <generate_waveforms+0xa30>)
 8004512:	8a1b      	ldrh	r3, [r3, #16]
 8004514:	2b03      	cmp	r3, #3
 8004516:	f040 8113 	bne.w	8004740 <generate_waveforms+0xc48>
	{
		for(i = start; i < end; i++)
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	e109      	b.n	8004734 <generate_waveforms+0xc3c>
 8004520:	2000496c 	.word	0x2000496c
 8004524:	20004970 	.word	0x20004970
 8004528:	20000054 	.word	0x20000054
 800452c:	200015c8 	.word	0x200015c8
 8004530:	200035c8 	.word	0x200035c8
 8004534:	3e99999a 	.word	0x3e99999a
 8004538:	200005c8 	.word	0x200005c8
 800453c:	20000dc8 	.word	0x20000dc8
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8004540:	4b83      	ldr	r3, [pc, #524]	; (8004750 <generate_waveforms+0xc58>)
 8004542:	ed93 7a00 	vldr	s14, [r3]
 8004546:	edd7 7a05 	vldr	s15, [r7, #20]
 800454a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800454e:	4b80      	ldr	r3, [pc, #512]	; (8004750 <generate_waveforms+0xc58>)
 8004550:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 8004554:	4b7f      	ldr	r3, [pc, #508]	; (8004754 <generate_waveforms+0xc5c>)
 8004556:	ed93 7a00 	vldr	s14, [r3]
 800455a:	edd7 7a04 	vldr	s15, [r7, #16]
 800455e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004562:	4b7c      	ldr	r3, [pc, #496]	; (8004754 <generate_waveforms+0xc5c>)
 8004564:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 8004568:	4b7b      	ldr	r3, [pc, #492]	; (8004758 <generate_waveforms+0xc60>)
 800456a:	8adb      	ldrh	r3, [r3, #22]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d17c      	bne.n	800466a <generate_waveforms+0xb72>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_sawtooth_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8004570:	69bc      	ldr	r4, [r7, #24]
 8004572:	4b79      	ldr	r3, [pc, #484]	; (8004758 <generate_waveforms+0xc60>)
 8004574:	ed93 8a06 	vldr	s16, [r3, #24]
 8004578:	4b77      	ldr	r3, [pc, #476]	; (8004758 <generate_waveforms+0xc60>)
 800457a:	edd3 8a06 	vldr	s17, [r3, #24]
 800457e:	4b76      	ldr	r3, [pc, #472]	; (8004758 <generate_waveforms+0xc60>)
 8004580:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	4a75      	ldr	r2, [pc, #468]	; (800475c <generate_waveforms+0xc64>)
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	edd3 7a00 	vldr	s15, [r3]
 8004590:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004594:	4b6e      	ldr	r3, [pc, #440]	; (8004750 <generate_waveforms+0xc58>)
 8004596:	edd3 7a00 	vldr	s15, [r3]
 800459a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	4a6f      	ldr	r2, [pc, #444]	; (8004760 <generate_waveforms+0xc68>)
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	edd3 7a00 	vldr	s15, [r3]
 80045aa:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004764 <generate_waveforms+0xc6c>
 80045ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80045b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045b6:	eeb0 0a67 	vmov.f32	s0, s15
 80045ba:	f000 fe97 	bl	80052ec <gen_sawtooth_angle>
 80045be:	eef0 7a40 	vmov.f32	s15, s0
 80045c2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80045c6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80045ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ce:	edc7 7a00 	vstr	s15, [r7]
 80045d2:	883b      	ldrh	r3, [r7, #0]
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	4b64      	ldr	r3, [pc, #400]	; (8004768 <generate_waveforms+0xc70>)
 80045d8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_sawtooth_angle(theta_vco2 + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 80045dc:	69bc      	ldr	r4, [r7, #24]
 80045de:	4b5e      	ldr	r3, [pc, #376]	; (8004758 <generate_waveforms+0xc60>)
 80045e0:	ed93 8a07 	vldr	s16, [r3, #28]
 80045e4:	4b5c      	ldr	r3, [pc, #368]	; (8004758 <generate_waveforms+0xc60>)
 80045e6:	edd3 8a07 	vldr	s17, [r3, #28]
 80045ea:	4b5b      	ldr	r3, [pc, #364]	; (8004758 <generate_waveforms+0xc60>)
 80045ec:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	4a5a      	ldr	r2, [pc, #360]	; (800475c <generate_waveforms+0xc64>)
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	edd3 7a00 	vldr	s15, [r3]
 80045fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004600:	4b54      	ldr	r3, [pc, #336]	; (8004754 <generate_waveforms+0xc5c>)
 8004602:	edd3 7a00 	vldr	s15, [r3]
 8004606:	ee37 7a27 	vadd.f32	s14, s14, s15
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	4a54      	ldr	r2, [pc, #336]	; (8004760 <generate_waveforms+0xc68>)
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	edd3 7a00 	vldr	s15, [r3]
 8004616:	eddf 6a53 	vldr	s13, [pc, #332]	; 8004764 <generate_waveforms+0xc6c>
 800461a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800461e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004622:	eeb0 0a67 	vmov.f32	s0, s15
 8004626:	f000 fe61 	bl	80052ec <gen_sawtooth_angle>
 800462a:	eef0 7a40 	vmov.f32	s15, s0
 800462e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004632:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800463a:	edc7 7a00 	vstr	s15, [r7]
 800463e:	883b      	ldrh	r3, [r7, #0]
 8004640:	b29a      	uxth	r2, r3
 8004642:	4b4a      	ldr	r3, [pc, #296]	; (800476c <generate_waveforms+0xc74>)
 8004644:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4946      	ldr	r1, [pc, #280]	; (8004768 <generate_waveforms+0xc70>)
 800464e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004652:	b291      	uxth	r1, r2
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	4845      	ldr	r0, [pc, #276]	; (800476c <generate_waveforms+0xc74>)
 8004658:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800465c:	b292      	uxth	r2, r2
 800465e:	440a      	add	r2, r1
 8004660:	b291      	uxth	r1, r2
 8004662:	4a41      	ldr	r2, [pc, #260]	; (8004768 <generate_waveforms+0xc70>)
 8004664:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004668:	e061      	b.n	800472e <generate_waveforms+0xc36>

			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_sawtooth_angle(theta_vco + 0.3f * buffer_adsr_fm[i]);
 800466a:	69bc      	ldr	r4, [r7, #24]
 800466c:	4b3a      	ldr	r3, [pc, #232]	; (8004758 <generate_waveforms+0xc60>)
 800466e:	ed93 8a06 	vldr	s16, [r3, #24]
 8004672:	4b39      	ldr	r3, [pc, #228]	; (8004758 <generate_waveforms+0xc60>)
 8004674:	edd3 8a06 	vldr	s17, [r3, #24]
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	4a39      	ldr	r2, [pc, #228]	; (8004760 <generate_waveforms+0xc68>)
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	edd3 7a00 	vldr	s15, [r3]
 8004684:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004764 <generate_waveforms+0xc6c>
 8004688:	ee27 7a87 	vmul.f32	s14, s15, s14
 800468c:	4b30      	ldr	r3, [pc, #192]	; (8004750 <generate_waveforms+0xc58>)
 800468e:	edd3 7a00 	vldr	s15, [r3]
 8004692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004696:	eeb0 0a67 	vmov.f32	s0, s15
 800469a:	f000 fe27 	bl	80052ec <gen_sawtooth_angle>
 800469e:	eef0 7a40 	vmov.f32	s15, s0
 80046a2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80046a6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80046aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ae:	edc7 7a00 	vstr	s15, [r7]
 80046b2:	883b      	ldrh	r3, [r7, #0]
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	4b2c      	ldr	r3, [pc, #176]	; (8004768 <generate_waveforms+0xc70>)
 80046b8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_sawtooth_angle(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 80046bc:	69bc      	ldr	r4, [r7, #24]
 80046be:	4b26      	ldr	r3, [pc, #152]	; (8004758 <generate_waveforms+0xc60>)
 80046c0:	ed93 8a07 	vldr	s16, [r3, #28]
 80046c4:	4b24      	ldr	r3, [pc, #144]	; (8004758 <generate_waveforms+0xc60>)
 80046c6:	edd3 8a07 	vldr	s17, [r3, #28]
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	4a24      	ldr	r2, [pc, #144]	; (8004760 <generate_waveforms+0xc68>)
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	edd3 7a00 	vldr	s15, [r3]
 80046d6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004764 <generate_waveforms+0xc6c>
 80046da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80046de:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <generate_waveforms+0xc5c>)
 80046e0:	edd3 7a00 	vldr	s15, [r3]
 80046e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e8:	eeb0 0a67 	vmov.f32	s0, s15
 80046ec:	f000 fdfe 	bl	80052ec <gen_sawtooth_angle>
 80046f0:	eef0 7a40 	vmov.f32	s15, s0
 80046f4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80046f8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80046fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004700:	edc7 7a00 	vstr	s15, [r7]
 8004704:	883b      	ldrh	r3, [r7, #0]
 8004706:	b29a      	uxth	r2, r3
 8004708:	4b18      	ldr	r3, [pc, #96]	; (800476c <generate_waveforms+0xc74>)
 800470a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4915      	ldr	r1, [pc, #84]	; (8004768 <generate_waveforms+0xc70>)
 8004714:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004718:	b291      	uxth	r1, r2
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4813      	ldr	r0, [pc, #76]	; (800476c <generate_waveforms+0xc74>)
 800471e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8004722:	b292      	uxth	r2, r2
 8004724:	440a      	add	r2, r1
 8004726:	b291      	uxth	r1, r2
 8004728:	4a0f      	ldr	r2, [pc, #60]	; (8004768 <generate_waveforms+0xc70>)
 800472a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Sawtooth VCO
	else if(osc.vco_wav == sawtooth)
	{
		for(i = start; i < end; i++)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	3301      	adds	r3, #1
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	88ba      	ldrh	r2, [r7, #4]
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	429a      	cmp	r2, r3
 800473a:	f63f af01 	bhi.w	8004540 <generate_waveforms+0xa48>
 800473e:	e151      	b.n	80049e4 <generate_waveforms+0xeec>
			}
		}
	}

	// Triangle VCO
	else if(osc.vco_wav == triangle)
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <generate_waveforms+0xc60>)
 8004742:	8a1b      	ldrh	r3, [r3, #16]
 8004744:	2b04      	cmp	r3, #4
 8004746:	f040 8113 	bne.w	8004970 <generate_waveforms+0xe78>
	{
		for(i = start; i < end; i++)
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	e109      	b.n	8004964 <generate_waveforms+0xe6c>
 8004750:	2000496c 	.word	0x2000496c
 8004754:	20004970 	.word	0x20004970
 8004758:	20000054 	.word	0x20000054
 800475c:	200015c8 	.word	0x200015c8
 8004760:	200035c8 	.word	0x200035c8
 8004764:	3e99999a 	.word	0x3e99999a
 8004768:	200005c8 	.word	0x200005c8
 800476c:	20000dc8 	.word	0x20000dc8
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8004770:	4bba      	ldr	r3, [pc, #744]	; (8004a5c <generate_waveforms+0xf64>)
 8004772:	ed93 7a00 	vldr	s14, [r3]
 8004776:	edd7 7a05 	vldr	s15, [r7, #20]
 800477a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800477e:	4bb7      	ldr	r3, [pc, #732]	; (8004a5c <generate_waveforms+0xf64>)
 8004780:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 8004784:	4bb6      	ldr	r3, [pc, #728]	; (8004a60 <generate_waveforms+0xf68>)
 8004786:	ed93 7a00 	vldr	s14, [r3]
 800478a:	edd7 7a04 	vldr	s15, [r7, #16]
 800478e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004792:	4bb3      	ldr	r3, [pc, #716]	; (8004a60 <generate_waveforms+0xf68>)
 8004794:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 8004798:	4bb2      	ldr	r3, [pc, #712]	; (8004a64 <generate_waveforms+0xf6c>)
 800479a:	8adb      	ldrh	r3, [r3, #22]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d17c      	bne.n	800489a <generate_waveforms+0xda2>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_triangle_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 80047a0:	69bc      	ldr	r4, [r7, #24]
 80047a2:	4bb0      	ldr	r3, [pc, #704]	; (8004a64 <generate_waveforms+0xf6c>)
 80047a4:	ed93 8a06 	vldr	s16, [r3, #24]
 80047a8:	4bae      	ldr	r3, [pc, #696]	; (8004a64 <generate_waveforms+0xf6c>)
 80047aa:	edd3 8a06 	vldr	s17, [r3, #24]
 80047ae:	4bad      	ldr	r3, [pc, #692]	; (8004a64 <generate_waveforms+0xf6c>)
 80047b0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	4aac      	ldr	r2, [pc, #688]	; (8004a68 <generate_waveforms+0xf70>)
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	edd3 7a00 	vldr	s15, [r3]
 80047c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047c4:	4ba5      	ldr	r3, [pc, #660]	; (8004a5c <generate_waveforms+0xf64>)
 80047c6:	edd3 7a00 	vldr	s15, [r3]
 80047ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	4aa6      	ldr	r2, [pc, #664]	; (8004a6c <generate_waveforms+0xf74>)
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	edd3 7a00 	vldr	s15, [r3]
 80047da:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8004a70 <generate_waveforms+0xf78>
 80047de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80047e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047e6:	eeb0 0a67 	vmov.f32	s0, s15
 80047ea:	f000 fe67 	bl	80054bc <gen_triangle_angle>
 80047ee:	eef0 7a40 	vmov.f32	s15, s0
 80047f2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80047f6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80047fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047fe:	edc7 7a00 	vstr	s15, [r7]
 8004802:	883b      	ldrh	r3, [r7, #0]
 8004804:	b29a      	uxth	r2, r3
 8004806:	4b9b      	ldr	r3, [pc, #620]	; (8004a74 <generate_waveforms+0xf7c>)
 8004808:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_triangle_angle(theta_vco2 + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 800480c:	69bc      	ldr	r4, [r7, #24]
 800480e:	4b95      	ldr	r3, [pc, #596]	; (8004a64 <generate_waveforms+0xf6c>)
 8004810:	ed93 8a07 	vldr	s16, [r3, #28]
 8004814:	4b93      	ldr	r3, [pc, #588]	; (8004a64 <generate_waveforms+0xf6c>)
 8004816:	edd3 8a07 	vldr	s17, [r3, #28]
 800481a:	4b92      	ldr	r3, [pc, #584]	; (8004a64 <generate_waveforms+0xf6c>)
 800481c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	4a91      	ldr	r2, [pc, #580]	; (8004a68 <generate_waveforms+0xf70>)
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	edd3 7a00 	vldr	s15, [r3]
 800482c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004830:	4b8b      	ldr	r3, [pc, #556]	; (8004a60 <generate_waveforms+0xf68>)
 8004832:	edd3 7a00 	vldr	s15, [r3]
 8004836:	ee37 7a27 	vadd.f32	s14, s14, s15
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	4a8b      	ldr	r2, [pc, #556]	; (8004a6c <generate_waveforms+0xf74>)
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	edd3 7a00 	vldr	s15, [r3]
 8004846:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8004a70 <generate_waveforms+0xf78>
 800484a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800484e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004852:	eeb0 0a67 	vmov.f32	s0, s15
 8004856:	f000 fe31 	bl	80054bc <gen_triangle_angle>
 800485a:	eef0 7a40 	vmov.f32	s15, s0
 800485e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004862:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800486a:	edc7 7a00 	vstr	s15, [r7]
 800486e:	883b      	ldrh	r3, [r7, #0]
 8004870:	b29a      	uxth	r2, r3
 8004872:	4b81      	ldr	r3, [pc, #516]	; (8004a78 <generate_waveforms+0xf80>)
 8004874:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	497d      	ldr	r1, [pc, #500]	; (8004a74 <generate_waveforms+0xf7c>)
 800487e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004882:	b291      	uxth	r1, r2
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	487c      	ldr	r0, [pc, #496]	; (8004a78 <generate_waveforms+0xf80>)
 8004888:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800488c:	b292      	uxth	r2, r2
 800488e:	440a      	add	r2, r1
 8004890:	b291      	uxth	r1, r2
 8004892:	4a78      	ldr	r2, [pc, #480]	; (8004a74 <generate_waveforms+0xf7c>)
 8004894:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004898:	e061      	b.n	800495e <generate_waveforms+0xe66>
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_triangle_angle(theta_vco + 0.3f * buffer_adsr_fm[i]);
 800489a:	69bc      	ldr	r4, [r7, #24]
 800489c:	4b71      	ldr	r3, [pc, #452]	; (8004a64 <generate_waveforms+0xf6c>)
 800489e:	ed93 8a06 	vldr	s16, [r3, #24]
 80048a2:	4b70      	ldr	r3, [pc, #448]	; (8004a64 <generate_waveforms+0xf6c>)
 80048a4:	edd3 8a06 	vldr	s17, [r3, #24]
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	4a70      	ldr	r2, [pc, #448]	; (8004a6c <generate_waveforms+0xf74>)
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	edd3 7a00 	vldr	s15, [r3]
 80048b4:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004a70 <generate_waveforms+0xf78>
 80048b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80048bc:	4b67      	ldr	r3, [pc, #412]	; (8004a5c <generate_waveforms+0xf64>)
 80048be:	edd3 7a00 	vldr	s15, [r3]
 80048c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c6:	eeb0 0a67 	vmov.f32	s0, s15
 80048ca:	f000 fdf7 	bl	80054bc <gen_triangle_angle>
 80048ce:	eef0 7a40 	vmov.f32	s15, s0
 80048d2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80048d6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80048da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048de:	edc7 7a00 	vstr	s15, [r7]
 80048e2:	883b      	ldrh	r3, [r7, #0]
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	4b63      	ldr	r3, [pc, #396]	; (8004a74 <generate_waveforms+0xf7c>)
 80048e8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_triangle_angle(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 80048ec:	69bc      	ldr	r4, [r7, #24]
 80048ee:	4b5d      	ldr	r3, [pc, #372]	; (8004a64 <generate_waveforms+0xf6c>)
 80048f0:	ed93 8a07 	vldr	s16, [r3, #28]
 80048f4:	4b5b      	ldr	r3, [pc, #364]	; (8004a64 <generate_waveforms+0xf6c>)
 80048f6:	edd3 8a07 	vldr	s17, [r3, #28]
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	4a5b      	ldr	r2, [pc, #364]	; (8004a6c <generate_waveforms+0xf74>)
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	edd3 7a00 	vldr	s15, [r3]
 8004906:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004a70 <generate_waveforms+0xf78>
 800490a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800490e:	4b54      	ldr	r3, [pc, #336]	; (8004a60 <generate_waveforms+0xf68>)
 8004910:	edd3 7a00 	vldr	s15, [r3]
 8004914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004918:	eeb0 0a67 	vmov.f32	s0, s15
 800491c:	f000 fdce 	bl	80054bc <gen_triangle_angle>
 8004920:	eef0 7a40 	vmov.f32	s15, s0
 8004924:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004928:	ee78 7a27 	vadd.f32	s15, s16, s15
 800492c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004930:	edc7 7a00 	vstr	s15, [r7]
 8004934:	883b      	ldrh	r3, [r7, #0]
 8004936:	b29a      	uxth	r2, r3
 8004938:	4b4f      	ldr	r3, [pc, #316]	; (8004a78 <generate_waveforms+0xf80>)
 800493a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	494c      	ldr	r1, [pc, #304]	; (8004a74 <generate_waveforms+0xf7c>)
 8004944:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004948:	b291      	uxth	r1, r2
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	484a      	ldr	r0, [pc, #296]	; (8004a78 <generate_waveforms+0xf80>)
 800494e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8004952:	b292      	uxth	r2, r2
 8004954:	440a      	add	r2, r1
 8004956:	b291      	uxth	r1, r2
 8004958:	4a46      	ldr	r2, [pc, #280]	; (8004a74 <generate_waveforms+0xf7c>)
 800495a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Triangle VCO
	else if(osc.vco_wav == triangle)
	{
		for(i = start; i < end; i++)
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	3301      	adds	r3, #1
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	88ba      	ldrh	r2, [r7, #4]
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	429a      	cmp	r2, r3
 800496a:	f63f af01 	bhi.w	8004770 <generate_waveforms+0xc78>
 800496e:	e039      	b.n	80049e4 <generate_waveforms+0xeec>
			}
		}
	}

	// Noise VCO
	else if(osc.vco_wav == noise)
 8004970:	4b3c      	ldr	r3, [pc, #240]	; (8004a64 <generate_waveforms+0xf6c>)
 8004972:	8a1b      	ldrh	r3, [r3, #16]
 8004974:	2b05      	cmp	r3, #5
 8004976:	d135      	bne.n	80049e4 <generate_waveforms+0xeec>
	{
		for(i = start; i < end; i++)
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	e02e      	b.n	80049dc <generate_waveforms+0xee4>
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 800497e:	4b37      	ldr	r3, [pc, #220]	; (8004a5c <generate_waveforms+0xf64>)
 8004980:	ed93 7a00 	vldr	s14, [r3]
 8004984:	edd7 7a05 	vldr	s15, [r7, #20]
 8004988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800498c:	4b33      	ldr	r3, [pc, #204]	; (8004a5c <generate_waveforms+0xf64>)
 800498e:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 8004992:	4b33      	ldr	r3, [pc, #204]	; (8004a60 <generate_waveforms+0xf68>)
 8004994:	ed93 7a00 	vldr	s14, [r3]
 8004998:	edd7 7a04 	vldr	s15, [r7, #16]
 800499c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049a0:	4b2f      	ldr	r3, [pc, #188]	; (8004a60 <generate_waveforms+0xf68>)
 80049a2:	edc3 7a00 	vstr	s15, [r3]

			buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_AWGN();
 80049a6:	69bc      	ldr	r4, [r7, #24]
 80049a8:	4b2e      	ldr	r3, [pc, #184]	; (8004a64 <generate_waveforms+0xf6c>)
 80049aa:	ed93 8a06 	vldr	s16, [r3, #24]
 80049ae:	4b2d      	ldr	r3, [pc, #180]	; (8004a64 <generate_waveforms+0xf6c>)
 80049b0:	edd3 8a06 	vldr	s17, [r3, #24]
 80049b4:	f001 f812 	bl	80059dc <gen_AWGN>
 80049b8:	eef0 7a40 	vmov.f32	s15, s0
 80049bc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80049c0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80049c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c8:	edc7 7a00 	vstr	s15, [r7]
 80049cc:	883b      	ldrh	r3, [r7, #0]
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	4b28      	ldr	r3, [pc, #160]	; (8004a74 <generate_waveforms+0xf7c>)
 80049d2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	}

	// Noise VCO
	else if(osc.vco_wav == noise)
	{
		for(i = start; i < end; i++)
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	3301      	adds	r3, #1
 80049da:	61bb      	str	r3, [r7, #24]
 80049dc:	88ba      	ldrh	r2, [r7, #4]
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d8cc      	bhi.n	800497e <generate_waveforms+0xe86>
			}
		}
	}

	// AM Modulate VCO with LFO
	if(osc.am_mod == ON)
 80049e4:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <generate_waveforms+0xf6c>)
 80049e6:	8a9b      	ldrh	r3, [r3, #20]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d12e      	bne.n	8004a4a <generate_waveforms+0xf52>
	{
		for(i = start; i < end; i++)
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	e027      	b.n	8004a42 <generate_waveforms+0xf4a>
		{
			buffer_output[i] = buffer_output[i]*(osc.lfo_amp_am + osc.lfo_amp_am*buffer_lfo_float[i]);
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	491f      	ldr	r1, [pc, #124]	; (8004a74 <generate_waveforms+0xf7c>)
 80049f8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80049fc:	b292      	uxth	r2, r2
 80049fe:	ee07 2a90 	vmov	s15, r2
 8004a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a06:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <generate_waveforms+0xf6c>)
 8004a08:	edd2 6a09 	vldr	s13, [r2, #36]	; 0x24
 8004a0c:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <generate_waveforms+0xf6c>)
 8004a0e:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4914      	ldr	r1, [pc, #80]	; (8004a68 <generate_waveforms+0xf70>)
 8004a16:	0092      	lsls	r2, r2, #2
 8004a18:	440a      	add	r2, r1
 8004a1a:	edd2 7a00 	vldr	s15, [r2]
 8004a1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a2e:	edc7 7a00 	vstr	s15, [r7]
 8004a32:	883a      	ldrh	r2, [r7, #0]
 8004a34:	b291      	uxth	r1, r2
 8004a36:	4a0f      	ldr	r2, [pc, #60]	; (8004a74 <generate_waveforms+0xf7c>)
 8004a38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// AM Modulate VCO with LFO
	if(osc.am_mod == ON)
	{
		for(i = start; i < end; i++)
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	88ba      	ldrh	r2, [r7, #4]
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d8d3      	bhi.n	80049f2 <generate_waveforms+0xefa>
			buffer_output[i] = buffer_output[i]*(osc.lfo_amp_am + osc.lfo_amp_am*buffer_lfo_float[i]);
		}
	}

	// AM Modulate VCO with ADSR
	if(adsr_settings.am_mod == ON)
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <generate_waveforms+0xf84>)
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d137      	bne.n	8004ac4 <generate_waveforms+0xfcc>
	{
		for(i = start; i < end; i++)
 8004a54:	88fb      	ldrh	r3, [r7, #6]
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	e030      	b.n	8004abc <generate_waveforms+0xfc4>
 8004a5a:	bf00      	nop
 8004a5c:	2000496c 	.word	0x2000496c
 8004a60:	20004970 	.word	0x20004970
 8004a64:	20000054 	.word	0x20000054
 8004a68:	200015c8 	.word	0x200015c8
 8004a6c:	200035c8 	.word	0x200035c8
 8004a70:	3e99999a 	.word	0x3e99999a
 8004a74:	200005c8 	.word	0x200005c8
 8004a78:	20000dc8 	.word	0x20000dc8
 8004a7c:	20004a64 	.word	0x20004a64
		{
			buffer_output[i] = buffer_output[i]*buffer_adsr_am[i];
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	492a      	ldr	r1, [pc, #168]	; (8004b30 <generate_waveforms+0x1038>)
 8004a86:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004a8a:	b292      	uxth	r2, r2
 8004a8c:	ee07 2a90 	vmov	s15, r2
 8004a90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4927      	ldr	r1, [pc, #156]	; (8004b34 <generate_waveforms+0x103c>)
 8004a98:	0092      	lsls	r2, r2, #2
 8004a9a:	440a      	add	r2, r1
 8004a9c:	edd2 7a00 	vldr	s15, [r2]
 8004aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aa8:	edc7 7a00 	vstr	s15, [r7]
 8004aac:	883a      	ldrh	r2, [r7, #0]
 8004aae:	b291      	uxth	r1, r2
 8004ab0:	4a1f      	ldr	r2, [pc, #124]	; (8004b30 <generate_waveforms+0x1038>)
 8004ab2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// AM Modulate VCO with ADSR
	if(adsr_settings.am_mod == ON)
	{
		for(i = start; i < end; i++)
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	88ba      	ldrh	r2, [r7, #4]
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d8dd      	bhi.n	8004a80 <generate_waveforms+0xf88>
	}

	// TODO: break setup into two functions.
	// One initializes filter settings.
	// The other calls the filter functions.
	biquad_invoke(start, end);
 8004ac4:	88ba      	ldrh	r2, [r7, #4]
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fea2 	bl	8005814 <biquad_invoke>

	theta_vco = fast_fmod(theta_vco, TWO_PI);
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <generate_waveforms+0x1040>)
 8004ad2:	edd3 7a00 	vldr	s15, [r3]
 8004ad6:	eddf 0a19 	vldr	s1, [pc, #100]	; 8004b3c <generate_waveforms+0x1044>
 8004ada:	eeb0 0a67 	vmov.f32	s0, s15
 8004ade:	f000 fdb7 	bl	8005650 <fast_fmod>
 8004ae2:	eef0 7a40 	vmov.f32	s15, s0
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <generate_waveforms+0x1040>)
 8004ae8:	edc3 7a00 	vstr	s15, [r3]
	theta_vco2 = fast_fmod(theta_vco2, TWO_PI);
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <generate_waveforms+0x1048>)
 8004aee:	edd3 7a00 	vldr	s15, [r3]
 8004af2:	eddf 0a12 	vldr	s1, [pc, #72]	; 8004b3c <generate_waveforms+0x1044>
 8004af6:	eeb0 0a67 	vmov.f32	s0, s15
 8004afa:	f000 fda9 	bl	8005650 <fast_fmod>
 8004afe:	eef0 7a40 	vmov.f32	s15, s0
 8004b02:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <generate_waveforms+0x1048>)
 8004b04:	edc3 7a00 	vstr	s15, [r3]
	theta_lfo = fast_fmod(theta_lfo, TWO_PI);
 8004b08:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <generate_waveforms+0x104c>)
 8004b0a:	edd3 7a00 	vldr	s15, [r3]
 8004b0e:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8004b3c <generate_waveforms+0x1044>
 8004b12:	eeb0 0a67 	vmov.f32	s0, s15
 8004b16:	f000 fd9b 	bl	8005650 <fast_fmod>
 8004b1a:	eef0 7a40 	vmov.f32	s15, s0
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <generate_waveforms+0x104c>)
 8004b20:	edc3 7a00 	vstr	s15, [r3]
	// theta_adsr = fast_fmod(theta_adsr, TWO_PI);

	return;
 8004b24:	bf00      	nop
}
 8004b26:	3724      	adds	r7, #36	; 0x24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	ecbd 8b02 	vpop	{d8}
 8004b2e:	bd90      	pop	{r4, r7, pc}
 8004b30:	200005c8 	.word	0x200005c8
 8004b34:	200025c8 	.word	0x200025c8
 8004b38:	2000496c 	.word	0x2000496c
 8004b3c:	40c90fdb 	.word	0x40c90fdb
 8004b40:	20004970 	.word	0x20004970
 8004b44:	20004974 	.word	0x20004974

08004b48 <adsr>:


void adsr(uint16_t start, uint16_t end)
{
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	ed2d 8b02 	vpush	{d8}
 8004b4e:	b08f      	sub	sp, #60	; 0x3c
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	4603      	mov	r3, r0
 8004b54:	460a      	mov	r2, r1
 8004b56:	80fb      	strh	r3, [r7, #6]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	// adsr_settings = adsr_03;
	adsr_settings.attack_len =  (ADCBuffer[4] & 0xfffc)*20;		// A5
 8004b60:	4b95      	ldr	r3, [pc, #596]	; (8004db8 <adsr+0x270>)
 8004b62:	891b      	ldrh	r3, [r3, #8]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8004b6a:	401a      	ands	r2, r3
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	461a      	mov	r2, r3
 8004b76:	4b91      	ldr	r3, [pc, #580]	; (8004dbc <adsr+0x274>)
 8004b78:	609a      	str	r2, [r3, #8]
	adsr_settings.decay_len =   (ADCBuffer[9] & 0xfffc)*20;	// C1
 8004b7a:	4b8f      	ldr	r3, [pc, #572]	; (8004db8 <adsr+0x270>)
 8004b7c:	8a5b      	ldrh	r3, [r3, #18]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8004b84:	401a      	ands	r2, r3
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	461a      	mov	r2, r3
 8004b90:	4b8a      	ldr	r3, [pc, #552]	; (8004dbc <adsr+0x274>)
 8004b92:	60da      	str	r2, [r3, #12]
	adsr_settings.sustain_len = (ADCBuffer[5] & 0xfffc)*20;	// A7
 8004b94:	4b88      	ldr	r3, [pc, #544]	; (8004db8 <adsr+0x270>)
 8004b96:	895b      	ldrh	r3, [r3, #10]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4b84      	ldr	r3, [pc, #528]	; (8004dbc <adsr+0x274>)
 8004bac:	611a      	str	r2, [r3, #16]
	adsr_settings.release_len = (ADCBuffer[6] & 0xfffc)*20;	// B0
 8004bae:	4b82      	ldr	r3, [pc, #520]	; (8004db8 <adsr+0x270>)
 8004bb0:	899b      	ldrh	r3, [r3, #12]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8004bb8:	401a      	ands	r2, r3
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	4b7d      	ldr	r3, [pc, #500]	; (8004dbc <adsr+0x274>)
 8004bc6:	615a      	str	r2, [r3, #20]
	adsr_settings.blank_len =   (ADCBuffer[8] & 0xfffc)*20;		// C0
 8004bc8:	4b7b      	ldr	r3, [pc, #492]	; (8004db8 <adsr+0x270>)
 8004bca:	8a1b      	ldrh	r3, [r3, #16]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8004bd2:	401a      	ands	r2, r3
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4b77      	ldr	r3, [pc, #476]	; (8004dbc <adsr+0x274>)
 8004be0:	619a      	str	r2, [r3, #24]
	volatile uint32_t samples_cycle_adsr = adsr_settings.attack_len + adsr_settings.decay_len + adsr_settings.sustain_len + adsr_settings.release_len + adsr_settings.blank_len;
 8004be2:	4b76      	ldr	r3, [pc, #472]	; (8004dbc <adsr+0x274>)
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	4b75      	ldr	r3, [pc, #468]	; (8004dbc <adsr+0x274>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	441a      	add	r2, r3
 8004bec:	4b73      	ldr	r3, [pc, #460]	; (8004dbc <adsr+0x274>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	441a      	add	r2, r3
 8004bf2:	4b72      	ldr	r3, [pc, #456]	; (8004dbc <adsr+0x274>)
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	441a      	add	r2, r3
 8004bf8:	4b70      	ldr	r3, [pc, #448]	; (8004dbc <adsr+0x274>)
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

	// C4
	uint16_t tempf = pseudo_log(ADCBuffer[11] & 0xfffc);
 8004c00:	4b6d      	ldr	r3, [pc, #436]	; (8004db8 <adsr+0x270>)
 8004c02:	8adb      	ldrh	r3, [r3, #22]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f023 0303 	bic.w	r3, r3, #3
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fd67 	bl	80056e0 <pseudo_log>
 8004c12:	4603      	mov	r3, r0
 8004c14:	85bb      	strh	r3, [r7, #44]	; 0x2c
	adsr_settings.sustain_amp = moving_avg(mov_avg4, &mov_avg_sum4, mov_avg_index4, MOV_AVG_LENGTH_BUFFER, tempf);
 8004c16:	4b6a      	ldr	r3, [pc, #424]	; (8004dc0 <adsr+0x278>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	2320      	movs	r3, #32
 8004c20:	4968      	ldr	r1, [pc, #416]	; (8004dc4 <adsr+0x27c>)
 8004c22:	4869      	ldr	r0, [pc, #420]	; (8004dc8 <adsr+0x280>)
 8004c24:	f000 fd38 	bl	8005698 <moving_avg>
 8004c28:	ee07 0a90 	vmov	s15, r0
 8004c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c30:	4b62      	ldr	r3, [pc, #392]	; (8004dbc <adsr+0x274>)
 8004c32:	edc3 7a01 	vstr	s15, [r3, #4]
	mov_avg_index4++;
 8004c36:	4b62      	ldr	r3, [pc, #392]	; (8004dc0 <adsr+0x278>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	4a60      	ldr	r2, [pc, #384]	; (8004dc0 <adsr+0x278>)
 8004c3e:	6013      	str	r3, [r2, #0]
	if (mov_avg_index4 >= MOV_AVG_LENGTH_BUFFER)
 8004c40:	4b5f      	ldr	r3, [pc, #380]	; (8004dc0 <adsr+0x278>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b1f      	cmp	r3, #31
 8004c46:	d902      	bls.n	8004c4e <adsr+0x106>
	{
		mov_avg_index4 = 0;
 8004c48:	4b5d      	ldr	r3, [pc, #372]	; (8004dc0 <adsr+0x278>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
	}

	adsr_settings.sustain_amp = adsr_settings.sustain_amp/8000.0f;
 8004c4e:	4b5b      	ldr	r3, [pc, #364]	; (8004dbc <adsr+0x274>)
 8004c50:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c54:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8004dcc <adsr+0x284>
 8004c58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c5c:	4b57      	ldr	r3, [pc, #348]	; (8004dbc <adsr+0x274>)
 8004c5e:	edc3 7a01 	vstr	s15, [r3, #4]
	// adsr_settings.sustain_amp = pseudo_log(adsr_settings.sustain_amp, ???);

	// Calculate ADSR boundaries.
	uint32_t decay_start = adsr_settings.attack_len;
 8004c62:	4b56      	ldr	r3, [pc, #344]	; (8004dbc <adsr+0x274>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t sustain_start = decay_start + adsr_settings.decay_len;
 8004c68:	4b54      	ldr	r3, [pc, #336]	; (8004dbc <adsr+0x274>)
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	4413      	add	r3, r2
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t release_start = sustain_start + adsr_settings.sustain_len;
 8004c72:	4b52      	ldr	r3, [pc, #328]	; (8004dbc <adsr+0x274>)
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	4413      	add	r3, r2
 8004c7a:	623b      	str	r3, [r7, #32]
	uint32_t blank_start = release_start + adsr_settings.release_len;
 8004c7c:	4b4f      	ldr	r3, [pc, #316]	; (8004dbc <adsr+0x274>)
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	4413      	add	r3, r2
 8004c84:	61fb      	str	r3, [r7, #28]
	uint32_t blank_end = blank_start + adsr_settings.blank_len;
 8004c86:	4b4d      	ldr	r3, [pc, #308]	; (8004dbc <adsr+0x274>)
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]


	volatile float32_t angle_attack = PI/adsr_settings.attack_len;
 8004c90:	4b4a      	ldr	r3, [pc, #296]	; (8004dbc <adsr+0x274>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	ee07 3a90 	vmov	s15, r3
 8004c98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c9c:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8004dd0 <adsr+0x288>
 8004ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca4:	edc7 7a04 	vstr	s15, [r7, #16]
	volatile float32_t angle_decay = PI/adsr_settings.decay_len;
 8004ca8:	4b44      	ldr	r3, [pc, #272]	; (8004dbc <adsr+0x274>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	ee07 3a90 	vmov	s15, r3
 8004cb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cb4:	eddf 6a46 	vldr	s13, [pc, #280]	; 8004dd0 <adsr+0x288>
 8004cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cbc:	edc7 7a03 	vstr	s15, [r7, #12]
	volatile float32_t angle_release = PI/adsr_settings.release_len;
 8004cc0:	4b3e      	ldr	r3, [pc, #248]	; (8004dbc <adsr+0x274>)
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	ee07 3a90 	vmov	s15, r3
 8004cc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ccc:	eddf 6a40 	vldr	s13, [pc, #256]	; 8004dd0 <adsr+0x288>
 8004cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd4:	edc7 7a02 	vstr	s15, [r7, #8]

	// Clear out adsr buffers if we're not using them.  Otherwise, they might still get used.
	if(adsr_settings.am_mod == OFF)
 8004cd8:	4b38      	ldr	r3, [pc, #224]	; (8004dbc <adsr+0x274>)
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d110      	bne.n	8004d04 <adsr+0x1bc>
	{
		for(i = start; i < end; i++)
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ce6:	e009      	b.n	8004cfc <adsr+0x1b4>
		{
			buffer_adsr_am[i] = 0.0f;
 8004ce8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cea:	4a3a      	ldr	r2, [pc, #232]	; (8004dd4 <adsr+0x28c>)
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
	volatile float32_t angle_release = PI/adsr_settings.release_len;

	// Clear out adsr buffers if we're not using them.  Otherwise, they might still get used.
	if(adsr_settings.am_mod == OFF)
	{
		for(i = start; i < end; i++)
 8004cf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004cfc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004cfe:	88bb      	ldrh	r3, [r7, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d3f1      	bcc.n	8004ce8 <adsr+0x1a0>
		{
			buffer_adsr_am[i] = 0.0f;
		}
	}

	if(adsr_settings.fm_mod == OFF)
 8004d04:	4b2d      	ldr	r3, [pc, #180]	; (8004dbc <adsr+0x274>)
 8004d06:	885b      	ldrh	r3, [r3, #2]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d110      	bne.n	8004d30 <adsr+0x1e8>
	{
		for(i = start; i < end; i++)
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d12:	e009      	b.n	8004d28 <adsr+0x1e0>
		{
			buffer_adsr_fm[i] = 0.0f;
 8004d14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d16:	4a30      	ldr	r2, [pc, #192]	; (8004dd8 <adsr+0x290>)
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
		}
	}

	if(adsr_settings.fm_mod == OFF)
	{
		for(i = start; i < end; i++)
 8004d22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d24:	3301      	adds	r3, #1
 8004d26:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004d2a:	88bb      	ldrh	r3, [r7, #4]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d3f1      	bcc.n	8004d14 <adsr+0x1cc>
	}

	// Generic ADSR envelope.  Always generate this envelope, even if no AM mod of ADSR.
	// The waveform contains 5 segments (asdr + a blank space)
	// if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
	if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
 8004d30:	4b22      	ldr	r3, [pc, #136]	; (8004dbc <adsr+0x274>)
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d005      	beq.n	8004d46 <adsr+0x1fe>
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <adsr+0x274>)
 8004d3c:	885b      	ldrh	r3, [r3, #2]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	f040 80f8 	bne.w	8004f36 <adsr+0x3ee>
	{
		for(i = start; i < end; i++)
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d4a:	e0ef      	b.n	8004f2c <adsr+0x3e4>
		{
			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			if( (sample_count_adsr+(i-start))%samples_cycle_adsr < decay_start)
 8004d4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	4b21      	ldr	r3, [pc, #132]	; (8004ddc <adsr+0x294>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4413      	add	r3, r2
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d60:	fb02 f201 	mul.w	r2, r2, r1
 8004d64:	1a9a      	subs	r2, r3, r2
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d239      	bcs.n	8004de0 <adsr+0x298>
			{
				// Attack
				// Sine, FM --> Try 1.0
				// Square, FM --> Use 0.4
				// Triangle, FM ---> Try 2.0
				buffer_adsr_am[i] = 1.0f + 1.0f * gen_sawtooth_angle( (sample_count_adsr+(i-start)) % samples_cycle_adsr * angle_attack);
 8004d6c:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8004d6e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004d70:	88fb      	ldrh	r3, [r7, #6]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <adsr+0x294>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d82:	fb02 f201 	mul.w	r2, r2, r1
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	ee07 3a90 	vmov	s15, r3
 8004d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d90:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d98:	eeb0 0a67 	vmov.f32	s0, s15
 8004d9c:	f000 faa6 	bl	80052ec <gen_sawtooth_angle>
 8004da0:	eeb0 7a40 	vmov.f32	s14, s0
 8004da4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dac:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <adsr+0x28c>)
 8004dae:	00a3      	lsls	r3, r4, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	edc3 7a00 	vstr	s15, [r3]
 8004db6:	e0b6      	b.n	8004f26 <adsr+0x3de>
 8004db8:	20004a34 	.word	0x20004a34
 8004dbc:	20004a64 	.word	0x20004a64
 8004dc0:	200047d8 	.word	0x200047d8
 8004dc4:	20004a5c 	.word	0x20004a5c
 8004dc8:	20004758 	.word	0x20004758
 8004dcc:	45fa0000 	.word	0x45fa0000
 8004dd0:	40490fdb 	.word	0x40490fdb
 8004dd4:	200025c8 	.word	0x200025c8
 8004dd8:	200035c8 	.word	0x200035c8
 8004ddc:	200045c8 	.word	0x200045c8
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < sustain_start)
 8004de0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	4b9e      	ldr	r3, [pc, #632]	; (8005064 <adsr+0x51c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4413      	add	r3, r2
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004df4:	fb02 f201 	mul.w	r2, r2, r1
 8004df8:	1a9a      	subs	r2, r3, r2
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d22a      	bcs.n	8004e56 <adsr+0x30e>
			{
				// Decay
				buffer_adsr_am[i] = 1.0f * gen_rampdown_angle2( (sample_count_adsr+(i-start-decay_start)) % samples_cycle_adsr * angle_decay, adsr_settings.sustain_amp, 1.0);
 8004e00:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8004e02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	1ad2      	subs	r2, r2, r3
 8004e0e:	4b95      	ldr	r3, [pc, #596]	; (8005064 <adsr+0x51c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4413      	add	r3, r2
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e1a:	fb02 f201 	mul.w	r2, r2, r1
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	ee07 3a90 	vmov	s15, r3
 8004e24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e28:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e30:	4b8d      	ldr	r3, [pc, #564]	; (8005068 <adsr+0x520>)
 8004e32:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e36:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004e3a:	eef0 0a47 	vmov.f32	s1, s14
 8004e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e42:	f000 faf1 	bl	8005428 <gen_rampdown_angle2>
 8004e46:	eef0 7a40 	vmov.f32	s15, s0
 8004e4a:	4a88      	ldr	r2, [pc, #544]	; (800506c <adsr+0x524>)
 8004e4c:	00a3      	lsls	r3, r4, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	edc3 7a00 	vstr	s15, [r3]
 8004e54:	e067      	b.n	8004f26 <adsr+0x3de>
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < release_start)
 8004e56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e58:	88fb      	ldrh	r3, [r7, #6]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b81      	ldr	r3, [pc, #516]	; (8005064 <adsr+0x51c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4413      	add	r3, r2
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e6a:	fb02 f201 	mul.w	r2, r2, r1
 8004e6e:	1a9a      	subs	r2, r3, r2
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d207      	bcs.n	8004e86 <adsr+0x33e>
			{
				// Sustain
				buffer_adsr_am[i] = adsr_settings.sustain_amp;
 8004e76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e78:	4a7b      	ldr	r2, [pc, #492]	; (8005068 <adsr+0x520>)
 8004e7a:	6852      	ldr	r2, [r2, #4]
 8004e7c:	497b      	ldr	r1, [pc, #492]	; (800506c <adsr+0x524>)
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e04f      	b.n	8004f26 <adsr+0x3de>
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_start)
 8004e86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4b75      	ldr	r3, [pc, #468]	; (8005064 <adsr+0x51c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4413      	add	r3, r2
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e9a:	fb02 f201 	mul.w	r2, r2, r1
 8004e9e:	1a9a      	subs	r2, r3, r2
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d228      	bcs.n	8004ef8 <adsr+0x3b0>
			{
				// Release
				buffer_adsr_am[i] = adsr_settings.sustain_amp * gen_rampdown_angle( (sample_count_adsr+(i-start-release_start)) % samples_cycle_adsr * angle_release);
 8004ea6:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8004ea8:	4b6f      	ldr	r3, [pc, #444]	; (8005068 <adsr+0x520>)
 8004eaa:	ed93 8a01 	vldr	s16, [r3, #4]
 8004eae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004eb0:	88fb      	ldrh	r3, [r7, #6]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	1ad2      	subs	r2, r2, r3
 8004eba:	4b6a      	ldr	r3, [pc, #424]	; (8005064 <adsr+0x51c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ec6:	fb02 f201 	mul.w	r2, r2, r1
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	ee07 3a90 	vmov	s15, r3
 8004ed0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ed4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004edc:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee0:	f000 fa72 	bl	80053c8 <gen_rampdown_angle>
 8004ee4:	eef0 7a40 	vmov.f32	s15, s0
 8004ee8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004eec:	4a5f      	ldr	r2, [pc, #380]	; (800506c <adsr+0x524>)
 8004eee:	00a3      	lsls	r3, r4, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	edc3 7a00 	vstr	s15, [r3]
 8004ef6:	e016      	b.n	8004f26 <adsr+0x3de>

			}
			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_end)
 8004ef8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	4b58      	ldr	r3, [pc, #352]	; (8005064 <adsr+0x51c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4413      	add	r3, r2
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f0c:	fb02 f201 	mul.w	r2, r2, r1
 8004f10:	1a9a      	subs	r2, r3, r2
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d206      	bcs.n	8004f26 <adsr+0x3de>
			{
				// Blank
				buffer_adsr_am[i] = 0;
 8004f18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f1a:	4a54      	ldr	r2, [pc, #336]	; (800506c <adsr+0x524>)
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
	// Generic ADSR envelope.  Always generate this envelope, even if no AM mod of ADSR.
	// The waveform contains 5 segments (asdr + a blank space)
	// if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
	if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
	{
		for(i = start; i < end; i++)
 8004f26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f28:	3301      	adds	r3, #1
 8004f2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004f2e:	88bb      	ldrh	r3, [r7, #4]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	f4ff af0b 	bcc.w	8004d4c <adsr+0x204>

	/*
	 * ADSR frequency envelope.
	 * Uses the ADSR amplitude envelope and integrates each of the shapes.
	 */
	if(adsr_settings.fm_mod == ON)
 8004f36:	4b4c      	ldr	r3, [pc, #304]	; (8005068 <adsr+0x520>)
 8004f38:	885b      	ldrh	r3, [r3, #2]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	f040 818c 	bne.w	800525a <adsr+0x712>
	{
		for(i = start; i < end; i++)
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f46:	e183      	b.n	8005250 <adsr+0x708>
		{
			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			if( (sample_count_adsr+(i-start))%samples_cycle_adsr < decay_start)
 8004f48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4b44      	ldr	r3, [pc, #272]	; (8005064 <adsr+0x51c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4413      	add	r3, r2
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f5c:	fb02 f201 	mul.w	r2, r2, r1
 8004f60:	1a9a      	subs	r2, r3, r2
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d236      	bcs.n	8004fd6 <adsr+0x48e>
			{
				// Attack
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8004f68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f6a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004f6c:	493f      	ldr	r1, [pc, #252]	; (800506c <adsr+0x524>)
 8004f6e:	0092      	lsls	r2, r2, #2
 8004f70:	440a      	add	r2, r1
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	493e      	ldr	r1, [pc, #248]	; (8005070 <adsr+0x528>)
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	601a      	str	r2, [r3, #0]
				if(i > 0)
 8004f7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d015      	beq.n	8004fae <adsr+0x466>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 8004f82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004f86:	493a      	ldr	r1, [pc, #232]	; (8005070 <adsr+0x528>)
 8004f88:	0092      	lsls	r2, r2, #2
 8004f8a:	440a      	add	r2, r1
 8004f8c:	ed92 7a00 	vldr	s14, [r2]
 8004f90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004f92:	3a01      	subs	r2, #1
 8004f94:	4936      	ldr	r1, [pc, #216]	; (8005070 <adsr+0x528>)
 8004f96:	0092      	lsls	r2, r2, #2
 8004f98:	440a      	add	r2, r1
 8004f9a:	edd2 7a00 	vldr	s15, [r2]
 8004f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fa2:	4a33      	ldr	r2, [pc, #204]	; (8005070 <adsr+0x528>)
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	edc3 7a00 	vstr	s15, [r3]
 8004fac:	e14d      	b.n	800524a <adsr+0x702>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 8004fae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004fb2:	492f      	ldr	r1, [pc, #188]	; (8005070 <adsr+0x528>)
 8004fb4:	0092      	lsls	r2, r2, #2
 8004fb6:	440a      	add	r2, r1
 8004fb8:	ed92 7a00 	vldr	s14, [r2]
 8004fbc:	4a2c      	ldr	r2, [pc, #176]	; (8005070 <adsr+0x528>)
 8004fbe:	f602 72fc 	addw	r2, r2, #4092	; 0xffc
 8004fc2:	edd2 7a00 	vldr	s15, [r2]
 8004fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fca:	4a29      	ldr	r2, [pc, #164]	; (8005070 <adsr+0x528>)
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	edc3 7a00 	vstr	s15, [r3]
 8004fd4:	e139      	b.n	800524a <adsr+0x702>
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < sustain_start)
 8004fd6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4b21      	ldr	r3, [pc, #132]	; (8005064 <adsr+0x51c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fea:	fb02 f201 	mul.w	r2, r2, r1
 8004fee:	1a9a      	subs	r2, r3, r2
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d23e      	bcs.n	8005074 <adsr+0x52c>
			{
				// Decay
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8004ff6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ff8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ffa:	491c      	ldr	r1, [pc, #112]	; (800506c <adsr+0x524>)
 8004ffc:	0092      	lsls	r2, r2, #2
 8004ffe:	440a      	add	r2, r1
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	491b      	ldr	r1, [pc, #108]	; (8005070 <adsr+0x528>)
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	601a      	str	r2, [r3, #0]
				if(i > 0)
 800500a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800500c:	2b00      	cmp	r3, #0
 800500e:	d015      	beq.n	800503c <adsr+0x4f4>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 8005010:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005012:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005014:	4916      	ldr	r1, [pc, #88]	; (8005070 <adsr+0x528>)
 8005016:	0092      	lsls	r2, r2, #2
 8005018:	440a      	add	r2, r1
 800501a:	ed92 7a00 	vldr	s14, [r2]
 800501e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005020:	3a01      	subs	r2, #1
 8005022:	4913      	ldr	r1, [pc, #76]	; (8005070 <adsr+0x528>)
 8005024:	0092      	lsls	r2, r2, #2
 8005026:	440a      	add	r2, r1
 8005028:	edd2 7a00 	vldr	s15, [r2]
 800502c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005030:	4a0f      	ldr	r2, [pc, #60]	; (8005070 <adsr+0x528>)
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	edc3 7a00 	vstr	s15, [r3]
 800503a:	e106      	b.n	800524a <adsr+0x702>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 800503c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800503e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005040:	490b      	ldr	r1, [pc, #44]	; (8005070 <adsr+0x528>)
 8005042:	0092      	lsls	r2, r2, #2
 8005044:	440a      	add	r2, r1
 8005046:	ed92 7a00 	vldr	s14, [r2]
 800504a:	4a09      	ldr	r2, [pc, #36]	; (8005070 <adsr+0x528>)
 800504c:	f602 72fc 	addw	r2, r2, #4092	; 0xffc
 8005050:	edd2 7a00 	vldr	s15, [r2]
 8005054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005058:	4a05      	ldr	r2, [pc, #20]	; (8005070 <adsr+0x528>)
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	edc3 7a00 	vstr	s15, [r3]
 8005062:	e0f2      	b.n	800524a <adsr+0x702>
 8005064:	200045c8 	.word	0x200045c8
 8005068:	20004a64 	.word	0x20004a64
 800506c:	200025c8 	.word	0x200025c8
 8005070:	200035c8 	.word	0x200035c8
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < release_start)
 8005074:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	461a      	mov	r2, r3
 800507c:	4b83      	ldr	r3, [pc, #524]	; (800528c <adsr+0x744>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4413      	add	r3, r2
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	fbb3 f1f2 	udiv	r1, r3, r2
 8005088:	fb02 f201 	mul.w	r2, r2, r1
 800508c:	1a9a      	subs	r2, r3, r2
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	429a      	cmp	r2, r3
 8005092:	d27c      	bcs.n	800518e <adsr+0x646>
			{
				// Sustain
				// DO this only once--get last delta from previous section.
				if( (sample_count_adsr+(i-start))%samples_cycle_adsr == sustain_start)
 8005094:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	461a      	mov	r2, r3
 800509c:	4b7b      	ldr	r3, [pc, #492]	; (800528c <adsr+0x744>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4413      	add	r3, r2
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80050a8:	fb02 f201 	mul.w	r2, r2, r1
 80050ac:	1a9a      	subs	r2, r3, r2
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d145      	bne.n	8005140 <adsr+0x5f8>
				{
					if(i > 1)
 80050b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d913      	bls.n	80050e2 <adsr+0x59a>
					{
						delta = buffer_adsr_fm[i-1] - buffer_adsr_fm[i-2];
 80050ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050bc:	3b01      	subs	r3, #1
 80050be:	4a74      	ldr	r2, [pc, #464]	; (8005290 <adsr+0x748>)
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	ed93 7a00 	vldr	s14, [r3]
 80050c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050ca:	3b02      	subs	r3, #2
 80050cc:	4a70      	ldr	r2, [pc, #448]	; (8005290 <adsr+0x748>)
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	edd3 7a00 	vldr	s15, [r3]
 80050d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050da:	4b6e      	ldr	r3, [pc, #440]	; (8005294 <adsr+0x74c>)
 80050dc:	edc3 7a00 	vstr	s15, [r3]
 80050e0:	e026      	b.n	8005130 <adsr+0x5e8>
					}
					else if(i == 0)
 80050e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10f      	bne.n	8005108 <adsr+0x5c0>
					{
						delta = buffer_adsr_fm[LENGTH_BUFFER-1] - buffer_adsr_fm[LENGTH_BUFFER-2];
 80050e8:	4b69      	ldr	r3, [pc, #420]	; (8005290 <adsr+0x748>)
 80050ea:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 80050ee:	ed93 7a00 	vldr	s14, [r3]
 80050f2:	4b67      	ldr	r3, [pc, #412]	; (8005290 <adsr+0x748>)
 80050f4:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80050f8:	edd3 7a00 	vldr	s15, [r3]
 80050fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005100:	4b64      	ldr	r3, [pc, #400]	; (8005294 <adsr+0x74c>)
 8005102:	edc3 7a00 	vstr	s15, [r3]
 8005106:	e013      	b.n	8005130 <adsr+0x5e8>
					}
					else if(i == 1)
 8005108:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800510a:	2b01      	cmp	r3, #1
 800510c:	d110      	bne.n	8005130 <adsr+0x5e8>
					{
						delta = buffer_adsr_fm[i-1] - buffer_adsr_fm[LENGTH_BUFFER-1];
 800510e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005110:	3b01      	subs	r3, #1
 8005112:	4a5f      	ldr	r2, [pc, #380]	; (8005290 <adsr+0x748>)
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	ed93 7a00 	vldr	s14, [r3]
 800511c:	4b5c      	ldr	r3, [pc, #368]	; (8005290 <adsr+0x748>)
 800511e:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 8005122:	edd3 7a00 	vldr	s15, [r3]
 8005126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800512a:	4b5a      	ldr	r3, [pc, #360]	; (8005294 <adsr+0x74c>)
 800512c:	edc3 7a00 	vstr	s15, [r3]
					}
					buffer_adsr_fm[i] = 0.0f;
 8005130:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005132:	4a57      	ldr	r2, [pc, #348]	; (8005290 <adsr+0x748>)
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	e084      	b.n	800524a <adsr+0x702>
				}
				else
				{
					if(i > 0)
 8005140:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005142:	2b00      	cmp	r3, #0
 8005144:	d012      	beq.n	800516c <adsr+0x624>
					{
						buffer_adsr_fm[i] = buffer_adsr_fm[i-1] + delta;
 8005146:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005148:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800514a:	3a01      	subs	r2, #1
 800514c:	4950      	ldr	r1, [pc, #320]	; (8005290 <adsr+0x748>)
 800514e:	0092      	lsls	r2, r2, #2
 8005150:	440a      	add	r2, r1
 8005152:	ed92 7a00 	vldr	s14, [r2]
 8005156:	4a4f      	ldr	r2, [pc, #316]	; (8005294 <adsr+0x74c>)
 8005158:	edd2 7a00 	vldr	s15, [r2]
 800515c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005160:	4a4b      	ldr	r2, [pc, #300]	; (8005290 <adsr+0x748>)
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	edc3 7a00 	vstr	s15, [r3]
 800516a:	e06e      	b.n	800524a <adsr+0x702>
					}
					else
					{
						buffer_adsr_fm[i] = buffer_adsr_fm[LENGTH_BUFFER-1] + delta;
 800516c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800516e:	4a48      	ldr	r2, [pc, #288]	; (8005290 <adsr+0x748>)
 8005170:	f602 72fc 	addw	r2, r2, #4092	; 0xffc
 8005174:	ed92 7a00 	vldr	s14, [r2]
 8005178:	4a46      	ldr	r2, [pc, #280]	; (8005294 <adsr+0x74c>)
 800517a:	edd2 7a00 	vldr	s15, [r2]
 800517e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005182:	4a43      	ldr	r2, [pc, #268]	; (8005290 <adsr+0x748>)
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	edc3 7a00 	vstr	s15, [r3]
 800518c:	e05d      	b.n	800524a <adsr+0x702>
					}
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_start)
 800518e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	461a      	mov	r2, r3
 8005196:	4b3d      	ldr	r3, [pc, #244]	; (800528c <adsr+0x744>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4413      	add	r3, r2
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	fbb3 f1f2 	udiv	r1, r3, r2
 80051a2:	fb02 f201 	mul.w	r2, r2, r1
 80051a6:	1a9a      	subs	r2, r3, r2
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d236      	bcs.n	800521c <adsr+0x6d4>
			{
				// Release
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 80051ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80051b2:	4939      	ldr	r1, [pc, #228]	; (8005298 <adsr+0x750>)
 80051b4:	0092      	lsls	r2, r2, #2
 80051b6:	440a      	add	r2, r1
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	4935      	ldr	r1, [pc, #212]	; (8005290 <adsr+0x748>)
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	440b      	add	r3, r1
 80051c0:	601a      	str	r2, [r3, #0]
				if(i > 0)
 80051c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d015      	beq.n	80051f4 <adsr+0x6ac>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 80051c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80051cc:	4930      	ldr	r1, [pc, #192]	; (8005290 <adsr+0x748>)
 80051ce:	0092      	lsls	r2, r2, #2
 80051d0:	440a      	add	r2, r1
 80051d2:	ed92 7a00 	vldr	s14, [r2]
 80051d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80051d8:	3a01      	subs	r2, #1
 80051da:	492d      	ldr	r1, [pc, #180]	; (8005290 <adsr+0x748>)
 80051dc:	0092      	lsls	r2, r2, #2
 80051de:	440a      	add	r2, r1
 80051e0:	edd2 7a00 	vldr	s15, [r2]
 80051e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e8:	4a29      	ldr	r2, [pc, #164]	; (8005290 <adsr+0x748>)
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	edc3 7a00 	vstr	s15, [r3]
 80051f2:	e02a      	b.n	800524a <adsr+0x702>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 80051f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80051f8:	4925      	ldr	r1, [pc, #148]	; (8005290 <adsr+0x748>)
 80051fa:	0092      	lsls	r2, r2, #2
 80051fc:	440a      	add	r2, r1
 80051fe:	ed92 7a00 	vldr	s14, [r2]
 8005202:	4a23      	ldr	r2, [pc, #140]	; (8005290 <adsr+0x748>)
 8005204:	f602 72fc 	addw	r2, r2, #4092	; 0xffc
 8005208:	edd2 7a00 	vldr	s15, [r2]
 800520c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005210:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <adsr+0x748>)
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	edc3 7a00 	vstr	s15, [r3]
 800521a:	e016      	b.n	800524a <adsr+0x702>
				}
			}
			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_end)
 800521c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	461a      	mov	r2, r3
 8005224:	4b19      	ldr	r3, [pc, #100]	; (800528c <adsr+0x744>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4413      	add	r3, r2
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005230:	fb02 f201 	mul.w	r2, r2, r1
 8005234:	1a9a      	subs	r2, r3, r2
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	429a      	cmp	r2, r3
 800523a:	d206      	bcs.n	800524a <adsr+0x702>
			{
				// Blank
				buffer_adsr_fm[i] = 0.0f;
 800523c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800523e:	4a14      	ldr	r2, [pc, #80]	; (8005290 <adsr+0x748>)
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4413      	add	r3, r2
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
	 * ADSR frequency envelope.
	 * Uses the ADSR amplitude envelope and integrates each of the shapes.
	 */
	if(adsr_settings.fm_mod == ON)
	{
		for(i = start; i < end; i++)
 800524a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800524c:	3301      	adds	r3, #1
 800524e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005250:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005252:	88bb      	ldrh	r3, [r7, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	f4ff ae77 	bcc.w	8004f48 <adsr+0x400>
				// Blank
				buffer_adsr_fm[i] = 0.0f;
			}
		}
	}
	sample_count_adsr = sample_count_adsr + (i - start);
 800525a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	461a      	mov	r2, r3
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <adsr+0x744>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4413      	add	r3, r2
 8005268:	4a08      	ldr	r2, [pc, #32]	; (800528c <adsr+0x744>)
 800526a:	6013      	str	r3, [r2, #0]
	sample_count_adsr = sample_count_adsr % samples_cycle_adsr;
 800526c:	4b07      	ldr	r3, [pc, #28]	; (800528c <adsr+0x744>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	fbb3 f1f2 	udiv	r1, r3, r2
 8005276:	fb02 f201 	mul.w	r2, r2, r1
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	4a03      	ldr	r2, [pc, #12]	; (800528c <adsr+0x744>)
 800527e:	6013      	str	r3, [r2, #0]
}
 8005280:	bf00      	nop
 8005282:	3734      	adds	r7, #52	; 0x34
 8005284:	46bd      	mov	sp, r7
 8005286:	ecbd 8b02 	vpop	{d8}
 800528a:	bd90      	pop	{r4, r7, pc}
 800528c:	200045c8 	.word	0x200045c8
 8005290:	200035c8 	.word	0x200035c8
 8005294:	20004968 	.word	0x20004968
 8005298:	200025c8 	.word	0x200025c8

0800529c <gen_square_angle>:

/* Parameters:
 * 	angle: normalized angle between 0 and 2*PI.  Similar to sine function.
 */
float32_t gen_square_angle(float32_t angle)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	ed87 0a01 	vstr	s0, [r7, #4]
	angle = fast_fmod(angle, 2*PI);
 80052a6:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80052e0 <gen_square_angle+0x44>
 80052aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80052ae:	f000 f9cf 	bl	8005650 <fast_fmod>
 80052b2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (angle < PI)
 80052b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80052ba:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80052e4 <gen_square_angle+0x48>
 80052be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c6:	d501      	bpl.n	80052cc <gen_square_angle+0x30>
	{
		return -1.0f;
 80052c8:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <gen_square_angle+0x4c>)
 80052ca:	e001      	b.n	80052d0 <gen_square_angle+0x34>
	}
	return 1.0f;
 80052cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80052d0:	ee07 3a90 	vmov	s15, r3
}
 80052d4:	eeb0 0a67 	vmov.f32	s0, s15
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40c90fdb 	.word	0x40c90fdb
 80052e4:	40490fdb 	.word	0x40490fdb
 80052e8:	bf800000 	.word	0xbf800000

080052ec <gen_sawtooth_angle>:


float32_t gen_sawtooth_angle(float32_t angle)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0f;
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
	float32_t val = 0.0f;
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8005302:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8005340 <gen_sawtooth_angle+0x54>
 8005306:	ed97 0a01 	vldr	s0, [r7, #4]
 800530a:	f000 f9a1 	bl	8005650 <fast_fmod>
 800530e:	ed87 0a01 	vstr	s0, [r7, #4]

	// y = mx + b
	m = ONE_DIV_PI;
 8005312:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <gen_sawtooth_angle+0x58>)
 8005314:	60fb      	str	r3, [r7, #12]
	val = -1.0f + angle * m;
 8005316:	ed97 7a01 	vldr	s14, [r7, #4]
 800531a:	edd7 7a03 	vldr	s15, [r7, #12]
 800531e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005326:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800532a:	edc7 7a02 	vstr	s15, [r7, #8]
	return val;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	ee07 3a90 	vmov	s15, r3
}
 8005334:	eeb0 0a67 	vmov.f32	s0, s15
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40c90fdb 	.word	0x40c90fdb
 8005344:	3ea2f983 	.word	0x3ea2f983

08005348 <gen_sawtooth_integral_angle>:


float32_t gen_sawtooth_integral_angle(float32_t angle)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0f;
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0f;
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 800535e:	eddf 0a18 	vldr	s1, [pc, #96]	; 80053c0 <gen_sawtooth_integral_angle+0x78>
 8005362:	ed97 0a01 	vldr	s0, [r7, #4]
 8005366:	f000 f973 	bl	8005650 <fast_fmod>
 800536a:	ed87 0a01 	vstr	s0, [r7, #4]
	m = ONE_DIV_2_PI;
 800536e:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <gen_sawtooth_integral_angle+0x7c>)
 8005370:	60bb      	str	r3, [r7, #8]
	val = m*angle;			// Generate linear value between 0 and 1
 8005372:	ed97 7a02 	vldr	s14, [r7, #8]
 8005376:	edd7 7a01 	vldr	s15, [r7, #4]
 800537a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800537e:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*val;			// Square it.  Produces parabola y: 0 to 1
 8005382:	ed97 7a03 	vldr	s14, [r7, #12]
 8005386:	edd7 7a03 	vldr	s15, [r7, #12]
 800538a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538e:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*2.0f;			// Double it.
 8005392:	edd7 7a03 	vldr	s15, [r7, #12]
 8005396:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800539a:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val - 1.0f;			// Shift it down
 800539e:	edd7 7a03 	vldr	s15, [r7, #12]
 80053a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053aa:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	ee07 3a90 	vmov	s15, r3
}
 80053b4:	eeb0 0a67 	vmov.f32	s0, s15
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	40c90fdb 	.word	0x40c90fdb
 80053c4:	3e22f983 	.word	0x3e22f983

080053c8 <gen_rampdown_angle>:
/*
 * Generate ramp value from +1 down to 0 based on angle.
 * Parameter angle is a radian.
 */
float32_t gen_rampdown_angle(float32_t angle)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0f;
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]
	float32_t val = 0.0f;
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 80053de:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800541c <gen_rampdown_angle+0x54>
 80053e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80053e6:	f000 f933 	bl	8005650 <fast_fmod>
 80053ea:	ed87 0a01 	vstr	s0, [r7, #4]

	// y = mx + b
	m = -ONE_DIV_PI;
 80053ee:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <gen_rampdown_angle+0x58>)
 80053f0:	60fb      	str	r3, [r7, #12]
	val = 1.0f + angle*m;
 80053f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80053f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80053fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005402:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005406:	edc7 7a02 	vstr	s15, [r7, #8]
	return val;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	ee07 3a90 	vmov	s15, r3
}
 8005410:	eeb0 0a67 	vmov.f32	s0, s15
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40c90fdb 	.word	0x40c90fdb
 8005420:	bea2f983 	.word	0xbea2f983
 8005424:	00000000 	.word	0x00000000

08005428 <gen_rampdown_angle2>:


float32_t gen_rampdown_angle2( float32_t angle, float32_t min, float32_t max)
{
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005432:	edc7 0a02 	vstr	s1, [r7, #8]
 8005436:	ed87 1a01 	vstr	s2, [r7, #4]
	float32_t m = 0.0f;
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	617b      	str	r3, [r7, #20]
	float32_t val = 0.0f;
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	613b      	str	r3, [r7, #16]

	angle = fast_fmod(angle, TWO_PI);
 8005446:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80054b8 <gen_rampdown_angle2+0x90>
 800544a:	ed97 0a03 	vldr	s0, [r7, #12]
 800544e:	f000 f8ff 	bl	8005650 <fast_fmod>
 8005452:	ed87 0a03 	vstr	s0, [r7, #12]

	// y = mx + b
	m = (min - max) * ONE_DIV_PI;
 8005456:	ed97 7a02 	vldr	s14, [r7, #8]
 800545a:	edd7 7a01 	vldr	s15, [r7, #4]
 800545e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005462:	ee17 0a90 	vmov	r0, s15
 8005466:	f7fb f813 	bl	8000490 <__aeabi_f2d>
 800546a:	a311      	add	r3, pc, #68	; (adr r3, 80054b0 <gen_rampdown_angle2+0x88>)
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f7fb f862 	bl	8000538 <__aeabi_dmul>
 8005474:	4603      	mov	r3, r0
 8005476:	460c      	mov	r4, r1
 8005478:	4618      	mov	r0, r3
 800547a:	4621      	mov	r1, r4
 800547c:	f7fb faf6 	bl	8000a6c <__aeabi_d2f>
 8005480:	4603      	mov	r3, r0
 8005482:	617b      	str	r3, [r7, #20]
	val = 1.0f + angle*m;
 8005484:	ed97 7a03 	vldr	s14, [r7, #12]
 8005488:	edd7 7a05 	vldr	s15, [r7, #20]
 800548c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005490:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005494:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005498:	edc7 7a04 	vstr	s15, [r7, #16]


	return val;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	ee07 3a90 	vmov	s15, r3
}
 80054a2:	eeb0 0a67 	vmov.f32	s0, s15
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd90      	pop	{r4, r7, pc}
 80054ac:	f3af 8000 	nop.w
 80054b0:	6dc8bdc4 	.word	0x6dc8bdc4
 80054b4:	3fd45f30 	.word	0x3fd45f30
 80054b8:	40c90fdb 	.word	0x40c90fdb

080054bc <gen_triangle_angle>:


float32_t gen_triangle_angle(float32_t angle)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0f;
 80054c6:	f04f 0300 	mov.w	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0f;
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	60bb      	str	r3, [r7, #8]

	// Increase from a negative value to its opposite value. Eg. -1 to 1 over 1/2 the wave's period
	// Then decrease from 1 to -1 over 1/2 the wave's period

	angle = fast_fmod(angle, 2*PI);
 80054d2:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800553c <gen_triangle_angle+0x80>
 80054d6:	ed97 0a01 	vldr	s0, [r7, #4]
 80054da:	f000 f8b9 	bl	8005650 <fast_fmod>
 80054de:	ed87 0a01 	vstr	s0, [r7, #4]
	m = TWO_DIV_PI;
 80054e2:	4b17      	ldr	r3, [pc, #92]	; (8005540 <gen_triangle_angle+0x84>)
 80054e4:	60bb      	str	r3, [r7, #8]
	if (angle < PI)
 80054e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80054ea:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005544 <gen_triangle_angle+0x88>
 80054ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f6:	d50d      	bpl.n	8005514 <gen_triangle_angle+0x58>
	{
		val = -1.0f + m*angle;
 80054f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80054fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005508:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800550c:	edc7 7a03 	vstr	s15, [r7, #12]
		return val;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	e00c      	b.n	800552e <gen_triangle_angle+0x72>
	}
	// Make sure difference can be negative.
	// return amp + (m * (int32_t)(samples_half_cycle - current_sample));
	val =  3.0f - m*angle;
 8005514:	ed97 7a02 	vldr	s14, [r7, #8]
 8005518:	edd7 7a01 	vldr	s15, [r7, #4]
 800551c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005520:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005528:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	ee07 3a90 	vmov	s15, r3
}
 8005532:	eeb0 0a67 	vmov.f32	s0, s15
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40c90fdb 	.word	0x40c90fdb
 8005540:	3f22f983 	.word	0x3f22f983
 8005544:	40490fdb 	.word	0x40490fdb

08005548 <gen_triangle_integral_angle>:

// Integral of triangle wave is convex parabola going up and then concave parabola going down.
float32_t gen_triangle_integral_angle(float32_t angle)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0f;
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0f;
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, 2*PI);		// TODO: pull this out into generate_waveforms().
 800555e:	eddf 0a39 	vldr	s1, [pc, #228]	; 8005644 <gen_triangle_integral_angle+0xfc>
 8005562:	ed97 0a01 	vldr	s0, [r7, #4]
 8005566:	f000 f873 	bl	8005650 <fast_fmod>
 800556a:	ed87 0a01 	vstr	s0, [r7, #4]
	m = ONE_DIV_PI;
 800556e:	4b36      	ldr	r3, [pc, #216]	; (8005648 <gen_triangle_integral_angle+0x100>)
 8005570:	60bb      	str	r3, [r7, #8]
	if (angle < PI)
 8005572:	edd7 7a01 	vldr	s15, [r7, #4]
 8005576:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800564c <gen_triangle_integral_angle+0x104>
 800557a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800557e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005582:	d528      	bpl.n	80055d6 <gen_triangle_integral_angle+0x8e>

	if(angle < PI)
 8005584:	edd7 7a01 	vldr	s15, [r7, #4]
 8005588:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800564c <gen_triangle_integral_angle+0x104>
 800558c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005594:	d51f      	bpl.n	80055d6 <gen_triangle_integral_angle+0x8e>
	{
		val = m*angle;			// Generate linear value between 0 and 1
 8005596:	ed97 7a02 	vldr	s14, [r7, #8]
 800559a:	edd7 7a01 	vldr	s15, [r7, #4]
 800559e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a2:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val*val;			// Square it.  Produces parabola y: 0 to 1
 80055a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80055aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80055ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b2:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val*2.0f;			// Double it.
 80055b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80055ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80055be:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val - 1.0f;			// Shift it down
 80055c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80055c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055ce:	edc7 7a03 	vstr	s15, [r7, #12]
		return val;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	e02e      	b.n	8005634 <gen_triangle_integral_angle+0xec>
	}

	angle = angle - PI;
 80055d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80055da:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800564c <gen_triangle_integral_angle+0x104>
 80055de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055e2:	edc7 7a01 	vstr	s15, [r7, #4]
	val = m*angle;			// Generate linear value between 0 and 1
 80055e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80055ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80055ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f2:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*val;			// Square it.  Produces parabola y: 0 to 1
 80055f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80055fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80055fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005602:	edc7 7a03 	vstr	s15, [r7, #12]
	val = 1.0f - val;			// Turn it upside down
 8005606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800560a:	edd7 7a03 	vldr	s15, [r7, #12]
 800560e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005612:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*2.0f;			// Double it
 8005616:	edd7 7a03 	vldr	s15, [r7, #12]
 800561a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800561e:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val - 1.0f;			// Shift it down
 8005622:	edd7 7a03 	vldr	s15, [r7, #12]
 8005626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800562a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800562e:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	ee07 3a90 	vmov	s15, r3
}
 8005638:	eeb0 0a67 	vmov.f32	s0, s15
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40c90fdb 	.word	0x40c90fdb
 8005648:	3ea2f983 	.word	0x3ea2f983
 800564c:	40490fdb 	.word	0x40490fdb

08005650 <fast_fmod>:
 * Modified it to work with float32_t.
 * NOTE: Possible alternative found here: https://stackoverflow.com/questions/26342823/implementation-of-fmod-function
 * 	return (a - b * floor(a / b));
 */
float32_t fast_fmod(float32_t x,float32_t y)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	ed87 0a01 	vstr	s0, [r7, #4]
 800565a:	edc7 0a00 	vstr	s1, [r7]
	float32_t a;
	return ( (a = x/y ) - (uint32_t)a ) * y;
 800565e:	edd7 6a01 	vldr	s13, [r7, #4]
 8005662:	ed97 7a00 	vldr	s14, [r7]
 8005666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800566a:	edc7 7a03 	vstr	s15, [r7, #12]
 800566e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567a:	ed97 7a03 	vldr	s14, [r7, #12]
 800567e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005682:	edd7 7a00 	vldr	s15, [r7]
 8005686:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800568a:	eeb0 0a67 	vmov.f32	s0, s15
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <moving_avg>:

/*
 * Found here: https://gist.github.com/bmccormack/d12f4bf0c96423d03f82
 */
uint32_t moving_avg(uint32_t *ptrArrNumbers, uint32_t *ptrSum, uint32_t pos, uint32_t len, uint16_t nextNum)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
  //Subtract the oldest number from the prev sum, add the new number
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	440b      	add	r3, r1
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	1ad2      	subs	r2, r2, r3
 80056b6:	8b3b      	ldrh	r3, [r7, #24]
 80056b8:	441a      	add	r2, r3
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	601a      	str	r2, [r3, #0]
  //Assign the nextNum to the position in the array
  ptrArrNumbers[pos] = nextNum;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	8b3a      	ldrh	r2, [r7, #24]
 80056c8:	601a      	str	r2, [r3, #0]
  //return the average
  return (uint32_t) *ptrSum / len;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <pseudo_log>:
/*
 * Make adc values seems as though they came from a log-taper potentiometer.
 */
// TODO: Try three line segments instead of two.  With two, the sudden increase is obvious.
uint16_t pseudo_log(uint16_t x)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b089      	sub	sp, #36	; 0x24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	80fb      	strh	r3, [r7, #6]
	float32_t y1 = 0.0f;
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	61fb      	str	r3, [r7, #28]
	float32_t y2 = 0.0f;
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	61bb      	str	r3, [r7, #24]
	const uint16_t max = 4095;
 80056f6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80056fa:	82fb      	strh	r3, [r7, #22]
	const uint16_t xe = 3500;
 80056fc:	f640 53ac 	movw	r3, #3500	; 0xdac
 8005700:	82bb      	strh	r3, [r7, #20]
	const float32_t m1 = 0.1f;
 8005702:	4b3a      	ldr	r3, [pc, #232]	; (80057ec <pseudo_log+0x10c>)
 8005704:	613b      	str	r3, [r7, #16]
	uint16_t ye = m1*xe;
 8005706:	8abb      	ldrh	r3, [r7, #20]
 8005708:	ee07 3a90 	vmov	s15, r3
 800570c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005710:	edd7 7a04 	vldr	s15, [r7, #16]
 8005714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800571c:	edc7 7a00 	vstr	s15, [r7]
 8005720:	883b      	ldrh	r3, [r7, #0]
 8005722:	81fb      	strh	r3, [r7, #14]
	uint16_t m2 = (float32_t) (max - ye)/(max - xe);
 8005724:	8afa      	ldrh	r2, [r7, #22]
 8005726:	89fb      	ldrh	r3, [r7, #14]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005732:	8afa      	ldrh	r2, [r7, #22]
 8005734:	8abb      	ldrh	r3, [r7, #20]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	ee07 3a90 	vmov	s15, r3
 800573c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005748:	edc7 7a00 	vstr	s15, [r7]
 800574c:	883b      	ldrh	r3, [r7, #0]
 800574e:	81bb      	strh	r3, [r7, #12]

	float32_t b = 0.0f;
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	60bb      	str	r3, [r7, #8]

	y1 = (uint16_t) ((float32_t) m1 * x);
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005760:	edd7 7a04 	vldr	s15, [r7, #16]
 8005764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800576c:	edc7 7a00 	vstr	s15, [r7]
 8005770:	883b      	ldrh	r3, [r7, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	ee07 3a90 	vmov	s15, r3
 8005778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577c:	edc7 7a07 	vstr	s15, [r7, #28]

	// Gradual taper.
	if(x < xe)
 8005780:	88fa      	ldrh	r2, [r7, #6]
 8005782:	8abb      	ldrh	r3, [r7, #20]
 8005784:	429a      	cmp	r2, r3
 8005786:	d208      	bcs.n	800579a <pseudo_log+0xba>
	{
		return (uint16_t) y1;
 8005788:	edd7 7a07 	vldr	s15, [r7, #28]
 800578c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005790:	edc7 7a00 	vstr	s15, [r7]
 8005794:	883b      	ldrh	r3, [r7, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	e021      	b.n	80057de <pseudo_log+0xfe>
	}

	// Fast taper.
	b = ye - m2*xe;
 800579a:	89fa      	ldrh	r2, [r7, #14]
 800579c:	89bb      	ldrh	r3, [r7, #12]
 800579e:	8ab9      	ldrh	r1, [r7, #20]
 80057a0:	fb01 f303 	mul.w	r3, r1, r3
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057ae:	edc7 7a02 	vstr	s15, [r7, #8]
	y2 = m2*x + b;		// y = mx+b
 80057b2:	89bb      	ldrh	r3, [r7, #12]
 80057b4:	88fa      	ldrh	r2, [r7, #6]
 80057b6:	fb02 f303 	mul.w	r3, r2, r3
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80057c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ca:	edc7 7a06 	vstr	s15, [r7, #24]

	return (uint16_t) y2;
 80057ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80057d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057d6:	edc7 7a00 	vstr	s15, [r7]
 80057da:	883b      	ldrh	r3, [r7, #0]
 80057dc:	b29b      	uxth	r3, r3
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3724      	adds	r7, #36	; 0x24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	3dcccccd 	.word	0x3dcccccd

080057f0 <biquad_setup>:
/*
 * Prepare to filter by setting up filter type and settings.
 * Then perform filter by calling sf_biquad_process. 
*/
void biquad_setup()
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
	// Try to filter with biquad.
	// sf_biquad_state_st lowpass;
	// sf_lowpass(&lowpass_test, SAMPLERATE, 400.0f, 1.0f);
	sf_lowpass(&lowpass, SAMPLERATE, 400.0f, 1.0f);
 80057f4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80057f8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800580c <biquad_setup+0x1c>
 80057fc:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8005800:	4803      	ldr	r0, [pc, #12]	; (8005810 <biquad_setup+0x20>)
 8005802:	f7fd fe05 	bl	8003410 <sf_lowpass>
}
 8005806:	bf00      	nop
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	43c80000 	.word	0x43c80000
 8005810:	20004a94 	.word	0x20004a94

08005814 <biquad_invoke>:

void biquad_invoke(uint16_t start, uint16_t end)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	4602      	mov	r2, r0
 8005820:	f107 0310 	add.w	r3, r7, #16
 8005824:	3b0a      	subs	r3, #10
 8005826:	801a      	strh	r2, [r3, #0]
 8005828:	f107 0310 	add.w	r3, r7, #16
 800582c:	3b0c      	subs	r3, #12
 800582e:	460a      	mov	r2, r1
 8005830:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8005832:	2300      	movs	r3, #0
 8005834:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8005838:	f102 020e 	add.w	r2, r2, #14
 800583c:	8013      	strh	r3, [r2, #0]
	// Need input and output buffers of type sf_sample_st.
	sf_sample_st input[BUFF_LEN_HALF];
	sf_sample_st output[BUFF_LEN_HALF];

	// Convert buffer_output[i] into input (floats).
	for(i = start/2; i < (end/2) ; i++)
 800583e:	f107 0310 	add.w	r3, r7, #16
 8005842:	3b0a      	subs	r3, #10
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800584c:	f102 020e 	add.w	r2, r2, #14
 8005850:	8013      	strh	r3, [r2, #0]
 8005852:	e044      	b.n	80058de <biquad_invoke+0xca>
	{
		input[i].L = (float32_t) buffer_output[2*i];
 8005854:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8005858:	f103 030e 	add.w	r3, r3, #14
 800585c:	881a      	ldrh	r2, [r3, #0]
 800585e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8005862:	f103 030e 	add.w	r3, r3, #14
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	495a      	ldr	r1, [pc, #360]	; (80059d4 <biquad_invoke+0x1c0>)
 800586c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005870:	b29b      	uxth	r3, r3
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800587a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800587e:	f103 0310 	add.w	r3, r3, #16
 8005882:	3b04      	subs	r3, #4
 8005884:	00d2      	lsls	r2, r2, #3
 8005886:	4413      	add	r3, r2
 8005888:	edc3 7a00 	vstr	s15, [r3]
		input[i].R = (float32_t) buffer_output[2*i+1];
 800588c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8005890:	f103 030e 	add.w	r3, r3, #14
 8005894:	881a      	ldrh	r2, [r3, #0]
 8005896:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800589a:	f103 030e 	add.w	r3, r3, #14
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	3301      	adds	r3, #1
 80058a4:	494b      	ldr	r1, [pc, #300]	; (80059d4 <biquad_invoke+0x1c0>)
 80058a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	ee07 3a90 	vmov	s15, r3
 80058b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80058b8:	f103 0310 	add.w	r3, r3, #16
 80058bc:	3b04      	subs	r3, #4
 80058be:	00d2      	lsls	r2, r2, #3
 80058c0:	4413      	add	r3, r2
 80058c2:	3304      	adds	r3, #4
 80058c4:	edc3 7a00 	vstr	s15, [r3]
	// Need input and output buffers of type sf_sample_st.
	sf_sample_st input[BUFF_LEN_HALF];
	sf_sample_st output[BUFF_LEN_HALF];

	// Convert buffer_output[i] into input (floats).
	for(i = start/2; i < (end/2) ; i++)
 80058c8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80058cc:	f103 030e 	add.w	r3, r3, #14
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	3301      	adds	r3, #1
 80058d4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80058d8:	f102 020e 	add.w	r2, r2, #14
 80058dc:	8013      	strh	r3, [r2, #0]
 80058de:	f107 0310 	add.w	r3, r7, #16
 80058e2:	3b0c      	subs	r3, #12
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	085b      	lsrs	r3, r3, #1
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80058ee:	f102 020e 	add.w	r2, r2, #14
 80058f2:	8812      	ldrh	r2, [r2, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d3ad      	bcc.n	8005854 <biquad_invoke+0x40>
	}

	// This WAS introducing glitches, but seemed to be filtering.
	// But now, nothing comes out at all.
	// sf_biquad_process(&lowpass_test, BUFF_LEN_HALF, input, output);
	sf_biquad_process(&lowpass, BUFF_LEN_HALF, input, output);
 80058f8:	f107 0310 	add.w	r3, r7, #16
 80058fc:	3b04      	subs	r3, #4
 80058fe:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8005902:	f102 0210 	add.w	r2, r2, #16
 8005906:	3a04      	subs	r2, #4
 8005908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800590c:	4832      	ldr	r0, [pc, #200]	; (80059d8 <biquad_invoke+0x1c4>)
 800590e:	f7fd fc2b 	bl	8003168 <sf_biquad_process>

	// Convert output back into buffer_output[i] (ints).
	for(i = start/2; i < (end/2) ; i++)
 8005912:	f107 0310 	add.w	r3, r7, #16
 8005916:	3b0a      	subs	r3, #10
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8005920:	f102 020e 	add.w	r2, r2, #14
 8005924:	8013      	strh	r3, [r2, #0]
 8005926:	e042      	b.n	80059ae <biquad_invoke+0x19a>
	{
		buffer_output[2*i] = (uint16_t) output[i].L;
 8005928:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800592c:	f103 030e 	add.w	r3, r3, #14
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	005a      	lsls	r2, r3, #1
 8005934:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8005938:	f103 030e 	add.w	r3, r3, #14
 800593c:	8819      	ldrh	r1, [r3, #0]
 800593e:	f107 0310 	add.w	r3, r7, #16
 8005942:	3b04      	subs	r3, #4
 8005944:	00c9      	lsls	r1, r1, #3
 8005946:	440b      	add	r3, r1
 8005948:	edd3 7a00 	vldr	s15, [r3]
 800594c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005950:	edc7 7a00 	vstr	s15, [r7]
 8005954:	883b      	ldrh	r3, [r7, #0]
 8005956:	b299      	uxth	r1, r3
 8005958:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <biquad_invoke+0x1c0>)
 800595a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		buffer_output[2*i+1] = (uint16_t) output[i].R;
 800595e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8005962:	f103 030e 	add.w	r3, r3, #14
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8005970:	f103 030e 	add.w	r3, r3, #14
 8005974:	8819      	ldrh	r1, [r3, #0]
 8005976:	f107 0310 	add.w	r3, r7, #16
 800597a:	3b04      	subs	r3, #4
 800597c:	00c9      	lsls	r1, r1, #3
 800597e:	440b      	add	r3, r1
 8005980:	3304      	adds	r3, #4
 8005982:	edd3 7a00 	vldr	s15, [r3]
 8005986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800598a:	edc7 7a00 	vstr	s15, [r7]
 800598e:	883b      	ldrh	r3, [r7, #0]
 8005990:	b299      	uxth	r1, r3
 8005992:	4b10      	ldr	r3, [pc, #64]	; (80059d4 <biquad_invoke+0x1c0>)
 8005994:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	// But now, nothing comes out at all.
	// sf_biquad_process(&lowpass_test, BUFF_LEN_HALF, input, output);
	sf_biquad_process(&lowpass, BUFF_LEN_HALF, input, output);

	// Convert output back into buffer_output[i] (ints).
	for(i = start/2; i < (end/2) ; i++)
 8005998:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800599c:	f103 030e 	add.w	r3, r3, #14
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	3301      	adds	r3, #1
 80059a4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80059a8:	f102 020e 	add.w	r2, r2, #14
 80059ac:	8013      	strh	r3, [r2, #0]
 80059ae:	f107 0310 	add.w	r3, r7, #16
 80059b2:	3b0c      	subs	r3, #12
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80059be:	f102 020e 	add.w	r2, r2, #14
 80059c2:	8812      	ldrh	r2, [r2, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d3af      	bcc.n	8005928 <biquad_invoke+0x114>
	{
		buffer_output[2*i] = (uint16_t) output[i].L;
		buffer_output[2*i+1] = (uint16_t) output[i].R;
	}
}
 80059c8:	bf00      	nop
 80059ca:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	200005c8 	.word	0x200005c8
 80059d8:	20004a94 	.word	0x20004a94

080059dc <gen_AWGN>:

float32_t gen_AWGN()
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
	float32_t temp = (float32_t) rand() / RAND_MAX;
 80059e2:	f000 fd39 	bl	8006458 <rand>
 80059e6:	ee07 0a90 	vmov	s15, r0
 80059ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059ee:	eddf 6a07 	vldr	s13, [pc, #28]	; 8005a0c <gen_AWGN+0x30>
 80059f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059f6:	edc7 7a01 	vstr	s15, [r7, #4]
	return temp;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	ee07 3a90 	vmov	s15, r3
}
 8005a00:	eeb0 0a67 	vmov.f32	s0, s15
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	4f000000 	.word	0x4f000000

08005a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005a14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005a16:	e003      	b.n	8005a20 <LoopCopyDataInit>

08005a18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005a1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005a1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005a1e:	3104      	adds	r1, #4

08005a20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005a20:	480b      	ldr	r0, [pc, #44]	; (8005a50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005a22:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005a24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005a26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005a28:	d3f6      	bcc.n	8005a18 <CopyDataInit>
  ldr  r2, =_sbss
 8005a2a:	4a0b      	ldr	r2, [pc, #44]	; (8005a58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005a2c:	e002      	b.n	8005a34 <LoopFillZerobss>

08005a2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005a2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005a30:	f842 3b04 	str.w	r3, [r2], #4

08005a34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005a34:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005a36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005a38:	d3f9      	bcc.n	8005a2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005a3a:	f000 f929 	bl	8005c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a3e:	f000 fabb 	bl	8005fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a42:	f7fd ffff 	bl	8003a44 <main>
  bx  lr    
 8005a46:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005a48:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8005a4c:	080088f0 	.word	0x080088f0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005a50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005a54:	200005a4 	.word	0x200005a4
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8005a58:	200005a4 	.word	0x200005a4
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005a5c:	20004ae0 	.word	0x20004ae0

08005a60 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a60:	e7fe      	b.n	8005a60 <CAN1_RX0_IRQHandler>
	...

08005a64 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
}
 8005a68:	bf00      	nop
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop

08005a74 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8005a78:	e7fe      	b.n	8005a78 <HardFault_Handler+0x4>
 8005a7a:	bf00      	nop

08005a7c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8005a80:	e7fe      	b.n	8005a80 <MemManage_Handler+0x4>
 8005a82:	bf00      	nop

08005a84 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8005a88:	e7fe      	b.n	8005a88 <BusFault_Handler+0x4>
 8005a8a:	bf00      	nop

08005a8c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8005a90:	e7fe      	b.n	8005a90 <UsageFault_Handler+0x4>
 8005a92:	bf00      	nop

08005a94 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
}
 8005a98:	bf00      	nop
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop

08005aa4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
}
 8005aa8:	bf00      	nop
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop

08005ab4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
}
 8005ab8:	bf00      	nop
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop

08005ac4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8005ac8:	bf00      	nop
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop

08005ad4 <EXTI0_IRQHandler>:


/*
 * interrupt handler for vco waveform button
 */
void EXTI0_IRQHandler(void){
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line0);
 8005ad8:	2001      	movs	r0, #1
 8005ada:	f7fb fd7b 	bl	80015d4 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 8005ade:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <EXTI0_IRQHandler+0x2c>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d109      	bne.n	8005afa <EXTI0_IRQHandler+0x26>
		the_button.button = vco_wave_button;
 8005ae6:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <EXTI0_IRQHandler+0x2c>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 8005aec:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <EXTI0_IRQHandler+0x2c>)
 8005aee:	2201      	movs	r2, #1
 8005af0:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8005af2:	2101      	movs	r1, #1
 8005af4:	4803      	ldr	r0, [pc, #12]	; (8005b04 <EXTI0_IRQHandler+0x30>)
 8005af6:	f7fc fcb7 	bl	8002468 <TIM_Cmd>
	}
}
 8005afa:	bf00      	nop
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20004a50 	.word	0x20004a50
 8005b04:	40000400 	.word	0x40000400

08005b08 <EXTI1_IRQHandler>:


/*
 * interrupt handler for lfo waveform button
 */
void EXTI1_IRQHandler(void){
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line1);
 8005b0c:	2002      	movs	r0, #2
 8005b0e:	f7fb fd61 	bl	80015d4 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 8005b12:	4b08      	ldr	r3, [pc, #32]	; (8005b34 <EXTI1_IRQHandler+0x2c>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <EXTI1_IRQHandler+0x26>
		the_button.button = lfo_wave_button;
 8005b1a:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <EXTI1_IRQHandler+0x2c>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 8005b20:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <EXTI1_IRQHandler+0x2c>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8005b26:	2101      	movs	r1, #1
 8005b28:	4803      	ldr	r0, [pc, #12]	; (8005b38 <EXTI1_IRQHandler+0x30>)
 8005b2a:	f7fc fc9d 	bl	8002468 <TIM_Cmd>
	}
}
 8005b2e:	bf00      	nop
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20004a50 	.word	0x20004a50
 8005b38:	40000400 	.word	0x40000400

08005b3c <EXTI2_IRQHandler>:


/*
 * interrupt handler for lfo modulation type button
 */
void EXTI2_IRQHandler(void){
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line2);
 8005b40:	2004      	movs	r0, #4
 8005b42:	f7fb fd47 	bl	80015d4 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 8005b46:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <EXTI2_IRQHandler+0x2c>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d109      	bne.n	8005b62 <EXTI2_IRQHandler+0x26>
		the_button.button = lfo_mod_button;
 8005b4e:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <EXTI2_IRQHandler+0x2c>)
 8005b50:	2202      	movs	r2, #2
 8005b52:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 8005b54:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <EXTI2_IRQHandler+0x2c>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	4803      	ldr	r0, [pc, #12]	; (8005b6c <EXTI2_IRQHandler+0x30>)
 8005b5e:	f7fc fc83 	bl	8002468 <TIM_Cmd>
	}

}
 8005b62:	bf00      	nop
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20004a50 	.word	0x20004a50
 8005b6c:	40000400 	.word	0x40000400

08005b70 <EXTI3_IRQHandler>:


/*
 * interrupt handler for adsr modulation type button
 */
void EXTI3_IRQHandler(void){
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line3);
 8005b74:	2008      	movs	r0, #8
 8005b76:	f7fb fd2d 	bl	80015d4 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 8005b7a:	4b08      	ldr	r3, [pc, #32]	; (8005b9c <EXTI3_IRQHandler+0x2c>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <EXTI3_IRQHandler+0x26>
		the_button.button = adsr_mod_button;
 8005b82:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <EXTI3_IRQHandler+0x2c>)
 8005b84:	2203      	movs	r2, #3
 8005b86:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 8005b88:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <EXTI3_IRQHandler+0x2c>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 8005b8e:	2101      	movs	r1, #1
 8005b90:	4803      	ldr	r0, [pc, #12]	; (8005ba0 <EXTI3_IRQHandler+0x30>)
 8005b92:	f7fc fc69 	bl	8002468 <TIM_Cmd>
	}
}
 8005b96:	bf00      	nop
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20004a50 	.word	0x20004a50
 8005ba0:	40000400 	.word	0x40000400

08005ba4 <EXTI9_5_IRQHandler>:

//EXTI9_5_IRQn used for selector
void EXTI9_5_IRQHandler(void){
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
	// TODO: Is this a mistake?  Looks like EXTI_Line6 is twice.  Maybe should be EXTI_Line5.
	// EXTI_ClearITPendingBit(EXTI_Line6 | EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9);
	EXTI_ClearITPendingBit(EXTI_Line5 | EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9);
 8005ba8:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8005bac:	f7fb fd12 	bl	80015d4 <EXTI_ClearITPendingBit>
	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){			//is debounce timer off
 8005bb0:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <EXTI9_5_IRQHandler+0x28>)
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d103      	bne.n	8005bc6 <EXTI9_5_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);								//turn on debounce timer
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	4802      	ldr	r0, [pc, #8]	; (8005bcc <EXTI9_5_IRQHandler+0x28>)
 8005bc2:	f7fc fc51 	bl	8002468 <TIM_Cmd>
	}
	// update_state();
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40000800 	.word	0x40000800

08005bd0 <EXTI15_10_IRQHandler>:

//EXTI15_10_IRQn used for selector
void EXTI15_10_IRQHandler(void){
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15);
 8005bd4:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8005bd8:	f7fb fcfc 	bl	80015d4 <EXTI_ClearITPendingBit>

	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){		//is debounce timer off
 8005bdc:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <EXTI15_10_IRQHandler+0x28>)
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d103      	bne.n	8005bf2 <EXTI15_10_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);							//turn on debounce timer
 8005bea:	2101      	movs	r1, #1
 8005bec:	4802      	ldr	r0, [pc, #8]	; (8005bf8 <EXTI15_10_IRQHandler+0x28>)
 8005bee:	f7fc fc3b 	bl	8002468 <TIM_Cmd>
	}
}
 8005bf2:	bf00      	nop
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40000800 	.word	0x40000800

08005bfc <TIM3_IRQHandler>:

// Timer for limiting button pushes 100ms
void TIM3_IRQHandler()
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
	// Note: the_button.button is set to vco_wave or whatever by
	// EXTI0_IRQHandler() or whatever.
	// That routine is called first and then this one.
	// It enables the TIM3 timer.  Then this function disables it.

	TIM_Cmd(TIM3, DISABLE);				//stop timer
 8005c02:	2100      	movs	r1, #0
 8005c04:	4813      	ldr	r0, [pc, #76]	; (8005c54 <TIM3_IRQHandler+0x58>)
 8005c06:	f7fc fc2f 	bl	8002468 <TIM_Cmd>
	int temp = the_button.button;
 8005c0a:	4b13      	ldr	r3, [pc, #76]	; (8005c58 <TIM3_IRQHandler+0x5c>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	607b      	str	r3, [r7, #4]

	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);			//clear interrupt
 8005c10:	2101      	movs	r1, #1
 8005c12:	4810      	ldr	r0, [pc, #64]	; (8005c54 <TIM3_IRQHandler+0x58>)
 8005c14:	f7fc fc6c 	bl	80024f0 <TIM_ClearITPendingBit>
	the_button.button_state = NOT_ACTIVE;
 8005c18:	4b0f      	ldr	r3, [pc, #60]	; (8005c58 <TIM3_IRQHandler+0x5c>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	605a      	str	r2, [r3, #4]
	if(temp == vco_wave_button)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d102      	bne.n	8005c2a <TIM3_IRQHandler+0x2e>
	{
		// handle_enter();			// TODO
		update_vco_wave();
 8005c24:	f000 f8fe 	bl	8005e24 <update_vco_wave>
	else if(temp == adsr_mod_button)
	{
		// handle_down();			// TODO
		update_adsr_mod();
	}
}
 8005c28:	e010      	b.n	8005c4c <TIM3_IRQHandler+0x50>
	{
		// handle_enter();			// TODO
		update_vco_wave();

	}
	else if(temp == lfo_wave_button)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d102      	bne.n	8005c36 <TIM3_IRQHandler+0x3a>
	{
		// handle_back();			// TODO
		update_lfo_wave();
 8005c30:	f000 f90e 	bl	8005e50 <update_lfo_wave>
	else if(temp == adsr_mod_button)
	{
		// handle_down();			// TODO
		update_adsr_mod();
	}
}
 8005c34:	e00a      	b.n	8005c4c <TIM3_IRQHandler+0x50>
	else if(temp == lfo_wave_button)
	{
		// handle_back();			// TODO
		update_lfo_wave();
	}
	else if(temp == lfo_mod_button)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d102      	bne.n	8005c42 <TIM3_IRQHandler+0x46>
	{
		// handle_up();			// TODO
		update_lfo_mod();
 8005c3c:	f000 f91e 	bl	8005e7c <update_lfo_mod>
	else if(temp == adsr_mod_button)
	{
		// handle_down();			// TODO
		update_adsr_mod();
	}
}
 8005c40:	e004      	b.n	8005c4c <TIM3_IRQHandler+0x50>
	else if(temp == lfo_mod_button)
	{
		// handle_up();			// TODO
		update_lfo_mod();
	}
	else if(temp == adsr_mod_button)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d101      	bne.n	8005c4c <TIM3_IRQHandler+0x50>
	{
		// handle_down();			// TODO
		update_adsr_mod();
 8005c48:	f000 f938 	bl	8005ebc <update_adsr_mod>
	}
}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40000400 	.word	0x40000400
 8005c58:	20004a50 	.word	0x20004a50

08005c5c <TIM4_IRQHandler>:

// Timer for debouncing selectors 50ms
void TIM4_IRQHandler()
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM4, DISABLE);								//stop timer
 8005c60:	2100      	movs	r1, #0
 8005c62:	4804      	ldr	r0, [pc, #16]	; (8005c74 <TIM4_IRQHandler+0x18>)
 8005c64:	f7fc fc00 	bl	8002468 <TIM_Cmd>
	TIM_ClearITPendingBit(TIM4, TIM_IT_Update);			//clear interrupt
 8005c68:	2101      	movs	r1, #1
 8005c6a:	4802      	ldr	r0, [pc, #8]	; (8005c74 <TIM4_IRQHandler+0x18>)
 8005c6c:	f7fc fc40 	bl	80024f0 <TIM_ClearITPendingBit>

	// update_selector_state();							//update state
	// update_state();
}
 8005c70:	bf00      	nop
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40000800 	.word	0x40000800

08005c78 <ADC_IRQHandler>:

// not set up yet but might to see if the adc is working
void ADC_IRQHandler() {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
	/* acknowledge interrupt */
	ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 8005c7c:	f240 2105 	movw	r1, #517	; 0x205
 8005c80:	4802      	ldr	r0, [pc, #8]	; (8005c8c <ADC_IRQHandler+0x14>)
 8005c82:	f7fb f985 	bl	8000f90 <ADC_ClearITPendingBit>
}
 8005c86:	bf00      	nop
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40012000 	.word	0x40012000

08005c90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  // Mike Beard
  // #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c94:	4a16      	ldr	r2, [pc, #88]	; (8005cf0 <SystemInit+0x60>)
 8005c96:	4b16      	ldr	r3, [pc, #88]	; (8005cf0 <SystemInit+0x60>)
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  // #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005ca4:	4a13      	ldr	r2, [pc, #76]	; (8005cf4 <SystemInit+0x64>)
 8005ca6:	4b13      	ldr	r3, [pc, #76]	; (8005cf4 <SystemInit+0x64>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005cb0:	4b10      	ldr	r3, [pc, #64]	; (8005cf4 <SystemInit+0x64>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005cb6:	4a0f      	ldr	r2, [pc, #60]	; (8005cf4 <SystemInit+0x64>)
 8005cb8:	4b0e      	ldr	r3, [pc, #56]	; (8005cf4 <SystemInit+0x64>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <SystemInit+0x64>)
 8005cc8:	4a0b      	ldr	r2, [pc, #44]	; (8005cf8 <SystemInit+0x68>)
 8005cca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005ccc:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <SystemInit+0x64>)
 8005cce:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <SystemInit+0x64>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005cd8:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <SystemInit+0x64>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8005cde:	f000 f80d 	bl	8005cfc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005ce2:	4b03      	ldr	r3, [pc, #12]	; (8005cf0 <SystemInit+0x60>)
 8005ce4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ce8:	609a      	str	r2, [r3, #8]
#endif
}
 8005cea:	bf00      	nop
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	e000ed00 	.word	0xe000ed00
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	24003010 	.word	0x24003010

08005cfc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	607b      	str	r3, [r7, #4]
 8005d06:	2300      	movs	r3, #0
 8005d08:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8005d0a:	4a41      	ldr	r2, [pc, #260]	; (8005e10 <SetSysClock+0x114>)
 8005d0c:	4b40      	ldr	r3, [pc, #256]	; (8005e10 <SetSysClock+0x114>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d14:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005d16:	4b3e      	ldr	r3, [pc, #248]	; (8005e10 <SetSysClock+0x114>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	3301      	adds	r3, #1
 8005d24:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d103      	bne.n	8005d34 <SetSysClock+0x38>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005d32:	d1f0      	bne.n	8005d16 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005d34:	4b36      	ldr	r3, [pc, #216]	; (8005e10 <SetSysClock+0x114>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8005d40:	2301      	movs	r3, #1
 8005d42:	603b      	str	r3, [r7, #0]
 8005d44:	e001      	b.n	8005d4a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8005d46:	2300      	movs	r3, #0
 8005d48:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d142      	bne.n	8005dd6 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8005d50:	4a2f      	ldr	r2, [pc, #188]	; (8005e10 <SetSysClock+0x114>)
 8005d52:	4b2f      	ldr	r3, [pc, #188]	; (8005e10 <SetSysClock+0x114>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d5a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8005d5c:	4a2d      	ldr	r2, [pc, #180]	; (8005e14 <SetSysClock+0x118>)
 8005d5e:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <SetSysClock+0x118>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d66:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005d68:	4a29      	ldr	r2, [pc, #164]	; (8005e10 <SetSysClock+0x114>)
 8005d6a:	4b29      	ldr	r3, [pc, #164]	; (8005e10 <SetSysClock+0x114>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8005d70:	4a27      	ldr	r2, [pc, #156]	; (8005e10 <SetSysClock+0x114>)
 8005d72:	4b27      	ldr	r3, [pc, #156]	; (8005e10 <SetSysClock+0x114>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d7a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8005d7c:	4a24      	ldr	r2, [pc, #144]	; (8005e10 <SetSysClock+0x114>)
 8005d7e:	4b24      	ldr	r3, [pc, #144]	; (8005e10 <SetSysClock+0x114>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8005d86:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8005d88:	4b21      	ldr	r3, [pc, #132]	; (8005e10 <SetSysClock+0x114>)
 8005d8a:	4a23      	ldr	r2, [pc, #140]	; (8005e18 <SetSysClock+0x11c>)
 8005d8c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005d8e:	4a20      	ldr	r2, [pc, #128]	; (8005e10 <SetSysClock+0x114>)
 8005d90:	4b1f      	ldr	r3, [pc, #124]	; (8005e10 <SetSysClock+0x114>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d98:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005d9a:	bf00      	nop
 8005d9c:	4b1c      	ldr	r3, [pc, #112]	; (8005e10 <SetSysClock+0x114>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0f9      	beq.n	8005d9c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8005da8:	4b1c      	ldr	r3, [pc, #112]	; (8005e1c <SetSysClock+0x120>)
 8005daa:	f240 6205 	movw	r2, #1541	; 0x605
 8005dae:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005db0:	4a17      	ldr	r2, [pc, #92]	; (8005e10 <SetSysClock+0x114>)
 8005db2:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <SetSysClock+0x114>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f023 0303 	bic.w	r3, r3, #3
 8005dba:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005dbc:	4a14      	ldr	r2, [pc, #80]	; (8005e10 <SetSysClock+0x114>)
 8005dbe:	4b14      	ldr	r3, [pc, #80]	; (8005e10 <SetSysClock+0x114>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f043 0302 	orr.w	r3, r3, #2
 8005dc6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8005dc8:	bf00      	nop
 8005dca:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <SetSysClock+0x114>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d1f9      	bne.n	8005dca <SetSysClock+0xce>
// Re-added by Mike Beard
/******************************************************************************/
/*                          I2S clock configuration                           */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8005dd6:	4a0e      	ldr	r2, [pc, #56]	; (8005e10 <SetSysClock+0x114>)
 8005dd8:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <SetSysClock+0x114>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005de0:	6093      	str	r3, [r2, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8005de2:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <SetSysClock+0x114>)
 8005de4:	4a0e      	ldr	r2, [pc, #56]	; (8005e20 <SetSysClock+0x124>)
 8005de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8005dea:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <SetSysClock+0x114>)
 8005dec:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <SetSysClock+0x114>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005df4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8005df6:	bf00      	nop
 8005df8:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <SetSysClock+0x114>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f9      	beq.n	8005df8 <SetSysClock+0xfc>
  {
  }
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	40023800 	.word	0x40023800
 8005e14:	40007000 	.word	0x40007000
 8005e18:	07405408 	.word	0x07405408
 8005e1c:	40023c00 	.word	0x40023c00
 8005e20:	30004080 	.word	0x30004080

08005e24 <update_vco_wave>:
// #include "lcd.h"
#include "main.h"


void update_vco_wave()
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
	vco_wave++;
 8005e28:	4b08      	ldr	r3, [pc, #32]	; (8005e4c <update_vco_wave+0x28>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <update_vco_wave+0x28>)
 8005e32:	701a      	strb	r2, [r3, #0]
	if(vco_wave >= lastwave)
 8005e34:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <update_vco_wave+0x28>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b05      	cmp	r3, #5
 8005e3a:	d902      	bls.n	8005e42 <update_vco_wave+0x1e>
	{
		vco_wave = 0;
 8005e3c:	4b03      	ldr	r3, [pc, #12]	; (8005e4c <update_vco_wave+0x28>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]
	}
}
 8005e42:	bf00      	nop
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	20004a2d 	.word	0x20004a2d

08005e50 <update_lfo_wave>:

void update_lfo_wave()
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
	lfo_wave++;
 8005e54:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <update_lfo_wave+0x28>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <update_lfo_wave+0x28>)
 8005e5e:	701a      	strb	r2, [r3, #0]
	if(lfo_wave >= lastwave)
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <update_lfo_wave+0x28>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b05      	cmp	r3, #5
 8005e66:	d902      	bls.n	8005e6e <update_lfo_wave+0x1e>
	{
		lfo_wave = 0;
 8005e68:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <update_lfo_wave+0x28>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
	}
}
 8005e6e:	bf00      	nop
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	20004a2c 	.word	0x20004a2c

08005e7c <update_lfo_mod>:
		}
	}
}

void update_lfo_mod()
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
	// TODO: make modulation modes in this order: None, AM, FM, AM+FM

	if(lfo_mod.am_mod == OFF)
 8005e80:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <update_lfo_mod+0x3c>)
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d103      	bne.n	8005e90 <update_lfo_mod+0x14>
	{
		lfo_mod.am_mod = ON;
 8005e88:	4b0b      	ldr	r3, [pc, #44]	; (8005eb8 <update_lfo_mod+0x3c>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	801a      	strh	r2, [r3, #0]
		else
		{
			lfo_mod.fm_mod = OFF;
		}
	}
}
 8005e8e:	e00d      	b.n	8005eac <update_lfo_mod+0x30>

		// Note: leave adsr_mod.fm_mod as-is.
	}
	else
	{
		lfo_mod.am_mod = OFF;
 8005e90:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <update_lfo_mod+0x3c>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	801a      	strh	r2, [r3, #0]

		// Toggle adsr_mod.am_mod.
		if(lfo_mod.fm_mod == OFF)
 8005e96:	4b08      	ldr	r3, [pc, #32]	; (8005eb8 <update_lfo_mod+0x3c>)
 8005e98:	885b      	ldrh	r3, [r3, #2]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d103      	bne.n	8005ea6 <update_lfo_mod+0x2a>
		{
			lfo_mod.fm_mod = ON;
 8005e9e:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <update_lfo_mod+0x3c>)
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	805a      	strh	r2, [r3, #2]
		else
		{
			lfo_mod.fm_mod = OFF;
		}
	}
}
 8005ea4:	e002      	b.n	8005eac <update_lfo_mod+0x30>
		{
			lfo_mod.fm_mod = ON;
		}
		else
		{
			lfo_mod.fm_mod = OFF;
 8005ea6:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <update_lfo_mod+0x3c>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8005eac:	bf00      	nop
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	20004a58 	.word	0x20004a58

08005ebc <update_adsr_mod>:


void update_adsr_mod()
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
	if(adsr_mod.fm_mod == OFF)
 8005ec0:	4b0d      	ldr	r3, [pc, #52]	; (8005ef8 <update_adsr_mod+0x3c>)
 8005ec2:	885b      	ldrh	r3, [r3, #2]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d103      	bne.n	8005ed0 <update_adsr_mod+0x14>
	{
		adsr_mod.fm_mod = ON;
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <update_adsr_mod+0x3c>)
 8005eca:	2201      	movs	r2, #1
 8005ecc:	805a      	strh	r2, [r3, #2]
		else
		{
			adsr_mod.am_mod = OFF;
		}
	}
}
 8005ece:	e00d      	b.n	8005eec <update_adsr_mod+0x30>

		// Note: leave adsr_mod.am_mod as-is.
	}
	else
	{
		adsr_mod.fm_mod = OFF;
 8005ed0:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <update_adsr_mod+0x3c>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	805a      	strh	r2, [r3, #2]

		// Toggle adsr_mod.am_mod.
		if(adsr_mod.am_mod == OFF)
 8005ed6:	4b08      	ldr	r3, [pc, #32]	; (8005ef8 <update_adsr_mod+0x3c>)
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <update_adsr_mod+0x2a>
		{
			adsr_mod.am_mod = ON;
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <update_adsr_mod+0x3c>)
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	801a      	strh	r2, [r3, #0]
		else
		{
			adsr_mod.am_mod = OFF;
		}
	}
}
 8005ee4:	e002      	b.n	8005eec <update_adsr_mod+0x30>
		{
			adsr_mod.am_mod = ON;
		}
		else
		{
			adsr_mod.am_mod = OFF;
 8005ee6:	4b04      	ldr	r3, [pc, #16]	; (8005ef8 <update_adsr_mod+0x3c>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8005eec:	bf00      	nop
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	20004a30 	.word	0x20004a30

08005efc <init_state>:
//	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_6) == 1){
//		lfo_state = other2;
//	}
//}

void init_state(){
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
//	current_menu_state.lfo_mod = NO_MOD;
//	current_menu_state.filterst8 = no_filter;
//	current_menu_state.secondary_vco = 0;
//	display_new_menu();

	vco_wave = sine;
 8005f00:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <init_state+0x34>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]
	lfo_wave = sine;
 8005f06:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <init_state+0x38>)
 8005f08:	2201      	movs	r2, #1
 8005f0a:	701a      	strb	r2, [r3, #0]

	lfo_mod.am_mod = OFF;
 8005f0c:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <init_state+0x3c>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	801a      	strh	r2, [r3, #0]
	lfo_mod.fm_mod = OFF;
 8005f12:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <init_state+0x3c>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	805a      	strh	r2, [r3, #2]

	adsr_mod.am_mod = OFF;
 8005f18:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <init_state+0x40>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	801a      	strh	r2, [r3, #0]
	adsr_mod.fm_mod = OFF;
 8005f1e:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <init_state+0x40>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	805a      	strh	r2, [r3, #2]

}
 8005f24:	bf00      	nop
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	20004a2d 	.word	0x20004a2d
 8005f34:	20004a2c 	.word	0x20004a2c
 8005f38:	20004a58 	.word	0x20004a58
 8005f3c:	20004a30 	.word	0x20004a30

08005f40 <arm_sin_f32>:
 8005f40:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005fac <arm_sin_f32+0x6c>
 8005f44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005f48:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f50:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8005f54:	d504      	bpl.n	8005f60 <arm_sin_f32+0x20>
 8005f56:	ee17 3a90 	vmov	r3, s15
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	ee07 3a90 	vmov	s15, r3
 8005f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f64:	eddf 6a12 	vldr	s13, [pc, #72]	; 8005fb0 <arm_sin_f32+0x70>
 8005f68:	4a12      	ldr	r2, [pc, #72]	; (8005fb4 <arm_sin_f32+0x74>)
 8005f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f6e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005f72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005f76:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8005f7a:	ee16 3a90 	vmov	r3, s13
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	ee06 3a90 	vmov	s13, r3
 8005f86:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 8005f8a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005f8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f92:	edd1 6a00 	vldr	s13, [r1]
 8005f96:	ed91 7a01 	vldr	s14, [r1, #4]
 8005f9a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fa2:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005fa6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005faa:	4770      	bx	lr
 8005fac:	3e22f983 	.word	0x3e22f983
 8005fb0:	44000000 	.word	0x44000000
 8005fb4:	08007c80 	.word	0x08007c80

08005fb8 <__libc_init_array>:
 8005fb8:	b570      	push	{r4, r5, r6, lr}
 8005fba:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <__libc_init_array+0x3c>)
 8005fbc:	4c0e      	ldr	r4, [pc, #56]	; (8005ff8 <__libc_init_array+0x40>)
 8005fbe:	1ae4      	subs	r4, r4, r3
 8005fc0:	10a4      	asrs	r4, r4, #2
 8005fc2:	2500      	movs	r5, #0
 8005fc4:	461e      	mov	r6, r3
 8005fc6:	42a5      	cmp	r5, r4
 8005fc8:	d004      	beq.n	8005fd4 <__libc_init_array+0x1c>
 8005fca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fce:	4798      	blx	r3
 8005fd0:	3501      	adds	r5, #1
 8005fd2:	e7f8      	b.n	8005fc6 <__libc_init_array+0xe>
 8005fd4:	f001 fe44 	bl	8007c60 <_init>
 8005fd8:	4c08      	ldr	r4, [pc, #32]	; (8005ffc <__libc_init_array+0x44>)
 8005fda:	4b09      	ldr	r3, [pc, #36]	; (8006000 <__libc_init_array+0x48>)
 8005fdc:	1ae4      	subs	r4, r4, r3
 8005fde:	10a4      	asrs	r4, r4, #2
 8005fe0:	2500      	movs	r5, #0
 8005fe2:	461e      	mov	r6, r3
 8005fe4:	42a5      	cmp	r5, r4
 8005fe6:	d004      	beq.n	8005ff2 <__libc_init_array+0x3a>
 8005fe8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fec:	4798      	blx	r3
 8005fee:	3501      	adds	r5, #1
 8005ff0:	e7f8      	b.n	8005fe4 <__libc_init_array+0x2c>
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}
 8005ff4:	080088e8 	.word	0x080088e8
 8005ff8:	080088e8 	.word	0x080088e8
 8005ffc:	080088ec 	.word	0x080088ec
 8006000:	080088e8 	.word	0x080088e8

08006004 <malloc>:
 8006004:	4b02      	ldr	r3, [pc, #8]	; (8006010 <malloc+0xc>)
 8006006:	4601      	mov	r1, r0
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	f000 b803 	b.w	8006014 <_malloc_r>
 800600e:	bf00      	nop
 8006010:	2000018c 	.word	0x2000018c

08006014 <_malloc_r>:
 8006014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006018:	f101 040b 	add.w	r4, r1, #11
 800601c:	2c16      	cmp	r4, #22
 800601e:	b085      	sub	sp, #20
 8006020:	4681      	mov	r9, r0
 8006022:	d903      	bls.n	800602c <_malloc_r+0x18>
 8006024:	f034 0407 	bics.w	r4, r4, #7
 8006028:	d501      	bpl.n	800602e <_malloc_r+0x1a>
 800602a:	e002      	b.n	8006032 <_malloc_r+0x1e>
 800602c:	2410      	movs	r4, #16
 800602e:	428c      	cmp	r4, r1
 8006030:	d203      	bcs.n	800603a <_malloc_r+0x26>
 8006032:	230c      	movs	r3, #12
 8006034:	f8c9 3000 	str.w	r3, [r9]
 8006038:	e1ea      	b.n	8006410 <_malloc_r+0x3fc>
 800603a:	4648      	mov	r0, r9
 800603c:	f000 fa0a 	bl	8006454 <__malloc_lock>
 8006040:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8006044:	4d9e      	ldr	r5, [pc, #632]	; (80062c0 <_malloc_r+0x2ac>)
 8006046:	d217      	bcs.n	8006078 <_malloc_r+0x64>
 8006048:	f104 0208 	add.w	r2, r4, #8
 800604c:	442a      	add	r2, r5
 800604e:	f1a2 0108 	sub.w	r1, r2, #8
 8006052:	6856      	ldr	r6, [r2, #4]
 8006054:	428e      	cmp	r6, r1
 8006056:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800605a:	d102      	bne.n	8006062 <_malloc_r+0x4e>
 800605c:	68d6      	ldr	r6, [r2, #12]
 800605e:	42b2      	cmp	r2, r6
 8006060:	d008      	beq.n	8006074 <_malloc_r+0x60>
 8006062:	6873      	ldr	r3, [r6, #4]
 8006064:	68f2      	ldr	r2, [r6, #12]
 8006066:	68b1      	ldr	r1, [r6, #8]
 8006068:	f023 0303 	bic.w	r3, r3, #3
 800606c:	60ca      	str	r2, [r1, #12]
 800606e:	4433      	add	r3, r6
 8006070:	6091      	str	r1, [r2, #8]
 8006072:	e02f      	b.n	80060d4 <_malloc_r+0xc0>
 8006074:	3302      	adds	r3, #2
 8006076:	e03d      	b.n	80060f4 <_malloc_r+0xe0>
 8006078:	0a63      	lsrs	r3, r4, #9
 800607a:	d01a      	beq.n	80060b2 <_malloc_r+0x9e>
 800607c:	2b04      	cmp	r3, #4
 800607e:	d802      	bhi.n	8006086 <_malloc_r+0x72>
 8006080:	09a3      	lsrs	r3, r4, #6
 8006082:	3338      	adds	r3, #56	; 0x38
 8006084:	e018      	b.n	80060b8 <_malloc_r+0xa4>
 8006086:	2b14      	cmp	r3, #20
 8006088:	d801      	bhi.n	800608e <_malloc_r+0x7a>
 800608a:	335b      	adds	r3, #91	; 0x5b
 800608c:	e014      	b.n	80060b8 <_malloc_r+0xa4>
 800608e:	2b54      	cmp	r3, #84	; 0x54
 8006090:	d802      	bhi.n	8006098 <_malloc_r+0x84>
 8006092:	0b23      	lsrs	r3, r4, #12
 8006094:	336e      	adds	r3, #110	; 0x6e
 8006096:	e00f      	b.n	80060b8 <_malloc_r+0xa4>
 8006098:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800609c:	d802      	bhi.n	80060a4 <_malloc_r+0x90>
 800609e:	0be3      	lsrs	r3, r4, #15
 80060a0:	3377      	adds	r3, #119	; 0x77
 80060a2:	e009      	b.n	80060b8 <_malloc_r+0xa4>
 80060a4:	f240 5254 	movw	r2, #1364	; 0x554
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d804      	bhi.n	80060b6 <_malloc_r+0xa2>
 80060ac:	0ca3      	lsrs	r3, r4, #18
 80060ae:	337c      	adds	r3, #124	; 0x7c
 80060b0:	e002      	b.n	80060b8 <_malloc_r+0xa4>
 80060b2:	233f      	movs	r3, #63	; 0x3f
 80060b4:	e000      	b.n	80060b8 <_malloc_r+0xa4>
 80060b6:	237e      	movs	r3, #126	; 0x7e
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80060be:	f1a2 0008 	sub.w	r0, r2, #8
 80060c2:	6856      	ldr	r6, [r2, #4]
 80060c4:	e00c      	b.n	80060e0 <_malloc_r+0xcc>
 80060c6:	2900      	cmp	r1, #0
 80060c8:	68f1      	ldr	r1, [r6, #12]
 80060ca:	db08      	blt.n	80060de <_malloc_r+0xca>
 80060cc:	68b3      	ldr	r3, [r6, #8]
 80060ce:	60d9      	str	r1, [r3, #12]
 80060d0:	608b      	str	r3, [r1, #8]
 80060d2:	18b3      	adds	r3, r6, r2
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	605a      	str	r2, [r3, #4]
 80060dc:	e1a3      	b.n	8006426 <_malloc_r+0x412>
 80060de:	460e      	mov	r6, r1
 80060e0:	4286      	cmp	r6, r0
 80060e2:	d006      	beq.n	80060f2 <_malloc_r+0xde>
 80060e4:	6872      	ldr	r2, [r6, #4]
 80060e6:	f022 0203 	bic.w	r2, r2, #3
 80060ea:	1b11      	subs	r1, r2, r4
 80060ec:	290f      	cmp	r1, #15
 80060ee:	ddea      	ble.n	80060c6 <_malloc_r+0xb2>
 80060f0:	3b01      	subs	r3, #1
 80060f2:	3301      	adds	r3, #1
 80060f4:	4a72      	ldr	r2, [pc, #456]	; (80062c0 <_malloc_r+0x2ac>)
 80060f6:	692e      	ldr	r6, [r5, #16]
 80060f8:	f102 0708 	add.w	r7, r2, #8
 80060fc:	42be      	cmp	r6, r7
 80060fe:	4639      	mov	r1, r7
 8006100:	d079      	beq.n	80061f6 <_malloc_r+0x1e2>
 8006102:	6870      	ldr	r0, [r6, #4]
 8006104:	f020 0003 	bic.w	r0, r0, #3
 8006108:	ebc4 0e00 	rsb	lr, r4, r0
 800610c:	f1be 0f0f 	cmp.w	lr, #15
 8006110:	dd0d      	ble.n	800612e <_malloc_r+0x11a>
 8006112:	1933      	adds	r3, r6, r4
 8006114:	f044 0401 	orr.w	r4, r4, #1
 8006118:	6074      	str	r4, [r6, #4]
 800611a:	6153      	str	r3, [r2, #20]
 800611c:	6113      	str	r3, [r2, #16]
 800611e:	f04e 0201 	orr.w	r2, lr, #1
 8006122:	60df      	str	r7, [r3, #12]
 8006124:	609f      	str	r7, [r3, #8]
 8006126:	605a      	str	r2, [r3, #4]
 8006128:	f843 e00e 	str.w	lr, [r3, lr]
 800612c:	e17b      	b.n	8006426 <_malloc_r+0x412>
 800612e:	f1be 0f00 	cmp.w	lr, #0
 8006132:	6157      	str	r7, [r2, #20]
 8006134:	6117      	str	r7, [r2, #16]
 8006136:	db05      	blt.n	8006144 <_malloc_r+0x130>
 8006138:	4430      	add	r0, r6
 800613a:	6843      	ldr	r3, [r0, #4]
 800613c:	f043 0301 	orr.w	r3, r3, #1
 8006140:	6043      	str	r3, [r0, #4]
 8006142:	e170      	b.n	8006426 <_malloc_r+0x412>
 8006144:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006148:	d215      	bcs.n	8006176 <_malloc_r+0x162>
 800614a:	08c0      	lsrs	r0, r0, #3
 800614c:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8006150:	2701      	movs	r7, #1
 8006152:	fa07 fe0e 	lsl.w	lr, r7, lr
 8006156:	6857      	ldr	r7, [r2, #4]
 8006158:	3001      	adds	r0, #1
 800615a:	ea4e 0707 	orr.w	r7, lr, r7
 800615e:	6057      	str	r7, [r2, #4]
 8006160:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8006164:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8006168:	f8c6 e008 	str.w	lr, [r6, #8]
 800616c:	3f08      	subs	r7, #8
 800616e:	60f7      	str	r7, [r6, #12]
 8006170:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8006174:	e03d      	b.n	80061f2 <_malloc_r+0x1de>
 8006176:	0a42      	lsrs	r2, r0, #9
 8006178:	2a04      	cmp	r2, #4
 800617a:	d802      	bhi.n	8006182 <_malloc_r+0x16e>
 800617c:	0982      	lsrs	r2, r0, #6
 800617e:	3238      	adds	r2, #56	; 0x38
 8006180:	e015      	b.n	80061ae <_malloc_r+0x19a>
 8006182:	2a14      	cmp	r2, #20
 8006184:	d801      	bhi.n	800618a <_malloc_r+0x176>
 8006186:	325b      	adds	r2, #91	; 0x5b
 8006188:	e011      	b.n	80061ae <_malloc_r+0x19a>
 800618a:	2a54      	cmp	r2, #84	; 0x54
 800618c:	d802      	bhi.n	8006194 <_malloc_r+0x180>
 800618e:	0b02      	lsrs	r2, r0, #12
 8006190:	326e      	adds	r2, #110	; 0x6e
 8006192:	e00c      	b.n	80061ae <_malloc_r+0x19a>
 8006194:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006198:	d802      	bhi.n	80061a0 <_malloc_r+0x18c>
 800619a:	0bc2      	lsrs	r2, r0, #15
 800619c:	3277      	adds	r2, #119	; 0x77
 800619e:	e006      	b.n	80061ae <_malloc_r+0x19a>
 80061a0:	f240 5754 	movw	r7, #1364	; 0x554
 80061a4:	42ba      	cmp	r2, r7
 80061a6:	bf9a      	itte	ls
 80061a8:	0c82      	lsrls	r2, r0, #18
 80061aa:	327c      	addls	r2, #124	; 0x7c
 80061ac:	227e      	movhi	r2, #126	; 0x7e
 80061ae:	1c57      	adds	r7, r2, #1
 80061b0:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80061b4:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80061b8:	f8df c104 	ldr.w	ip, [pc, #260]	; 80062c0 <_malloc_r+0x2ac>
 80061bc:	45be      	cmp	lr, r7
 80061be:	d10d      	bne.n	80061dc <_malloc_r+0x1c8>
 80061c0:	2001      	movs	r0, #1
 80061c2:	1092      	asrs	r2, r2, #2
 80061c4:	fa00 f202 	lsl.w	r2, r0, r2
 80061c8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80061cc:	4310      	orrs	r0, r2
 80061ce:	f8cc 0004 	str.w	r0, [ip, #4]
 80061d2:	4672      	mov	r2, lr
 80061d4:	e009      	b.n	80061ea <_malloc_r+0x1d6>
 80061d6:	68bf      	ldr	r7, [r7, #8]
 80061d8:	45be      	cmp	lr, r7
 80061da:	d004      	beq.n	80061e6 <_malloc_r+0x1d2>
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	f022 0203 	bic.w	r2, r2, #3
 80061e2:	4290      	cmp	r0, r2
 80061e4:	d3f7      	bcc.n	80061d6 <_malloc_r+0x1c2>
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	46be      	mov	lr, r7
 80061ea:	60f2      	str	r2, [r6, #12]
 80061ec:	f8c6 e008 	str.w	lr, [r6, #8]
 80061f0:	6096      	str	r6, [r2, #8]
 80061f2:	f8ce 600c 	str.w	r6, [lr, #12]
 80061f6:	2001      	movs	r0, #1
 80061f8:	109a      	asrs	r2, r3, #2
 80061fa:	fa00 f202 	lsl.w	r2, r0, r2
 80061fe:	6868      	ldr	r0, [r5, #4]
 8006200:	4282      	cmp	r2, r0
 8006202:	d85f      	bhi.n	80062c4 <_malloc_r+0x2b0>
 8006204:	4202      	tst	r2, r0
 8006206:	d106      	bne.n	8006216 <_malloc_r+0x202>
 8006208:	f023 0303 	bic.w	r3, r3, #3
 800620c:	0052      	lsls	r2, r2, #1
 800620e:	4202      	tst	r2, r0
 8006210:	f103 0304 	add.w	r3, r3, #4
 8006214:	d0fa      	beq.n	800620c <_malloc_r+0x1f8>
 8006216:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 800621a:	46c2      	mov	sl, r8
 800621c:	469c      	mov	ip, r3
 800621e:	f8da 600c 	ldr.w	r6, [sl, #12]
 8006222:	4556      	cmp	r6, sl
 8006224:	d02c      	beq.n	8006280 <_malloc_r+0x26c>
 8006226:	6870      	ldr	r0, [r6, #4]
 8006228:	68f7      	ldr	r7, [r6, #12]
 800622a:	f020 0003 	bic.w	r0, r0, #3
 800622e:	ebc4 0e00 	rsb	lr, r4, r0
 8006232:	f1be 0f0f 	cmp.w	lr, #15
 8006236:	dd11      	ble.n	800625c <_malloc_r+0x248>
 8006238:	1933      	adds	r3, r6, r4
 800623a:	f044 0401 	orr.w	r4, r4, #1
 800623e:	6074      	str	r4, [r6, #4]
 8006240:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8006244:	60d7      	str	r7, [r2, #12]
 8006246:	60ba      	str	r2, [r7, #8]
 8006248:	f04e 0201 	orr.w	r2, lr, #1
 800624c:	616b      	str	r3, [r5, #20]
 800624e:	612b      	str	r3, [r5, #16]
 8006250:	60d9      	str	r1, [r3, #12]
 8006252:	6099      	str	r1, [r3, #8]
 8006254:	605a      	str	r2, [r3, #4]
 8006256:	f843 e00e 	str.w	lr, [r3, lr]
 800625a:	e00b      	b.n	8006274 <_malloc_r+0x260>
 800625c:	f1be 0f00 	cmp.w	lr, #0
 8006260:	db0c      	blt.n	800627c <_malloc_r+0x268>
 8006262:	1833      	adds	r3, r6, r0
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	605a      	str	r2, [r3, #4]
 800626c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8006270:	60df      	str	r7, [r3, #12]
 8006272:	60bb      	str	r3, [r7, #8]
 8006274:	4648      	mov	r0, r9
 8006276:	f000 f8ee 	bl	8006456 <__malloc_unlock>
 800627a:	e0d8      	b.n	800642e <_malloc_r+0x41a>
 800627c:	463e      	mov	r6, r7
 800627e:	e7d0      	b.n	8006222 <_malloc_r+0x20e>
 8006280:	f10c 0c01 	add.w	ip, ip, #1
 8006284:	f01c 0f03 	tst.w	ip, #3
 8006288:	f10a 0a08 	add.w	sl, sl, #8
 800628c:	d1c7      	bne.n	800621e <_malloc_r+0x20a>
 800628e:	0798      	lsls	r0, r3, #30
 8006290:	d104      	bne.n	800629c <_malloc_r+0x288>
 8006292:	686b      	ldr	r3, [r5, #4]
 8006294:	ea23 0302 	bic.w	r3, r3, r2
 8006298:	606b      	str	r3, [r5, #4]
 800629a:	e005      	b.n	80062a8 <_malloc_r+0x294>
 800629c:	f858 0908 	ldr.w	r0, [r8], #-8
 80062a0:	4580      	cmp	r8, r0
 80062a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80062a6:	d0f2      	beq.n	800628e <_malloc_r+0x27a>
 80062a8:	6868      	ldr	r0, [r5, #4]
 80062aa:	0052      	lsls	r2, r2, #1
 80062ac:	4282      	cmp	r2, r0
 80062ae:	d809      	bhi.n	80062c4 <_malloc_r+0x2b0>
 80062b0:	b142      	cbz	r2, 80062c4 <_malloc_r+0x2b0>
 80062b2:	4663      	mov	r3, ip
 80062b4:	4202      	tst	r2, r0
 80062b6:	d1ae      	bne.n	8006216 <_malloc_r+0x202>
 80062b8:	3304      	adds	r3, #4
 80062ba:	0052      	lsls	r2, r2, #1
 80062bc:	e7fa      	b.n	80062b4 <_malloc_r+0x2a0>
 80062be:	bf00      	nop
 80062c0:	20000190 	.word	0x20000190
 80062c4:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80062c8:	f8db 6004 	ldr.w	r6, [fp, #4]
 80062cc:	f026 0603 	bic.w	r6, r6, #3
 80062d0:	42b4      	cmp	r4, r6
 80062d2:	d803      	bhi.n	80062dc <_malloc_r+0x2c8>
 80062d4:	1b33      	subs	r3, r6, r4
 80062d6:	2b0f      	cmp	r3, #15
 80062d8:	f300 809c 	bgt.w	8006414 <_malloc_r+0x400>
 80062dc:	4a56      	ldr	r2, [pc, #344]	; (8006438 <_malloc_r+0x424>)
 80062de:	4957      	ldr	r1, [pc, #348]	; (800643c <_malloc_r+0x428>)
 80062e0:	6812      	ldr	r2, [r2, #0]
 80062e2:	6808      	ldr	r0, [r1, #0]
 80062e4:	9101      	str	r1, [sp, #4]
 80062e6:	f102 0810 	add.w	r8, r2, #16
 80062ea:	4a55      	ldr	r2, [pc, #340]	; (8006440 <_malloc_r+0x42c>)
 80062ec:	9203      	str	r2, [sp, #12]
 80062ee:	3001      	adds	r0, #1
 80062f0:	bf18      	it	ne
 80062f2:	f102 31ff 	addne.w	r1, r2, #4294967295
 80062f6:	44a0      	add	r8, r4
 80062f8:	bf1e      	ittt	ne
 80062fa:	4488      	addne	r8, r1
 80062fc:	4251      	negne	r1, r2
 80062fe:	ea01 0808 	andne.w	r8, r1, r8
 8006302:	eb0b 0306 	add.w	r3, fp, r6
 8006306:	4641      	mov	r1, r8
 8006308:	4648      	mov	r0, r9
 800630a:	9302      	str	r3, [sp, #8]
 800630c:	f000 f8de 	bl	80064cc <_sbrk_r>
 8006310:	1c42      	adds	r2, r0, #1
 8006312:	4607      	mov	r7, r0
 8006314:	d06f      	beq.n	80063f6 <_malloc_r+0x3e2>
 8006316:	9b02      	ldr	r3, [sp, #8]
 8006318:	9a03      	ldr	r2, [sp, #12]
 800631a:	4283      	cmp	r3, r0
 800631c:	d901      	bls.n	8006322 <_malloc_r+0x30e>
 800631e:	45ab      	cmp	fp, r5
 8006320:	d169      	bne.n	80063f6 <_malloc_r+0x3e2>
 8006322:	f8df a128 	ldr.w	sl, [pc, #296]	; 800644c <_malloc_r+0x438>
 8006326:	f8df c128 	ldr.w	ip, [pc, #296]	; 8006450 <_malloc_r+0x43c>
 800632a:	f8da 0000 	ldr.w	r0, [sl]
 800632e:	42bb      	cmp	r3, r7
 8006330:	4440      	add	r0, r8
 8006332:	f8ca 0000 	str.w	r0, [sl]
 8006336:	d108      	bne.n	800634a <_malloc_r+0x336>
 8006338:	ea13 0f0c 	tst.w	r3, ip
 800633c:	d105      	bne.n	800634a <_malloc_r+0x336>
 800633e:	68ab      	ldr	r3, [r5, #8]
 8006340:	4446      	add	r6, r8
 8006342:	f046 0601 	orr.w	r6, r6, #1
 8006346:	605e      	str	r6, [r3, #4]
 8006348:	e049      	b.n	80063de <_malloc_r+0x3ca>
 800634a:	9901      	ldr	r1, [sp, #4]
 800634c:	f8d1 e000 	ldr.w	lr, [r1]
 8006350:	f1be 3fff 	cmp.w	lr, #4294967295
 8006354:	bf15      	itete	ne
 8006356:	1afb      	subne	r3, r7, r3
 8006358:	4b38      	ldreq	r3, [pc, #224]	; (800643c <_malloc_r+0x428>)
 800635a:	181b      	addne	r3, r3, r0
 800635c:	601f      	streq	r7, [r3, #0]
 800635e:	bf18      	it	ne
 8006360:	f8ca 3000 	strne.w	r3, [sl]
 8006364:	f017 0307 	ands.w	r3, r7, #7
 8006368:	bf1c      	itt	ne
 800636a:	f1c3 0308 	rsbne	r3, r3, #8
 800636e:	18ff      	addne	r7, r7, r3
 8006370:	44b8      	add	r8, r7
 8006372:	441a      	add	r2, r3
 8006374:	ea08 080c 	and.w	r8, r8, ip
 8006378:	ebc8 0802 	rsb	r8, r8, r2
 800637c:	4641      	mov	r1, r8
 800637e:	4648      	mov	r0, r9
 8006380:	f000 f8a4 	bl	80064cc <_sbrk_r>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	bf04      	itt	eq
 8006388:	4638      	moveq	r0, r7
 800638a:	f04f 0800 	moveq.w	r8, #0
 800638e:	f8da 3000 	ldr.w	r3, [sl]
 8006392:	60af      	str	r7, [r5, #8]
 8006394:	1bc2      	subs	r2, r0, r7
 8006396:	4442      	add	r2, r8
 8006398:	4443      	add	r3, r8
 800639a:	f042 0201 	orr.w	r2, r2, #1
 800639e:	45ab      	cmp	fp, r5
 80063a0:	f8ca 3000 	str.w	r3, [sl]
 80063a4:	607a      	str	r2, [r7, #4]
 80063a6:	d01a      	beq.n	80063de <_malloc_r+0x3ca>
 80063a8:	2e0f      	cmp	r6, #15
 80063aa:	d802      	bhi.n	80063b2 <_malloc_r+0x39e>
 80063ac:	2301      	movs	r3, #1
 80063ae:	607b      	str	r3, [r7, #4]
 80063b0:	e021      	b.n	80063f6 <_malloc_r+0x3e2>
 80063b2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80063b6:	3e0c      	subs	r6, #12
 80063b8:	f026 0607 	bic.w	r6, r6, #7
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	4333      	orrs	r3, r6
 80063c2:	f8cb 3004 	str.w	r3, [fp, #4]
 80063c6:	eb0b 0306 	add.w	r3, fp, r6
 80063ca:	2205      	movs	r2, #5
 80063cc:	2e0f      	cmp	r6, #15
 80063ce:	605a      	str	r2, [r3, #4]
 80063d0:	609a      	str	r2, [r3, #8]
 80063d2:	d904      	bls.n	80063de <_malloc_r+0x3ca>
 80063d4:	f10b 0108 	add.w	r1, fp, #8
 80063d8:	4648      	mov	r0, r9
 80063da:	f000 f8dd 	bl	8006598 <_free_r>
 80063de:	4a19      	ldr	r2, [pc, #100]	; (8006444 <_malloc_r+0x430>)
 80063e0:	f8da 3000 	ldr.w	r3, [sl]
 80063e4:	6811      	ldr	r1, [r2, #0]
 80063e6:	428b      	cmp	r3, r1
 80063e8:	bf88      	it	hi
 80063ea:	6013      	strhi	r3, [r2, #0]
 80063ec:	4a16      	ldr	r2, [pc, #88]	; (8006448 <_malloc_r+0x434>)
 80063ee:	6811      	ldr	r1, [r2, #0]
 80063f0:	428b      	cmp	r3, r1
 80063f2:	bf88      	it	hi
 80063f4:	6013      	strhi	r3, [r2, #0]
 80063f6:	68ab      	ldr	r3, [r5, #8]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	f022 0203 	bic.w	r2, r2, #3
 80063fe:	4294      	cmp	r4, r2
 8006400:	eba2 0304 	sub.w	r3, r2, r4
 8006404:	d801      	bhi.n	800640a <_malloc_r+0x3f6>
 8006406:	2b0f      	cmp	r3, #15
 8006408:	dc04      	bgt.n	8006414 <_malloc_r+0x400>
 800640a:	4648      	mov	r0, r9
 800640c:	f000 f823 	bl	8006456 <__malloc_unlock>
 8006410:	2600      	movs	r6, #0
 8006412:	e00c      	b.n	800642e <_malloc_r+0x41a>
 8006414:	68ae      	ldr	r6, [r5, #8]
 8006416:	f044 0201 	orr.w	r2, r4, #1
 800641a:	4434      	add	r4, r6
 800641c:	f043 0301 	orr.w	r3, r3, #1
 8006420:	6072      	str	r2, [r6, #4]
 8006422:	60ac      	str	r4, [r5, #8]
 8006424:	6063      	str	r3, [r4, #4]
 8006426:	4648      	mov	r0, r9
 8006428:	f000 f815 	bl	8006456 <__malloc_unlock>
 800642c:	3608      	adds	r6, #8
 800642e:	4630      	mov	r0, r6
 8006430:	b005      	add	sp, #20
 8006432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006436:	bf00      	nop
 8006438:	20004980 	.word	0x20004980
 800643c:	2000059c 	.word	0x2000059c
 8006440:	00000080 	.word	0x00000080
 8006444:	2000497c 	.word	0x2000497c
 8006448:	20004978 	.word	0x20004978
 800644c:	20004984 	.word	0x20004984
 8006450:	0000007f 	.word	0x0000007f

08006454 <__malloc_lock>:
 8006454:	4770      	bx	lr

08006456 <__malloc_unlock>:
 8006456:	4770      	bx	lr

08006458 <rand>:
 8006458:	4b19      	ldr	r3, [pc, #100]	; (80064c0 <rand+0x68>)
 800645a:	b510      	push	{r4, lr}
 800645c:	681c      	ldr	r4, [r3, #0]
 800645e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006460:	b9d3      	cbnz	r3, 8006498 <rand+0x40>
 8006462:	2018      	movs	r0, #24
 8006464:	f7ff fdce 	bl	8006004 <malloc>
 8006468:	f243 330e 	movw	r3, #13070	; 0x330e
 800646c:	63a0      	str	r0, [r4, #56]	; 0x38
 800646e:	8003      	strh	r3, [r0, #0]
 8006470:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8006474:	8043      	strh	r3, [r0, #2]
 8006476:	f241 2334 	movw	r3, #4660	; 0x1234
 800647a:	8083      	strh	r3, [r0, #4]
 800647c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8006480:	80c3      	strh	r3, [r0, #6]
 8006482:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8006486:	8103      	strh	r3, [r0, #8]
 8006488:	2305      	movs	r3, #5
 800648a:	8143      	strh	r3, [r0, #10]
 800648c:	230b      	movs	r3, #11
 800648e:	8183      	strh	r3, [r0, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	2300      	movs	r3, #0
 8006494:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006498:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800649a:	4c0a      	ldr	r4, [pc, #40]	; (80064c4 <rand+0x6c>)
 800649c:	690b      	ldr	r3, [r1, #16]
 800649e:	6948      	ldr	r0, [r1, #20]
 80064a0:	4a09      	ldr	r2, [pc, #36]	; (80064c8 <rand+0x70>)
 80064a2:	435c      	muls	r4, r3
 80064a4:	fb02 4000 	mla	r0, r2, r0, r4
 80064a8:	fba3 2302 	umull	r2, r3, r3, r2
 80064ac:	3201      	adds	r2, #1
 80064ae:	4403      	add	r3, r0
 80064b0:	f143 0300 	adc.w	r3, r3, #0
 80064b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80064b8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80064bc:	bd10      	pop	{r4, pc}
 80064be:	bf00      	nop
 80064c0:	2000018c 	.word	0x2000018c
 80064c4:	5851f42d 	.word	0x5851f42d
 80064c8:	4c957f2d 	.word	0x4c957f2d

080064cc <_sbrk_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4c06      	ldr	r4, [pc, #24]	; (80064e8 <_sbrk_r+0x1c>)
 80064d0:	2300      	movs	r3, #0
 80064d2:	4605      	mov	r5, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	6023      	str	r3, [r4, #0]
 80064d8:	f001 fbb4 	bl	8007c44 <_sbrk>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_sbrk_r+0x1a>
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_sbrk_r+0x1a>
 80064e4:	602b      	str	r3, [r5, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	20004adc 	.word	0x20004adc

080064ec <_malloc_trim_r>:
 80064ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064f0:	4f25      	ldr	r7, [pc, #148]	; (8006588 <_malloc_trim_r+0x9c>)
 80064f2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006594 <_malloc_trim_r+0xa8>
 80064f6:	4689      	mov	r9, r1
 80064f8:	4606      	mov	r6, r0
 80064fa:	f7ff ffab 	bl	8006454 <__malloc_lock>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	685d      	ldr	r5, [r3, #4]
 8006502:	f1a8 0411 	sub.w	r4, r8, #17
 8006506:	f025 0503 	bic.w	r5, r5, #3
 800650a:	442c      	add	r4, r5
 800650c:	ebc9 0404 	rsb	r4, r9, r4
 8006510:	fbb4 f4f8 	udiv	r4, r4, r8
 8006514:	3c01      	subs	r4, #1
 8006516:	fb08 f404 	mul.w	r4, r8, r4
 800651a:	4544      	cmp	r4, r8
 800651c:	da05      	bge.n	800652a <_malloc_trim_r+0x3e>
 800651e:	4630      	mov	r0, r6
 8006520:	f7ff ff99 	bl	8006456 <__malloc_unlock>
 8006524:	2000      	movs	r0, #0
 8006526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800652a:	2100      	movs	r1, #0
 800652c:	4630      	mov	r0, r6
 800652e:	f7ff ffcd 	bl	80064cc <_sbrk_r>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	442b      	add	r3, r5
 8006536:	4298      	cmp	r0, r3
 8006538:	d1f1      	bne.n	800651e <_malloc_trim_r+0x32>
 800653a:	4261      	negs	r1, r4
 800653c:	4630      	mov	r0, r6
 800653e:	f7ff ffc5 	bl	80064cc <_sbrk_r>
 8006542:	3001      	adds	r0, #1
 8006544:	d110      	bne.n	8006568 <_malloc_trim_r+0x7c>
 8006546:	2100      	movs	r1, #0
 8006548:	4630      	mov	r0, r6
 800654a:	f7ff ffbf 	bl	80064cc <_sbrk_r>
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	1a83      	subs	r3, r0, r2
 8006552:	2b0f      	cmp	r3, #15
 8006554:	dde3      	ble.n	800651e <_malloc_trim_r+0x32>
 8006556:	490d      	ldr	r1, [pc, #52]	; (800658c <_malloc_trim_r+0xa0>)
 8006558:	6809      	ldr	r1, [r1, #0]
 800655a:	1a40      	subs	r0, r0, r1
 800655c:	490c      	ldr	r1, [pc, #48]	; (8006590 <_malloc_trim_r+0xa4>)
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	6008      	str	r0, [r1, #0]
 8006564:	6053      	str	r3, [r2, #4]
 8006566:	e7da      	b.n	800651e <_malloc_trim_r+0x32>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4a09      	ldr	r2, [pc, #36]	; (8006590 <_malloc_trim_r+0xa4>)
 800656c:	1b2d      	subs	r5, r5, r4
 800656e:	f045 0501 	orr.w	r5, r5, #1
 8006572:	605d      	str	r5, [r3, #4]
 8006574:	6813      	ldr	r3, [r2, #0]
 8006576:	4630      	mov	r0, r6
 8006578:	1b1c      	subs	r4, r3, r4
 800657a:	6014      	str	r4, [r2, #0]
 800657c:	f7ff ff6b 	bl	8006456 <__malloc_unlock>
 8006580:	2001      	movs	r0, #1
 8006582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006586:	bf00      	nop
 8006588:	20000190 	.word	0x20000190
 800658c:	2000059c 	.word	0x2000059c
 8006590:	20004984 	.word	0x20004984
 8006594:	00000080 	.word	0x00000080

08006598 <_free_r>:
 8006598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800659c:	4604      	mov	r4, r0
 800659e:	4688      	mov	r8, r1
 80065a0:	2900      	cmp	r1, #0
 80065a2:	f000 80ad 	beq.w	8006700 <_free_r+0x168>
 80065a6:	f7ff ff55 	bl	8006454 <__malloc_lock>
 80065aa:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80065ae:	4d55      	ldr	r5, [pc, #340]	; (8006704 <_free_r+0x16c>)
 80065b0:	f022 0001 	bic.w	r0, r2, #1
 80065b4:	f1a8 0308 	sub.w	r3, r8, #8
 80065b8:	181f      	adds	r7, r3, r0
 80065ba:	68a9      	ldr	r1, [r5, #8]
 80065bc:	687e      	ldr	r6, [r7, #4]
 80065be:	428f      	cmp	r7, r1
 80065c0:	f026 0603 	bic.w	r6, r6, #3
 80065c4:	f002 0201 	and.w	r2, r2, #1
 80065c8:	d11b      	bne.n	8006602 <_free_r+0x6a>
 80065ca:	4430      	add	r0, r6
 80065cc:	b93a      	cbnz	r2, 80065de <_free_r+0x46>
 80065ce:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80065d2:	1a9b      	subs	r3, r3, r2
 80065d4:	4410      	add	r0, r2
 80065d6:	6899      	ldr	r1, [r3, #8]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	60ca      	str	r2, [r1, #12]
 80065dc:	6091      	str	r1, [r2, #8]
 80065de:	f040 0201 	orr.w	r2, r0, #1
 80065e2:	605a      	str	r2, [r3, #4]
 80065e4:	60ab      	str	r3, [r5, #8]
 80065e6:	4b48      	ldr	r3, [pc, #288]	; (8006708 <_free_r+0x170>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4298      	cmp	r0, r3
 80065ec:	d304      	bcc.n	80065f8 <_free_r+0x60>
 80065ee:	4b47      	ldr	r3, [pc, #284]	; (800670c <_free_r+0x174>)
 80065f0:	4620      	mov	r0, r4
 80065f2:	6819      	ldr	r1, [r3, #0]
 80065f4:	f7ff ff7a 	bl	80064ec <_malloc_trim_r>
 80065f8:	4620      	mov	r0, r4
 80065fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065fe:	f7ff bf2a 	b.w	8006456 <__malloc_unlock>
 8006602:	607e      	str	r6, [r7, #4]
 8006604:	b97a      	cbnz	r2, 8006626 <_free_r+0x8e>
 8006606:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800660a:	1a5b      	subs	r3, r3, r1
 800660c:	4408      	add	r0, r1
 800660e:	6899      	ldr	r1, [r3, #8]
 8006610:	f105 0e08 	add.w	lr, r5, #8
 8006614:	4571      	cmp	r1, lr
 8006616:	d008      	beq.n	800662a <_free_r+0x92>
 8006618:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800661c:	f8c1 e00c 	str.w	lr, [r1, #12]
 8006620:	f8ce 1008 	str.w	r1, [lr, #8]
 8006624:	e002      	b.n	800662c <_free_r+0x94>
 8006626:	2200      	movs	r2, #0
 8006628:	e000      	b.n	800662c <_free_r+0x94>
 800662a:	2201      	movs	r2, #1
 800662c:	19b9      	adds	r1, r7, r6
 800662e:	6849      	ldr	r1, [r1, #4]
 8006630:	07c9      	lsls	r1, r1, #31
 8006632:	d40e      	bmi.n	8006652 <_free_r+0xba>
 8006634:	4430      	add	r0, r6
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	b942      	cbnz	r2, 800664c <_free_r+0xb4>
 800663a:	4e35      	ldr	r6, [pc, #212]	; (8006710 <_free_r+0x178>)
 800663c:	42b1      	cmp	r1, r6
 800663e:	d105      	bne.n	800664c <_free_r+0xb4>
 8006640:	616b      	str	r3, [r5, #20]
 8006642:	612b      	str	r3, [r5, #16]
 8006644:	2201      	movs	r2, #1
 8006646:	60d9      	str	r1, [r3, #12]
 8006648:	6099      	str	r1, [r3, #8]
 800664a:	e002      	b.n	8006652 <_free_r+0xba>
 800664c:	68fe      	ldr	r6, [r7, #12]
 800664e:	60ce      	str	r6, [r1, #12]
 8006650:	60b1      	str	r1, [r6, #8]
 8006652:	f040 0101 	orr.w	r1, r0, #1
 8006656:	6059      	str	r1, [r3, #4]
 8006658:	5018      	str	r0, [r3, r0]
 800665a:	2a00      	cmp	r2, #0
 800665c:	d1cc      	bne.n	80065f8 <_free_r+0x60>
 800665e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006662:	d212      	bcs.n	800668a <_free_r+0xf2>
 8006664:	08c0      	lsrs	r0, r0, #3
 8006666:	1081      	asrs	r1, r0, #2
 8006668:	2201      	movs	r2, #1
 800666a:	fa02 f101 	lsl.w	r1, r2, r1
 800666e:	686a      	ldr	r2, [r5, #4]
 8006670:	3001      	adds	r0, #1
 8006672:	430a      	orrs	r2, r1
 8006674:	606a      	str	r2, [r5, #4]
 8006676:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800667a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800667e:	6099      	str	r1, [r3, #8]
 8006680:	3a08      	subs	r2, #8
 8006682:	60da      	str	r2, [r3, #12]
 8006684:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006688:	e038      	b.n	80066fc <_free_r+0x164>
 800668a:	0a42      	lsrs	r2, r0, #9
 800668c:	2a04      	cmp	r2, #4
 800668e:	d802      	bhi.n	8006696 <_free_r+0xfe>
 8006690:	0982      	lsrs	r2, r0, #6
 8006692:	3238      	adds	r2, #56	; 0x38
 8006694:	e015      	b.n	80066c2 <_free_r+0x12a>
 8006696:	2a14      	cmp	r2, #20
 8006698:	d801      	bhi.n	800669e <_free_r+0x106>
 800669a:	325b      	adds	r2, #91	; 0x5b
 800669c:	e011      	b.n	80066c2 <_free_r+0x12a>
 800669e:	2a54      	cmp	r2, #84	; 0x54
 80066a0:	d802      	bhi.n	80066a8 <_free_r+0x110>
 80066a2:	0b02      	lsrs	r2, r0, #12
 80066a4:	326e      	adds	r2, #110	; 0x6e
 80066a6:	e00c      	b.n	80066c2 <_free_r+0x12a>
 80066a8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80066ac:	d802      	bhi.n	80066b4 <_free_r+0x11c>
 80066ae:	0bc2      	lsrs	r2, r0, #15
 80066b0:	3277      	adds	r2, #119	; 0x77
 80066b2:	e006      	b.n	80066c2 <_free_r+0x12a>
 80066b4:	f240 5154 	movw	r1, #1364	; 0x554
 80066b8:	428a      	cmp	r2, r1
 80066ba:	bf9a      	itte	ls
 80066bc:	0c82      	lsrls	r2, r0, #18
 80066be:	327c      	addls	r2, #124	; 0x7c
 80066c0:	227e      	movhi	r2, #126	; 0x7e
 80066c2:	1c51      	adds	r1, r2, #1
 80066c4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80066c8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80066cc:	4f0d      	ldr	r7, [pc, #52]	; (8006704 <_free_r+0x16c>)
 80066ce:	428e      	cmp	r6, r1
 80066d0:	d10b      	bne.n	80066ea <_free_r+0x152>
 80066d2:	2101      	movs	r1, #1
 80066d4:	1092      	asrs	r2, r2, #2
 80066d6:	fa01 f202 	lsl.w	r2, r1, r2
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	4311      	orrs	r1, r2
 80066de:	6079      	str	r1, [r7, #4]
 80066e0:	4631      	mov	r1, r6
 80066e2:	e008      	b.n	80066f6 <_free_r+0x15e>
 80066e4:	6889      	ldr	r1, [r1, #8]
 80066e6:	428e      	cmp	r6, r1
 80066e8:	d004      	beq.n	80066f4 <_free_r+0x15c>
 80066ea:	684a      	ldr	r2, [r1, #4]
 80066ec:	f022 0203 	bic.w	r2, r2, #3
 80066f0:	4290      	cmp	r0, r2
 80066f2:	d3f7      	bcc.n	80066e4 <_free_r+0x14c>
 80066f4:	68ce      	ldr	r6, [r1, #12]
 80066f6:	60de      	str	r6, [r3, #12]
 80066f8:	6099      	str	r1, [r3, #8]
 80066fa:	60b3      	str	r3, [r6, #8]
 80066fc:	60cb      	str	r3, [r1, #12]
 80066fe:	e77b      	b.n	80065f8 <_free_r+0x60>
 8006700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006704:	20000190 	.word	0x20000190
 8006708:	20000598 	.word	0x20000598
 800670c:	20004980 	.word	0x20004980
 8006710:	20000198 	.word	0x20000198

08006714 <cosf>:
 8006714:	ee10 3a10 	vmov	r3, s0
 8006718:	b507      	push	{r0, r1, r2, lr}
 800671a:	4a1c      	ldr	r2, [pc, #112]	; (800678c <cosf+0x78>)
 800671c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006720:	4293      	cmp	r3, r2
 8006722:	dc02      	bgt.n	800672a <cosf+0x16>
 8006724:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8006790 <cosf+0x7c>
 8006728:	e013      	b.n	8006752 <cosf+0x3e>
 800672a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800672e:	db02      	blt.n	8006736 <cosf+0x22>
 8006730:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006734:	e027      	b.n	8006786 <cosf+0x72>
 8006736:	4668      	mov	r0, sp
 8006738:	f000 fcb0 	bl	800709c <__ieee754_rem_pio2f>
 800673c:	f000 0003 	and.w	r0, r0, #3
 8006740:	2801      	cmp	r0, #1
 8006742:	d009      	beq.n	8006758 <cosf+0x44>
 8006744:	2802      	cmp	r0, #2
 8006746:	d00e      	beq.n	8006766 <cosf+0x52>
 8006748:	b9b0      	cbnz	r0, 8006778 <cosf+0x64>
 800674a:	eddd 0a01 	vldr	s1, [sp, #4]
 800674e:	ed9d 0a00 	vldr	s0, [sp]
 8006752:	f000 fe15 	bl	8007380 <__kernel_cosf>
 8006756:	e016      	b.n	8006786 <cosf+0x72>
 8006758:	eddd 0a01 	vldr	s1, [sp, #4]
 800675c:	ed9d 0a00 	vldr	s0, [sp]
 8006760:	f001 f8d2 	bl	8007908 <__kernel_sinf>
 8006764:	e005      	b.n	8006772 <cosf+0x5e>
 8006766:	eddd 0a01 	vldr	s1, [sp, #4]
 800676a:	ed9d 0a00 	vldr	s0, [sp]
 800676e:	f000 fe07 	bl	8007380 <__kernel_cosf>
 8006772:	eeb1 0a40 	vneg.f32	s0, s0
 8006776:	e006      	b.n	8006786 <cosf+0x72>
 8006778:	2001      	movs	r0, #1
 800677a:	eddd 0a01 	vldr	s1, [sp, #4]
 800677e:	ed9d 0a00 	vldr	s0, [sp]
 8006782:	f001 f8c1 	bl	8007908 <__kernel_sinf>
 8006786:	b003      	add	sp, #12
 8006788:	f85d fb04 	ldr.w	pc, [sp], #4
 800678c:	3f490fd8 	.word	0x3f490fd8
 8006790:	00000000 	.word	0x00000000

08006794 <sinf>:
 8006794:	ee10 3a10 	vmov	r3, s0
 8006798:	b507      	push	{r0, r1, r2, lr}
 800679a:	4a1d      	ldr	r2, [pc, #116]	; (8006810 <sinf+0x7c>)
 800679c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067a0:	4293      	cmp	r3, r2
 80067a2:	dc03      	bgt.n	80067ac <sinf+0x18>
 80067a4:	2000      	movs	r0, #0
 80067a6:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8006814 <sinf+0x80>
 80067aa:	e014      	b.n	80067d6 <sinf+0x42>
 80067ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80067b0:	db02      	blt.n	80067b8 <sinf+0x24>
 80067b2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80067b6:	e028      	b.n	800680a <sinf+0x76>
 80067b8:	4668      	mov	r0, sp
 80067ba:	f000 fc6f 	bl	800709c <__ieee754_rem_pio2f>
 80067be:	f000 0003 	and.w	r0, r0, #3
 80067c2:	2801      	cmp	r0, #1
 80067c4:	d00a      	beq.n	80067dc <sinf+0x48>
 80067c6:	2802      	cmp	r0, #2
 80067c8:	d00f      	beq.n	80067ea <sinf+0x56>
 80067ca:	b9b0      	cbnz	r0, 80067fa <sinf+0x66>
 80067cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80067d0:	ed9d 0a00 	vldr	s0, [sp]
 80067d4:	2001      	movs	r0, #1
 80067d6:	f001 f897 	bl	8007908 <__kernel_sinf>
 80067da:	e016      	b.n	800680a <sinf+0x76>
 80067dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80067e0:	ed9d 0a00 	vldr	s0, [sp]
 80067e4:	f000 fdcc 	bl	8007380 <__kernel_cosf>
 80067e8:	e00f      	b.n	800680a <sinf+0x76>
 80067ea:	2001      	movs	r0, #1
 80067ec:	eddd 0a01 	vldr	s1, [sp, #4]
 80067f0:	ed9d 0a00 	vldr	s0, [sp]
 80067f4:	f001 f888 	bl	8007908 <__kernel_sinf>
 80067f8:	e005      	b.n	8006806 <sinf+0x72>
 80067fa:	eddd 0a01 	vldr	s1, [sp, #4]
 80067fe:	ed9d 0a00 	vldr	s0, [sp]
 8006802:	f000 fdbd 	bl	8007380 <__kernel_cosf>
 8006806:	eeb1 0a40 	vneg.f32	s0, s0
 800680a:	b003      	add	sp, #12
 800680c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006810:	3f490fd8 	.word	0x3f490fd8
 8006814:	00000000 	.word	0x00000000

08006818 <powf>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	ed2d 8b04 	vpush	{d8-d9}
 800681e:	4cb5      	ldr	r4, [pc, #724]	; (8006af4 <powf+0x2dc>)
 8006820:	b08a      	sub	sp, #40	; 0x28
 8006822:	eeb0 9a40 	vmov.f32	s18, s0
 8006826:	eef0 8a60 	vmov.f32	s17, s1
 800682a:	f000 f971 	bl	8006b10 <__ieee754_powf>
 800682e:	f994 5000 	ldrsb.w	r5, [r4]
 8006832:	1c6b      	adds	r3, r5, #1
 8006834:	eeb0 8a40 	vmov.f32	s16, s0
 8006838:	4626      	mov	r6, r4
 800683a:	f000 8153 	beq.w	8006ae4 <powf+0x2cc>
 800683e:	eef4 8a68 	vcmp.f32	s17, s17
 8006842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006846:	f180 814d 	bvs.w	8006ae4 <powf+0x2cc>
 800684a:	eeb4 9a49 	vcmp.f32	s18, s18
 800684e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006852:	d71f      	bvc.n	8006894 <powf+0x7c>
 8006854:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800685c:	f040 8142 	bne.w	8006ae4 <powf+0x2cc>
 8006860:	2301      	movs	r3, #1
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	4ba4      	ldr	r3, [pc, #656]	; (8006af8 <powf+0x2e0>)
 8006866:	9301      	str	r3, [sp, #4]
 8006868:	ee19 0a10 	vmov	r0, s18
 800686c:	2300      	movs	r3, #0
 800686e:	9308      	str	r3, [sp, #32]
 8006870:	f7f9 fe0e 	bl	8000490 <__aeabi_f2d>
 8006874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006878:	ee18 0a90 	vmov	r0, s17
 800687c:	f7f9 fe08 	bl	8000490 <__aeabi_f2d>
 8006880:	4b9e      	ldr	r3, [pc, #632]	; (8006afc <powf+0x2e4>)
 8006882:	2200      	movs	r2, #0
 8006884:	2d02      	cmp	r5, #2
 8006886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800688a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800688e:	f040 808d 	bne.w	80069ac <powf+0x194>
 8006892:	e122      	b.n	8006ada <powf+0x2c2>
 8006894:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689c:	d14c      	bne.n	8006938 <powf+0x120>
 800689e:	eef5 8a40 	vcmp.f32	s17, #0.0
 80068a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a6:	d11c      	bne.n	80068e2 <powf+0xca>
 80068a8:	2301      	movs	r3, #1
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	4b92      	ldr	r3, [pc, #584]	; (8006af8 <powf+0x2e0>)
 80068ae:	9301      	str	r3, [sp, #4]
 80068b0:	ee19 0a10 	vmov	r0, s18
 80068b4:	2300      	movs	r3, #0
 80068b6:	9308      	str	r3, [sp, #32]
 80068b8:	f7f9 fdea 	bl	8000490 <__aeabi_f2d>
 80068bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068c0:	ee18 0a90 	vmov	r0, s17
 80068c4:	f7f9 fde4 	bl	8000490 <__aeabi_f2d>
 80068c8:	2200      	movs	r2, #0
 80068ca:	2300      	movs	r3, #0
 80068cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80068d4:	2d00      	cmp	r5, #0
 80068d6:	d069      	beq.n	80069ac <powf+0x194>
 80068d8:	4b88      	ldr	r3, [pc, #544]	; (8006afc <powf+0x2e4>)
 80068da:	2200      	movs	r2, #0
 80068dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80068e0:	e0f5      	b.n	8006ace <powf+0x2b6>
 80068e2:	eeb0 0a68 	vmov.f32	s0, s17
 80068e6:	f001 f8ea 	bl	8007abe <finitef>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	f000 80fa 	beq.w	8006ae4 <powf+0x2cc>
 80068f0:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80068f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f8:	f140 80f4 	bpl.w	8006ae4 <powf+0x2cc>
 80068fc:	2301      	movs	r3, #1
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	4b7d      	ldr	r3, [pc, #500]	; (8006af8 <powf+0x2e0>)
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	ee19 0a10 	vmov	r0, s18
 8006908:	2300      	movs	r3, #0
 800690a:	9308      	str	r3, [sp, #32]
 800690c:	f7f9 fdc0 	bl	8000490 <__aeabi_f2d>
 8006910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006914:	ee18 0a90 	vmov	r0, s17
 8006918:	f7f9 fdba 	bl	8000490 <__aeabi_f2d>
 800691c:	f994 3000 	ldrsb.w	r3, [r4]
 8006920:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006924:	b913      	cbnz	r3, 800692c <powf+0x114>
 8006926:	2200      	movs	r2, #0
 8006928:	2300      	movs	r3, #0
 800692a:	e034      	b.n	8006996 <powf+0x17e>
 800692c:	4974      	ldr	r1, [pc, #464]	; (8006b00 <powf+0x2e8>)
 800692e:	2000      	movs	r0, #0
 8006930:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006934:	2b02      	cmp	r3, #2
 8006936:	e038      	b.n	80069aa <powf+0x192>
 8006938:	f001 f8c1 	bl	8007abe <finitef>
 800693c:	4605      	mov	r5, r0
 800693e:	2800      	cmp	r0, #0
 8006940:	f040 8099 	bne.w	8006a76 <powf+0x25e>
 8006944:	eeb0 0a49 	vmov.f32	s0, s18
 8006948:	f001 f8b9 	bl	8007abe <finitef>
 800694c:	2800      	cmp	r0, #0
 800694e:	f000 8092 	beq.w	8006a76 <powf+0x25e>
 8006952:	eeb0 0a68 	vmov.f32	s0, s17
 8006956:	f001 f8b2 	bl	8007abe <finitef>
 800695a:	2800      	cmp	r0, #0
 800695c:	f000 808b 	beq.w	8006a76 <powf+0x25e>
 8006960:	eeb4 8a48 	vcmp.f32	s16, s16
 8006964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006968:	f994 4000 	ldrsb.w	r4, [r4]
 800696c:	4b62      	ldr	r3, [pc, #392]	; (8006af8 <powf+0x2e0>)
 800696e:	d727      	bvc.n	80069c0 <powf+0x1a8>
 8006970:	2201      	movs	r2, #1
 8006972:	ee19 0a10 	vmov	r0, s18
 8006976:	e88d 000c 	stmia.w	sp, {r2, r3}
 800697a:	9508      	str	r5, [sp, #32]
 800697c:	f7f9 fd88 	bl	8000490 <__aeabi_f2d>
 8006980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006984:	ee18 0a90 	vmov	r0, s17
 8006988:	f7f9 fd82 	bl	8000490 <__aeabi_f2d>
 800698c:	2200      	movs	r2, #0
 800698e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006992:	2300      	movs	r3, #0
 8006994:	b914      	cbnz	r4, 800699c <powf+0x184>
 8006996:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800699a:	e007      	b.n	80069ac <powf+0x194>
 800699c:	4610      	mov	r0, r2
 800699e:	4619      	mov	r1, r3
 80069a0:	f7f9 fef4 	bl	800078c <__aeabi_ddiv>
 80069a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069a8:	2c02      	cmp	r4, #2
 80069aa:	d005      	beq.n	80069b8 <powf+0x1a0>
 80069ac:	4668      	mov	r0, sp
 80069ae:	f000 fff3 	bl	8007998 <matherr>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	f040 808b 	bne.w	8006ace <powf+0x2b6>
 80069b8:	f001 f93e 	bl	8007c38 <__errno>
 80069bc:	2321      	movs	r3, #33	; 0x21
 80069be:	e085      	b.n	8006acc <powf+0x2b4>
 80069c0:	2203      	movs	r2, #3
 80069c2:	ee19 0a10 	vmov	r0, s18
 80069c6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80069ca:	9508      	str	r5, [sp, #32]
 80069cc:	f7f9 fd60 	bl	8000490 <__aeabi_f2d>
 80069d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069d4:	ee18 0a90 	vmov	r0, s17
 80069d8:	f7f9 fd5a 	bl	8000490 <__aeabi_f2d>
 80069dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069e0:	bb14      	cbnz	r4, 8006a28 <powf+0x210>
 80069e2:	4b48      	ldr	r3, [pc, #288]	; (8006b04 <powf+0x2ec>)
 80069e4:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80069e8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80069ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80069f4:	d563      	bpl.n	8006abe <powf+0x2a6>
 80069f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80069fa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80069fe:	ee17 0a90 	vmov	r0, s15
 8006a02:	f7f9 fd45 	bl	8000490 <__aeabi_f2d>
 8006a06:	4604      	mov	r4, r0
 8006a08:	460d      	mov	r5, r1
 8006a0a:	ec45 4b10 	vmov	d0, r4, r5
 8006a0e:	f000 ffc5 	bl	800799c <rint>
 8006a12:	4620      	mov	r0, r4
 8006a14:	ec53 2b10 	vmov	r2, r3, d0
 8006a18:	4629      	mov	r1, r5
 8006a1a:	f7f9 fff5 	bl	8000a08 <__aeabi_dcmpeq>
 8006a1e:	bb28      	cbnz	r0, 8006a6c <powf+0x254>
 8006a20:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006a24:	4b38      	ldr	r3, [pc, #224]	; (8006b08 <powf+0x2f0>)
 8006a26:	e01f      	b.n	8006a68 <powf+0x250>
 8006a28:	4b38      	ldr	r3, [pc, #224]	; (8006b0c <powf+0x2f4>)
 8006a2a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8006a2e:	2200      	movs	r2, #0
 8006a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a38:	d518      	bpl.n	8006a6c <powf+0x254>
 8006a3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006a3e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006a42:	ee17 0a90 	vmov	r0, s15
 8006a46:	f7f9 fd23 	bl	8000490 <__aeabi_f2d>
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	460d      	mov	r5, r1
 8006a4e:	ec45 4b10 	vmov	d0, r4, r5
 8006a52:	f000 ffa3 	bl	800799c <rint>
 8006a56:	4620      	mov	r0, r4
 8006a58:	ec53 2b10 	vmov	r2, r3, d0
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	f7f9 ffd3 	bl	8000a08 <__aeabi_dcmpeq>
 8006a62:	b918      	cbnz	r0, 8006a6c <powf+0x254>
 8006a64:	4b26      	ldr	r3, [pc, #152]	; (8006b00 <powf+0x2e8>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a6c:	f996 3000 	ldrsb.w	r3, [r6]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d124      	bne.n	8006abe <powf+0x2a6>
 8006a74:	e027      	b.n	8006ac6 <powf+0x2ae>
 8006a76:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a7e:	d131      	bne.n	8006ae4 <powf+0x2cc>
 8006a80:	eeb0 0a49 	vmov.f32	s0, s18
 8006a84:	f001 f81b 	bl	8007abe <finitef>
 8006a88:	b360      	cbz	r0, 8006ae4 <powf+0x2cc>
 8006a8a:	eeb0 0a68 	vmov.f32	s0, s17
 8006a8e:	f001 f816 	bl	8007abe <finitef>
 8006a92:	b338      	cbz	r0, 8006ae4 <powf+0x2cc>
 8006a94:	2304      	movs	r3, #4
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	4b17      	ldr	r3, [pc, #92]	; (8006af8 <powf+0x2e0>)
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	ee19 0a10 	vmov	r0, s18
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	9308      	str	r3, [sp, #32]
 8006aa4:	f7f9 fcf4 	bl	8000490 <__aeabi_f2d>
 8006aa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aac:	ee18 0a90 	vmov	r0, s17
 8006ab0:	f7f9 fcee 	bl	8000490 <__aeabi_f2d>
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006aba:	2300      	movs	r3, #0
 8006abc:	e7d4      	b.n	8006a68 <powf+0x250>
 8006abe:	4668      	mov	r0, sp
 8006ac0:	f000 ff6a 	bl	8007998 <matherr>
 8006ac4:	b918      	cbnz	r0, 8006ace <powf+0x2b6>
 8006ac6:	f001 f8b7 	bl	8007c38 <__errno>
 8006aca:	2322      	movs	r3, #34	; 0x22
 8006acc:	6003      	str	r3, [r0, #0]
 8006ace:	9b08      	ldr	r3, [sp, #32]
 8006ad0:	b11b      	cbz	r3, 8006ada <powf+0x2c2>
 8006ad2:	f001 f8b1 	bl	8007c38 <__errno>
 8006ad6:	9b08      	ldr	r3, [sp, #32]
 8006ad8:	6003      	str	r3, [r0, #0]
 8006ada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ade:	f7f9 ffc5 	bl	8000a6c <__aeabi_d2f>
 8006ae2:	e001      	b.n	8006ae8 <powf+0x2d0>
 8006ae4:	ee18 0a10 	vmov	r0, s16
 8006ae8:	ee00 0a10 	vmov	s0, r0
 8006aec:	b00a      	add	sp, #40	; 0x28
 8006aee:	ecbd 8b04 	vpop	{d8-d9}
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	200005a0 	.word	0x200005a0
 8006af8:	080084e8 	.word	0x080084e8
 8006afc:	3ff00000 	.word	0x3ff00000
 8006b00:	fff00000 	.word	0xfff00000
 8006b04:	47efffff 	.word	0x47efffff
 8006b08:	c7efffff 	.word	0xc7efffff
 8006b0c:	7ff00000 	.word	0x7ff00000

08006b10 <__ieee754_powf>:
 8006b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b14:	ee10 5a90 	vmov	r5, s1
 8006b18:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8006b1c:	ed2d 8b02 	vpush	{d8}
 8006b20:	eeb0 8a40 	vmov.f32	s16, s0
 8006b24:	eef0 8a60 	vmov.f32	s17, s1
 8006b28:	f000 8298 	beq.w	800705c <__ieee754_powf+0x54c>
 8006b2c:	ee10 8a10 	vmov	r8, s0
 8006b30:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8006b34:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006b38:	dc06      	bgt.n	8006b48 <__ieee754_powf+0x38>
 8006b3a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006b3e:	dd0a      	ble.n	8006b56 <__ieee754_powf+0x46>
 8006b40:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006b44:	f000 828a 	beq.w	800705c <__ieee754_powf+0x54c>
 8006b48:	ecbd 8b02 	vpop	{d8}
 8006b4c:	48e2      	ldr	r0, [pc, #904]	; (8006ed8 <__ieee754_powf+0x3c8>)
 8006b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b52:	f001 b801 	b.w	8007b58 <nanf>
 8006b56:	f1b8 0f00 	cmp.w	r8, #0
 8006b5a:	da13      	bge.n	8006b84 <__ieee754_powf+0x74>
 8006b5c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006b60:	da12      	bge.n	8006b88 <__ieee754_powf+0x78>
 8006b62:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006b66:	db23      	blt.n	8006bb0 <__ieee754_powf+0xa0>
 8006b68:	15fb      	asrs	r3, r7, #23
 8006b6a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006b6e:	fa47 f603 	asr.w	r6, r7, r3
 8006b72:	fa06 f303 	lsl.w	r3, r6, r3
 8006b76:	429f      	cmp	r7, r3
 8006b78:	d11a      	bne.n	8006bb0 <__ieee754_powf+0xa0>
 8006b7a:	f006 0601 	and.w	r6, r6, #1
 8006b7e:	f1c6 0602 	rsb	r6, r6, #2
 8006b82:	e016      	b.n	8006bb2 <__ieee754_powf+0xa2>
 8006b84:	2600      	movs	r6, #0
 8006b86:	e000      	b.n	8006b8a <__ieee754_powf+0x7a>
 8006b88:	2602      	movs	r6, #2
 8006b8a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006b8e:	d110      	bne.n	8006bb2 <__ieee754_powf+0xa2>
 8006b90:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006b94:	f000 8262 	beq.w	800705c <__ieee754_powf+0x54c>
 8006b98:	dd05      	ble.n	8006ba6 <__ieee754_powf+0x96>
 8006b9a:	2d00      	cmp	r5, #0
 8006b9c:	f280 8261 	bge.w	8007062 <__ieee754_powf+0x552>
 8006ba0:	ed9f 0ace 	vldr	s0, [pc, #824]	; 8006edc <__ieee754_powf+0x3cc>
 8006ba4:	e262      	b.n	800706c <__ieee754_powf+0x55c>
 8006ba6:	2d00      	cmp	r5, #0
 8006ba8:	dafa      	bge.n	8006ba0 <__ieee754_powf+0x90>
 8006baa:	eeb1 0a68 	vneg.f32	s0, s17
 8006bae:	e25d      	b.n	800706c <__ieee754_powf+0x55c>
 8006bb0:	2600      	movs	r6, #0
 8006bb2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006bb6:	d107      	bne.n	8006bc8 <__ieee754_powf+0xb8>
 8006bb8:	2d00      	cmp	r5, #0
 8006bba:	f280 8255 	bge.w	8007068 <__ieee754_powf+0x558>
 8006bbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006bc2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006bc6:	e251      	b.n	800706c <__ieee754_powf+0x55c>
 8006bc8:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8006bcc:	d102      	bne.n	8006bd4 <__ieee754_powf+0xc4>
 8006bce:	ee28 0a08 	vmul.f32	s0, s16, s16
 8006bd2:	e24b      	b.n	800706c <__ieee754_powf+0x55c>
 8006bd4:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8006bd8:	eeb0 0a48 	vmov.f32	s0, s16
 8006bdc:	d108      	bne.n	8006bf0 <__ieee754_powf+0xe0>
 8006bde:	f1b8 0f00 	cmp.w	r8, #0
 8006be2:	db05      	blt.n	8006bf0 <__ieee754_powf+0xe0>
 8006be4:	ecbd 8b02 	vpop	{d8}
 8006be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bec:	f000 bb80 	b.w	80072f0 <__ieee754_sqrtf>
 8006bf0:	f000 ff5e 	bl	8007ab0 <fabsf>
 8006bf4:	b124      	cbz	r4, 8006c00 <__ieee754_powf+0xf0>
 8006bf6:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8006bfa:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006bfe:	d119      	bne.n	8006c34 <__ieee754_powf+0x124>
 8006c00:	2d00      	cmp	r5, #0
 8006c02:	bfbc      	itt	lt
 8006c04:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006c08:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006c0c:	f1b8 0f00 	cmp.w	r8, #0
 8006c10:	f280 822c 	bge.w	800706c <__ieee754_powf+0x55c>
 8006c14:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8006c18:	ea54 0306 	orrs.w	r3, r4, r6
 8006c1c:	d104      	bne.n	8006c28 <__ieee754_powf+0x118>
 8006c1e:	ee70 0a40 	vsub.f32	s1, s0, s0
 8006c22:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8006c26:	e221      	b.n	800706c <__ieee754_powf+0x55c>
 8006c28:	2e01      	cmp	r6, #1
 8006c2a:	f040 821f 	bne.w	800706c <__ieee754_powf+0x55c>
 8006c2e:	eeb1 0a40 	vneg.f32	s0, s0
 8006c32:	e21b      	b.n	800706c <__ieee754_powf+0x55c>
 8006c34:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8006c38:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c3c:	ea56 0308 	orrs.w	r3, r6, r8
 8006c40:	d104      	bne.n	8006c4c <__ieee754_powf+0x13c>
 8006c42:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006c46:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006c4a:	e20f      	b.n	800706c <__ieee754_powf+0x55c>
 8006c4c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006c50:	dd3e      	ble.n	8006cd0 <__ieee754_powf+0x1c0>
 8006c52:	4ba3      	ldr	r3, [pc, #652]	; (8006ee0 <__ieee754_powf+0x3d0>)
 8006c54:	429c      	cmp	r4, r3
 8006c56:	dc06      	bgt.n	8006c66 <__ieee754_powf+0x156>
 8006c58:	2d00      	cmp	r5, #0
 8006c5a:	daa1      	bge.n	8006ba0 <__ieee754_powf+0x90>
 8006c5c:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8006ee4 <__ieee754_powf+0x3d4>
 8006c60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006c64:	e202      	b.n	800706c <__ieee754_powf+0x55c>
 8006c66:	4ba0      	ldr	r3, [pc, #640]	; (8006ee8 <__ieee754_powf+0x3d8>)
 8006c68:	429c      	cmp	r4, r3
 8006c6a:	dd02      	ble.n	8006c72 <__ieee754_powf+0x162>
 8006c6c:	2d00      	cmp	r5, #0
 8006c6e:	dcf5      	bgt.n	8006c5c <__ieee754_powf+0x14c>
 8006c70:	e796      	b.n	8006ba0 <__ieee754_powf+0x90>
 8006c72:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006c76:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006c7a:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8006eec <__ieee754_powf+0x3dc>
 8006c7e:	eef1 6a40 	vneg.f32	s13, s0
 8006c82:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006c86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c8a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006c8e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006c92:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c9a:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8006ef0 <__ieee754_powf+0x3e0>
 8006c9e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8006ca2:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8006ef4 <__ieee754_powf+0x3e4>
 8006ca6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006caa:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8006ef8 <__ieee754_powf+0x3e8>
 8006cae:	eeb0 6a67 	vmov.f32	s12, s15
 8006cb2:	eea0 6a07 	vfma.f32	s12, s0, s14
 8006cb6:	ee16 3a10 	vmov	r3, s12
 8006cba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006cbe:	f023 030f 	bic.w	r3, r3, #15
 8006cc2:	ee06 3a10 	vmov	s12, r3
 8006cc6:	eea6 6a87 	vfma.f32	s12, s13, s14
 8006cca:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006cce:	e0cb      	b.n	8006e68 <__ieee754_powf+0x358>
 8006cd0:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8006cd4:	bfb8      	it	lt
 8006cd6:	eddf 7a89 	vldrlt	s15, [pc, #548]	; 8006efc <__ieee754_powf+0x3ec>
 8006cda:	4989      	ldr	r1, [pc, #548]	; (8006f00 <__ieee754_powf+0x3f0>)
 8006cdc:	bfbe      	ittt	lt
 8006cde:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8006ce2:	f06f 0217 	mvnlt.w	r2, #23
 8006ce6:	ee17 4a90 	vmovlt	r4, s15
 8006cea:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8006cee:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006cf2:	bfa8      	it	ge
 8006cf4:	2200      	movge	r2, #0
 8006cf6:	3b7f      	subs	r3, #127	; 0x7f
 8006cf8:	428c      	cmp	r4, r1
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f044 527e 	orr.w	r2, r4, #1065353216	; 0x3f800000
 8006d00:	dd05      	ble.n	8006d0e <__ieee754_powf+0x1fe>
 8006d02:	4980      	ldr	r1, [pc, #512]	; (8006f04 <__ieee754_powf+0x3f4>)
 8006d04:	428c      	cmp	r4, r1
 8006d06:	dd04      	ble.n	8006d12 <__ieee754_powf+0x202>
 8006d08:	3301      	adds	r3, #1
 8006d0a:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
 8006d0e:	2000      	movs	r0, #0
 8006d10:	e000      	b.n	8006d14 <__ieee754_powf+0x204>
 8006d12:	2001      	movs	r0, #1
 8006d14:	4c7c      	ldr	r4, [pc, #496]	; (8006f08 <__ieee754_powf+0x3f8>)
 8006d16:	0081      	lsls	r1, r0, #2
 8006d18:	440c      	add	r4, r1
 8006d1a:	ee07 2a10 	vmov	s14, r2
 8006d1e:	ed94 4a00 	vldr	s8, [r4]
 8006d22:	ee77 7a04 	vadd.f32	s15, s14, s8
 8006d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d2a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8006d2e:	1052      	asrs	r2, r2, #1
 8006d30:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006d34:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
 8006d38:	eb02 5240 	add.w	r2, r2, r0, lsl #21
 8006d3c:	ee77 5a44 	vsub.f32	s11, s14, s8
 8006d40:	ee06 2a90 	vmov	s13, r2
 8006d44:	ee65 7a86 	vmul.f32	s15, s11, s12
 8006d48:	ee17 4a90 	vmov	r4, s15
 8006d4c:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8006d50:	f024 040f 	bic.w	r4, r4, #15
 8006d54:	ee05 4a10 	vmov	s10, r4
 8006d58:	eef1 4a45 	vneg.f32	s9, s10
 8006d5c:	eee4 5aa6 	vfma.f32	s11, s9, s13
 8006d60:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8006d64:	ed9f 4a69 	vldr	s8, [pc, #420]	; 8006f0c <__ieee754_powf+0x3fc>
 8006d68:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006d6c:	ee37 7a85 	vadd.f32	s14, s15, s10
 8006d70:	eee4 5aa6 	vfma.f32	s11, s9, s13
 8006d74:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8006d78:	ee25 6a86 	vmul.f32	s12, s11, s12
 8006d7c:	eddf 5a64 	vldr	s11, [pc, #400]	; 8006f10 <__ieee754_powf+0x400>
 8006d80:	eee6 5a84 	vfma.f32	s11, s13, s8
 8006d84:	ed9f 4a63 	vldr	s8, [pc, #396]	; 8006f14 <__ieee754_powf+0x404>
 8006d88:	eea6 4aa5 	vfma.f32	s8, s13, s11
 8006d8c:	eddf 5a57 	vldr	s11, [pc, #348]	; 8006eec <__ieee754_powf+0x3dc>
 8006d90:	eee6 5a84 	vfma.f32	s11, s13, s8
 8006d94:	ed9f 4a60 	vldr	s8, [pc, #384]	; 8006f18 <__ieee754_powf+0x408>
 8006d98:	eea6 4aa5 	vfma.f32	s8, s13, s11
 8006d9c:	eddf 5a5f 	vldr	s11, [pc, #380]	; 8006f1c <__ieee754_powf+0x40c>
 8006da0:	eee6 5a84 	vfma.f32	s11, s13, s8
 8006da4:	ee66 3aa6 	vmul.f32	s7, s13, s13
 8006da8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006dac:	eea3 7aa5 	vfma.f32	s14, s7, s11
 8006db0:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8006db4:	eef0 6a65 	vmov.f32	s13, s11
 8006db8:	eee5 6a05 	vfma.f32	s13, s10, s10
 8006dbc:	ee76 6a87 	vadd.f32	s13, s13, s14
 8006dc0:	ee16 2a90 	vmov	r2, s13
 8006dc4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8006dc8:	f022 020f 	bic.w	r2, r2, #15
 8006dcc:	ee06 2a90 	vmov	s13, r2
 8006dd0:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8006dd4:	eee4 5a85 	vfma.f32	s11, s9, s10
 8006dd8:	ee37 7a65 	vsub.f32	s14, s14, s11
 8006ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006de4:	eef0 5a67 	vmov.f32	s11, s15
 8006de8:	eee5 5a26 	vfma.f32	s11, s10, s13
 8006dec:	ed9f 5a4c 	vldr	s10, [pc, #304]	; 8006f20 <__ieee754_powf+0x410>
 8006df0:	ee15 2a90 	vmov	r2, s11
 8006df4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8006df8:	f022 020f 	bic.w	r2, r2, #15
 8006dfc:	ee07 2a10 	vmov	s14, r2
 8006e00:	eea4 7aa6 	vfma.f32	s14, s9, s13
 8006e04:	ee05 2a90 	vmov	s11, r2
 8006e08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e0c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8006f24 <__ieee754_powf+0x414>
 8006e10:	4a45      	ldr	r2, [pc, #276]	; (8006f28 <__ieee754_powf+0x418>)
 8006e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e16:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8006f2c <__ieee754_powf+0x41c>
 8006e1a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8006e1e:	440a      	add	r2, r1
 8006e20:	ed92 7a00 	vldr	s14, [r2]
 8006e24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e28:	ee07 3a90 	vmov	s15, r3
 8006e2c:	eef0 6a47 	vmov.f32	s13, s14
 8006e30:	4b3f      	ldr	r3, [pc, #252]	; (8006f30 <__ieee754_powf+0x420>)
 8006e32:	eee5 6a85 	vfma.f32	s13, s11, s10
 8006e36:	4419      	add	r1, r3
 8006e38:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8006e3c:	edd1 7a00 	vldr	s15, [r1]
 8006e40:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006e44:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006e48:	ee16 3a90 	vmov	r3, s13
 8006e4c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006e50:	f023 030f 	bic.w	r3, r3, #15
 8006e54:	ee06 3a90 	vmov	s13, r3
 8006e58:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8006e5c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006e60:	eee5 7ac5 	vfms.f32	s15, s11, s10
 8006e64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e68:	3e01      	subs	r6, #1
 8006e6a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8006e6e:	ea56 0208 	orrs.w	r2, r6, r8
 8006e72:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006e76:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006e7a:	f025 050f 	bic.w	r5, r5, #15
 8006e7e:	bf0c      	ite	eq
 8006e80:	eeb0 8a47 	vmoveq.f32	s16, s14
 8006e84:	eeb0 8a40 	vmovne.f32	s16, s0
 8006e88:	ee07 5a10 	vmov	s14, r5
 8006e8c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8006e90:	ee38 0ac7 	vsub.f32	s0, s17, s14
 8006e94:	ee07 3a10 	vmov	s14, r3
 8006e98:	ee06 5a90 	vmov	s13, r5
 8006e9c:	eee7 7a00 	vfma.f32	s15, s14, s0
 8006ea0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006ea4:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006ea8:	ee16 1a90 	vmov	r1, s13
 8006eac:	2900      	cmp	r1, #0
 8006eae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006eb2:	dd41      	ble.n	8006f38 <__ieee754_powf+0x428>
 8006eb4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006eb8:	dc0b      	bgt.n	8006ed2 <__ieee754_powf+0x3c2>
 8006eba:	d150      	bne.n	8006f5e <__ieee754_powf+0x44e>
 8006ebc:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8006f34 <__ieee754_powf+0x424>
 8006ec0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8006ec4:	ee37 6a86 	vadd.f32	s12, s15, s12
 8006ec8:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8006ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed0:	dd48      	ble.n	8006f64 <__ieee754_powf+0x454>
 8006ed2:	eddf 0a04 	vldr	s1, [pc, #16]	; 8006ee4 <__ieee754_powf+0x3d4>
 8006ed6:	e034      	b.n	8006f42 <__ieee754_powf+0x432>
 8006ed8:	08008485 	.word	0x08008485
 8006edc:	00000000 	.word	0x00000000
 8006ee0:	3f7ffff7 	.word	0x3f7ffff7
 8006ee4:	7149f2ca 	.word	0x7149f2ca
 8006ee8:	3f800007 	.word	0x3f800007
 8006eec:	3eaaaaab 	.word	0x3eaaaaab
 8006ef0:	3fb8aa3b 	.word	0x3fb8aa3b
 8006ef4:	36eca570 	.word	0x36eca570
 8006ef8:	3fb8aa00 	.word	0x3fb8aa00
 8006efc:	4b800000 	.word	0x4b800000
 8006f00:	001cc471 	.word	0x001cc471
 8006f04:	005db3d6 	.word	0x005db3d6
 8006f08:	08008500 	.word	0x08008500
 8006f0c:	3e53f142 	.word	0x3e53f142
 8006f10:	3e6c3255 	.word	0x3e6c3255
 8006f14:	3e8ba305 	.word	0x3e8ba305
 8006f18:	3edb6db7 	.word	0x3edb6db7
 8006f1c:	3f19999a 	.word	0x3f19999a
 8006f20:	3f763800 	.word	0x3f763800
 8006f24:	3f76384f 	.word	0x3f76384f
 8006f28:	080084f8 	.word	0x080084f8
 8006f2c:	369dc3a0 	.word	0x369dc3a0
 8006f30:	080084f0 	.word	0x080084f0
 8006f34:	3338aa3c 	.word	0x3338aa3c
 8006f38:	4a4e      	ldr	r2, [pc, #312]	; (8007074 <__ieee754_powf+0x564>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	dd06      	ble.n	8006f4c <__ieee754_powf+0x43c>
 8006f3e:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8007078 <__ieee754_powf+0x568>
 8006f42:	ee28 0a20 	vmul.f32	s0, s16, s1
 8006f46:	ee20 0a20 	vmul.f32	s0, s0, s1
 8006f4a:	e08f      	b.n	800706c <__ieee754_powf+0x55c>
 8006f4c:	d107      	bne.n	8006f5e <__ieee754_powf+0x44e>
 8006f4e:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8006f52:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f5a:	d803      	bhi.n	8006f64 <__ieee754_powf+0x454>
 8006f5c:	e7ef      	b.n	8006f3e <__ieee754_powf+0x42e>
 8006f5e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006f62:	dd1d      	ble.n	8006fa0 <__ieee754_powf+0x490>
 8006f64:	15db      	asrs	r3, r3, #23
 8006f66:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006f6a:	3b7e      	subs	r3, #126	; 0x7e
 8006f6c:	fa42 f303 	asr.w	r3, r2, r3
 8006f70:	440b      	add	r3, r1
 8006f72:	f3c3 50c7 	ubfx	r0, r3, #23, #8
 8006f76:	387f      	subs	r0, #127	; 0x7f
 8006f78:	3a01      	subs	r2, #1
 8006f7a:	4102      	asrs	r2, r0
 8006f7c:	ea23 0202 	bic.w	r2, r3, r2
 8006f80:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006f84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f88:	f1c0 0017 	rsb	r0, r0, #23
 8006f8c:	ee06 2a90 	vmov	s13, r2
 8006f90:	fa43 f000 	asr.w	r0, r3, r0
 8006f94:	2900      	cmp	r1, #0
 8006f96:	bfb8      	it	lt
 8006f98:	4240      	neglt	r0, r0
 8006f9a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006f9e:	e000      	b.n	8006fa2 <__ieee754_powf+0x492>
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006fa6:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800707c <__ieee754_powf+0x56c>
 8006faa:	ee16 3a90 	vmov	r3, s13
 8006fae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006fb2:	f023 030f 	bic.w	r3, r3, #15
 8006fb6:	ee06 3a90 	vmov	s13, r3
 8006fba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006fbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006fc2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007080 <__ieee754_powf+0x570>
 8006fc6:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006fca:	eea7 7a86 	vfma.f32	s14, s15, s12
 8006fce:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8007084 <__ieee754_powf+0x574>
 8006fd2:	eef0 7a47 	vmov.f32	s15, s14
 8006fd6:	eea6 7a86 	vfma.f32	s14, s13, s12
 8006fda:	eef0 5a47 	vmov.f32	s11, s14
 8006fde:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8006fe2:	ee67 6a07 	vmul.f32	s13, s14, s14
 8006fe6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006fea:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8007088 <__ieee754_powf+0x578>
 8006fee:	eddf 5a27 	vldr	s11, [pc, #156]	; 800708c <__ieee754_powf+0x57c>
 8006ff2:	eee6 5a86 	vfma.f32	s11, s13, s12
 8006ff6:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8007090 <__ieee754_powf+0x580>
 8006ffa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8006ffe:	eddf 5a25 	vldr	s11, [pc, #148]	; 8007094 <__ieee754_powf+0x584>
 8007002:	eee6 5a86 	vfma.f32	s11, s13, s12
 8007006:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8007098 <__ieee754_powf+0x588>
 800700a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800700e:	eef0 5a47 	vmov.f32	s11, s14
 8007012:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8007016:	eee7 7a27 	vfma.f32	s15, s14, s15
 800701a:	ee27 6a25 	vmul.f32	s12, s14, s11
 800701e:	eef0 6a65 	vmov.f32	s13, s11
 8007022:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8007026:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800702a:	ee86 0a26 	vdiv.f32	s0, s12, s13
 800702e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007032:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007036:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800703a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800703e:	ee10 3a10 	vmov	r3, s0
 8007042:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007046:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800704a:	da02      	bge.n	8007052 <__ieee754_powf+0x542>
 800704c:	f000 fd8a 	bl	8007b64 <scalbnf>
 8007050:	e001      	b.n	8007056 <__ieee754_powf+0x546>
 8007052:	ee00 3a10 	vmov	s0, r3
 8007056:	ee20 0a08 	vmul.f32	s0, s0, s16
 800705a:	e007      	b.n	800706c <__ieee754_powf+0x55c>
 800705c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007060:	e004      	b.n	800706c <__ieee754_powf+0x55c>
 8007062:	eeb0 0a68 	vmov.f32	s0, s17
 8007066:	e001      	b.n	800706c <__ieee754_powf+0x55c>
 8007068:	eeb0 0a48 	vmov.f32	s0, s16
 800706c:	ecbd 8b02 	vpop	{d8}
 8007070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007074:	43160000 	.word	0x43160000
 8007078:	0da24260 	.word	0x0da24260
 800707c:	3f317218 	.word	0x3f317218
 8007080:	35bfbe8c 	.word	0x35bfbe8c
 8007084:	3f317200 	.word	0x3f317200
 8007088:	3331bb4c 	.word	0x3331bb4c
 800708c:	b5ddea0e 	.word	0xb5ddea0e
 8007090:	388ab355 	.word	0x388ab355
 8007094:	bb360b61 	.word	0xbb360b61
 8007098:	3e2aaaab 	.word	0x3e2aaaab

0800709c <__ieee754_rem_pio2f>:
 800709c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800709e:	ee10 6a10 	vmov	r6, s0
 80070a2:	4b85      	ldr	r3, [pc, #532]	; (80072b8 <__ieee754_rem_pio2f+0x21c>)
 80070a4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80070a8:	429c      	cmp	r4, r3
 80070aa:	b087      	sub	sp, #28
 80070ac:	4605      	mov	r5, r0
 80070ae:	dc04      	bgt.n	80070ba <__ieee754_rem_pio2f+0x1e>
 80070b0:	2300      	movs	r3, #0
 80070b2:	ed85 0a00 	vstr	s0, [r5]
 80070b6:	6043      	str	r3, [r0, #4]
 80070b8:	e0b7      	b.n	800722a <__ieee754_rem_pio2f+0x18e>
 80070ba:	4b80      	ldr	r3, [pc, #512]	; (80072bc <__ieee754_rem_pio2f+0x220>)
 80070bc:	429c      	cmp	r4, r3
 80070be:	dc37      	bgt.n	8007130 <__ieee754_rem_pio2f+0x94>
 80070c0:	2e00      	cmp	r6, #0
 80070c2:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80072c0 <__ieee754_rem_pio2f+0x224>
 80070c6:	4b7f      	ldr	r3, [pc, #508]	; (80072c4 <__ieee754_rem_pio2f+0x228>)
 80070c8:	f024 040f 	bic.w	r4, r4, #15
 80070cc:	dd17      	ble.n	80070fe <__ieee754_rem_pio2f+0x62>
 80070ce:	429c      	cmp	r4, r3
 80070d0:	ee70 7a47 	vsub.f32	s15, s0, s14
 80070d4:	bf09      	itett	eq
 80070d6:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80072c8 <__ieee754_rem_pio2f+0x22c>
 80070da:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80072cc <__ieee754_rem_pio2f+0x230>
 80070de:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80070e2:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80072d0 <__ieee754_rem_pio2f+0x234>
 80070e6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80070ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070ee:	edc0 6a00 	vstr	s13, [r0]
 80070f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80070f6:	edc0 7a01 	vstr	s15, [r0, #4]
 80070fa:	2001      	movs	r0, #1
 80070fc:	e0da      	b.n	80072b4 <__ieee754_rem_pio2f+0x218>
 80070fe:	429c      	cmp	r4, r3
 8007100:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007104:	bf09      	itett	eq
 8007106:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80072c8 <__ieee754_rem_pio2f+0x22c>
 800710a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80072cc <__ieee754_rem_pio2f+0x230>
 800710e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007112:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80072d0 <__ieee754_rem_pio2f+0x234>
 8007116:	ee77 6a87 	vadd.f32	s13, s15, s14
 800711a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800711e:	edc0 6a00 	vstr	s13, [r0]
 8007122:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007126:	edc0 7a01 	vstr	s15, [r0, #4]
 800712a:	f04f 30ff 	mov.w	r0, #4294967295
 800712e:	e0c1      	b.n	80072b4 <__ieee754_rem_pio2f+0x218>
 8007130:	4b68      	ldr	r3, [pc, #416]	; (80072d4 <__ieee754_rem_pio2f+0x238>)
 8007132:	429c      	cmp	r4, r3
 8007134:	dc70      	bgt.n	8007218 <__ieee754_rem_pio2f+0x17c>
 8007136:	f000 fcbb 	bl	8007ab0 <fabsf>
 800713a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80072d8 <__ieee754_rem_pio2f+0x23c>
 800713e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007142:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007146:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80072c0 <__ieee754_rem_pio2f+0x224>
 800714a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800714e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007152:	ee17 0a90 	vmov	r0, s15
 8007156:	eef1 7a46 	vneg.f32	s15, s12
 800715a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800715e:	281f      	cmp	r0, #31
 8007160:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80072cc <__ieee754_rem_pio2f+0x230>
 8007164:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007168:	ee70 6a47 	vsub.f32	s13, s0, s14
 800716c:	ee16 3a90 	vmov	r3, s13
 8007170:	dc07      	bgt.n	8007182 <__ieee754_rem_pio2f+0xe6>
 8007172:	1e47      	subs	r7, r0, #1
 8007174:	4959      	ldr	r1, [pc, #356]	; (80072dc <__ieee754_rem_pio2f+0x240>)
 8007176:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800717a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800717e:	428a      	cmp	r2, r1
 8007180:	d105      	bne.n	800718e <__ieee754_rem_pio2f+0xf2>
 8007182:	15e4      	asrs	r4, r4, #23
 8007184:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007188:	1aa2      	subs	r2, r4, r2
 800718a:	2a08      	cmp	r2, #8
 800718c:	dc01      	bgt.n	8007192 <__ieee754_rem_pio2f+0xf6>
 800718e:	602b      	str	r3, [r5, #0]
 8007190:	e02f      	b.n	80071f2 <__ieee754_rem_pio2f+0x156>
 8007192:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80072c8 <__ieee754_rem_pio2f+0x22c>
 8007196:	eef0 6a40 	vmov.f32	s13, s0
 800719a:	eee7 6a87 	vfma.f32	s13, s15, s14
 800719e:	ee30 0a66 	vsub.f32	s0, s0, s13
 80071a2:	eea7 0a87 	vfma.f32	s0, s15, s14
 80071a6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80072d0 <__ieee754_rem_pio2f+0x234>
 80071aa:	ee96 0a07 	vfnms.f32	s0, s12, s14
 80071ae:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80071b2:	eeb0 7a40 	vmov.f32	s14, s0
 80071b6:	ee15 3a90 	vmov	r3, s11
 80071ba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80071be:	1aa4      	subs	r4, r4, r2
 80071c0:	2c19      	cmp	r4, #25
 80071c2:	dc04      	bgt.n	80071ce <__ieee754_rem_pio2f+0x132>
 80071c4:	edc5 5a00 	vstr	s11, [r5]
 80071c8:	eeb0 0a66 	vmov.f32	s0, s13
 80071cc:	e011      	b.n	80071f2 <__ieee754_rem_pio2f+0x156>
 80071ce:	eddf 5a44 	vldr	s11, [pc, #272]	; 80072e0 <__ieee754_rem_pio2f+0x244>
 80071d2:	eeb0 0a66 	vmov.f32	s0, s13
 80071d6:	eea7 0aa5 	vfma.f32	s0, s15, s11
 80071da:	ee36 7ac0 	vsub.f32	s14, s13, s0
 80071de:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80071e2:	eddf 7a40 	vldr	s15, [pc, #256]	; 80072e4 <__ieee754_rem_pio2f+0x248>
 80071e6:	ee96 7a27 	vfnms.f32	s14, s12, s15
 80071ea:	ee70 7a47 	vsub.f32	s15, s0, s14
 80071ee:	edc5 7a00 	vstr	s15, [r5]
 80071f2:	edd5 6a00 	vldr	s13, [r5]
 80071f6:	ee70 7a66 	vsub.f32	s15, s0, s13
 80071fa:	2e00      	cmp	r6, #0
 80071fc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007200:	ed85 0a01 	vstr	s0, [r5, #4]
 8007204:	da56      	bge.n	80072b4 <__ieee754_rem_pio2f+0x218>
 8007206:	eef1 6a66 	vneg.f32	s13, s13
 800720a:	eeb1 0a40 	vneg.f32	s0, s0
 800720e:	edc5 6a00 	vstr	s13, [r5]
 8007212:	ed85 0a01 	vstr	s0, [r5, #4]
 8007216:	e04c      	b.n	80072b2 <__ieee754_rem_pio2f+0x216>
 8007218:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800721c:	db07      	blt.n	800722e <__ieee754_rem_pio2f+0x192>
 800721e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007222:	edc0 7a01 	vstr	s15, [r0, #4]
 8007226:	edc0 7a00 	vstr	s15, [r0]
 800722a:	2000      	movs	r0, #0
 800722c:	e042      	b.n	80072b4 <__ieee754_rem_pio2f+0x218>
 800722e:	15e2      	asrs	r2, r4, #23
 8007230:	3a86      	subs	r2, #134	; 0x86
 8007232:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8007236:	ee06 3a90 	vmov	s13, r3
 800723a:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 800723e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80072e8 <__ieee754_rem_pio2f+0x24c>
 8007242:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007246:	ed8d 7a03 	vstr	s14, [sp, #12]
 800724a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800724e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007252:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8007256:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800725a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800725e:	edcd 6a04 	vstr	s13, [sp, #16]
 8007262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007266:	eef5 7a40 	vcmp.f32	s15, #0.0
 800726a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726e:	edcd 7a05 	vstr	s15, [sp, #20]
 8007272:	d107      	bne.n	8007284 <__ieee754_rem_pio2f+0x1e8>
 8007274:	eef5 6a40 	vcmp.f32	s13, #0.0
 8007278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800727c:	bf14      	ite	ne
 800727e:	2302      	movne	r3, #2
 8007280:	2301      	moveq	r3, #1
 8007282:	e000      	b.n	8007286 <__ieee754_rem_pio2f+0x1ea>
 8007284:	2303      	movs	r3, #3
 8007286:	4919      	ldr	r1, [pc, #100]	; (80072ec <__ieee754_rem_pio2f+0x250>)
 8007288:	9101      	str	r1, [sp, #4]
 800728a:	2102      	movs	r1, #2
 800728c:	9100      	str	r1, [sp, #0]
 800728e:	a803      	add	r0, sp, #12
 8007290:	4629      	mov	r1, r5
 8007292:	f000 f8d3 	bl	800743c <__kernel_rem_pio2f>
 8007296:	2e00      	cmp	r6, #0
 8007298:	da0c      	bge.n	80072b4 <__ieee754_rem_pio2f+0x218>
 800729a:	edd5 7a00 	vldr	s15, [r5]
 800729e:	eef1 7a67 	vneg.f32	s15, s15
 80072a2:	edc5 7a00 	vstr	s15, [r5]
 80072a6:	edd5 7a01 	vldr	s15, [r5, #4]
 80072aa:	eef1 7a67 	vneg.f32	s15, s15
 80072ae:	edc5 7a01 	vstr	s15, [r5, #4]
 80072b2:	4240      	negs	r0, r0
 80072b4:	b007      	add	sp, #28
 80072b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b8:	3f490fd8 	.word	0x3f490fd8
 80072bc:	4016cbe3 	.word	0x4016cbe3
 80072c0:	3fc90f80 	.word	0x3fc90f80
 80072c4:	3fc90fd0 	.word	0x3fc90fd0
 80072c8:	37354400 	.word	0x37354400
 80072cc:	37354443 	.word	0x37354443
 80072d0:	2e85a308 	.word	0x2e85a308
 80072d4:	43490f80 	.word	0x43490f80
 80072d8:	3f22f984 	.word	0x3f22f984
 80072dc:	08008508 	.word	0x08008508
 80072e0:	2e85a300 	.word	0x2e85a300
 80072e4:	248d3132 	.word	0x248d3132
 80072e8:	43800000 	.word	0x43800000
 80072ec:	08008588 	.word	0x08008588

080072f0 <__ieee754_sqrtf>:
 80072f0:	ee10 2a10 	vmov	r2, s0
 80072f4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80072f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80072fc:	b570      	push	{r4, r5, r6, lr}
 80072fe:	d302      	bcc.n	8007306 <__ieee754_sqrtf+0x16>
 8007300:	eea0 0a00 	vfma.f32	s0, s0, s0
 8007304:	bd70      	pop	{r4, r5, r6, pc}
 8007306:	2900      	cmp	r1, #0
 8007308:	d039      	beq.n	800737e <__ieee754_sqrtf+0x8e>
 800730a:	2a00      	cmp	r2, #0
 800730c:	da04      	bge.n	8007318 <__ieee754_sqrtf+0x28>
 800730e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007312:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800731c:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8007320:	d207      	bcs.n	8007332 <__ieee754_sqrtf+0x42>
 8007322:	2100      	movs	r1, #0
 8007324:	0210      	lsls	r0, r2, #8
 8007326:	d402      	bmi.n	800732e <__ieee754_sqrtf+0x3e>
 8007328:	0052      	lsls	r2, r2, #1
 800732a:	3101      	adds	r1, #1
 800732c:	e7fa      	b.n	8007324 <__ieee754_sqrtf+0x34>
 800732e:	3901      	subs	r1, #1
 8007330:	1a5b      	subs	r3, r3, r1
 8007332:	3b7f      	subs	r3, #127	; 0x7f
 8007334:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007338:	07d9      	lsls	r1, r3, #31
 800733a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800733e:	bf48      	it	mi
 8007340:	0052      	lslmi	r2, r2, #1
 8007342:	1059      	asrs	r1, r3, #1
 8007344:	2300      	movs	r3, #0
 8007346:	0052      	lsls	r2, r2, #1
 8007348:	2419      	movs	r4, #25
 800734a:	461e      	mov	r6, r3
 800734c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8007350:	1835      	adds	r5, r6, r0
 8007352:	4295      	cmp	r5, r2
 8007354:	bfde      	ittt	le
 8007356:	182e      	addle	r6, r5, r0
 8007358:	1b52      	suble	r2, r2, r5
 800735a:	181b      	addle	r3, r3, r0
 800735c:	3c01      	subs	r4, #1
 800735e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007362:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007366:	d1f3      	bne.n	8007350 <__ieee754_sqrtf+0x60>
 8007368:	b112      	cbz	r2, 8007370 <__ieee754_sqrtf+0x80>
 800736a:	f003 0201 	and.w	r2, r3, #1
 800736e:	4413      	add	r3, r2
 8007370:	105b      	asrs	r3, r3, #1
 8007372:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8007376:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 800737a:	ee00 3a10 	vmov	s0, r3
 800737e:	bd70      	pop	{r4, r5, r6, pc}

08007380 <__kernel_cosf>:
 8007380:	ee10 3a10 	vmov	r3, s0
 8007384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007388:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800738c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007390:	da05      	bge.n	800739e <__kernel_cosf+0x1e>
 8007392:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007396:	ee17 2a90 	vmov	r2, s15
 800739a:	2a00      	cmp	r2, #0
 800739c:	d03b      	beq.n	8007416 <__kernel_cosf+0x96>
 800739e:	ee20 7a00 	vmul.f32	s14, s0, s0
 80073a2:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800741c <__kernel_cosf+0x9c>
 80073a6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007420 <__kernel_cosf+0xa0>
 80073aa:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8007424 <__kernel_cosf+0xa4>
 80073ae:	4a1e      	ldr	r2, [pc, #120]	; (8007428 <__kernel_cosf+0xa8>)
 80073b0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80073b4:	4293      	cmp	r3, r2
 80073b6:	ee60 0a20 	vmul.f32	s1, s0, s1
 80073ba:	eee7 5a06 	vfma.f32	s11, s14, s12
 80073be:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800742c <__kernel_cosf+0xac>
 80073c2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80073c6:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8007430 <__kernel_cosf+0xb0>
 80073ca:	eee7 5a06 	vfma.f32	s11, s14, s12
 80073ce:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8007434 <__kernel_cosf+0xb4>
 80073d2:	eea7 6a25 	vfma.f32	s12, s14, s11
 80073d6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80073da:	ee26 6a07 	vmul.f32	s12, s12, s14
 80073de:	dc06      	bgt.n	80073ee <__kernel_cosf+0x6e>
 80073e0:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80073e4:	eed7 0a25 	vfnms.f32	s1, s14, s11
 80073e8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80073ec:	4770      	bx	lr
 80073ee:	4a12      	ldr	r2, [pc, #72]	; (8007438 <__kernel_cosf+0xb8>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	bfda      	itte	le
 80073f4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80073f8:	ee07 3a90 	vmovle	s15, r3
 80073fc:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 8007400:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007404:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8007408:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800740c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007410:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8007414:	4770      	bx	lr
 8007416:	eeb0 0a66 	vmov.f32	s0, s13
 800741a:	4770      	bx	lr
 800741c:	310f74f6 	.word	0x310f74f6
 8007420:	ad47d74e 	.word	0xad47d74e
 8007424:	b493f27c 	.word	0xb493f27c
 8007428:	3e999999 	.word	0x3e999999
 800742c:	37d00d01 	.word	0x37d00d01
 8007430:	bab60b61 	.word	0xbab60b61
 8007434:	3d2aaaab 	.word	0x3d2aaaab
 8007438:	3f480000 	.word	0x3f480000

0800743c <__kernel_rem_pio2f>:
 800743c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007440:	ed2d 8b04 	vpush	{d8-d9}
 8007444:	b0d5      	sub	sp, #340	; 0x154
 8007446:	460f      	mov	r7, r1
 8007448:	9000      	str	r0, [sp, #0]
 800744a:	49cf      	ldr	r1, [pc, #828]	; (8007788 <__kernel_rem_pio2f+0x34c>)
 800744c:	9862      	ldr	r0, [sp, #392]	; 0x188
 800744e:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 8007450:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8007454:	f103 3aff 	add.w	sl, r3, #4294967295
 8007458:	1ed0      	subs	r0, r2, #3
 800745a:	2408      	movs	r4, #8
 800745c:	fb90 f0f4 	sdiv	r0, r0, r4
 8007460:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007464:	1c45      	adds	r5, r0, #1
 8007466:	ebca 0e00 	rsb	lr, sl, r0
 800746a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800746e:	eb09 0c0a 	add.w	ip, r9, sl
 8007472:	ac18      	add	r4, sp, #96	; 0x60
 8007474:	eb06 088e 	add.w	r8, r6, lr, lsl #2
 8007478:	2200      	movs	r2, #0
 800747a:	4562      	cmp	r2, ip
 800747c:	dc0e      	bgt.n	800749c <__kernel_rem_pio2f+0x60>
 800747e:	eb1e 0f02 	cmn.w	lr, r2
 8007482:	bf57      	itett	pl
 8007484:	f858 1022 	ldrpl.w	r1, [r8, r2, lsl #2]
 8007488:	eddf 7ac0 	vldrmi	s15, [pc, #768]	; 800778c <__kernel_rem_pio2f+0x350>
 800748c:	ee07 1a90 	vmovpl	s15, r1
 8007490:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007494:	3201      	adds	r2, #1
 8007496:	ece4 7a01 	vstmia	r4!, {s15}
 800749a:	e7ee      	b.n	800747a <__kernel_rem_pio2f+0x3e>
 800749c:	f50d 7c80 	add.w	ip, sp, #256	; 0x100
 80074a0:	2400      	movs	r4, #0
 80074a2:	454c      	cmp	r4, r9
 80074a4:	dc18      	bgt.n	80074d8 <__kernel_rem_pio2f+0x9c>
 80074a6:	191a      	adds	r2, r3, r4
 80074a8:	a918      	add	r1, sp, #96	; 0x60
 80074aa:	f8dd e000 	ldr.w	lr, [sp]
 80074ae:	eddf 7ab7 	vldr	s15, [pc, #732]	; 800778c <__kernel_rem_pio2f+0x350>
 80074b2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80074b6:	f04f 0800 	mov.w	r8, #0
 80074ba:	45d0      	cmp	r8, sl
 80074bc:	dc08      	bgt.n	80074d0 <__kernel_rem_pio2f+0x94>
 80074be:	ecfe 6a01 	vldmia	lr!, {s13}
 80074c2:	ed32 7a01 	vldmdb	r2!, {s14}
 80074c6:	f108 0801 	add.w	r8, r8, #1
 80074ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 80074ce:	e7f4      	b.n	80074ba <__kernel_rem_pio2f+0x7e>
 80074d0:	ecec 7a01 	vstmia	ip!, {s15}
 80074d4:	3401      	adds	r4, #1
 80074d6:	e7e4      	b.n	80074a2 <__kernel_rem_pio2f+0x66>
 80074d8:	aa04      	add	r2, sp, #16
 80074da:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80074de:	9201      	str	r2, [sp, #4]
 80074e0:	eddf 8aab 	vldr	s17, [pc, #684]	; 8007790 <__kernel_rem_pio2f+0x354>
 80074e4:	ed9f 9aab 	vldr	s18, [pc, #684]	; 8007794 <__kernel_rem_pio2f+0x358>
 80074e8:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 80074ec:	9202      	str	r2, [sp, #8]
 80074ee:	464c      	mov	r4, r9
 80074f0:	aa54      	add	r2, sp, #336	; 0x150
 80074f2:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 80074f6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80074fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80074fe:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 8007502:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8007506:	aa54      	add	r2, sp, #336	; 0x150
 8007508:	eb02 0008 	add.w	r0, r2, r8
 800750c:	384c      	subs	r0, #76	; 0x4c
 800750e:	2200      	movs	r2, #0
 8007510:	1aa6      	subs	r6, r4, r2
 8007512:	2e00      	cmp	r6, #0
 8007514:	dd14      	ble.n	8007540 <__kernel_rem_pio2f+0x104>
 8007516:	ee60 7a28 	vmul.f32	s15, s0, s17
 800751a:	ae04      	add	r6, sp, #16
 800751c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007524:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007528:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800752c:	ee10 1a10 	vmov	r1, s0
 8007530:	ed30 0a01 	vldmdb	r0!, {s0}
 8007534:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8007538:	ee37 0a80 	vadd.f32	s0, s15, s0
 800753c:	3201      	adds	r2, #1
 800753e:	e7e7      	b.n	8007510 <__kernel_rem_pio2f+0xd4>
 8007540:	4628      	mov	r0, r5
 8007542:	9303      	str	r3, [sp, #12]
 8007544:	f000 fb0e 	bl	8007b64 <scalbnf>
 8007548:	eeb0 8a40 	vmov.f32	s16, s0
 800754c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007550:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007554:	f000 fabe 	bl	8007ad4 <floorf>
 8007558:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800755c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007560:	2d00      	cmp	r5, #0
 8007562:	9b03      	ldr	r3, [sp, #12]
 8007564:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007568:	ee17 ba90 	vmov	fp, s15
 800756c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007570:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007574:	dd14      	ble.n	80075a0 <__kernel_rem_pio2f+0x164>
 8007576:	f104 3eff 	add.w	lr, r4, #4294967295
 800757a:	aa04      	add	r2, sp, #16
 800757c:	f1c5 0608 	rsb	r6, r5, #8
 8007580:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8007584:	fa42 f006 	asr.w	r0, r2, r6
 8007588:	fa00 f606 	lsl.w	r6, r0, r6
 800758c:	a904      	add	r1, sp, #16
 800758e:	1b92      	subs	r2, r2, r6
 8007590:	f1c5 0607 	rsb	r6, r5, #7
 8007594:	4483      	add	fp, r0
 8007596:	f841 202e 	str.w	r2, [r1, lr, lsl #2]
 800759a:	fa42 f606 	asr.w	r6, r2, r6
 800759e:	e00f      	b.n	80075c0 <__kernel_rem_pio2f+0x184>
 80075a0:	d105      	bne.n	80075ae <__kernel_rem_pio2f+0x172>
 80075a2:	1e62      	subs	r2, r4, #1
 80075a4:	a904      	add	r1, sp, #16
 80075a6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80075aa:	1236      	asrs	r6, r6, #8
 80075ac:	e008      	b.n	80075c0 <__kernel_rem_pio2f+0x184>
 80075ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80075b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80075b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ba:	da04      	bge.n	80075c6 <__kernel_rem_pio2f+0x18a>
 80075bc:	2600      	movs	r6, #0
 80075be:	e03f      	b.n	8007640 <__kernel_rem_pio2f+0x204>
 80075c0:	2e00      	cmp	r6, #0
 80075c2:	dc01      	bgt.n	80075c8 <__kernel_rem_pio2f+0x18c>
 80075c4:	e03c      	b.n	8007640 <__kernel_rem_pio2f+0x204>
 80075c6:	2602      	movs	r6, #2
 80075c8:	2200      	movs	r2, #0
 80075ca:	f10b 0b01 	add.w	fp, fp, #1
 80075ce:	4610      	mov	r0, r2
 80075d0:	4294      	cmp	r4, r2
 80075d2:	dd0f      	ble.n	80075f4 <__kernel_rem_pio2f+0x1b8>
 80075d4:	a904      	add	r1, sp, #16
 80075d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80075da:	b918      	cbnz	r0, 80075e4 <__kernel_rem_pio2f+0x1a8>
 80075dc:	b141      	cbz	r1, 80075f0 <__kernel_rem_pio2f+0x1b4>
 80075de:	f5c1 7080 	rsb	r0, r1, #256	; 0x100
 80075e2:	e001      	b.n	80075e8 <__kernel_rem_pio2f+0x1ac>
 80075e4:	f1c1 00ff 	rsb	r0, r1, #255	; 0xff
 80075e8:	a904      	add	r1, sp, #16
 80075ea:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 80075ee:	2001      	movs	r0, #1
 80075f0:	3201      	adds	r2, #1
 80075f2:	e7ed      	b.n	80075d0 <__kernel_rem_pio2f+0x194>
 80075f4:	2d00      	cmp	r5, #0
 80075f6:	dd15      	ble.n	8007624 <__kernel_rem_pio2f+0x1e8>
 80075f8:	2d01      	cmp	r5, #1
 80075fa:	d009      	beq.n	8007610 <__kernel_rem_pio2f+0x1d4>
 80075fc:	2d02      	cmp	r5, #2
 80075fe:	d111      	bne.n	8007624 <__kernel_rem_pio2f+0x1e8>
 8007600:	f104 3eff 	add.w	lr, r4, #4294967295
 8007604:	aa04      	add	r2, sp, #16
 8007606:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800760a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800760e:	e006      	b.n	800761e <__kernel_rem_pio2f+0x1e2>
 8007610:	f104 3eff 	add.w	lr, r4, #4294967295
 8007614:	aa04      	add	r2, sp, #16
 8007616:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 800761a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800761e:	a904      	add	r1, sp, #16
 8007620:	f841 202e 	str.w	r2, [r1, lr, lsl #2]
 8007624:	2e02      	cmp	r6, #2
 8007626:	d10b      	bne.n	8007640 <__kernel_rem_pio2f+0x204>
 8007628:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800762c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007630:	b130      	cbz	r0, 8007640 <__kernel_rem_pio2f+0x204>
 8007632:	4628      	mov	r0, r5
 8007634:	9303      	str	r3, [sp, #12]
 8007636:	f000 fa95 	bl	8007b64 <scalbnf>
 800763a:	9b03      	ldr	r3, [sp, #12]
 800763c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007640:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007648:	d154      	bne.n	80076f4 <__kernel_rem_pio2f+0x2b8>
 800764a:	f104 3cff 	add.w	ip, r4, #4294967295
 800764e:	4660      	mov	r0, ip
 8007650:	2200      	movs	r2, #0
 8007652:	4548      	cmp	r0, r9
 8007654:	db05      	blt.n	8007662 <__kernel_rem_pio2f+0x226>
 8007656:	a904      	add	r1, sp, #16
 8007658:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800765c:	3801      	subs	r0, #1
 800765e:	430a      	orrs	r2, r1
 8007660:	e7f7      	b.n	8007652 <__kernel_rem_pio2f+0x216>
 8007662:	2a00      	cmp	r2, #0
 8007664:	d13d      	bne.n	80076e2 <__kernel_rem_pio2f+0x2a6>
 8007666:	2201      	movs	r2, #1
 8007668:	f06f 0603 	mvn.w	r6, #3
 800766c:	fb06 f002 	mul.w	r0, r6, r2
 8007670:	9901      	ldr	r1, [sp, #4]
 8007672:	5808      	ldr	r0, [r1, r0]
 8007674:	b908      	cbnz	r0, 800767a <__kernel_rem_pio2f+0x23e>
 8007676:	3201      	adds	r2, #1
 8007678:	e7f8      	b.n	800766c <__kernel_rem_pio2f+0x230>
 800767a:	eb03 0e04 	add.w	lr, r3, r4
 800767e:	1c60      	adds	r0, r4, #1
 8007680:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8007684:	f108 0804 	add.w	r8, r8, #4
 8007688:	2600      	movs	r6, #0
 800768a:	4414      	add	r4, r2
 800768c:	42a0      	cmp	r0, r4
 800768e:	f73f af2f 	bgt.w	80074f0 <__kernel_rem_pio2f+0xb4>
 8007692:	3604      	adds	r6, #4
 8007694:	a918      	add	r1, sp, #96	; 0x60
 8007696:	eb06 020e 	add.w	r2, r6, lr
 800769a:	440a      	add	r2, r1
 800769c:	9902      	ldr	r1, [sp, #8]
 800769e:	f8dd b000 	ldr.w	fp, [sp]
 80076a2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80076a6:	9103      	str	r1, [sp, #12]
 80076a8:	ee07 1a90 	vmov	s15, r1
 80076ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076b0:	f04f 0c00 	mov.w	ip, #0
 80076b4:	ed42 7a01 	vstr	s15, [r2, #-4]
 80076b8:	eddf 7a34 	vldr	s15, [pc, #208]	; 800778c <__kernel_rem_pio2f+0x350>
 80076bc:	45d4      	cmp	ip, sl
 80076be:	dc08      	bgt.n	80076d2 <__kernel_rem_pio2f+0x296>
 80076c0:	ecfb 6a01 	vldmia	fp!, {s13}
 80076c4:	ed32 7a01 	vldmdb	r2!, {s14}
 80076c8:	f10c 0c01 	add.w	ip, ip, #1
 80076cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80076d0:	e7f4      	b.n	80076bc <__kernel_rem_pio2f+0x280>
 80076d2:	eb06 0208 	add.w	r2, r6, r8
 80076d6:	a940      	add	r1, sp, #256	; 0x100
 80076d8:	440a      	add	r2, r1
 80076da:	edc2 7a00 	vstr	s15, [r2]
 80076de:	3001      	adds	r0, #1
 80076e0:	e7d4      	b.n	800768c <__kernel_rem_pio2f+0x250>
 80076e2:	3d08      	subs	r5, #8
 80076e4:	4664      	mov	r4, ip
 80076e6:	ab04      	add	r3, sp, #16
 80076e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80076ec:	bb6b      	cbnz	r3, 800774a <__kernel_rem_pio2f+0x30e>
 80076ee:	3c01      	subs	r4, #1
 80076f0:	3d08      	subs	r5, #8
 80076f2:	e7f8      	b.n	80076e6 <__kernel_rem_pio2f+0x2aa>
 80076f4:	4268      	negs	r0, r5
 80076f6:	eeb0 0a48 	vmov.f32	s0, s16
 80076fa:	f000 fa33 	bl	8007b64 <scalbnf>
 80076fe:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8007794 <__kernel_rem_pio2f+0x358>
 8007702:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770a:	db17      	blt.n	800773c <__kernel_rem_pio2f+0x300>
 800770c:	eddf 7a20 	vldr	s15, [pc, #128]	; 8007790 <__kernel_rem_pio2f+0x354>
 8007710:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007714:	aa04      	add	r2, sp, #16
 8007716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800771a:	3508      	adds	r5, #8
 800771c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007720:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007728:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800772c:	ee10 3a10 	vmov	r3, s0
 8007730:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007734:	3401      	adds	r4, #1
 8007736:	ee17 3a90 	vmov	r3, s15
 800773a:	e004      	b.n	8007746 <__kernel_rem_pio2f+0x30a>
 800773c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007740:	aa04      	add	r2, sp, #16
 8007742:	ee10 3a10 	vmov	r3, s0
 8007746:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800774a:	4628      	mov	r0, r5
 800774c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007750:	f000 fa08 	bl	8007b64 <scalbnf>
 8007754:	00a3      	lsls	r3, r4, #2
 8007756:	a940      	add	r1, sp, #256	; 0x100
 8007758:	1d1a      	adds	r2, r3, #4
 800775a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007790 <__kernel_rem_pio2f+0x354>
 800775e:	1888      	adds	r0, r1, r2
 8007760:	4621      	mov	r1, r4
 8007762:	2900      	cmp	r1, #0
 8007764:	db18      	blt.n	8007798 <__kernel_rem_pio2f+0x35c>
 8007766:	ad04      	add	r5, sp, #16
 8007768:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 800776c:	9500      	str	r5, [sp, #0]
 800776e:	ee07 5a90 	vmov	s15, r5
 8007772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007776:	3901      	subs	r1, #1
 8007778:	ee67 7a80 	vmul.f32	s15, s15, s0
 800777c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007780:	ed60 7a01 	vstmdb	r0!, {s15}
 8007784:	e7ed      	b.n	8007762 <__kernel_rem_pio2f+0x326>
 8007786:	bf00      	nop
 8007788:	080088a0 	.word	0x080088a0
 800778c:	00000000 	.word	0x00000000
 8007790:	3b800000 	.word	0x3b800000
 8007794:	43800000 	.word	0x43800000
 8007798:	f10d 0cb0 	add.w	ip, sp, #176	; 0xb0
 800779c:	2100      	movs	r1, #0
 800779e:	1a65      	subs	r5, r4, r1
 80077a0:	d417      	bmi.n	80077d2 <__kernel_rem_pio2f+0x396>
 80077a2:	a840      	add	r0, sp, #256	; 0x100
 80077a4:	f8df e15c 	ldr.w	lr, [pc, #348]	; 8007904 <__kernel_rem_pio2f+0x4c8>
 80077a8:	eddf 7a55 	vldr	s15, [pc, #340]	; 8007900 <__kernel_rem_pio2f+0x4c4>
 80077ac:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80077b0:	2000      	movs	r0, #0
 80077b2:	4548      	cmp	r0, r9
 80077b4:	dc09      	bgt.n	80077ca <__kernel_rem_pio2f+0x38e>
 80077b6:	4288      	cmp	r0, r1
 80077b8:	dc07      	bgt.n	80077ca <__kernel_rem_pio2f+0x38e>
 80077ba:	ecfe 6a01 	vldmia	lr!, {s13}
 80077be:	ecb5 7a01 	vldmia	r5!, {s14}
 80077c2:	3001      	adds	r0, #1
 80077c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80077c8:	e7f3      	b.n	80077b2 <__kernel_rem_pio2f+0x376>
 80077ca:	ecec 7a01 	vstmia	ip!, {s15}
 80077ce:	3101      	adds	r1, #1
 80077d0:	e7e5      	b.n	800779e <__kernel_rem_pio2f+0x362>
 80077d2:	9962      	ldr	r1, [sp, #392]	; 0x188
 80077d4:	2903      	cmp	r1, #3
 80077d6:	f200 808c 	bhi.w	80078f2 <__kernel_rem_pio2f+0x4b6>
 80077da:	e8df f001 	tbb	[pc, r1]
 80077de:	070d      	.short	0x070d
 80077e0:	0207      	.short	0x0207
 80077e2:	a92c      	add	r1, sp, #176	; 0xb0
 80077e4:	440b      	add	r3, r1
 80077e6:	4619      	mov	r1, r3
 80077e8:	4620      	mov	r0, r4
 80077ea:	e03b      	b.n	8007864 <__kernel_rem_pio2f+0x428>
 80077ec:	ab2c      	add	r3, sp, #176	; 0xb0
 80077ee:	441a      	add	r2, r3
 80077f0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8007900 <__kernel_rem_pio2f+0x4c4>
 80077f4:	4623      	mov	r3, r4
 80077f6:	e011      	b.n	800781c <__kernel_rem_pio2f+0x3e0>
 80077f8:	ab2c      	add	r3, sp, #176	; 0xb0
 80077fa:	eddf 7a41 	vldr	s15, [pc, #260]	; 8007900 <__kernel_rem_pio2f+0x4c4>
 80077fe:	441a      	add	r2, r3
 8007800:	2c00      	cmp	r4, #0
 8007802:	db05      	blt.n	8007810 <__kernel_rem_pio2f+0x3d4>
 8007804:	ed32 7a01 	vldmdb	r2!, {s14}
 8007808:	3c01      	subs	r4, #1
 800780a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800780e:	e7f7      	b.n	8007800 <__kernel_rem_pio2f+0x3c4>
 8007810:	b10e      	cbz	r6, 8007816 <__kernel_rem_pio2f+0x3da>
 8007812:	eef1 7a67 	vneg.f32	s15, s15
 8007816:	edc7 7a00 	vstr	s15, [r7]
 800781a:	e06a      	b.n	80078f2 <__kernel_rem_pio2f+0x4b6>
 800781c:	2b00      	cmp	r3, #0
 800781e:	db05      	blt.n	800782c <__kernel_rem_pio2f+0x3f0>
 8007820:	ed72 7a01 	vldmdb	r2!, {s15}
 8007824:	3b01      	subs	r3, #1
 8007826:	ee37 7a27 	vadd.f32	s14, s14, s15
 800782a:	e7f7      	b.n	800781c <__kernel_rem_pio2f+0x3e0>
 800782c:	b116      	cbz	r6, 8007834 <__kernel_rem_pio2f+0x3f8>
 800782e:	eef1 7a47 	vneg.f32	s15, s14
 8007832:	e001      	b.n	8007838 <__kernel_rem_pio2f+0x3fc>
 8007834:	eef0 7a47 	vmov.f32	s15, s14
 8007838:	edc7 7a00 	vstr	s15, [r7]
 800783c:	eddd 7a2c 	vldr	s15, [sp, #176]	; 0xb0
 8007840:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007844:	aa2d      	add	r2, sp, #180	; 0xb4
 8007846:	2301      	movs	r3, #1
 8007848:	429c      	cmp	r4, r3
 800784a:	db05      	blt.n	8007858 <__kernel_rem_pio2f+0x41c>
 800784c:	ecb2 7a01 	vldmia	r2!, {s14}
 8007850:	3301      	adds	r3, #1
 8007852:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007856:	e7f7      	b.n	8007848 <__kernel_rem_pio2f+0x40c>
 8007858:	b10e      	cbz	r6, 800785e <__kernel_rem_pio2f+0x422>
 800785a:	eef1 7a67 	vneg.f32	s15, s15
 800785e:	edc7 7a01 	vstr	s15, [r7, #4]
 8007862:	e046      	b.n	80078f2 <__kernel_rem_pio2f+0x4b6>
 8007864:	2800      	cmp	r0, #0
 8007866:	dd0f      	ble.n	8007888 <__kernel_rem_pio2f+0x44c>
 8007868:	ed71 7a01 	vldmdb	r1!, {s15}
 800786c:	edd1 6a01 	vldr	s13, [r1, #4]
 8007870:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007874:	3801      	subs	r0, #1
 8007876:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800787a:	ed81 7a00 	vstr	s14, [r1]
 800787e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007882:	edc1 7a01 	vstr	s15, [r1, #4]
 8007886:	e7ed      	b.n	8007864 <__kernel_rem_pio2f+0x428>
 8007888:	4621      	mov	r1, r4
 800788a:	2901      	cmp	r1, #1
 800788c:	dd0f      	ble.n	80078ae <__kernel_rem_pio2f+0x472>
 800788e:	ed73 7a01 	vldmdb	r3!, {s15}
 8007892:	edd3 6a01 	vldr	s13, [r3, #4]
 8007896:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800789a:	3901      	subs	r1, #1
 800789c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078a0:	ed83 7a00 	vstr	s14, [r3]
 80078a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a8:	edc3 7a01 	vstr	s15, [r3, #4]
 80078ac:	e7ed      	b.n	800788a <__kernel_rem_pio2f+0x44e>
 80078ae:	ab2c      	add	r3, sp, #176	; 0xb0
 80078b0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007900 <__kernel_rem_pio2f+0x4c4>
 80078b4:	441a      	add	r2, r3
 80078b6:	2c01      	cmp	r4, #1
 80078b8:	dd05      	ble.n	80078c6 <__kernel_rem_pio2f+0x48a>
 80078ba:	ed32 7a01 	vldmdb	r2!, {s14}
 80078be:	3c01      	subs	r4, #1
 80078c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078c4:	e7f7      	b.n	80078b6 <__kernel_rem_pio2f+0x47a>
 80078c6:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 80078ca:	ed9d 7a2d 	vldr	s14, [sp, #180]	; 0xb4
 80078ce:	b926      	cbnz	r6, 80078da <__kernel_rem_pio2f+0x49e>
 80078d0:	edc7 6a00 	vstr	s13, [r7]
 80078d4:	ed87 7a01 	vstr	s14, [r7, #4]
 80078d8:	e009      	b.n	80078ee <__kernel_rem_pio2f+0x4b2>
 80078da:	eef1 6a66 	vneg.f32	s13, s13
 80078de:	eeb1 7a47 	vneg.f32	s14, s14
 80078e2:	edc7 6a00 	vstr	s13, [r7]
 80078e6:	ed87 7a01 	vstr	s14, [r7, #4]
 80078ea:	eef1 7a67 	vneg.f32	s15, s15
 80078ee:	edc7 7a02 	vstr	s15, [r7, #8]
 80078f2:	f00b 0007 	and.w	r0, fp, #7
 80078f6:	b055      	add	sp, #340	; 0x154
 80078f8:	ecbd 8b04 	vpop	{d8-d9}
 80078fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007900:	00000000 	.word	0x00000000
 8007904:	080088ac 	.word	0x080088ac

08007908 <__kernel_sinf>:
 8007908:	ee10 3a10 	vmov	r3, s0
 800790c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007910:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007914:	da04      	bge.n	8007920 <__kernel_sinf+0x18>
 8007916:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800791a:	ee17 3a90 	vmov	r3, s15
 800791e:	b35b      	cbz	r3, 8007978 <__kernel_sinf+0x70>
 8007920:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007924:	eddf 7a15 	vldr	s15, [pc, #84]	; 800797c <__kernel_sinf+0x74>
 8007928:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007980 <__kernel_sinf+0x78>
 800792c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007930:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007984 <__kernel_sinf+0x7c>
 8007934:	eee7 7a06 	vfma.f32	s15, s14, s12
 8007938:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007988 <__kernel_sinf+0x80>
 800793c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007940:	eddf 7a12 	vldr	s15, [pc, #72]	; 800798c <__kernel_sinf+0x84>
 8007944:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007948:	eee7 7a06 	vfma.f32	s15, s14, s12
 800794c:	b930      	cbnz	r0, 800795c <__kernel_sinf+0x54>
 800794e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007990 <__kernel_sinf+0x88>
 8007952:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007956:	eea6 0a86 	vfma.f32	s0, s13, s12
 800795a:	4770      	bx	lr
 800795c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007960:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007964:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007968:	eed7 0a27 	vfnms.f32	s1, s14, s15
 800796c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007994 <__kernel_sinf+0x8c>
 8007970:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007974:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	2f2ec9d3 	.word	0x2f2ec9d3
 8007980:	b2d72f34 	.word	0xb2d72f34
 8007984:	3638ef1b 	.word	0x3638ef1b
 8007988:	b9500d01 	.word	0xb9500d01
 800798c:	3c088889 	.word	0x3c088889
 8007990:	be2aaaab 	.word	0xbe2aaaab
 8007994:	3e2aaaab 	.word	0x3e2aaaab

08007998 <matherr>:
 8007998:	2000      	movs	r0, #0
 800799a:	4770      	bx	lr

0800799c <rint>:
 800799c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800799e:	ec53 2b10 	vmov	r2, r3, d0
 80079a2:	f3c3 570a 	ubfx	r7, r3, #20, #11
 80079a6:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80079aa:	2e13      	cmp	r6, #19
 80079ac:	461d      	mov	r5, r3
 80079ae:	4611      	mov	r1, r2
 80079b0:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 80079b4:	dc42      	bgt.n	8007a3c <rint+0xa0>
 80079b6:	2e00      	cmp	r6, #0
 80079b8:	da28      	bge.n	8007a0c <rint+0x70>
 80079ba:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80079be:	4311      	orrs	r1, r2
 80079c0:	d06b      	beq.n	8007a9a <rint+0xfe>
 80079c2:	f3c3 0613 	ubfx	r6, r3, #0, #20
 80079c6:	4316      	orrs	r6, r2
 80079c8:	4273      	negs	r3, r6
 80079ca:	431e      	orrs	r6, r3
 80079cc:	4b36      	ldr	r3, [pc, #216]	; (8007aa8 <rint+0x10c>)
 80079ce:	0b36      	lsrs	r6, r6, #12
 80079d0:	0c6d      	lsrs	r5, r5, #17
 80079d2:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 80079d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079da:	046d      	lsls	r5, r5, #17
 80079dc:	ea46 0105 	orr.w	r1, r6, r5
 80079e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80079e4:	ee10 0a10 	vmov	r0, s0
 80079e8:	4632      	mov	r2, r6
 80079ea:	463b      	mov	r3, r7
 80079ec:	f7f8 fbf2 	bl	80001d4 <__adddf3>
 80079f0:	e9cd 0100 	strd	r0, r1, [sp]
 80079f4:	4632      	mov	r2, r6
 80079f6:	463b      	mov	r3, r7
 80079f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079fc:	f7f8 fbe8 	bl	80001d0 <__aeabi_dsub>
 8007a00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007a04:	4602      	mov	r2, r0
 8007a06:	ea41 73c4 	orr.w	r3, r1, r4, lsl #31
 8007a0a:	e046      	b.n	8007a9a <rint+0xfe>
 8007a0c:	4827      	ldr	r0, [pc, #156]	; (8007aac <rint+0x110>)
 8007a0e:	4130      	asrs	r0, r6
 8007a10:	ea03 0700 	and.w	r7, r3, r0
 8007a14:	4317      	orrs	r7, r2
 8007a16:	d040      	beq.n	8007a9a <rint+0xfe>
 8007a18:	0843      	lsrs	r3, r0, #1
 8007a1a:	ea05 0203 	and.w	r2, r5, r3
 8007a1e:	4311      	orrs	r1, r2
 8007a20:	d027      	beq.n	8007a72 <rint+0xd6>
 8007a22:	ea25 0303 	bic.w	r3, r5, r3
 8007a26:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8007a2a:	2e13      	cmp	r6, #19
 8007a2c:	fa45 f506 	asr.w	r5, r5, r6
 8007a30:	bf0c      	ite	eq
 8007a32:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
 8007a36:	2100      	movne	r1, #0
 8007a38:	431d      	orrs	r5, r3
 8007a3a:	e01a      	b.n	8007a72 <rint+0xd6>
 8007a3c:	2e33      	cmp	r6, #51	; 0x33
 8007a3e:	dd08      	ble.n	8007a52 <rint+0xb6>
 8007a40:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007a44:	ee10 0a10 	vmov	r0, s0
 8007a48:	4619      	mov	r1, r3
 8007a4a:	d128      	bne.n	8007a9e <rint+0x102>
 8007a4c:	f7f8 fbc2 	bl	80001d4 <__adddf3>
 8007a50:	e025      	b.n	8007a9e <rint+0x102>
 8007a52:	f2a7 4613 	subw	r6, r7, #1043	; 0x413
 8007a56:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5a:	40f0      	lsrs	r0, r6
 8007a5c:	4202      	tst	r2, r0
 8007a5e:	d01c      	beq.n	8007a9a <rint+0xfe>
 8007a60:	0843      	lsrs	r3, r0, #1
 8007a62:	4219      	tst	r1, r3
 8007a64:	bf1f      	itttt	ne
 8007a66:	ea21 0303 	bicne.w	r3, r1, r3
 8007a6a:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000
 8007a6e:	4131      	asrne	r1, r6
 8007a70:	4319      	orrne	r1, r3
 8007a72:	4b0d      	ldr	r3, [pc, #52]	; (8007aa8 <rint+0x10c>)
 8007a74:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007a78:	4608      	mov	r0, r1
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	e9d4 4500 	ldrd	r4, r5, [r4]
 8007a80:	4622      	mov	r2, r4
 8007a82:	462b      	mov	r3, r5
 8007a84:	f7f8 fba6 	bl	80001d4 <__adddf3>
 8007a88:	e9cd 0100 	strd	r0, r1, [sp]
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	462b      	mov	r3, r5
 8007a90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a94:	f7f8 fb9c 	bl	80001d0 <__aeabi_dsub>
 8007a98:	e001      	b.n	8007a9e <rint+0x102>
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	ec41 0b10 	vmov	d0, r0, r1
 8007aa2:	b003      	add	sp, #12
 8007aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	080088d8 	.word	0x080088d8
 8007aac:	000fffff 	.word	0x000fffff

08007ab0 <fabsf>:
 8007ab0:	ee10 3a10 	vmov	r3, s0
 8007ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ab8:	ee00 3a10 	vmov	s0, r3
 8007abc:	4770      	bx	lr

08007abe <finitef>:
 8007abe:	ee10 3a10 	vmov	r3, s0
 8007ac2:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8007ac6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007aca:	bfac      	ite	ge
 8007acc:	2000      	movge	r0, #0
 8007ace:	2001      	movlt	r0, #1
 8007ad0:	4770      	bx	lr
	...

08007ad4 <floorf>:
 8007ad4:	ee10 3a10 	vmov	r3, s0
 8007ad8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007adc:	0dca      	lsrs	r2, r1, #23
 8007ade:	3a7f      	subs	r2, #127	; 0x7f
 8007ae0:	2a16      	cmp	r2, #22
 8007ae2:	dc28      	bgt.n	8007b36 <floorf+0x62>
 8007ae4:	2a00      	cmp	r2, #0
 8007ae6:	da0f      	bge.n	8007b08 <floorf+0x34>
 8007ae8:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007b4c <floorf+0x78>
 8007aec:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007af0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af8:	dd24      	ble.n	8007b44 <floorf+0x70>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	da21      	bge.n	8007b42 <floorf+0x6e>
 8007afe:	4a14      	ldr	r2, [pc, #80]	; (8007b50 <floorf+0x7c>)
 8007b00:	2900      	cmp	r1, #0
 8007b02:	bf18      	it	ne
 8007b04:	4613      	movne	r3, r2
 8007b06:	e01d      	b.n	8007b44 <floorf+0x70>
 8007b08:	4912      	ldr	r1, [pc, #72]	; (8007b54 <floorf+0x80>)
 8007b0a:	4111      	asrs	r1, r2
 8007b0c:	420b      	tst	r3, r1
 8007b0e:	d01b      	beq.n	8007b48 <floorf+0x74>
 8007b10:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007b4c <floorf+0x78>
 8007b14:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007b18:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b20:	dd10      	ble.n	8007b44 <floorf+0x70>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bfbe      	ittt	lt
 8007b26:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007b2a:	fa40 f202 	asrlt.w	r2, r0, r2
 8007b2e:	189b      	addlt	r3, r3, r2
 8007b30:	ea23 0301 	bic.w	r3, r3, r1
 8007b34:	e006      	b.n	8007b44 <floorf+0x70>
 8007b36:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007b3a:	d305      	bcc.n	8007b48 <floorf+0x74>
 8007b3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007b40:	4770      	bx	lr
 8007b42:	2300      	movs	r3, #0
 8007b44:	ee00 3a10 	vmov	s0, r3
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	7149f2ca 	.word	0x7149f2ca
 8007b50:	bf800000 	.word	0xbf800000
 8007b54:	007fffff 	.word	0x007fffff

08007b58 <nanf>:
 8007b58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b60 <nanf+0x8>
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	7fc00000 	.word	0x7fc00000

08007b64 <scalbnf>:
 8007b64:	b508      	push	{r3, lr}
 8007b66:	ee10 2a10 	vmov	r2, s0
 8007b6a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007b6e:	ed2d 8b02 	vpush	{d8}
 8007b72:	eef0 0a40 	vmov.f32	s1, s0
 8007b76:	d045      	beq.n	8007c04 <scalbnf+0xa0>
 8007b78:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007b7c:	d302      	bcc.n	8007b84 <scalbnf+0x20>
 8007b7e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007b82:	e03f      	b.n	8007c04 <scalbnf+0xa0>
 8007b84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b88:	d211      	bcs.n	8007bae <scalbnf+0x4a>
 8007b8a:	4b20      	ldr	r3, [pc, #128]	; (8007c0c <scalbnf+0xa8>)
 8007b8c:	eddf 7a20 	vldr	s15, [pc, #128]	; 8007c10 <scalbnf+0xac>
 8007b90:	4298      	cmp	r0, r3
 8007b92:	ee60 0a27 	vmul.f32	s1, s0, s15
 8007b96:	db05      	blt.n	8007ba4 <scalbnf+0x40>
 8007b98:	ee10 2a90 	vmov	r2, s1
 8007b9c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8007ba0:	3b19      	subs	r3, #25
 8007ba2:	e005      	b.n	8007bb0 <scalbnf+0x4c>
 8007ba4:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8007c14 <scalbnf+0xb0>
 8007ba8:	ee20 0a80 	vmul.f32	s0, s1, s0
 8007bac:	e02a      	b.n	8007c04 <scalbnf+0xa0>
 8007bae:	0ddb      	lsrs	r3, r3, #23
 8007bb0:	4403      	add	r3, r0
 8007bb2:	2bfe      	cmp	r3, #254	; 0xfe
 8007bb4:	dc0f      	bgt.n	8007bd6 <scalbnf+0x72>
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	dd06      	ble.n	8007bc8 <scalbnf+0x64>
 8007bba:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007bbe:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007bc2:	ee00 3a10 	vmov	s0, r3
 8007bc6:	e01d      	b.n	8007c04 <scalbnf+0xa0>
 8007bc8:	f113 0f16 	cmn.w	r3, #22
 8007bcc:	da0f      	bge.n	8007bee <scalbnf+0x8a>
 8007bce:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007bd2:	4298      	cmp	r0, r3
 8007bd4:	dd02      	ble.n	8007bdc <scalbnf+0x78>
 8007bd6:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8007c18 <scalbnf+0xb4>
 8007bda:	e001      	b.n	8007be0 <scalbnf+0x7c>
 8007bdc:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8007c14 <scalbnf+0xb0>
 8007be0:	eeb0 0a48 	vmov.f32	s0, s16
 8007be4:	f000 f81c 	bl	8007c20 <copysignf>
 8007be8:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007bec:	e00a      	b.n	8007c04 <scalbnf+0xa0>
 8007bee:	3319      	adds	r3, #25
 8007bf0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007bf4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007bf8:	ee00 3a90 	vmov	s1, r3
 8007bfc:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007c1c <scalbnf+0xb8>
 8007c00:	ee20 0aa7 	vmul.f32	s0, s1, s15
 8007c04:	ecbd 8b02 	vpop	{d8}
 8007c08:	bd08      	pop	{r3, pc}
 8007c0a:	bf00      	nop
 8007c0c:	ffff3cb0 	.word	0xffff3cb0
 8007c10:	4c000000 	.word	0x4c000000
 8007c14:	0da24260 	.word	0x0da24260
 8007c18:	7149f2ca 	.word	0x7149f2ca
 8007c1c:	33000000 	.word	0x33000000

08007c20 <copysignf>:
 8007c20:	ee10 3a10 	vmov	r3, s0
 8007c24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c28:	ee10 3a90 	vmov	r3, s1
 8007c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c30:	4313      	orrs	r3, r2
 8007c32:	ee00 3a10 	vmov	s0, r3
 8007c36:	4770      	bx	lr

08007c38 <__errno>:
 8007c38:	4b01      	ldr	r3, [pc, #4]	; (8007c40 <__errno+0x8>)
 8007c3a:	6818      	ldr	r0, [r3, #0]
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	2000018c 	.word	0x2000018c

08007c44 <_sbrk>:
 8007c44:	4b04      	ldr	r3, [pc, #16]	; (8007c58 <_sbrk+0x14>)
 8007c46:	6819      	ldr	r1, [r3, #0]
 8007c48:	4602      	mov	r2, r0
 8007c4a:	b909      	cbnz	r1, 8007c50 <_sbrk+0xc>
 8007c4c:	4903      	ldr	r1, [pc, #12]	; (8007c5c <_sbrk+0x18>)
 8007c4e:	6019      	str	r1, [r3, #0]
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	4402      	add	r2, r0
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	4770      	bx	lr
 8007c58:	200049ac 	.word	0x200049ac
 8007c5c:	20004ae0 	.word	0x20004ae0

08007c60 <_init>:
 8007c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c62:	bf00      	nop
 8007c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c66:	bc08      	pop	{r3}
 8007c68:	469e      	mov	lr, r3
 8007c6a:	4770      	bx	lr

08007c6c <_fini>:
 8007c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6e:	bf00      	nop
 8007c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c72:	bc08      	pop	{r3}
 8007c74:	469e      	mov	lr, r3
 8007c76:	4770      	bx	lr
