
C:\stm32_workspace\synth_02\Debug\synth_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f70  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a4  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006a9c  08006a9c  00016a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006aa0  08006aa0  00016aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  20000000  08006aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
  7 .bss          000064c8  2000009c  2000009c  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20006564  20006564  0002009c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ca67  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000207c  00000000  00000000  0002cb31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f58  00000000  00000000  0002ebb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000de8  00000000  00000000  0002fb08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000059c0  00000000  00000000  000308f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004e29  00000000  00000000  000362b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000ee  00000000  00000000  0003b0d9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004034  00000000  00000000  0003b1c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000000c8  00000000  00000000  0003f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080060e0 	.word	0x080060e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	080060e0 	.word	0x080060e0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73bb      	strb	r3, [r7, #14]
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	78db      	ldrb	r3, [r3, #3]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d038      	beq.n	8000a9a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <NVIC_Init+0xbc>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000a32:	0a1b      	lsrs	r3, r3, #8
 8000a34:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	f1c3 0304 	rsb	r3, r3, #4
 8000a3c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000a3e:	7b7a      	ldrb	r2, [r7, #13]
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	fa42 f303 	asr.w	r3, r2, r3
 8000a46:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	785b      	ldrb	r3, [r3, #1]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	7bbb      	ldrb	r3, [r7, #14]
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	789a      	ldrb	r2, [r3, #2]
 8000a5a:	7b7b      	ldrb	r3, [r7, #13]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	011b      	lsls	r3, r3, #4
 8000a6a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000a6c:	4a17      	ldr	r2, [pc, #92]	; (8000acc <NVIC_Init+0xc0>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	7bfa      	ldrb	r2, [r7, #15]
 8000a76:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a7a:	4a14      	ldr	r2, [pc, #80]	; (8000acc <NVIC_Init+0xc0>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	095b      	lsrs	r3, r3, #5
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	f003 031f 	and.w	r3, r3, #31
 8000a8e:	2101      	movs	r1, #1
 8000a90:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a94:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000a98:	e00f      	b.n	8000aba <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a9a:	490c      	ldr	r1, [pc, #48]	; (8000acc <NVIC_Init+0xc0>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	095b      	lsrs	r3, r3, #5
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	f003 031f 	and.w	r3, r3, #31
 8000aae:	2201      	movs	r2, #1
 8000ab0:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ab2:	f100 0320 	add.w	r3, r0, #32
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ada:	f001 f9ad 	bl	8001e38 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ae4:	f001 f9a8 	bl	8001e38 <RCC_APB2PeriphResetCmd>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b0e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	791b      	ldrb	r3, [r3, #4]
 8000b14:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <ADC_Init+0xa8>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b3e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000b44:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	795b      	ldrb	r3, [r3, #5]
 8000b4a:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000b66:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	7d1b      	ldrb	r3, [r3, #20]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	7afb      	ldrb	r3, [r7, #11]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000b76:	7afb      	ldrb	r3, [r7, #11]
 8000b78:	051b      	lsls	r3, r3, #20
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	c0fff7fd 	.word	0xc0fff7fd

08000b98 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	751a      	strb	r2, [r3, #20]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <ADC_CommonInit+0x48>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <ADC_CommonInit+0x4c>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000bfa:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000c00:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000c06:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <ADC_CommonInit+0x48>)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	6053      	str	r3, [r2, #4]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	40012300 	.word	0x40012300
 8000c24:	fffc30e0 	.word	0xfffc30e0

08000c28 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d006      	beq.n	8000c74 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f043 0201 	orr.w	r2, r3, #1
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000c72:	e005      	b.n	8000c80 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f023 0201 	bic.w	r2, r3, #1
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
  }
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	70fb      	strb	r3, [r7, #3]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	70bb      	strb	r3, [r7, #2]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	2b09      	cmp	r3, #9
 8000cb2:	d923      	bls.n	8000cfc <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000cba:	78fb      	ldrb	r3, [r7, #3]
 8000cbc:	f1a3 020a 	sub.w	r2, r3, #10
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000cd8:	7879      	ldrb	r1, [r7, #1]
 8000cda:	78fb      	ldrb	r3, [r7, #3]
 8000cdc:	f1a3 020a 	sub.w	r2, r3, #10
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	e01e      	b.n	8000d3a <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	691b      	ldr	r3, [r3, #16]
 8000d00:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000d02:	78fa      	ldrb	r2, [r7, #3]
 8000d04:	4613      	mov	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4413      	add	r3, r2
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	43db      	mvns	r3, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000d1c:	7879      	ldrb	r1, [r7, #1]
 8000d1e:	78fa      	ldrb	r2, [r7, #3]
 8000d20:	4613      	mov	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4413      	add	r3, r2
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000d3a:	78bb      	ldrb	r3, [r7, #2]
 8000d3c:	2b06      	cmp	r3, #6
 8000d3e:	d821      	bhi.n	8000d84 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d44:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000d46:	78bb      	ldrb	r3, [r7, #2]
 8000d48:	1e5a      	subs	r2, r3, #1
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	221f      	movs	r2, #31
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000d62:	78f9      	ldrb	r1, [r7, #3]
 8000d64:	78bb      	ldrb	r3, [r7, #2]
 8000d66:	1e5a      	subs	r2, r3, #1
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000d82:	e047      	b.n	8000e14 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000d84:	78bb      	ldrb	r3, [r7, #2]
 8000d86:	2b0c      	cmp	r3, #12
 8000d88:	d821      	bhi.n	8000dce <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000d90:	78bb      	ldrb	r3, [r7, #2]
 8000d92:	1fda      	subs	r2, r3, #7
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	221f      	movs	r2, #31
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000dac:	78f9      	ldrb	r1, [r7, #3]
 8000dae:	78bb      	ldrb	r3, [r7, #2]
 8000db0:	1fda      	subs	r2, r3, #7
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000dcc:	e022      	b.n	8000e14 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000dd4:	78bb      	ldrb	r3, [r7, #2]
 8000dd6:	f1a3 020d 	sub.w	r2, r3, #13
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	221f      	movs	r2, #31
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4013      	ands	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000df2:	78f9      	ldrb	r1, [r7, #3]
 8000df4:	78bb      	ldrb	r3, [r7, #2]
 8000df6:	f1a3 020d 	sub.w	r2, r3, #13
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d006      	beq.n	8000e40 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000e3e:	e005      	b.n	8000e4c <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d006      	beq.n	8000e78 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8000e76:	e005      	b.n	8000e84 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	609a      	str	r2, [r3, #8]
  }
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8000ea0:	887b      	ldrh	r3, [r7, #2]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	601a      	str	r2, [r3, #0]
}                    
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <DAC_Init+0x64>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8000ed4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000ef4:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8000efa:	4313      	orrs	r3, r2
 8000efc:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <DAC_Init+0x64>)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6013      	str	r3, [r2, #0]
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40007400 	.word	0x40007400

08000f24 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d009      	beq.n	8000f4a <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8000f36:	490d      	ldr	r1, [pc, #52]	; (8000f6c <DAC_Cmd+0x48>)
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <DAC_Cmd+0x48>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	fa00 f303 	lsl.w	r3, r0, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 8000f48:	e009      	b.n	8000f5e <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8000f4a:	4908      	ldr	r1, [pc, #32]	; (8000f6c <DAC_Cmd+0x48>)
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <DAC_Cmd+0x48>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	2001      	movs	r0, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	fa00 f303 	lsl.w	r3, r0, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	600b      	str	r3, [r1, #0]
  }
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40007400 	.word	0x40007400

08000f70 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <DAC_SetChannel1Data+0x34>)
 8000f82:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	3308      	adds	r3, #8
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	461a      	mov	r2, r3
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40007400 	.word	0x40007400

08000fa8 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f023 0201 	bic.w	r2, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2221      	movs	r2, #33	; 0x21
 8000fde:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a46      	ldr	r2, [pc, #280]	; (80010fc <DMA_DeInit+0x154>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d103      	bne.n	8000ff0 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000fe8:	4b45      	ldr	r3, [pc, #276]	; (8001100 <DMA_DeInit+0x158>)
 8000fea:	223d      	movs	r2, #61	; 0x3d
 8000fec:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000fee:	e07e      	b.n	80010ee <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a44      	ldr	r2, [pc, #272]	; (8001104 <DMA_DeInit+0x15c>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d104      	bne.n	8001002 <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000ff8:	4b41      	ldr	r3, [pc, #260]	; (8001100 <DMA_DeInit+0x158>)
 8000ffa:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000ffe:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001000:	e075      	b.n	80010ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a40      	ldr	r2, [pc, #256]	; (8001108 <DMA_DeInit+0x160>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d104      	bne.n	8001014 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <DMA_DeInit+0x158>)
 800100c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001010:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001012:	e06c      	b.n	80010ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a3d      	ldr	r2, [pc, #244]	; (800110c <DMA_DeInit+0x164>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d104      	bne.n	8001026 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800101c:	4b38      	ldr	r3, [pc, #224]	; (8001100 <DMA_DeInit+0x158>)
 800101e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8001022:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001024:	e063      	b.n	80010ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a39      	ldr	r2, [pc, #228]	; (8001110 <DMA_DeInit+0x168>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d103      	bne.n	8001036 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800102e:	4b34      	ldr	r3, [pc, #208]	; (8001100 <DMA_DeInit+0x158>)
 8001030:	4a38      	ldr	r2, [pc, #224]	; (8001114 <DMA_DeInit+0x16c>)
 8001032:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001034:	e05b      	b.n	80010ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a37      	ldr	r2, [pc, #220]	; (8001118 <DMA_DeInit+0x170>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d103      	bne.n	8001046 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800103e:	4b30      	ldr	r3, [pc, #192]	; (8001100 <DMA_DeInit+0x158>)
 8001040:	4a36      	ldr	r2, [pc, #216]	; (800111c <DMA_DeInit+0x174>)
 8001042:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001044:	e053      	b.n	80010ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a35      	ldr	r2, [pc, #212]	; (8001120 <DMA_DeInit+0x178>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d103      	bne.n	8001056 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800104e:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <DMA_DeInit+0x158>)
 8001050:	4a34      	ldr	r2, [pc, #208]	; (8001124 <DMA_DeInit+0x17c>)
 8001052:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001054:	e04b      	b.n	80010ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a33      	ldr	r2, [pc, #204]	; (8001128 <DMA_DeInit+0x180>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d104      	bne.n	8001068 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <DMA_DeInit+0x158>)
 8001060:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001064:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001066:	e042      	b.n	80010ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a30      	ldr	r2, [pc, #192]	; (800112c <DMA_DeInit+0x184>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d103      	bne.n	8001078 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8001070:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <DMA_DeInit+0x188>)
 8001072:	223d      	movs	r2, #61	; 0x3d
 8001074:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001076:	e03a      	b.n	80010ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a2e      	ldr	r2, [pc, #184]	; (8001134 <DMA_DeInit+0x18c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d104      	bne.n	800108a <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8001080:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <DMA_DeInit+0x188>)
 8001082:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8001086:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001088:	e031      	b.n	80010ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a2a      	ldr	r2, [pc, #168]	; (8001138 <DMA_DeInit+0x190>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d104      	bne.n	800109c <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8001092:	4b27      	ldr	r3, [pc, #156]	; (8001130 <DMA_DeInit+0x188>)
 8001094:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001098:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800109a:	e028      	b.n	80010ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a27      	ldr	r2, [pc, #156]	; (800113c <DMA_DeInit+0x194>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d104      	bne.n	80010ae <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <DMA_DeInit+0x188>)
 80010a6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80010aa:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80010ac:	e01f      	b.n	80010ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a23      	ldr	r2, [pc, #140]	; (8001140 <DMA_DeInit+0x198>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d103      	bne.n	80010be <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <DMA_DeInit+0x188>)
 80010b8:	4a16      	ldr	r2, [pc, #88]	; (8001114 <DMA_DeInit+0x16c>)
 80010ba:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80010bc:	e017      	b.n	80010ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a20      	ldr	r2, [pc, #128]	; (8001144 <DMA_DeInit+0x19c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d103      	bne.n	80010ce <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <DMA_DeInit+0x188>)
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <DMA_DeInit+0x174>)
 80010ca:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80010cc:	e00f      	b.n	80010ee <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <DMA_DeInit+0x1a0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d103      	bne.n	80010de <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <DMA_DeInit+0x188>)
 80010d8:	4a12      	ldr	r2, [pc, #72]	; (8001124 <DMA_DeInit+0x17c>)
 80010da:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80010dc:	e007      	b.n	80010ee <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a1a      	ldr	r2, [pc, #104]	; (800114c <DMA_DeInit+0x1a4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d103      	bne.n	80010ee <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <DMA_DeInit+0x188>)
 80010e8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80010ec:	60da      	str	r2, [r3, #12]
    }
  }
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40026010 	.word	0x40026010
 8001100:	40026000 	.word	0x40026000
 8001104:	40026028 	.word	0x40026028
 8001108:	40026040 	.word	0x40026040
 800110c:	40026058 	.word	0x40026058
 8001110:	40026070 	.word	0x40026070
 8001114:	2000003d 	.word	0x2000003d
 8001118:	40026088 	.word	0x40026088
 800111c:	20000f40 	.word	0x20000f40
 8001120:	400260a0 	.word	0x400260a0
 8001124:	203d0000 	.word	0x203d0000
 8001128:	400260b8 	.word	0x400260b8
 800112c:	40026410 	.word	0x40026410
 8001130:	40026400 	.word	0x40026400
 8001134:	40026428 	.word	0x40026428
 8001138:	40026440 	.word	0x40026440
 800113c:	40026458 	.word	0x40026458
 8001140:	40026470 	.word	0x40026470
 8001144:	40026488 	.word	0x40026488
 8001148:	400264a0 	.word	0x400264a0
 800114c:	400264b8 	.word	0x400264b8

08001150 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <DMA_Init+0xac>)
 8001168:	4013      	ands	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800117a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001186:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001192:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001198:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800119e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a4:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f023 0307 	bic.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4313      	orrs	r3, r2
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60da      	str	r2, [r3, #12]
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	f01c803f 	.word	0xf01c803f

08001200 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d006      	beq.n	8001290 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f043 0201 	orr.w	r2, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800128e:	e005      	b.n	800129c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f023 0201 	bic.w	r2, r3, #1
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	601a      	str	r2, [r3, #0]
  }
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a15      	ldr	r2, [pc, #84]	; (8001314 <DMA_GetFlagStatus+0x6c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d802      	bhi.n	80012c8 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <DMA_GetFlagStatus+0x70>)
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	e001      	b.n	80012cc <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <DMA_GetFlagStatus+0x74>)
 80012ca:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	e002      	b.n	80012e4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80012ea:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80012ee:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80012fa:	2301      	movs	r3, #1
 80012fc:	75fb      	strb	r3, [r7, #23]
 80012fe:	e001      	b.n	8001304 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001304:	7dfb      	ldrb	r3, [r7, #23]
}
 8001306:	4618      	mov	r0, r3
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	4002640f 	.word	0x4002640f
 8001318:	40026000 	.word	0x40026000
 800131c:	40026400 	.word	0x40026400

08001320 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a10      	ldr	r2, [pc, #64]	; (8001370 <DMA_ClearFlag+0x50>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d802      	bhi.n	8001338 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <DMA_ClearFlag+0x54>)
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e001      	b.n	800133c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <DMA_ClearFlag+0x58>)
 800133a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800134c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8001354:	e006      	b.n	8001364 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800135c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	6093      	str	r3, [r2, #8]
  }    
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	4002640f 	.word	0x4002640f
 8001374:	40026000 	.word	0x40026000
 8001378:	40026400 	.word	0x40026400

0800137c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	4613      	mov	r3, r2
 8001388:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00f      	beq.n	80013b4 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	e005      	b.n	80013b4 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b80      	cmp	r3, #128	; 0x80
 80013b8:	d014      	beq.n	80013e4 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d008      	beq.n	80013d2 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	f003 031e 	and.w	r3, r3, #30
 80013ca:	431a      	orrs	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80013d0:	e008      	b.n	80013e4 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f003 031e 	and.w	r3, r3, #30
 80013dc:	43db      	mvns	r3, r3
 80013de:	401a      	ands	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80013fc:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <EXTI_Init+0xe0>)
 80013fe:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	799b      	ldrb	r3, [r3, #6]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d04f      	beq.n	80014a8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001408:	4931      	ldr	r1, [pc, #196]	; (80014d0 <EXTI_Init+0xe0>)
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <EXTI_Init+0xe0>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	43db      	mvns	r3, r3
 8001414:	4013      	ands	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001418:	492d      	ldr	r1, [pc, #180]	; (80014d0 <EXTI_Init+0xe0>)
 800141a:	4b2d      	ldr	r3, [pc, #180]	; (80014d0 <EXTI_Init+0xe0>)
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	43db      	mvns	r3, r3
 8001424:	4013      	ands	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	791b      	ldrb	r3, [r3, #4]
 800142c:	461a      	mov	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	6811      	ldr	r1, [r2, #0]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001442:	4923      	ldr	r1, [pc, #140]	; (80014d0 <EXTI_Init+0xe0>)
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <EXTI_Init+0xe0>)
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	43db      	mvns	r3, r3
 800144e:	4013      	ands	r3, r2
 8001450:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001452:	491f      	ldr	r1, [pc, #124]	; (80014d0 <EXTI_Init+0xe0>)
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <EXTI_Init+0xe0>)
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	43db      	mvns	r3, r3
 800145e:	4013      	ands	r3, r2
 8001460:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	795b      	ldrb	r3, [r3, #5]
 8001466:	2b10      	cmp	r3, #16
 8001468:	d10e      	bne.n	8001488 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800146a:	4919      	ldr	r1, [pc, #100]	; (80014d0 <EXTI_Init+0xe0>)
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <EXTI_Init+0xe0>)
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4313      	orrs	r3, r2
 8001476:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001478:	4915      	ldr	r1, [pc, #84]	; (80014d0 <EXTI_Init+0xe0>)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <EXTI_Init+0xe0>)
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4313      	orrs	r3, r2
 8001484:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001486:	e01d      	b.n	80014c4 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <EXTI_Init+0xe0>)
 800148a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	795b      	ldrb	r3, [r3, #5]
 8001490:	461a      	mov	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4413      	add	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	6811      	ldr	r1, [r2, #0]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80014a6:	e00d      	b.n	80014c4 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	791b      	ldrb	r3, [r3, #4]
 80014ac:	461a      	mov	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4413      	add	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	6811      	ldr	r1, [r2, #0]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	43d2      	mvns	r2, r2
 80014c0:	400a      	ands	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]
  }
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40013c00 	.word	0x40013c00

080014d4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <EXTI_ClearITPendingBit+0x1c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6153      	str	r3, [r2, #20]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40013c00 	.word	0x40013c00

080014f4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	e076      	b.n	80015fe <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001510:	2201      	movs	r2, #1
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	429a      	cmp	r2, r3
 800152a:	d165      	bne.n	80015f8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2103      	movs	r1, #3
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	401a      	ands	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	791b      	ldrb	r3, [r3, #4]
 800154a:	4619      	mov	r1, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	791b      	ldrb	r3, [r3, #4]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d003      	beq.n	800156a <GPIO_Init+0x76>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	791b      	ldrb	r3, [r3, #4]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d12e      	bne.n	80015c8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2103      	movs	r1, #3
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	401a      	ands	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	795b      	ldrb	r3, [r3, #5]
 8001588:	4619      	mov	r1, r3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	2101      	movs	r1, #1
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	401a      	ands	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	799b      	ldrb	r3, [r3, #6]
 80015b6:	4619      	mov	r1, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2103      	movs	r1, #3
 80015d4:	fa01 f303 	lsl.w	r3, r1, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	401a      	ands	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68da      	ldr	r2, [r3, #12]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	79db      	ldrb	r3, [r3, #7]
 80015e8:	4619      	mov	r1, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d985      	bls.n	8001510 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001604:	bf00      	nop
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	71da      	strb	r2, [r3, #7]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	887b      	ldrh	r3, [r7, #2]
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e001      	b.n	800166a <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	831a      	strh	r2, [r3, #24]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop

08001698 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	835a      	strh	r2, [r3, #26]
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop

080016b8 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80016c8:	787b      	ldrb	r3, [r7, #1]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	887a      	ldrh	r2, [r7, #2]
 80016d2:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80016d4:	e002      	b.n	80016dc <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	887a      	ldrh	r2, [r7, #2]
 80016da:	835a      	strh	r2, [r3, #26]
  }
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
 80016f4:	4613      	mov	r3, r2
 80016f6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001700:	787a      	ldrb	r2, [r7, #1]
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001710:	887b      	ldrh	r3, [r7, #2]
 8001712:	08db      	lsrs	r3, r3, #3
 8001714:	b29b      	uxth	r3, r3
 8001716:	4618      	mov	r0, r3
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	08db      	lsrs	r3, r3, #3
 800171c:	b29b      	uxth	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3208      	adds	r2, #8
 8001724:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	210f      	movs	r1, #15
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	ea02 0103 	and.w	r1, r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f100 0208 	add.w	r2, r0, #8
 8001742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	08db      	lsrs	r3, r3, #3
 800174a:	b29b      	uxth	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3208      	adds	r2, #8
 8001752:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4313      	orrs	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	08db      	lsrs	r3, r3, #3
 8001760:	b29b      	uxth	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3208      	adds	r2, #8
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <I2C_DeInit+0x68>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d10a      	bne.n	80017a2 <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800178c:	2101      	movs	r1, #1
 800178e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001792:	f000 fb31 	bl	8001df8 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8001796:	2100      	movs	r1, #0
 8001798:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800179c:	f000 fb2c 	bl	8001df8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80017a0:	e01c      	b.n	80017dc <I2C_DeInit+0x60>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <I2C_DeInit+0x6c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10a      	bne.n	80017c0 <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80017aa:	2101      	movs	r1, #1
 80017ac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80017b0:	f000 fb22 	bl	8001df8 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80017b4:	2100      	movs	r1, #0
 80017b6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80017ba:	f000 fb1d 	bl	8001df8 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80017be:	e00d      	b.n	80017dc <I2C_DeInit+0x60>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <I2C_DeInit+0x70>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d109      	bne.n	80017dc <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80017c8:	2101      	movs	r1, #1
 80017ca:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80017ce:	f000 fb13 	bl	8001df8 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80017d2:	2100      	movs	r1, #0
 80017d4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80017d8:	f000 fb0e 	bl	8001df8 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40005400 	.word	0x40005400
 80017e8:	40005800 	.word	0x40005800
 80017ec:	40005c00 	.word	0x40005c00

080017f0 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80017fe:	2300      	movs	r3, #0
 8001800:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8001802:	2304      	movs	r3, #4
 8001804:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8001806:	4b57      	ldr	r3, [pc, #348]	; (8001964 <I2C_Init+0x174>)
 8001808:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	889b      	ldrh	r3, [r3, #4]
 800180e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001810:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001812:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001816:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4618      	mov	r0, r3
 800181e:	f000 f9e1 	bl	8001be4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	4a4f      	ldr	r2, [pc, #316]	; (8001968 <I2C_Init+0x178>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0c9b      	lsrs	r3, r3, #18
 8001830:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8001832:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001834:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001836:	4313      	orrs	r3, r2
 8001838:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800183e:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	b29b      	uxth	r3, r3
 8001846:	f023 0301 	bic.w	r3, r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a44      	ldr	r2, [pc, #272]	; (800196c <I2C_Init+0x17c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d815      	bhi.n	800188a <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800186c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800186e:	2b03      	cmp	r3, #3
 8001870:	d801      	bhi.n	8001876 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8001872:	2304      	movs	r3, #4
 8001874:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001876:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001878:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800187a:	4313      	orrs	r3, r2
 800187c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800187e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001880:	3301      	adds	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	841a      	strh	r2, [r3, #32]
 8001888:	e040      	b.n	800190c <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	88db      	ldrh	r3, [r3, #6]
 800188e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001892:	4293      	cmp	r3, r2
 8001894:	d109      	bne.n	80018aa <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	69fa      	ldr	r2, [r7, #28]
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80018a8:	e00e      	b.n	80018c8 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	009a      	lsls	r2, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80018c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80018c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d103      	bne.n	80018da <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80018d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80018da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018de:	4313      	orrs	r3, r2
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018ea:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80018ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	4a1e      	ldr	r2, [pc, #120]	; (8001970 <I2C_Init+0x180>)
 80018f8:	fb82 1203 	smull	r1, r2, r2, r3
 80018fc:	1192      	asrs	r2, r2, #6
 80018fe:	17db      	asrs	r3, r3, #31
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	b29b      	uxth	r3, r3
 8001904:	3301      	adds	r3, #1
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001910:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001928:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800192a:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800192e:	f023 0302 	bic.w	r3, r3, #2
 8001932:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	889a      	ldrh	r2, [r3, #4]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	895b      	ldrh	r3, [r3, #10]
 800193c:	4313      	orrs	r3, r2
 800193e:	b29a      	uxth	r2, r3
 8001940:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001942:	4313      	orrs	r3, r2
 8001944:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800194a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	899a      	ldrh	r2, [r3, #12]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	891b      	ldrh	r3, [r3, #8]
 8001954:	4313      	orrs	r3, r2
 8001956:	b29a      	uxth	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	811a      	strh	r2, [r3, #8]
}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	007a1200 	.word	0x007a1200
 8001968:	431bde83 	.word	0x431bde83
 800196c:	000186a0 	.word	0x000186a0
 8001970:	10624dd3 	.word	0x10624dd3

08001974 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d008      	beq.n	8001998 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	b29a      	uxth	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8001996:	e007      	b.n	80019a8 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	f023 0301 	bic.w	r3, r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	801a      	strh	r2, [r3, #0]
  }
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d008      	beq.n	80019d8 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 80019d6:	e007      	b.n	80019e8 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	801a      	strh	r2, [r3, #0]
  }
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d008      	beq.n	8001a18 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8001a16:	e007      	b.n	8001a28 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	801a      	strh	r2, [r3, #0]
  }
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	70fb      	strb	r3, [r7, #3]
 8001a40:	4613      	mov	r3, r2
 8001a42:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001a44:	78bb      	ldrb	r3, [r7, #2]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	70fb      	strb	r3, [r7, #3]
 8001a52:	e003      	b.n	8001a5c <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	821a      	strh	r2, [r3, #16]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a7c:	78fb      	ldrb	r3, [r7, #3]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8001a92:	e007      	b.n	8001aa4 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	801a      	strh	r2, [r3, #0]
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	821a      	strh	r2, [r3, #16]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	8a1b      	ldrh	r3, [r3, #16]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001b02:	2300      	movs	r3, #0
 8001b04:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	8a9b      	ldrh	r3, [r3, #20]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	8b1b      	ldrh	r3, [r3, #24]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b26:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d102      	bne.n	8001b3a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001b34:	2301      	movs	r3, #1
 8001b36:	75fb      	strb	r3, [r7, #23]
 8001b38:	e001      	b.n	8001b3e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	0f1b      	lsrs	r3, r3, #28
 8001b6a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b72:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3314      	adds	r3, #20
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	e005      	b.n	8001b8e <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3318      	adds	r3, #24
 8001b8c:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	75fb      	strb	r3, [r7, #23]
 8001b9e:	e001      	b.n	8001ba4 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	371c      	adds	r7, #28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop

08001bb4 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bc8:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	829a      	strh	r2, [r3, #20]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop

08001be4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	2302      	movs	r3, #2
 8001c02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001c04:	4b48      	ldr	r3, [pc, #288]	; (8001d28 <RCC_GetClocksFreq+0x144>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d007      	beq.n	8001c24 <RCC_GetClocksFreq+0x40>
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d009      	beq.n	8001c2c <RCC_GetClocksFreq+0x48>
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d13f      	bne.n	8001c9c <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a43      	ldr	r2, [pc, #268]	; (8001d2c <RCC_GetClocksFreq+0x148>)
 8001c20:	601a      	str	r2, [r3, #0]
      break;
 8001c22:	e03f      	b.n	8001ca4 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a42      	ldr	r2, [pc, #264]	; (8001d30 <RCC_GetClocksFreq+0x14c>)
 8001c28:	601a      	str	r2, [r3, #0]
      break;
 8001c2a:	e03b      	b.n	8001ca4 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001c2c:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <RCC_GetClocksFreq+0x144>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c34:	0d9b      	lsrs	r3, r3, #22
 8001c36:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c38:	4b3b      	ldr	r3, [pc, #236]	; (8001d28 <RCC_GetClocksFreq+0x144>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c40:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00d      	beq.n	8001c64 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001c48:	4a39      	ldr	r2, [pc, #228]	; (8001d30 <RCC_GetClocksFreq+0x14c>)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c50:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <RCC_GetClocksFreq+0x144>)
 8001c52:	6859      	ldr	r1, [r3, #4]
 8001c54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c58:	400b      	ands	r3, r1
 8001c5a:	099b      	lsrs	r3, r3, #6
 8001c5c:	fb03 f302 	mul.w	r3, r3, r2
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	e00c      	b.n	8001c7e <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001c64:	4a31      	ldr	r2, [pc, #196]	; (8001d2c <RCC_GetClocksFreq+0x148>)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c6c:	4b2e      	ldr	r3, [pc, #184]	; (8001d28 <RCC_GetClocksFreq+0x144>)
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c74:	400b      	ands	r3, r1
 8001c76:	099b      	lsrs	r3, r3, #6
 8001c78:	fb03 f302 	mul.w	r3, r3, r2
 8001c7c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <RCC_GetClocksFreq+0x144>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c86:	0c1b      	lsrs	r3, r3, #16
 8001c88:	3301      	adds	r3, #1
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	601a      	str	r2, [r3, #0]
      break;
 8001c9a:	e003      	b.n	8001ca4 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a23      	ldr	r2, [pc, #140]	; (8001d2c <RCC_GetClocksFreq+0x148>)
 8001ca0:	601a      	str	r2, [r3, #0]
      break;
 8001ca2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001ca4:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <RCC_GetClocksFreq+0x144>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cac:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001cb4:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <RCC_GetClocksFreq+0x150>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4413      	add	r3, r2
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	40da      	lsrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <RCC_GetClocksFreq+0x144>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001cd4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	0a9b      	lsrs	r3, r3, #10
 8001cda:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001cdc:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <RCC_GetClocksFreq+0x150>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	40da      	lsrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <RCC_GetClocksFreq+0x144>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001cfc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	0b5b      	lsrs	r3, r3, #13
 8001d02:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001d04:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <RCC_GetClocksFreq+0x150>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4413      	add	r3, r2
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	40da      	lsrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	60da      	str	r2, [r3, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3724      	adds	r7, #36	; 0x24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	00f42400 	.word	0x00f42400
 8001d30:	007a1200 	.word	0x007a1200
 8001d34:	20000000 	.word	0x20000000

08001d38 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d006      	beq.n	8001d58 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001d4a:	490a      	ldr	r1, [pc, #40]	; (8001d74 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001d56:	e006      	b.n	8001d66 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001d58:	4906      	ldr	r1, [pc, #24]	; (8001d74 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4013      	ands	r3, r2
 8001d64:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d006      	beq.n	8001d98 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001d8a:	490a      	ldr	r1, [pc, #40]	; (8001db4 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001d96:	e006      	b.n	8001da6 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001d98:	4906      	ldr	r1, [pc, #24]	; (8001db4 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <RCC_APB1PeriphClockCmd+0x3c>)
 8001d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4013      	ands	r3, r2
 8001da4:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800

08001db8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001dca:	490a      	ldr	r1, [pc, #40]	; (8001df4 <RCC_APB2PeriphClockCmd+0x3c>)
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <RCC_APB2PeriphClockCmd+0x3c>)
 8001dce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001dd6:	e006      	b.n	8001de6 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001dd8:	4906      	ldr	r1, [pc, #24]	; (8001df4 <RCC_APB2PeriphClockCmd+0x3c>)
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <RCC_APB2PeriphClockCmd+0x3c>)
 8001ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	4013      	ands	r3, r2
 8001de4:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800

08001df8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d006      	beq.n	8001e18 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001e0a:	490a      	ldr	r1, [pc, #40]	; (8001e34 <RCC_APB1PeriphResetCmd+0x3c>)
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <RCC_APB1PeriphResetCmd+0x3c>)
 8001e0e:	6a1a      	ldr	r2, [r3, #32]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001e16:	e006      	b.n	8001e26 <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001e18:	4906      	ldr	r1, [pc, #24]	; (8001e34 <RCC_APB1PeriphResetCmd+0x3c>)
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <RCC_APB1PeriphResetCmd+0x3c>)
 8001e1c:	6a1a      	ldr	r2, [r3, #32]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4013      	ands	r3, r2
 8001e24:	620b      	str	r3, [r1, #32]
  }
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800

08001e38 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d006      	beq.n	8001e58 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001e4a:	490a      	ldr	r1, [pc, #40]	; (8001e74 <RCC_APB2PeriphResetCmd+0x3c>)
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <RCC_APB2PeriphResetCmd+0x3c>)
 8001e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001e56:	e006      	b.n	8001e66 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001e58:	4906      	ldr	r1, [pc, #24]	; (8001e74 <RCC_APB2PeriphResetCmd+0x3c>)
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <RCC_APB2PeriphResetCmd+0x3c>)
 8001e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	4013      	ands	r3, r2
 8001e64:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800

08001e78 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a2e      	ldr	r2, [pc, #184]	; (8001f3c <SPI_I2S_DeInit+0xc4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d10a      	bne.n	8001e9e <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e8e:	f7ff ffd3 	bl	8001e38 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001e92:	2100      	movs	r1, #0
 8001e94:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e98:	f7ff ffce 	bl	8001e38 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001e9c:	e049      	b.n	8001f32 <SPI_I2S_DeInit+0xba>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <SPI_I2S_DeInit+0xc8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d10a      	bne.n	8001ebc <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001eac:	f7ff ffa4 	bl	8001df8 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001eb6:	f7ff ff9f 	bl	8001df8 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001eba:	e03a      	b.n	8001f32 <SPI_I2S_DeInit+0xba>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <SPI_I2S_DeInit+0xcc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d10a      	bne.n	8001eda <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001eca:	f7ff ff95 	bl	8001df8 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001ece:	2100      	movs	r1, #0
 8001ed0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ed4:	f7ff ff90 	bl	8001df8 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001ed8:	e02b      	b.n	8001f32 <SPI_I2S_DeInit+0xba>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <SPI_I2S_DeInit+0xd0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10a      	bne.n	8001ef8 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ee8:	f7ff ffa6 	bl	8001e38 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8001eec:	2100      	movs	r1, #0
 8001eee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ef2:	f7ff ffa1 	bl	8001e38 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001ef6:	e01c      	b.n	8001f32 <SPI_I2S_DeInit+0xba>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <SPI_I2S_DeInit+0xd4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d10a      	bne.n	8001f16 <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8001f00:	2101      	movs	r1, #1
 8001f02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f06:	f7ff ff97 	bl	8001e38 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f10:	f7ff ff92 	bl	8001e38 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001f14:	e00d      	b.n	8001f32 <SPI_I2S_DeInit+0xba>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <SPI_I2S_DeInit+0xd8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d109      	bne.n	8001f32 <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8001f1e:	2101      	movs	r1, #1
 8001f20:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001f24:	f7ff ff88 	bl	8001e38 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8001f28:	2100      	movs	r1, #0
 8001f2a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001f2e:	f7ff ff83 	bl	8001e38 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40013000 	.word	0x40013000
 8001f40:	40003800 	.word	0x40003800
 8001f44:	40003c00 	.word	0x40003c00
 8001f48:	40013400 	.word	0x40013400
 8001f4c:	40015000 	.word	0x40015000
 8001f50:	40015400 	.word	0x40015400

08001f54 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b08b      	sub	sp, #44	; 0x2c
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	837b      	strh	r3, [r7, #26]
 8001f62:	2302      	movs	r3, #2
 8001f64:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f66:	2300      	movs	r3, #0
 8001f68:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	8b9b      	ldrh	r3, [r3, #28]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f8c:	f023 030f 	bic.w	r3, r3, #15
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	8b9b      	ldrh	r3, [r3, #28]
 8001fa0:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d104      	bne.n	8001fb4 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 8001fae:	2302      	movs	r3, #2
 8001fb0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001fb2:	e072      	b.n	800209a <I2S_Init+0x146>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	889b      	ldrh	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	847b      	strh	r3, [r7, #34]	; 0x22
 8001fc0:	e001      	b.n	8001fc6 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001fc6:	4b4d      	ldr	r3, [pc, #308]	; (80020fc <I2S_Init+0x1a8>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8001fd2:	4a4a      	ldr	r2, [pc, #296]	; (80020fc <I2S_Init+0x1a8>)
 8001fd4:	4b49      	ldr	r3, [pc, #292]	; (80020fc <I2S_Init+0x1a8>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fdc:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001fde:	4b47      	ldr	r3, [pc, #284]	; (80020fc <I2S_Init+0x1a8>)
 8001fe0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001fe4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fe8:	4013      	ands	r3, r2
 8001fea:	099b      	lsrs	r3, r3, #6
 8001fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff0:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001ff2:	4b42      	ldr	r3, [pc, #264]	; (80020fc <I2S_Init+0x1a8>)
 8001ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001ffc:	0f1b      	lsrs	r3, r3, #28
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8002004:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <I2S_Init+0x1a8>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800200c:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800200e:	4a3c      	ldr	r2, [pc, #240]	; (8002100 <I2S_Init+0x1ac>)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	fb02 f203 	mul.w	r2, r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002022:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	88db      	ldrh	r3, [r3, #6]
 8002028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202c:	d10f      	bne.n	800204e <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	0a1a      	lsrs	r2, r3, #8
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	461a      	mov	r2, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	fbb2 f3f3 	udiv	r3, r2, r3
 8002044:	b29b      	uxth	r3, r3
 8002046:	3305      	adds	r3, #5
 8002048:	b29b      	uxth	r3, r3
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	e012      	b.n	8002074 <I2S_Init+0x120>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800204e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002050:	015b      	lsls	r3, r3, #5
 8002052:	461a      	mov	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fbb3 f2f2 	udiv	r2, r3, r2
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	461a      	mov	r2, r3
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	b29b      	uxth	r3, r3
 800206e:	3305      	adds	r3, #5
 8002070:	b29b      	uxth	r3, r3
 8002072:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	4a23      	ldr	r2, [pc, #140]	; (8002104 <I2S_Init+0x1b0>)
 8002078:	fba2 2303 	umull	r2, r3, r2, r3
 800207c:	08db      	lsrs	r3, r3, #3
 800207e:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800208a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8002094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800209a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800209c:	2b01      	cmp	r3, #1
 800209e:	d902      	bls.n	80020a6 <I2S_Init+0x152>
 80020a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80020a2:	2bff      	cmp	r3, #255	; 0xff
 80020a4:	d903      	bls.n	80020ae <I2S_Init+0x15a>
  {
    /* Set the default values */
    i2sdiv = 2;
 80020a6:	2302      	movs	r3, #2
 80020a8:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	88da      	ldrh	r2, [r3, #6]
 80020b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b29a      	uxth	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	8859      	ldrh	r1, [r3, #2]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80020d2:	4303      	orrs	r3, r0
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	430b      	orrs	r3, r1
 80020d8:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80020da:	4313      	orrs	r3, r2
 80020dc:	b29a      	uxth	r2, r3
 80020de:	8b7b      	ldrh	r3, [r7, #26]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020e8:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	8b7a      	ldrh	r2, [r7, #26]
 80020ee:	839a      	strh	r2, [r3, #28]
}
 80020f0:	bf00      	nop
 80020f2:	372c      	adds	r7, #44	; 0x2c
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40023800 	.word	0x40023800
 8002100:	007a1200 	.word	0x007a1200
 8002104:	cccccccd 	.word	0xcccccccd

08002108 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	8b9b      	ldrh	r3, [r3, #28]
 800211e:	b29b      	uxth	r3, r3
 8002120:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002124:	b29a      	uxth	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 800212a:	e007      	b.n	800213c <I2S_Cmd+0x34>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	8b9b      	ldrh	r3, [r3, #28]
 8002130:	b29b      	uxth	r3, r3
 8002132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002136:	b29a      	uxth	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	839a      	strh	r2, [r3, #28]
  }
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	819a      	strh	r2, [r3, #12]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop

08002168 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d008      	beq.n	8002190 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	889b      	ldrh	r3, [r3, #4]
 8002182:	b29a      	uxth	r2, r3
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	4313      	orrs	r3, r2
 8002188:	b29a      	uxth	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 800218e:	e009      	b.n	80021a4 <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	889b      	ldrh	r3, [r3, #4]
 8002194:	b29a      	uxth	r2, r3
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	43db      	mvns	r3, r3
 800219a:	b29b      	uxth	r3, r3
 800219c:	4013      	ands	r3, r2
 800219e:	b29a      	uxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	809a      	strh	r2, [r3, #4]
  }
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
 80021bc:	4613      	mov	r3, r2
 80021be:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 80021c0:	2300      	movs	r3, #0
 80021c2:	81fb      	strh	r3, [r7, #14]
 80021c4:	2300      	movs	r3, #0
 80021c6:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80021d0:	89fb      	ldrh	r3, [r7, #14]
 80021d2:	2201      	movs	r2, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 80021da:	78bb      	ldrb	r3, [r7, #2]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	889b      	ldrh	r3, [r3, #4]
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	89bb      	ldrh	r3, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 80021f0:	e009      	b.n	8002206 <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	889b      	ldrh	r3, [r3, #4]
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	89bb      	ldrh	r3, [r7, #12]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	4013      	ands	r3, r2
 8002200:	b29a      	uxth	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	809a      	strh	r2, [r3, #4]
  }
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop

08002214 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	891b      	ldrh	r3, [r3, #8]
 8002228:	b29a      	uxth	r2, r3
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	4013      	ands	r3, r2
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	e001      	b.n	800223e <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800224c:	b490      	push	{r4, r7}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	460a      	mov	r2, r1
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	4613      	mov	r3, r2
 800225a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8002260:	79bb      	ldrb	r3, [r7, #6]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <SYSCFG_EXTILineConfig+0x80>)
 8002272:	79bb      	ldrb	r3, [r7, #6]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	b2db      	uxtb	r3, r3
 8002278:	4618      	mov	r0, r3
 800227a:	4a14      	ldr	r2, [pc, #80]	; (80022cc <SYSCFG_EXTILineConfig+0x80>)
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	b2db      	uxtb	r3, r3
 8002282:	3302      	adds	r3, #2
 8002284:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	43db      	mvns	r3, r3
 800228c:	401a      	ands	r2, r3
 800228e:	1c83      	adds	r3, r0, #2
 8002290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8002294:	480d      	ldr	r0, [pc, #52]	; (80022cc <SYSCFG_EXTILineConfig+0x80>)
 8002296:	79bb      	ldrb	r3, [r7, #6]
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461c      	mov	r4, r3
 800229e:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <SYSCFG_EXTILineConfig+0x80>)
 80022a0:	79bb      	ldrb	r3, [r7, #6]
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	3302      	adds	r3, #2
 80022a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022ac:	79f9      	ldrb	r1, [r7, #7]
 80022ae:	79bb      	ldrb	r3, [r7, #6]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	431a      	orrs	r2, r3
 80022bc:	1ca3      	adds	r3, r4, #2
 80022be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc90      	pop	{r4, r7}
 80022ca:	4770      	bx	lr
 80022cc:	40013800 	.word	0x40013800

080022d0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a29      	ldr	r2, [pc, #164]	; (800238c <TIM_TimeBaseInit+0xbc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <TIM_TimeBaseInit+0x44>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a28      	ldr	r2, [pc, #160]	; (8002390 <TIM_TimeBaseInit+0xc0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00f      	beq.n	8002314 <TIM_TimeBaseInit+0x44>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fa:	d00b      	beq.n	8002314 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a25      	ldr	r2, [pc, #148]	; (8002394 <TIM_TimeBaseInit+0xc4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d007      	beq.n	8002314 <TIM_TimeBaseInit+0x44>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a24      	ldr	r2, [pc, #144]	; (8002398 <TIM_TimeBaseInit+0xc8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d003      	beq.n	8002314 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a23      	ldr	r2, [pc, #140]	; (800239c <TIM_TimeBaseInit+0xcc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d108      	bne.n	8002326 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002314:	89fb      	ldrh	r3, [r7, #14]
 8002316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	885a      	ldrh	r2, [r3, #2]
 8002320:	89fb      	ldrh	r3, [r7, #14]
 8002322:	4313      	orrs	r3, r2
 8002324:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1d      	ldr	r2, [pc, #116]	; (80023a0 <TIM_TimeBaseInit+0xd0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00c      	beq.n	8002348 <TIM_TimeBaseInit+0x78>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <TIM_TimeBaseInit+0xd4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d008      	beq.n	8002348 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002336:	89fb      	ldrh	r3, [r7, #14]
 8002338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800233c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	891a      	ldrh	r2, [r3, #8]
 8002342:	89fb      	ldrh	r3, [r7, #14]
 8002344:	4313      	orrs	r3, r2
 8002346:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	89fa      	ldrh	r2, [r7, #14]
 800234c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	881a      	ldrh	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <TIM_TimeBaseInit+0xbc>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d003      	beq.n	800236e <TIM_TimeBaseInit+0x9e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a09      	ldr	r2, [pc, #36]	; (8002390 <TIM_TimeBaseInit+0xc0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d104      	bne.n	8002378 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	7a9b      	ldrb	r3, [r3, #10]
 8002372:	b29a      	uxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	829a      	strh	r2, [r3, #20]
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40010000 	.word	0x40010000
 8002390:	40010400 	.word	0x40010400
 8002394:	40000400 	.word	0x40000400
 8002398:	40000800 	.word	0x40000800
 800239c:	40000c00 	.word	0x40000c00
 80023a0:	40001000 	.word	0x40001000
 80023a4:	40001400 	.word	0x40001400

080023a8 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f04f 32ff 	mov.w	r2, #4294967295
 80023b6:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	729a      	strb	r2, [r3, #10]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80023fe:	e007      	b.n	8002410 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	801a      	strh	r2, [r3, #0]
  }
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
 8002428:	4613      	mov	r3, r2
 800242a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800242c:	787b      	ldrb	r3, [r7, #1]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	899b      	ldrh	r3, [r3, #12]
 8002436:	b29a      	uxth	r2, r3
 8002438:	887b      	ldrh	r3, [r7, #2]
 800243a:	4313      	orrs	r3, r2
 800243c:	b29a      	uxth	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8002442:	e009      	b.n	8002458 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	899b      	ldrh	r3, [r3, #12]
 8002448:	b29a      	uxth	r2, r3
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	43db      	mvns	r3, r3
 800244e:	b29b      	uxth	r3, r3
 8002450:	4013      	ands	r3, r2
 8002452:	b29a      	uxth	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	819a      	strh	r2, [r3, #12]
  }
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	43db      	mvns	r3, r3
 8002474:	b29a      	uxth	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	821a      	strh	r2, [r3, #16]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop

08002488 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	889b      	ldrh	r3, [r3, #4]
 8002498:	b29b      	uxth	r3, r3
 800249a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249e:	b29a      	uxth	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	889b      	ldrh	r3, [r3, #4]
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	809a      	strh	r2, [r3, #4]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <STM_EVAL_LEDOn+0x28>)
 80024ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d2:	79fa      	ldrb	r2, [r7, #7]
 80024d4:	4905      	ldr	r1, [pc, #20]	; (80024ec <STM_EVAL_LEDOn+0x2c>)
 80024d6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80024da:	831a      	strh	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	20000010 	.word	0x20000010
 80024ec:	08006290 	.word	0x08006290

080024f0 <EVAL_AUDIO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	603a      	str	r2, [r7, #0]
 80024fa:	80fb      	strh	r3, [r7, #6]
 80024fc:	460b      	mov	r3, r1
 80024fe:	717b      	strb	r3, [r7, #5]
  /* Perform low layer Codec initialization */
  if (Codec_Init(OutputDevice, VOLUME_CONVERT(Volume), AudioFreq) != 0)
 8002500:	797b      	ldrb	r3, [r7, #5]
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d80b      	bhi.n	800251e <EVAL_AUDIO_Init+0x2e>
 8002506:	797a      	ldrb	r2, [r7, #5]
 8002508:	4613      	mov	r3, r2
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <EVAL_AUDIO_Init+0x54>)
 8002510:	fb82 1203 	smull	r1, r2, r2, r3
 8002514:	1152      	asrs	r2, r2, #5
 8002516:	17db      	asrs	r3, r3, #31
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	e000      	b.n	8002520 <EVAL_AUDIO_Init+0x30>
 800251e:	2364      	movs	r3, #100	; 0x64
 8002520:	88f8      	ldrh	r0, [r7, #6]
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	f000 f8f3 	bl	8002710 <Codec_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <EVAL_AUDIO_Init+0x44>
  {
    return 1;                
 8002530:	2301      	movs	r3, #1
 8002532:	e002      	b.n	800253a <EVAL_AUDIO_Init+0x4a>
  }
  else
  {    
    /* I2S data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    Audio_MAL_Init();
 8002534:	f000 fcb4 	bl	8002ea0 <Audio_MAL_Init>
    
    /* Return 0 when all operations are OK */
    return 0;
 8002538:	2300      	movs	r3, #0
  }
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	51eb851f 	.word	0x51eb851f

08002548 <EVAL_AUDIO_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data half-words (16bits).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Play(uint16_t* pBuffer, uint32_t Size)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  /* Set the total number of data to be played (count in half-word) */
  AudioTotalSize = Size;
 8002552:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <EVAL_AUDIO_Play+0x60>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	6013      	str	r3, [r2, #0]

  /* Call the audio Codec Play function */
  Codec_Play();
 8002558:	f000 f986 	bl	8002868 <Codec_Play>
  
  /* Update the Media layer and enable it for play */  
  Audio_MAL_Play((uint32_t)pBuffer, (uint32_t)(DMA_MAX(Size)));
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002564:	4293      	cmp	r3, r2
 8002566:	bf28      	it	cs
 8002568:	4613      	movcs	r3, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f000 fd40 	bl	8002ff0 <Audio_MAL_Play>
  
  /* Update the remaining number of data to be played */
  AudioRemSize = Size - DMA_MAX(AudioTotalSize);
 8002570:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <EVAL_AUDIO_Play+0x60>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002578:	4293      	cmp	r3, r2
 800257a:	bf28      	it	cs
 800257c:	4613      	movcs	r3, r2
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <EVAL_AUDIO_Play+0x64>)
 8002584:	6013      	str	r3, [r2, #0]
  
  /* Update the current audio pointer position */
  CurrentPos = pBuffer + DMA_MAX(AudioTotalSize);
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <EVAL_AUDIO_Play+0x60>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800258e:	4293      	cmp	r3, r2
 8002590:	bf28      	it	cs
 8002592:	4613      	movcs	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4413      	add	r3, r2
 800259a:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <EVAL_AUDIO_Play+0x68>)
 800259c:	6013      	str	r3, [r2, #0]
  
  return 0;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000020 	.word	0x20000020
 80025ac:	20000024 	.word	0x20000024
 80025b0:	20006468 	.word	0x20006468

080025b4 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
#ifndef AUDIO_MAL_MODE_NORMAL
  uint16_t *pAddr = (uint16_t *)CurrentPos;
 80025ba:	4b36      	ldr	r3, [pc, #216]	; (8002694 <Audio_MAL_IRQHandler+0xe0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	603b      	str	r3, [r7, #0]
  uint32_t Size = AudioRemSize;
 80025c0:	4b35      	ldr	r3, [pc, #212]	; (8002698 <Audio_MAL_IRQHandler+0xe4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	607b      	str	r3, [r7, #4]
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80025c6:	4b35      	ldr	r3, [pc, #212]	; (800269c <Audio_MAL_IRQHandler+0xe8>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4b35      	ldr	r3, [pc, #212]	; (80026a0 <Audio_MAL_IRQHandler+0xec>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4619      	mov	r1, r3
 80025d0:	4610      	mov	r0, r2
 80025d2:	f7fe fe69 	bl	80012a8 <DMA_GetFlagStatus>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00c      	beq.n	80025f6 <Audio_MAL_IRQHandler+0x42>
    }
    
 #elif defined(AUDIO_MAL_MODE_CIRCULAR)
    /* Manage the remaining file size and new address offset: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_TransferComplete_CallBack((uint32_t)pAddr, Size);    
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f001 fa0b 	bl	80039fc <EVAL_AUDIO_TransferComplete_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 80025e6:	4b2d      	ldr	r3, [pc, #180]	; (800269c <Audio_MAL_IRQHandler+0xe8>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <Audio_MAL_IRQHandler+0xec>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4619      	mov	r1, r3
 80025f0:	4610      	mov	r0, r2
 80025f2:	f7fe fe95 	bl	8001320 <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_TC_EN */

#ifdef AUDIO_MAL_DMA_IT_HT_EN
  /* Half Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT) != RESET)
 80025f6:	4b29      	ldr	r3, [pc, #164]	; (800269c <Audio_MAL_IRQHandler+0xe8>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <Audio_MAL_IRQHandler+0xf0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4619      	mov	r1, r3
 8002600:	4610      	mov	r0, r2
 8002602:	f7fe fe51 	bl	80012a8 <DMA_GetFlagStatus>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00c      	beq.n	8002626 <Audio_MAL_IRQHandler+0x72>
  {
    /* Manage the remaining file size and new address offset: This function
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */
    EVAL_AUDIO_HalfTransfer_CallBack((uint32_t)pAddr, Size);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4618      	mov	r0, r3
 8002612:	f001 f9e5 	bl	80039e0 <EVAL_AUDIO_HalfTransfer_CallBack>

    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT);
 8002616:	4b21      	ldr	r3, [pc, #132]	; (800269c <Audio_MAL_IRQHandler+0xe8>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <Audio_MAL_IRQHandler+0xf0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	4610      	mov	r0, r2
 8002622:	f7fe fe7d 	bl	8001320 <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <Audio_MAL_IRQHandler+0xe8>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <Audio_MAL_IRQHandler+0xf4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4619      	mov	r1, r3
 8002630:	4610      	mov	r0, r2
 8002632:	f7fe fe39 	bl	80012a8 <DMA_GetFlagStatus>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d115      	bne.n	8002668 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <Audio_MAL_IRQHandler+0xe8>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <Audio_MAL_IRQHandler+0xf8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	4610      	mov	r0, r2
 8002648:	f7fe fe2e 	bl	80012a8 <DMA_GetFlagStatus>
 800264c:	4603      	mov	r3, r0
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10a      	bne.n	8002668 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <Audio_MAL_IRQHandler+0xe8>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <Audio_MAL_IRQHandler+0xfc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f7fe fe23 	bl	80012a8 <DMA_GetFlagStatus>
 8002662:	4603      	mov	r3, r0
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 8002664:	2b00      	cmp	r3, #0
 8002666:	d010      	beq.n	800268a <Audio_MAL_IRQHandler+0xd6>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
    
  {
    /* Manage the error generated on DMA FIFO: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_Error_CallBack((uint32_t*)&pAddr);    
 8002668:	463b      	mov	r3, r7
 800266a:	4618      	mov	r0, r3
 800266c:	f001 f9dc 	bl	8003a28 <EVAL_AUDIO_Error_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <Audio_MAL_IRQHandler+0xe8>)
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <Audio_MAL_IRQHandler+0xf4>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <Audio_MAL_IRQHandler+0xf8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	431a      	orrs	r2, r3
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <Audio_MAL_IRQHandler+0xfc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	4619      	mov	r1, r3
 8002686:	f7fe fe4b 	bl	8001320 <DMA_ClearFlag>
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20006468 	.word	0x20006468
 8002698:	20000024 	.word	0x20000024
 800269c:	20000034 	.word	0x20000034
 80026a0:	20000040 	.word	0x20000040
 80026a4:	20000044 	.word	0x20000044
 80026a8:	2000004c 	.word	0x2000004c
 80026ac:	20000048 	.word	0x20000048
 80026b0:	20000050 	.word	0x20000050

080026b4 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80026b8:	f7ff ff7c 	bl	80025b4 <Audio_MAL_IRQHandler>
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}

080026c0 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80026c4:	f7ff ff76 	bl	80025b4 <Audio_MAL_IRQHandler>
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}

080026cc <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80026d0:	2102      	movs	r1, #2
 80026d2:	480d      	ldr	r0, [pc, #52]	; (8002708 <SPI3_IRQHandler+0x3c>)
 80026d4:	f7ff fd9e 	bl	8002214 <SPI_I2S_GetFlagStatus>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d011      	beq.n	8002702 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <SPI3_IRQHandler+0x40>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d106      	bne.n	80026f4 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80026e6:	f001 f997 	bl	8003a18 <EVAL_AUDIO_GetSampleCallBack>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4619      	mov	r1, r3
 80026ee:	2004      	movs	r0, #4
 80026f0:	f7fe fc3e 	bl	8000f70 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80026f4:	f001 f990 	bl	8003a18 <EVAL_AUDIO_GetSampleCallBack>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4619      	mov	r1, r3
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <SPI3_IRQHandler+0x3c>)
 80026fe:	f7ff fd23 	bl	8002148 <SPI_I2S_SendData>
  }
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40003c00 	.word	0x40003c00
 800270c:	2000002c 	.word	0x2000002c

08002710 <Codec_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	603a      	str	r2, [r7, #0]
 800271a:	80fb      	strh	r3, [r7, #6]
 800271c:	460b      	mov	r3, r1
 800271e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]

  /* Configure the Codec related IOs */
  Codec_GPIO_Init();   
 8002724:	f000 fb1a 	bl	8002d5c <Codec_GPIO_Init>
  
  /* Reset the Codec Registers */
  Codec_Reset();
 8002728:	f000 f8e2 	bl	80028f0 <Codec_Reset>

  /* Initialize the Control interface of the Audio Codec */
  Codec_CtrlInterface_Init();     
 800272c:	f000 faa8 	bl	8002c80 <Codec_CtrlInterface_Init>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);  
 8002730:	2101      	movs	r1, #1
 8002732:	2002      	movs	r0, #2
 8002734:	f000 f8f0 	bl	8002918 <Codec_WriteRegister>
 8002738:	4602      	mov	r2, r0
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4413      	add	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
      
  counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
 8002740:	21af      	movs	r1, #175	; 0xaf
 8002742:	2004      	movs	r0, #4
 8002744:	f000 f8e8 	bl	8002918 <Codec_WriteRegister>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4413      	add	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
  OutputDev = 0xAF;
 8002750:	4b43      	ldr	r3, [pc, #268]	; (8002860 <Codec_Init+0x150>)
 8002752:	22af      	movs	r2, #175	; 0xaf
 8002754:	701a      	strb	r2, [r3, #0]
  
  /* Clock configuration: Auto detection */  
  counter += Codec_WriteRegister(0x05, 0x81);
 8002756:	2181      	movs	r1, #129	; 0x81
 8002758:	2005      	movs	r0, #5
 800275a:	f000 f8dd 	bl	8002918 <Codec_WriteRegister>
 800275e:	4602      	mov	r2, r0
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += Codec_WriteRegister(0x06, CODEC_STANDARD);
 8002766:	2104      	movs	r1, #4
 8002768:	2006      	movs	r0, #6
 800276a:	f000 f8d5 	bl	8002918 <Codec_WriteRegister>
 800276e:	4602      	mov	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
      
  /* Set the Master volume */
  Codec_VolumeCtrl(Volume);
 8002776:	797b      	ldrb	r3, [r7, #5]
 8002778:	4618      	mov	r0, r3
 800277a:	f000 f87d 	bl	8002878 <Codec_VolumeCtrl>
  
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800277e:	4b39      	ldr	r3, [pc, #228]	; (8002864 <Codec_Init+0x154>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d127      	bne.n	80027d6 <Codec_Init+0xc6>
  {
    /* Enable the PassThrough on AIN1A and AIN1B */
    counter += Codec_WriteRegister(0x08, 0x01);
 8002786:	2101      	movs	r1, #1
 8002788:	2008      	movs	r0, #8
 800278a:	f000 f8c5 	bl	8002918 <Codec_WriteRegister>
 800278e:	4602      	mov	r2, r0
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x09, 0x01);
 8002796:	2101      	movs	r1, #1
 8002798:	2009      	movs	r0, #9
 800279a:	f000 f8bd 	bl	8002918 <Codec_WriteRegister>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
    
    /* Route the analog input to the HP line */
    counter += Codec_WriteRegister(0x0E, 0xC0);
 80027a6:	21c0      	movs	r1, #192	; 0xc0
 80027a8:	200e      	movs	r0, #14
 80027aa:	f000 f8b5 	bl	8002918 <Codec_WriteRegister>
 80027ae:	4602      	mov	r2, r0
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
    
    /* Set the Passthough volume */
    counter += Codec_WriteRegister(0x14, 0x00);
 80027b6:	2100      	movs	r1, #0
 80027b8:	2014      	movs	r0, #20
 80027ba:	f000 f8ad 	bl	8002918 <Codec_WriteRegister>
 80027be:	4602      	mov	r2, r0
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x15, 0x00);
 80027c6:	2100      	movs	r1, #0
 80027c8:	2015      	movs	r0, #21
 80027ca:	f000 f8a5 	bl	8002918 <Codec_WriteRegister>
 80027ce:	4602      	mov	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  /* Power on the Codec */
  counter += Codec_WriteRegister(0x02, 0x9E);  
 80027d6:	219e      	movs	r1, #158	; 0x9e
 80027d8:	2002      	movs	r0, #2
 80027da:	f000 f89d 	bl	8002918 <Codec_WriteRegister>
 80027de:	4602      	mov	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
      off the I2S peripheral MCLK clock (which is the operating clock for Codec).
      If this delay is not inserted, then the codec will not shut down properly and
      it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += Codec_WriteRegister(0x0A, 0x00);
 80027e6:	2100      	movs	r1, #0
 80027e8:	200a      	movs	r0, #10
 80027ea:	f000 f895 	bl	8002918 <Codec_WriteRegister>
 80027ee:	4602      	mov	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
  if (CurrAudioInterface != AUDIO_INTERFACE_DAC)
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <Codec_Init+0x154>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d007      	beq.n	800280e <Codec_Init+0xfe>
  {  
    /* Disable the digital soft ramp */
    counter += Codec_WriteRegister(0x0E, 0x04);
 80027fe:	2104      	movs	r1, #4
 8002800:	200e      	movs	r0, #14
 8002802:	f000 f889 	bl	8002918 <Codec_WriteRegister>
 8002806:	4602      	mov	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  }
  /* Disable the limiter attack level */
  counter += Codec_WriteRegister(0x27, 0x00);
 800280e:	2100      	movs	r1, #0
 8002810:	2027      	movs	r0, #39	; 0x27
 8002812:	f000 f881 	bl	8002918 <Codec_WriteRegister>
 8002816:	4602      	mov	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4413      	add	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
  /* Adjust Bass and Treble levels */
  counter += Codec_WriteRegister(0x1F, 0x0F);
 800281e:	210f      	movs	r1, #15
 8002820:	201f      	movs	r0, #31
 8002822:	f000 f879 	bl	8002918 <Codec_WriteRegister>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  /* Adjust PCM volume level */
  counter += Codec_WriteRegister(0x1A, 0x0A);
 800282e:	210a      	movs	r1, #10
 8002830:	201a      	movs	r0, #26
 8002832:	f000 f871 	bl	8002918 <Codec_WriteRegister>
 8002836:	4602      	mov	r2, r0
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  counter += Codec_WriteRegister(0x1B, 0x0A);
 800283e:	210a      	movs	r1, #10
 8002840:	201b      	movs	r0, #27
 8002842:	f000 f869 	bl	8002918 <Codec_WriteRegister>
 8002846:	4602      	mov	r2, r0
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  /* Configure the I2S peripheral */
  Codec_AudioInterface_Init(AudioFreq);  
 800284e:	6838      	ldr	r0, [r7, #0]
 8002850:	f000 fa42 	bl	8002cd8 <Codec_AudioInterface_Init>
  
  /* Return communication control value */
  return counter;  
 8002854:	68fb      	ldr	r3, [r7, #12]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	200000b8 	.word	0x200000b8
 8002864:	2000002c 	.word	0x2000002c

08002868 <Codec_Play>:
  * @note   For this codec no Play options are required.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Play(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* 
     No actions required on Codec level for play command
     */  

  /* Return communication control value */
  return 0;  
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <Codec_VolumeCtrl>:
  * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_VolumeCtrl(uint8_t Volume)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
  
  if (Volume > 0xE6)
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2be6      	cmp	r3, #230	; 0xe6
 800288a:	d916      	bls.n	80028ba <Codec_VolumeCtrl+0x42>
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	3319      	adds	r3, #25
 8002890:	b2db      	uxtb	r3, r3
 8002892:	4619      	mov	r1, r3
 8002894:	2020      	movs	r0, #32
 8002896:	f000 f83f 	bl	8002918 <Codec_WriteRegister>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	3319      	adds	r3, #25
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	4619      	mov	r1, r3
 80028aa:	2021      	movs	r0, #33	; 0x21
 80028ac:	f000 f834 	bl	8002918 <Codec_WriteRegister>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4413      	add	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e015      	b.n	80028e6 <Codec_VolumeCtrl+0x6e>
  }
  else
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume + 0x19); 
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	3319      	adds	r3, #25
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4619      	mov	r1, r3
 80028c2:	2020      	movs	r0, #32
 80028c4:	f000 f828 	bl	8002918 <Codec_WriteRegister>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4413      	add	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume + 0x19); 
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	3319      	adds	r3, #25
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	4619      	mov	r1, r3
 80028d8:	2021      	movs	r0, #33	; 0x21
 80028da:	f000 f81d 	bl	8002918 <Codec_WriteRegister>
 80028de:	4602      	mov	r2, r0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  return counter;  
 80028e6:	68fb      	ldr	r3, [r7, #12]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <Codec_Reset>:
  * @note   This function calls an external driver function: The IO Expander driver.
  * @param  None
  * @retval None
  */
static void Codec_Reset(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Power Down the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 80028f4:	2200      	movs	r2, #0
 80028f6:	2110      	movs	r1, #16
 80028f8:	4806      	ldr	r0, [pc, #24]	; (8002914 <Codec_Reset+0x24>)
 80028fa:	f7fe fedd 	bl	80016b8 <GPIO_WriteBit>

  /* wait for a delay to insure registers erasing */
  Delay(CODEC_RESET_DELAY); 
 80028fe:	f644 70ff 	movw	r0, #20479	; 0x4fff
 8002902:	f000 fabb 	bl	8002e7c <Delay>
  
  /* Power on the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_SET);
 8002906:	2201      	movs	r2, #1
 8002908:	2110      	movs	r1, #16
 800290a:	4802      	ldr	r0, [pc, #8]	; (8002914 <Codec_Reset+0x24>)
 800290c:	f7fe fed4 	bl	80016b8 <GPIO_WriteBit>
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40020c00 	.word	0x40020c00

08002918 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	460a      	mov	r2, r1
 8002922:	71fb      	strb	r3, [r7, #7]
 8002924:	4613      	mov	r3, r2
 8002926:	71bb      	strb	r3, [r7, #6]
  uint32_t result = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 800292c:	4b4c      	ldr	r3, [pc, #304]	; (8002a60 <Codec_WriteRegister+0x148>)
 800292e:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002932:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002934:	e00a      	b.n	800294c <Codec_WriteRegister+0x34>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002936:	4b4a      	ldr	r3, [pc, #296]	; (8002a60 <Codec_WriteRegister+0x148>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	1e5a      	subs	r2, r3, #1
 800293c:	4948      	ldr	r1, [pc, #288]	; (8002a60 <Codec_WriteRegister+0x148>)
 800293e:	600a      	str	r2, [r1, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d103      	bne.n	800294c <Codec_WriteRegister+0x34>
 8002944:	f001 f844 	bl	80039d0 <Codec_TIMEOUT_UserCallback>
 8002948:	4603      	mov	r3, r0
 800294a:	e085      	b.n	8002a58 <Codec_WriteRegister+0x140>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 800294c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002950:	4844      	ldr	r0, [pc, #272]	; (8002a64 <Codec_WriteRegister+0x14c>)
 8002952:	f7ff f8fb 	bl	8001b4c <I2C_GetFlagStatus>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ec      	bne.n	8002936 <Codec_WriteRegister+0x1e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 800295c:	2101      	movs	r1, #1
 800295e:	4841      	ldr	r0, [pc, #260]	; (8002a64 <Codec_WriteRegister+0x14c>)
 8002960:	f7ff f828 	bl	80019b4 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002964:	4b3e      	ldr	r3, [pc, #248]	; (8002a60 <Codec_WriteRegister+0x148>)
 8002966:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800296a:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800296c:	e00a      	b.n	8002984 <Codec_WriteRegister+0x6c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 800296e:	4b3c      	ldr	r3, [pc, #240]	; (8002a60 <Codec_WriteRegister+0x148>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	1e5a      	subs	r2, r3, #1
 8002974:	493a      	ldr	r1, [pc, #232]	; (8002a60 <Codec_WriteRegister+0x148>)
 8002976:	600a      	str	r2, [r1, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d103      	bne.n	8002984 <Codec_WriteRegister+0x6c>
 800297c:	f001 f828 	bl	80039d0 <Codec_TIMEOUT_UserCallback>
 8002980:	4603      	mov	r3, r0
 8002982:	e069      	b.n	8002a58 <Codec_WriteRegister+0x140>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002984:	4938      	ldr	r1, [pc, #224]	; (8002a68 <Codec_WriteRegister+0x150>)
 8002986:	4837      	ldr	r0, [pc, #220]	; (8002a64 <Codec_WriteRegister+0x14c>)
 8002988:	f7ff f8b0 	bl	8001aec <I2C_CheckEvent>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0ed      	beq.n	800296e <Codec_WriteRegister+0x56>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002992:	2200      	movs	r2, #0
 8002994:	2194      	movs	r1, #148	; 0x94
 8002996:	4833      	ldr	r0, [pc, #204]	; (8002a64 <Codec_WriteRegister+0x14c>)
 8002998:	f7ff f84c 	bl	8001a34 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 800299c:	4b30      	ldr	r3, [pc, #192]	; (8002a60 <Codec_WriteRegister+0x148>)
 800299e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029a2:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 80029a4:	e00a      	b.n	80029bc <Codec_WriteRegister+0xa4>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80029a6:	4b2e      	ldr	r3, [pc, #184]	; (8002a60 <Codec_WriteRegister+0x148>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	1e5a      	subs	r2, r3, #1
 80029ac:	492c      	ldr	r1, [pc, #176]	; (8002a60 <Codec_WriteRegister+0x148>)
 80029ae:	600a      	str	r2, [r1, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <Codec_WriteRegister+0xa4>
 80029b4:	f001 f80c 	bl	80039d0 <Codec_TIMEOUT_UserCallback>
 80029b8:	4603      	mov	r3, r0
 80029ba:	e04d      	b.n	8002a58 <Codec_WriteRegister+0x140>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 80029bc:	492b      	ldr	r1, [pc, #172]	; (8002a6c <Codec_WriteRegister+0x154>)
 80029be:	4829      	ldr	r0, [pc, #164]	; (8002a64 <Codec_WriteRegister+0x14c>)
 80029c0:	f7ff f894 	bl	8001aec <I2C_CheckEvent>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0ed      	beq.n	80029a6 <Codec_WriteRegister+0x8e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	4619      	mov	r1, r3
 80029ce:	4825      	ldr	r0, [pc, #148]	; (8002a64 <Codec_WriteRegister+0x14c>)
 80029d0:	f7ff f86e 	bl	8001ab0 <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 80029d4:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <Codec_WriteRegister+0x148>)
 80029d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029da:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 80029dc:	e00a      	b.n	80029f4 <Codec_WriteRegister+0xdc>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 80029de:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <Codec_WriteRegister+0x148>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	1e5a      	subs	r2, r3, #1
 80029e4:	491e      	ldr	r1, [pc, #120]	; (8002a60 <Codec_WriteRegister+0x148>)
 80029e6:	600a      	str	r2, [r1, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d103      	bne.n	80029f4 <Codec_WriteRegister+0xdc>
 80029ec:	f000 fff0 	bl	80039d0 <Codec_TIMEOUT_UserCallback>
 80029f0:	4603      	mov	r3, r0
 80029f2:	e031      	b.n	8002a58 <Codec_WriteRegister+0x140>
  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 80029f4:	491e      	ldr	r1, [pc, #120]	; (8002a70 <Codec_WriteRegister+0x158>)
 80029f6:	481b      	ldr	r0, [pc, #108]	; (8002a64 <Codec_WriteRegister+0x14c>)
 80029f8:	f7ff f878 	bl	8001aec <I2C_CheckEvent>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0ed      	beq.n	80029de <Codec_WriteRegister+0xc6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
 8002a02:	79bb      	ldrb	r3, [r7, #6]
 8002a04:	4619      	mov	r1, r3
 8002a06:	4817      	ldr	r0, [pc, #92]	; (8002a64 <Codec_WriteRegister+0x14c>)
 8002a08:	f7ff f852 	bl	8001ab0 <I2C_SendData>
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <Codec_WriteRegister+0x148>)
 8002a0e:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002a12:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8002a14:	e008      	b.n	8002a28 <Codec_WriteRegister+0x110>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <Codec_WriteRegister+0x148>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	1e5a      	subs	r2, r3, #1
 8002a1c:	4910      	ldr	r1, [pc, #64]	; (8002a60 <Codec_WriteRegister+0x148>)
 8002a1e:	600a      	str	r2, [r1, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <Codec_WriteRegister+0x110>
 8002a24:	f000 ffd4 	bl	80039d0 <Codec_TIMEOUT_UserCallback>
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8002a28:	4912      	ldr	r1, [pc, #72]	; (8002a74 <Codec_WriteRegister+0x15c>)
 8002a2a:	480e      	ldr	r0, [pc, #56]	; (8002a64 <Codec_WriteRegister+0x14c>)
 8002a2c:	f7ff f88e 	bl	8001b4c <I2C_GetFlagStatus>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0ef      	beq.n	8002a16 <Codec_WriteRegister+0xfe>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);  
 8002a36:	2101      	movs	r1, #1
 8002a38:	480a      	ldr	r0, [pc, #40]	; (8002a64 <Codec_WriteRegister+0x14c>)
 8002a3a:	f7fe ffdb 	bl	80019f4 <I2C_GenerateSTOP>
  
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (Codec_ReadRegister(RegisterAddr) == RegisterValue)? 0:1;
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 f819 	bl	8002a78 <Codec_ReadRegister>
 8002a46:	4602      	mov	r2, r0
 8002a48:	79bb      	ldrb	r3, [r7, #6]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	60fb      	str	r3, [r7, #12]
#endif /* VERIFY_WRITTENDATA */

  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return result;  
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000028 	.word	0x20000028
 8002a64:	40005400 	.word	0x40005400
 8002a68:	00030001 	.word	0x00030001
 8002a6c:	00070082 	.word	0x00070082
 8002a70:	00070080 	.word	0x00070080
 8002a74:	10000004 	.word	0x10000004

08002a78 <Codec_ReadRegister>:
  * @param  RegisterAddr: Address of the register to be read.
  * @retval Value of the register to be read or dummy value if the communication
  *         fails.
  */
static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  uint32_t result = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002a86:	4b76      	ldr	r3, [pc, #472]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002a88:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002a8c:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002a8e:	e00a      	b.n	8002aa6 <Codec_ReadRegister+0x2e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a90:	4b73      	ldr	r3, [pc, #460]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	1e5a      	subs	r2, r3, #1
 8002a96:	4972      	ldr	r1, [pc, #456]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002a98:	600a      	str	r2, [r1, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <Codec_ReadRegister+0x2e>
 8002a9e:	f000 ff97 	bl	80039d0 <Codec_TIMEOUT_UserCallback>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	e0d7      	b.n	8002c56 <Codec_ReadRegister+0x1de>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002aa6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002aaa:	486e      	ldr	r0, [pc, #440]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002aac:	f7ff f84e 	bl	8001b4c <I2C_GetFlagStatus>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ec      	bne.n	8002a90 <Codec_ReadRegister+0x18>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	486a      	ldr	r0, [pc, #424]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002aba:	f7fe ff7b 	bl	80019b4 <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002abe:	4b68      	ldr	r3, [pc, #416]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ac4:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002ac6:	e00a      	b.n	8002ade <Codec_ReadRegister+0x66>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002ac8:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	1e5a      	subs	r2, r3, #1
 8002ace:	4964      	ldr	r1, [pc, #400]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002ad0:	600a      	str	r2, [r1, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d103      	bne.n	8002ade <Codec_ReadRegister+0x66>
 8002ad6:	f000 ff7b 	bl	80039d0 <Codec_TIMEOUT_UserCallback>
 8002ada:	4603      	mov	r3, r0
 8002adc:	e0bb      	b.n	8002c56 <Codec_ReadRegister+0x1de>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002ade:	4962      	ldr	r1, [pc, #392]	; (8002c68 <Codec_ReadRegister+0x1f0>)
 8002ae0:	4860      	ldr	r0, [pc, #384]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002ae2:	f7ff f803 	bl	8001aec <I2C_CheckEvent>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0ed      	beq.n	8002ac8 <Codec_ReadRegister+0x50>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2194      	movs	r1, #148	; 0x94
 8002af0:	485c      	ldr	r0, [pc, #368]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002af2:	f7fe ff9f 	bl	8001a34 <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002af6:	4b5a      	ldr	r3, [pc, #360]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002afc:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002afe:	e00a      	b.n	8002b16 <Codec_ReadRegister+0x9e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002b00:	4b57      	ldr	r3, [pc, #348]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	1e5a      	subs	r2, r3, #1
 8002b06:	4956      	ldr	r1, [pc, #344]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002b08:	600a      	str	r2, [r1, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <Codec_ReadRegister+0x9e>
 8002b0e:	f000 ff5f 	bl	80039d0 <Codec_TIMEOUT_UserCallback>
 8002b12:	4603      	mov	r3, r0
 8002b14:	e09f      	b.n	8002c56 <Codec_ReadRegister+0x1de>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002b16:	4955      	ldr	r1, [pc, #340]	; (8002c6c <Codec_ReadRegister+0x1f4>)
 8002b18:	4852      	ldr	r0, [pc, #328]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002b1a:	f7fe ffe7 	bl	8001aec <I2C_CheckEvent>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ed      	beq.n	8002b00 <Codec_ReadRegister+0x88>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	4619      	mov	r1, r3
 8002b28:	484e      	ldr	r0, [pc, #312]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002b2a:	f7fe ffc1 	bl	8001ab0 <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002b2e:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002b30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b34:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002b36:	e00a      	b.n	8002b4e <Codec_ReadRegister+0xd6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002b38:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	1e5a      	subs	r2, r3, #1
 8002b3e:	4948      	ldr	r1, [pc, #288]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002b40:	600a      	str	r2, [r1, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <Codec_ReadRegister+0xd6>
 8002b46:	f000 ff43 	bl	80039d0 <Codec_TIMEOUT_UserCallback>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	e083      	b.n	8002c56 <Codec_ReadRegister+0x1de>
  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002b4e:	4948      	ldr	r1, [pc, #288]	; (8002c70 <Codec_ReadRegister+0x1f8>)
 8002b50:	4844      	ldr	r0, [pc, #272]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002b52:	f7fe fffb 	bl	8001b4c <I2C_GetFlagStatus>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ed      	beq.n	8002b38 <Codec_ReadRegister+0xc0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	4841      	ldr	r0, [pc, #260]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002b60:	f7fe ff28 	bl	80019b4 <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002b64:	4b3e      	ldr	r3, [pc, #248]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002b66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b6a:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002b6c:	e00a      	b.n	8002b84 <Codec_ReadRegister+0x10c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002b6e:	4b3c      	ldr	r3, [pc, #240]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	1e5a      	subs	r2, r3, #1
 8002b74:	493a      	ldr	r1, [pc, #232]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002b76:	600a      	str	r2, [r1, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d103      	bne.n	8002b84 <Codec_ReadRegister+0x10c>
 8002b7c:	f000 ff28 	bl	80039d0 <Codec_TIMEOUT_UserCallback>
 8002b80:	4603      	mov	r3, r0
 8002b82:	e068      	b.n	8002c56 <Codec_ReadRegister+0x1de>
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002b84:	4938      	ldr	r1, [pc, #224]	; (8002c68 <Codec_ReadRegister+0x1f0>)
 8002b86:	4837      	ldr	r0, [pc, #220]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002b88:	f7fe ffb0 	bl	8001aec <I2C_CheckEvent>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ed      	beq.n	8002b6e <Codec_ReadRegister+0xf6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  } 
  
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
 8002b92:	2201      	movs	r2, #1
 8002b94:	2194      	movs	r1, #148	; 0x94
 8002b96:	4833      	ldr	r0, [pc, #204]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002b98:	f7fe ff4c 	bl	8001a34 <I2C_Send7bitAddress>
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002b9c:	4b30      	ldr	r3, [pc, #192]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002b9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ba2:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002ba4:	e00a      	b.n	8002bbc <Codec_ReadRegister+0x144>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002ba6:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	1e5a      	subs	r2, r3, #1
 8002bac:	492c      	ldr	r1, [pc, #176]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002bae:	600a      	str	r2, [r1, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d103      	bne.n	8002bbc <Codec_ReadRegister+0x144>
 8002bb4:	f000 ff0c 	bl	80039d0 <Codec_TIMEOUT_UserCallback>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	e04c      	b.n	8002c56 <Codec_ReadRegister+0x1de>
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002bbc:	492d      	ldr	r1, [pc, #180]	; (8002c74 <Codec_ReadRegister+0x1fc>)
 8002bbe:	4829      	ldr	r0, [pc, #164]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002bc0:	f7fe ffc4 	bl	8001b4c <I2C_GetFlagStatus>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0ed      	beq.n	8002ba6 <Codec_ReadRegister+0x12e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }     
  
  /*!< Disable Acknowledgment */
  I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);   
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4825      	ldr	r0, [pc, #148]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002bce:	f7fe ff4f 	bl	8001a70 <I2C_AcknowledgeConfig>
  
  /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
  (void)CODEC_I2C->SR2;
 8002bd2:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002bd4:	8b1b      	ldrh	r3, [r3, #24]
  
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	4822      	ldr	r0, [pc, #136]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002bda:	f7fe ff0b 	bl	80019f4 <I2C_GenerateSTOP>
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002be4:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002be6:	e00a      	b.n	8002bfe <Codec_ReadRegister+0x186>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	1e5a      	subs	r2, r3, #1
 8002bee:	491c      	ldr	r1, [pc, #112]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002bf0:	600a      	str	r2, [r1, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d103      	bne.n	8002bfe <Codec_ReadRegister+0x186>
 8002bf6:	f000 feeb 	bl	80039d0 <Codec_TIMEOUT_UserCallback>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	e02b      	b.n	8002c56 <Codec_ReadRegister+0x1de>
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002bfe:	491e      	ldr	r1, [pc, #120]	; (8002c78 <Codec_ReadRegister+0x200>)
 8002c00:	4818      	ldr	r0, [pc, #96]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002c02:	f7fe ffa3 	bl	8001b4c <I2C_GetFlagStatus>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ed      	beq.n	8002be8 <Codec_ReadRegister+0x170>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
 8002c0c:	4815      	ldr	r0, [pc, #84]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002c0e:	f7fe ff5f 	bl	8001ad0 <I2C_ReceiveData>
 8002c12:	4603      	mov	r3, r0
 8002c14:	60fb      	str	r3, [r7, #12]
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002c16:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002c18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c1c:	601a      	str	r2, [r3, #0]
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 8002c1e:	e00a      	b.n	8002c36 <Codec_ReadRegister+0x1be>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	1e5a      	subs	r2, r3, #1
 8002c26:	490e      	ldr	r1, [pc, #56]	; (8002c60 <Codec_ReadRegister+0x1e8>)
 8002c28:	600a      	str	r2, [r1, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <Codec_ReadRegister+0x1be>
 8002c2e:	f000 fecf 	bl	80039d0 <Codec_TIMEOUT_UserCallback>
 8002c32:	4603      	mov	r3, r0
 8002c34:	e00f      	b.n	8002c56 <Codec_ReadRegister+0x1de>
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ed      	bne.n	8002c20 <Codec_ReadRegister+0x1a8>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }  
  
  /*!< Re-Enable Acknowledgment to be ready for another reception */
  I2C_AcknowledgeConfig(CODEC_I2C, ENABLE);  
 8002c44:	2101      	movs	r1, #1
 8002c46:	4807      	ldr	r0, [pc, #28]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002c48:	f7fe ff12 	bl	8001a70 <I2C_AcknowledgeConfig>
  
  /* Clear AF flag for next communication */
  I2C_ClearFlag(CODEC_I2C, I2C_FLAG_AF); 
 8002c4c:	490b      	ldr	r1, [pc, #44]	; (8002c7c <Codec_ReadRegister+0x204>)
 8002c4e:	4805      	ldr	r0, [pc, #20]	; (8002c64 <Codec_ReadRegister+0x1ec>)
 8002c50:	f7fe ffb0 	bl	8001bb4 <I2C_ClearFlag>
  
  /* Return the byte read from Codec */
  return result;
 8002c54:	68fb      	ldr	r3, [r7, #12]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000028 	.word	0x20000028
 8002c64:	40005400 	.word	0x40005400
 8002c68:	00030001 	.word	0x00030001
 8002c6c:	00070082 	.word	0x00070082
 8002c70:	10000004 	.word	0x10000004
 8002c74:	10000002 	.word	0x10000002
 8002c78:	10000040 	.word	0x10000040
 8002c7c:	10000400 	.word	0x10000400

08002c80 <Codec_CtrlInterface_Init>:
  * @brief  Initializes the Audio Codec control interface (I2C).
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* Enable the CODEC_I2C peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2C_CLK, ENABLE);
 8002c86:	2101      	movs	r1, #1
 8002c88:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002c8c:	f7ff f874 	bl	8001d78 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(CODEC_I2C);
 8002c90:	480f      	ldr	r0, [pc, #60]	; (8002cd0 <Codec_CtrlInterface_Init+0x50>)
 8002c92:	f7fe fd73 	bl	800177c <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8002c96:	2300      	movs	r3, #0
 8002c98:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8002c9a:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002c9e:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 8002ca0:	2333      	movs	r3, #51	; 0x33
 8002ca2:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca8:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002caa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cae:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <Codec_CtrlInterface_Init+0x54>)
 8002cb2:	603b      	str	r3, [r7, #0]
  /* Enable the I2C peripheral */
  I2C_Cmd(CODEC_I2C, ENABLE);  
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	4806      	ldr	r0, [pc, #24]	; (8002cd0 <Codec_CtrlInterface_Init+0x50>)
 8002cb8:	f7fe fe5c 	bl	8001974 <I2C_Cmd>
  I2C_Init(CODEC_I2C, &I2C_InitStructure);
 8002cbc:	463b      	mov	r3, r7
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4803      	ldr	r0, [pc, #12]	; (8002cd0 <Codec_CtrlInterface_Init+0x50>)
 8002cc2:	f7fe fd95 	bl	80017f0 <I2C_Init>
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40005400 	.word	0x40005400
 8002cd4:	000186a0 	.word	0x000186a0

08002cd8 <Codec_AudioInterface_Init>:
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  * @retval None
  */
static void Codec_AudioInterface_Init(uint32_t AudioFreq)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  I2S_InitTypeDef I2S_InitStructure;
  DAC_InitTypeDef  DAC_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, ENABLE);
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002ce6:	f7ff f847 	bl	8001d78 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(CODEC_I2S);
 8002cea:	481a      	ldr	r0, [pc, #104]	; (8002d54 <Codec_AudioInterface_Init+0x7c>)
 8002cec:	f7ff f8c4 	bl	8001e78 <SPI_I2S_DeInit>
  I2S_InitStructure.I2S_AudioFreq = AudioFreq;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	623b      	str	r3, [r7, #32]
  I2S_InitStructure.I2S_Standard = I2S_STANDARD;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	837b      	strh	r3, [r7, #26]
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	83bb      	strh	r3, [r7, #28]
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	84bb      	strh	r3, [r7, #36]	; 0x24
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterRx;
  }
  else
  {
#else
   I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 8002d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d04:	833b      	strh	r3, [r7, #24]
#endif
#ifdef DAC_USE_I2S_DMA
  }
#endif /* DAC_USE_I2S_DMA */
#ifdef CODEC_MCLK_ENABLED
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 8002d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d0a:	83fb      	strh	r3, [r7, #30]
#else
#error "No selection for the MCLK output has been defined !"
#endif /* CODEC_MCLK_ENABLED */
  
  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(CODEC_I2S, &I2S_InitStructure);
 8002d0c:	f107 0318 	add.w	r3, r7, #24
 8002d10:	4619      	mov	r1, r3
 8002d12:	4810      	ldr	r0, [pc, #64]	; (8002d54 <Codec_AudioInterface_Init+0x7c>)
 8002d14:	f7ff f91e 	bl	8001f54 <I2S_Init>


  /* Configure the DAC interface */
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <Codec_AudioInterface_Init+0x80>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d114      	bne.n	8002d4a <Codec_AudioInterface_Init+0x72>
  {    
    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8002d20:	2101      	movs	r1, #1
 8002d22:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002d26:	f7ff f827 	bl	8001d78 <RCC_APB1PeriphClockCmd>
    
    /* DAC channel1 Configuration */
    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
    DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 8002d36:	f107 0308 	add.w	r3, r7, #8
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7fe f8bd 	bl	8000ebc <DAC_Init>
    
    /* Enable DAC Channel1 */
    DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);  
 8002d42:	2101      	movs	r1, #1
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fe f8ed 	bl	8000f24 <DAC_Cmd>
  }
  
  /* The I2S peripheral will be enabled only in the EVAL_AUDIO_Play() function 
       or by user functions if DMA mode not enabled */  
}
 8002d4a:	bf00      	nop
 8002d4c:	3728      	adds	r7, #40	; 0x28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40003c00 	.word	0x40003c00
 8002d58:	2000002c 	.word	0x2000002c

08002d5c <Codec_GPIO_Init>:
  *        interfaces).
  * @param  None
  * @retval None
  */
static void Codec_GPIO_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable Reset GPIO Clock */
  RCC_AHB1PeriphClockCmd(AUDIO_RESET_GPIO_CLK,ENABLE);
 8002d62:	2101      	movs	r1, #1
 8002d64:	2008      	movs	r0, #8
 8002d66:	f7fe ffe7 	bl	8001d38 <RCC_AHB1PeriphClockCmd>
  
  /* Audio reset pin configuration -------------------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = AUDIO_RESET_PIN; 
 8002d6a:	2310      	movs	r3, #16
 8002d6c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002d72:	2302      	movs	r3, #2
 8002d74:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002d76:	2300      	movs	r3, #0
 8002d78:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
 8002d7e:	463b      	mov	r3, r7
 8002d80:	4619      	mov	r1, r3
 8002d82:	4839      	ldr	r0, [pc, #228]	; (8002e68 <Codec_GPIO_Init+0x10c>)
 8002d84:	f7fe fbb6 	bl	80014f4 <GPIO_Init>
  
  /* Enable I2S and I2C GPIO clocks */
  RCC_AHB1PeriphClockCmd(CODEC_I2C_GPIO_CLOCK | CODEC_I2S_GPIO_CLOCK, ENABLE);
 8002d88:	2101      	movs	r1, #1
 8002d8a:	2007      	movs	r0, #7
 8002d8c:	f7fe ffd4 	bl	8001d38 <RCC_AHB1PeriphClockCmd>

  /* CODEC_I2C SCL and SDA pins configuration -------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2C_SCL_PIN | CODEC_I2C_SDA_PIN; 
 8002d90:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002d94:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002d96:	2302      	movs	r3, #2
 8002d98:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2C_GPIO, &GPIO_InitStructure);     
 8002da6:	463b      	mov	r3, r7
 8002da8:	4619      	mov	r1, r3
 8002daa:	4830      	ldr	r0, [pc, #192]	; (8002e6c <Codec_GPIO_Init+0x110>)
 8002dac:	f7fe fba2 	bl	80014f4 <GPIO_Init>
  /* Connect pins to I2C peripheral */
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SCL_PINSRC, CODEC_I2C_GPIO_AF);  
 8002db0:	2204      	movs	r2, #4
 8002db2:	2106      	movs	r1, #6
 8002db4:	482d      	ldr	r0, [pc, #180]	; (8002e6c <Codec_GPIO_Init+0x110>)
 8002db6:	f7fe fc97 	bl	80016e8 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SDA_PINSRC, CODEC_I2C_GPIO_AF);  
 8002dba:	2204      	movs	r2, #4
 8002dbc:	2109      	movs	r1, #9
 8002dbe:	482b      	ldr	r0, [pc, #172]	; (8002e6c <Codec_GPIO_Init+0x110>)
 8002dc0:	f7fe fc92 	bl	80016e8 <GPIO_PinAFConfig>

  /* CODEC_I2S pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
 8002dc4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002dc8:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
 8002dda:	463b      	mov	r3, r7
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4824      	ldr	r0, [pc, #144]	; (8002e70 <Codec_GPIO_Init+0x114>)
 8002de0:	f7fe fb88 	bl	80014f4 <GPIO_Init>
  
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, CODEC_I2S_GPIO_AF);  
 8002de4:	2206      	movs	r2, #6
 8002de6:	2104      	movs	r1, #4
 8002de8:	4822      	ldr	r0, [pc, #136]	; (8002e74 <Codec_GPIO_Init+0x118>)
 8002dea:	f7fe fc7d 	bl	80016e8 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, CODEC_I2S_GPIO_AF);
 8002dee:	2206      	movs	r2, #6
 8002df0:	210a      	movs	r1, #10
 8002df2:	481f      	ldr	r0, [pc, #124]	; (8002e70 <Codec_GPIO_Init+0x114>)
 8002df4:	f7fe fc78 	bl	80016e8 <GPIO_PinAFConfig>

  if (CurrAudioInterface != AUDIO_INTERFACE_DAC) 
 8002df8:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <Codec_GPIO_Init+0x11c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d00c      	beq.n	8002e1a <Codec_GPIO_Init+0xbe>
  {
    GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 8002e00:	2310      	movs	r3, #16
 8002e02:	603b      	str	r3, [r7, #0]
    GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 8002e04:	463b      	mov	r3, r7
 8002e06:	4619      	mov	r1, r3
 8002e08:	481a      	ldr	r0, [pc, #104]	; (8002e74 <Codec_GPIO_Init+0x118>)
 8002e0a:	f7fe fb73 	bl	80014f4 <GPIO_Init>
    GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, CODEC_I2S_GPIO_AF);
 8002e0e:	2206      	movs	r2, #6
 8002e10:	210c      	movs	r1, #12
 8002e12:	4817      	ldr	r0, [pc, #92]	; (8002e70 <Codec_GPIO_Init+0x114>)
 8002e14:	f7fe fc68 	bl	80016e8 <GPIO_PinAFConfig>
 8002e18:	e00e      	b.n	8002e38 <Codec_GPIO_Init+0xdc>
  }
  else
  {
    /* GPIOA clock enable (to be used with DAC) */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	f7fe ff8b 	bl	8001d38 <RCC_AHB1PeriphClockCmd>
   
    /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8002e22:	2310      	movs	r3, #16
 8002e24:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002e26:	2303      	movs	r3, #3
 8002e28:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002e2e:	463b      	mov	r3, r7
 8002e30:	4619      	mov	r1, r3
 8002e32:	4810      	ldr	r0, [pc, #64]	; (8002e74 <Codec_GPIO_Init+0x118>)
 8002e34:	f7fe fb5e 	bl	80014f4 <GPIO_Init>
  }

#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e40:	2302      	movs	r3, #2
 8002e42:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002e44:	2300      	movs	r3, #0
 8002e46:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 8002e4c:	463b      	mov	r3, r7
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4807      	ldr	r0, [pc, #28]	; (8002e70 <Codec_GPIO_Init+0x114>)
 8002e52:	f7fe fb4f 	bl	80014f4 <GPIO_Init>
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 8002e56:	2206      	movs	r2, #6
 8002e58:	2107      	movs	r1, #7
 8002e5a:	4805      	ldr	r0, [pc, #20]	; (8002e70 <Codec_GPIO_Init+0x114>)
 8002e5c:	f7fe fc44 	bl	80016e8 <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */ 
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40020c00 	.word	0x40020c00
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	40020800 	.word	0x40020800
 8002e74:	40020000 	.word	0x40020000
 8002e78:	2000002c 	.word	0x2000002c

08002e7c <Delay>:
  * @param  nCount: specifies the delay time length.
  * @retval None
  */

static void Delay( __IO uint32_t nCount)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  for (; nCount != 0; nCount--);
 8002e84:	e002      	b.n	8002e8c <Delay+0x10>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f9      	bne.n	8002e86 <Delay+0xa>
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop

08002ea0 <Audio_MAL_Init>:
  *         from Media to the I2S peripheral.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Init(void)  
{ 
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
#else  
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;
#endif

  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002ea6:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <Audio_MAL_Init+0x130>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d16e      	bne.n	8002f8c <Audio_MAL_Init+0xec>
  {
    /* Enable the DMA clock */
    RCC_AHB1PeriphClockCmd(AUDIO_MAL_DMA_CLOCK, ENABLE); 
 8002eae:	4b49      	ldr	r3, [pc, #292]	; (8002fd4 <Audio_MAL_Init+0x134>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe ff3f 	bl	8001d38 <RCC_AHB1PeriphClockCmd>
    
    /* Configure the DMA Stream */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <Audio_MAL_Init+0x138>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe f9d5 	bl	8001270 <DMA_Cmd>
    DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 8002ec6:	4b44      	ldr	r3, [pc, #272]	; (8002fd8 <Audio_MAL_Init+0x138>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe f86c 	bl	8000fa8 <DMA_DeInit>
    /* Set the parameters to be configured */
    DMA_InitStructure.DMA_Channel = AUDIO_MAL_DMA_CHANNEL;  
 8002ed0:	4b42      	ldr	r3, [pc, #264]	; (8002fdc <Audio_MAL_Init+0x13c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a42      	ldr	r2, [pc, #264]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002ed6:	6013      	str	r3, [r2, #0]
    DMA_InitStructure.DMA_PeripheralBaseAddr = AUDIO_MAL_DMA_DREG;
 8002ed8:	4b42      	ldr	r3, [pc, #264]	; (8002fe4 <Audio_MAL_Init+0x144>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a40      	ldr	r2, [pc, #256]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002ede:	6053      	str	r3, [r2, #4]
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 8002ee0:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8002ee6:	4b3e      	ldr	r3, [pc, #248]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002ee8:	2240      	movs	r2, #64	; 0x40
 8002eea:	60da      	str	r2, [r3, #12]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)0xFFFE;      /* This field will be configured in play function */
 8002eec:	4b3c      	ldr	r3, [pc, #240]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002eee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ef2:	611a      	str	r2, [r3, #16]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002ef4:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	615a      	str	r2, [r3, #20]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002efa:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002efc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f00:	619a      	str	r2, [r3, #24]
    DMA_InitStructure.DMA_PeripheralDataSize = AUDIO_MAL_DMA_PERIPH_DATA_SIZE;
 8002f02:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f08:	61da      	str	r2, [r3, #28]
    DMA_InitStructure.DMA_MemoryDataSize = AUDIO_MAL_DMA_MEM_DATA_SIZE; 
 8002f0a:	4b35      	ldr	r3, [pc, #212]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002f0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f10:	621a      	str	r2, [r3, #32]
#ifdef AUDIO_MAL_MODE_NORMAL
    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
#elif defined(AUDIO_MAL_MODE_CIRCULAR)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8002f12:	4b33      	ldr	r3, [pc, #204]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error "AUDIO_MAL_MODE_NORMAL or AUDIO_MAL_MODE_CIRCULAR should be selected !!"
#endif /* AUDIO_MAL_MODE_NORMAL */  
    DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8002f1a:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002f1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f20:	629a      	str	r2, [r3, #40]	; 0x28
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 8002f22:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8002f28:	4b2d      	ldr	r3, [pc, #180]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002f2e:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	635a      	str	r2, [r3, #52]	; 0x34
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;  
 8002f34:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);  
 8002f3a:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <Audio_MAL_Init+0x138>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4928      	ldr	r1, [pc, #160]	; (8002fe0 <Audio_MAL_Init+0x140>)
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe f905 	bl	8001150 <DMA_Init>
    
    /* Enable the selected DMA interrupts (selected in "stm32f4_discovery_eval_audio_codec.h" defines) */
#ifdef AUDIO_MAL_DMA_IT_TC_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TC, ENABLE);
 8002f46:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <Audio_MAL_Init+0x138>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	2110      	movs	r1, #16
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fa14 	bl	800137c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TC_EN */
#ifdef AUDIO_MAL_DMA_IT_HT_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_HT, ENABLE);
 8002f54:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <Audio_MAL_Init+0x138>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	2108      	movs	r1, #8
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe fa0d 	bl	800137c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
#ifdef AUDIO_MAL_DMA_IT_TE_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
 8002f62:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <Audio_MAL_Init+0x138>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2201      	movs	r2, #1
 8002f68:	2186      	movs	r1, #134	; 0x86
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fa06 	bl	800137c <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
    
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 8002f70:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <Audio_MAL_Init+0x148>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002f80:	2301      	movs	r3, #1
 8002f82:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd fd40 	bl	8000a0c <NVIC_Init>
    NVIC_Init(&NVIC_InitStructure);
#endif 
  }
#endif /* DAC_USE_I2S_DMA */
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002f8c:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <Audio_MAL_Init+0x130>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d105      	bne.n	8002fa0 <Audio_MAL_Init+0x100>
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
 8002f94:	2201      	movs	r2, #1
 8002f96:	2102      	movs	r1, #2
 8002f98:	4814      	ldr	r0, [pc, #80]	; (8002fec <Audio_MAL_Init+0x14c>)
 8002f9a:	f7ff f8e5 	bl	8002168 <SPI_I2S_DMACmd>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 8002f9e:	e012      	b.n	8002fc6 <Audio_MAL_Init+0x126>
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
  }
  else
  {
    /* Configure the STM32 DAC to geenrate audio analog signal */
    DAC_Config();
 8002fa0:	f000 f86c 	bl	800307c <DAC_Config>
    
#ifndef DAC_USE_I2S_DMA
    /* Enable the I2S interrupt used to write into the DAC register */
    SPI_I2S_ITConfig(SPI3, SPI_I2S_IT_TXE, ENABLE);
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	2171      	movs	r1, #113	; 0x71
 8002fa8:	4810      	ldr	r0, [pc, #64]	; (8002fec <Audio_MAL_Init+0x14c>)
 8002faa:	f7ff f901 	bl	80021b0 <SPI_I2S_ITConfig>
    
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = CODEC_I2S_IRQ;
 8002fae:	2333      	movs	r3, #51	; 0x33
 8002fb0:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure); 
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fd23 	bl	8000a0c <NVIC_Init>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	2000002c 	.word	0x2000002c
 8002fd4:	20000030 	.word	0x20000030
 8002fd8:	20000034 	.word	0x20000034
 8002fdc:	200000bc 	.word	0x200000bc
 8002fe0:	200064a8 	.word	0x200064a8
 8002fe4:	20000038 	.word	0x20000038
 8002fe8:	2000003c 	.word	0x2000003c
 8002fec:	40003c00 	.word	0x40003c00

08002ff0 <Audio_MAL_Play>:
  * @brief  Starts playing audio stream from the audio Media.
  * @param  None
  * @retval None
  */
void Audio_MAL_Play(uint32_t Addr, uint32_t Size)
{         
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <Audio_MAL_Play+0x7c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d112      	bne.n	8003028 <Audio_MAL_Play+0x38>
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 8003002:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <Audio_MAL_Play+0x80>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 8003008:	4a19      	ldr	r2, [pc, #100]	; (8003070 <Audio_MAL_Play+0x80>)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800300e:	4b19      	ldr	r3, [pc, #100]	; (8003074 <Audio_MAL_Play+0x84>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4917      	ldr	r1, [pc, #92]	; (8003070 <Audio_MAL_Play+0x80>)
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe f89b 	bl	8001150 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);   
 800301a:	4b16      	ldr	r3, [pc, #88]	; (8003074 <Audio_MAL_Play+0x84>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2101      	movs	r1, #1
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe f925 	bl	8001270 <DMA_Cmd>
 8003026:	e011      	b.n	800304c <Audio_MAL_Play+0x5c>
  }
#ifndef DAC_USE_I2S_DMA
  else
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 8003028:	4a11      	ldr	r2, [pc, #68]	; (8003070 <Audio_MAL_Play+0x80>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 800302e:	4a10      	ldr	r2, [pc, #64]	; (8003070 <Audio_MAL_Play+0x80>)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <Audio_MAL_Play+0x84>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	490d      	ldr	r1, [pc, #52]	; (8003070 <Audio_MAL_Play+0x80>)
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe f888 	bl	8001150 <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <Audio_MAL_Play+0x84>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2101      	movs	r1, #1
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe f912 	bl	8001270 <DMA_Cmd>
  }
#endif /* DAC_USE_I2S_DMA */
  
  /* If the I2S peripheral is still not enabled, enable it */
  if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <Audio_MAL_Play+0x88>)
 800304e:	8b9b      	ldrh	r3, [r3, #28]
 8003050:	b29b      	uxth	r3, r3
 8003052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <Audio_MAL_Play+0x72>
  {
    I2S_Cmd(CODEC_I2S, ENABLE);
 800305a:	2101      	movs	r1, #1
 800305c:	4806      	ldr	r0, [pc, #24]	; (8003078 <Audio_MAL_Play+0x88>)
 800305e:	f7ff f853 	bl	8002108 <I2S_Cmd>
  }
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	2000002c 	.word	0x2000002c
 8003070:	200064a8 	.word	0x200064a8
 8003074:	20000034 	.word	0x20000034
 8003078:	40003c00 	.word	0x40003c00

0800307c <DAC_Config>:
  * @brief  DAC  Channel1 Configuration
  * @param  None
  * @retval None
  */
void DAC_Config(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
  DAC_InitTypeDef  DAC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;

  /* DMA1 clock and GPIOA clock enable (to be used with DAC) */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 8003082:	2101      	movs	r1, #1
 8003084:	4813      	ldr	r0, [pc, #76]	; (80030d4 <DAC_Config+0x58>)
 8003086:	f7fe fe57 	bl	8001d38 <RCC_AHB1PeriphClockCmd>

  /* DAC Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 800308a:	2101      	movs	r1, #1
 800308c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003090:	f7fe fe72 	bl	8001d78 <RCC_APB1PeriphClockCmd>

  /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8003094:	2310      	movs	r3, #16
 8003096:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8003098:	2303      	movs	r3, #3
 800309a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80030a0:	463b      	mov	r3, r7
 80030a2:	4619      	mov	r1, r3
 80030a4:	480c      	ldr	r0, [pc, #48]	; (80030d8 <DAC_Config+0x5c>)
 80030a6:	f7fe fa25 	bl	80014f4 <GPIO_Init>

  /* DAC channel1 Configuration */
  DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
  DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 80030b6:	f107 0308 	add.w	r3, r7, #8
 80030ba:	4619      	mov	r1, r3
 80030bc:	2000      	movs	r0, #0
 80030be:	f7fd fefd 	bl	8000ebc <DAC_Init>

  /* Enable DAC Channel1 */
  DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);
 80030c2:	2101      	movs	r1, #1
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7fd ff2d 	bl	8000f24 <DAC_Cmd>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	00200001 	.word	0x00200001
 80030d8:	40020000 	.word	0x40020000

080030dc <init_adc>:
/*
 * Initializes the ADC to work in scan mode with 13 channels for pots
 * Uses DMA to transfer data and a timer to throttle the ADC conversion
 * The conversion cycle occurs every 75ms this function starts the timer.
 */
void init_adc(volatile uint16_t ADCBuffer[NUM_CHANNELS]){
 80030dc:	b580      	push	{r7, lr}
 80030de:	b0a0      	sub	sp, #128	; 0x80
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]




	/* Enable timer (timer runs at 13.3 Hz)*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80030e4:	2101      	movs	r1, #1
 80030e6:	2001      	movs	r0, #1
 80030e8:	f7fe fe46 	bl	8001d78 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&time_base_struct);
 80030ec:	f107 0308 	add.w	r3, r7, #8
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff f959 	bl	80023a8 <TIM_TimeBaseStructInit>
	time_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 80030f6:	2300      	movs	r3, #0
 80030f8:	823b      	strh	r3, [r7, #16]
	time_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 80030fa:	2300      	movs	r3, #0
 80030fc:	817b      	strh	r3, [r7, #10]
	time_base_struct.TIM_Period = myTIM2_PERIOD;
 80030fe:	f243 1338 	movw	r3, #12600	; 0x3138
 8003102:	60fb      	str	r3, [r7, #12]
	time_base_struct.TIM_Prescaler = myTIM2_PRESCALER;
 8003104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003108:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM2, &time_base_struct);
 800310a:	f107 0308 	add.w	r3, r7, #8
 800310e:	4619      	mov	r1, r3
 8003110:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003114:	f7ff f8dc 	bl	80022d0 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM2,TIM_TRGOSource_Update);
 8003118:	2120      	movs	r1, #32
 800311a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800311e:	f7ff f9b3 	bl	8002488 <TIM_SelectOutputTrigger>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8003122:	2201      	movs	r2, #1
 8003124:	2101      	movs	r1, #1
 8003126:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800312a:	f7ff f977 	bl	800241c <TIM_ITConfig>

	/* Enable clock on DMA1 & GPIO's */
	/* Enable DMA2, thats where ADC peripheral is used */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 800312e:	2101      	movs	r1, #1
 8003130:	2001      	movs	r0, #1
 8003132:	f7fe fe01 	bl	8001d38 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 8003136:	2101      	movs	r1, #1
 8003138:	2002      	movs	r0, #2
 800313a:	f7fe fdfd 	bl	8001d38 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 800313e:	2101      	movs	r1, #1
 8003140:	2004      	movs	r0, #4
 8003142:	f7fe fdf9 	bl	8001d38 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,ENABLE);
 8003146:	2101      	movs	r1, #1
 8003148:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800314c:	f7fe fdf4 	bl	8001d38 <RCC_AHB1PeriphClockCmd>
	//GPIO_Pin_1	VFO-Frequency
	//GPIO_Pin_2	LFO-Amplitude
	//GPIO_Pin_3	LFO-Frequency
	//GPIO_Pin_5	ENVELOPE-Attack
	//GPIO_Pin_7	ENVELOPE-Sustain-time
	GPIO_StructInit(&GPIO_InitStructure);
 8003150:	f107 0314 	add.w	r3, r7, #20
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe fa5b 	bl	8001610 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_5  | GPIO_Pin_7;
 800315a:	23af      	movs	r3, #175	; 0xaf
 800315c:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 800315e:	2303      	movs	r3, #3
 8003160:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003162:	2302      	movs	r3, #2
 8003164:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800316a:	f107 0314 	add.w	r3, r7, #20
 800316e:	4619      	mov	r1, r3
 8003170:	4879      	ldr	r0, [pc, #484]	; (8003358 <init_adc+0x27c>)
 8003172:	f7fe f9bf 	bl	80014f4 <GPIO_Init>

	//B bank pins
	//GPIO_Pin_0	ENVELOPE-Release
	//GPIO_Pin_1	FILTER-FreqLow
	GPIO_StructInit(&GPIO_InitStructure);
 8003176:	f107 0314 	add.w	r3, r7, #20
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fa48 	bl	8001610 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1;
 8003180:	2303      	movs	r3, #3
 8003182:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 8003184:	2303      	movs	r3, #3
 8003186:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003188:	2302      	movs	r3, #2
 800318a:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 800318c:	2300      	movs	r3, #0
 800318e:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	4619      	mov	r1, r3
 8003196:	4871      	ldr	r0, [pc, #452]	; (800335c <init_adc+0x280>)
 8003198:	f7fe f9ac 	bl	80014f4 <GPIO_Init>
	//C bank pins//GPIO_Pin_0
	//GPIO_Pin_0	ENVELOPE blsnk_len
	//GPIO_Pin_1	ENVELOPE-decay
	//GPIO_Pin_2	VCO-Volume
	//GPIO_Pin_4	ENVELOPE-sustain-amp
	GPIO_StructInit(&GPIO_InitStructure);
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fe fa35 	bl	8001610 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_4;
 80031a6:	2317      	movs	r3, #23
 80031a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 80031aa:	2303      	movs	r3, #3
 80031ac:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80031ae:	2302      	movs	r3, #2
 80031b0:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80031b6:	f107 0314 	add.w	r3, r7, #20
 80031ba:	4619      	mov	r1, r3
 80031bc:	4868      	ldr	r0, [pc, #416]	; (8003360 <init_adc+0x284>)
 80031be:	f7fe f999 	bl	80014f4 <GPIO_Init>


	/*  Initialise DMA */
	DMA_StructInit(&DMA_Init_struct);							// reset struct
 80031c2:	f107 031c 	add.w	r3, r7, #28
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe f81a 	bl	8001200 <DMA_StructInit>

	/* config of DMA */
	DMA_Init_struct.DMA_Channel = DMA_Channel_0; 				/* See Tab 43 */
 80031cc:	2300      	movs	r3, #0
 80031ce:	61fb      	str	r3, [r7, #28]
	DMA_Init_struct.DMA_BufferSize = NUM_CHANNELS;				/*  13adc channels */
 80031d0:	230c      	movs	r3, #12
 80031d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_Init_struct.DMA_DIR = DMA_DIR_PeripheralToMemory; 		/* ADC to mem */
 80031d4:	2300      	movs	r3, #0
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_Init_struct.DMA_FIFOMode = DMA_FIFOMode_Disable; 		/* no FIFO */
 80031d8:	2300      	movs	r3, #0
 80031da:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_Init_struct.DMA_FIFOThreshold = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_Init_struct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80031e0:	2300      	movs	r3, #0
 80031e2:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_Init_struct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80031e4:	2300      	movs	r3, #0
 80031e6:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_Init_struct.DMA_Mode = DMA_Mode_Circular; 				/* circular buffer */
 80031e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ec:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_Init_struct.DMA_Priority = DMA_Priority_High; 			/* high priority */
 80031ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f2:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init_struct.DMA_Memory0BaseAddr = (uint32_t)ADCBuffer; 	/* target addr */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_Init_struct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; /* 16 bit */
 80031f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_Init_struct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 80031fe:	4b59      	ldr	r3, [pc, #356]	; (8003364 <init_adc+0x288>)
 8003200:	623b      	str	r3, [r7, #32]
	DMA_Init_struct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8003202:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003206:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_Init_struct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800320c:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_Init_struct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800320e:	2300      	movs	r3, #0
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init(DMA2_Stream0, &DMA_Init_struct); 					/* See Table 43 for mapping */
 8003212:	f107 031c 	add.w	r3, r7, #28
 8003216:	4619      	mov	r1, r3
 8003218:	4853      	ldr	r0, [pc, #332]	; (8003368 <init_adc+0x28c>)
 800321a:	f7fd ff99 	bl	8001150 <DMA_Init>
	DMA_Cmd(DMA2_Stream0, ENABLE);
 800321e:	2101      	movs	r1, #1
 8003220:	4851      	ldr	r0, [pc, #324]	; (8003368 <init_adc+0x28c>)
 8003222:	f7fe f825 	bl	8001270 <DMA_Cmd>

	/*Initialize ADC*/
	ADC_StructInit(&adc_init_struct);						//populates structs with reset defaults
 8003226:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd fcb4 	bl	8000b98 <ADC_StructInit>
	ADC_CommonStructInit(&adc_com_init_struct);
 8003230:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd fcf7 	bl	8000c28 <ADC_CommonStructInit>
	ADC_Cmd(ADC1, DISABLE);
 800323a:	2100      	movs	r1, #0
 800323c:	484b      	ldr	r0, [pc, #300]	; (800336c <init_adc+0x290>)
 800323e:	f7fd fd09 	bl	8000c54 <ADC_Cmd>
	ADC_DeInit();
 8003242:	f7fd fc45 	bl	8000ad0 <ADC_DeInit>

	/* init ADC clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8003246:	2101      	movs	r1, #1
 8003248:	f44f 7080 	mov.w	r0, #256	; 0x100
 800324c:	f7fe fdb4 	bl	8001db8 <RCC_APB2PeriphClockCmd>

	/*Initialize Common ADC */
	adc_com_init_struct.ADC_Mode = ADC_Mode_Independent;
 8003250:	2300      	movs	r3, #0
 8003252:	65bb      	str	r3, [r7, #88]	; 0x58
	adc_com_init_struct.ADC_Prescaler = ADC_Prescaler_Div2;
 8003254:	2300      	movs	r3, #0
 8003256:	65fb      	str	r3, [r7, #92]	; 0x5c
	adc_com_init_struct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8003258:	2300      	movs	r3, #0
 800325a:	663b      	str	r3, [r7, #96]	; 0x60
	adc_com_init_struct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_20Cycles;
 800325c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003260:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CommonInit(&adc_com_init_struct);
 8003262:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd fcb6 	bl	8000bd8 <ADC_CommonInit>

	/* Initialize ADC1 */
	adc_init_struct.ADC_Resolution = ADC_Resolution_12b;
 800326c:	2300      	movs	r3, #0
 800326e:	66bb      	str	r3, [r7, #104]	; 0x68
	adc_init_struct.ADC_ScanConvMode = ENABLE;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	adc_init_struct.ADC_ContinuousConvMode = DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	adc_init_struct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 800327c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003280:	673b      	str	r3, [r7, #112]	; 0x70
	adc_init_struct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;
 8003282:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003286:	677b      	str	r3, [r7, #116]	; 0x74
	adc_init_struct.ADC_DataAlign = ADC_DataAlign_Right;
 8003288:	2300      	movs	r3, #0
 800328a:	67bb      	str	r3, [r7, #120]	; 0x78
	adc_init_struct.ADC_NbrOfConversion = NUM_CHANNELS; /* 5 channels in total */
 800328c:	230c      	movs	r3, #12
 800328e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	ADC_Init(ADC1, &adc_init_struct);
 8003292:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003296:	4619      	mov	r1, r3
 8003298:	4834      	ldr	r0, [pc, #208]	; (800336c <init_adc+0x290>)
 800329a:	f7fd fc27 	bl	8000aec <ADC_Init>

	/* Configure channels */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_480Cycles);		//VFO-Amplitude
 800329e:	2307      	movs	r3, #7
 80032a0:	2201      	movs	r2, #1
 80032a2:	2100      	movs	r1, #0
 80032a4:	4831      	ldr	r0, [pc, #196]	; (800336c <init_adc+0x290>)
 80032a6:	f7fd fcf1 	bl	8000c8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_480Cycles);		//VFO-Frequency
 80032aa:	2307      	movs	r3, #7
 80032ac:	2202      	movs	r2, #2
 80032ae:	2101      	movs	r1, #1
 80032b0:	482e      	ldr	r0, [pc, #184]	; (800336c <init_adc+0x290>)
 80032b2:	f7fd fceb 	bl	8000c8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 3, ADC_SampleTime_480Cycles);		//LFO-Amplitude
 80032b6:	2307      	movs	r3, #7
 80032b8:	2203      	movs	r2, #3
 80032ba:	2102      	movs	r1, #2
 80032bc:	482b      	ldr	r0, [pc, #172]	; (800336c <init_adc+0x290>)
 80032be:	f7fd fce5 	bl	8000c8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 4, ADC_SampleTime_480Cycles);		//LFO-Frequency
 80032c2:	2307      	movs	r3, #7
 80032c4:	2204      	movs	r2, #4
 80032c6:	2103      	movs	r1, #3
 80032c8:	4828      	ldr	r0, [pc, #160]	; (800336c <init_adc+0x290>)
 80032ca:	f7fd fcdf 	bl	8000c8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 5, ADC_SampleTime_480Cycles);		//ENVELOPE-Attack
 80032ce:	2307      	movs	r3, #7
 80032d0:	2205      	movs	r2, #5
 80032d2:	2105      	movs	r1, #5
 80032d4:	4825      	ldr	r0, [pc, #148]	; (800336c <init_adc+0x290>)
 80032d6:	f7fd fcd9 	bl	8000c8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 6, ADC_SampleTime_480Cycles);		//ENVELOPE-Sustain-time
 80032da:	2307      	movs	r3, #7
 80032dc:	2206      	movs	r2, #6
 80032de:	2107      	movs	r1, #7
 80032e0:	4822      	ldr	r0, [pc, #136]	; (800336c <init_adc+0x290>)
 80032e2:	f7fd fcd3 	bl	8000c8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 7, ADC_SampleTime_480Cycles);		//ENVELOPE-Release
 80032e6:	2307      	movs	r3, #7
 80032e8:	2207      	movs	r2, #7
 80032ea:	2108      	movs	r1, #8
 80032ec:	481f      	ldr	r0, [pc, #124]	; (800336c <init_adc+0x290>)
 80032ee:	f7fd fccd 	bl	8000c8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 8, ADC_SampleTime_480Cycles);		//FILTER-FreqLow
 80032f2:	2307      	movs	r3, #7
 80032f4:	2208      	movs	r2, #8
 80032f6:	2109      	movs	r1, #9
 80032f8:	481c      	ldr	r0, [pc, #112]	; (800336c <init_adc+0x290>)
 80032fa:	f7fd fcc7 	bl	8000c8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 9, ADC_SampleTime_480Cycles);	//ENVELOPE blsnk_len
 80032fe:	2307      	movs	r3, #7
 8003300:	2209      	movs	r2, #9
 8003302:	210a      	movs	r1, #10
 8003304:	4819      	ldr	r0, [pc, #100]	; (800336c <init_adc+0x290>)
 8003306:	f7fd fcc1 	bl	8000c8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 10, ADC_SampleTime_480Cycles);	//ENVELOPE-decay
 800330a:	2307      	movs	r3, #7
 800330c:	220a      	movs	r2, #10
 800330e:	210b      	movs	r1, #11
 8003310:	4816      	ldr	r0, [pc, #88]	; (800336c <init_adc+0x290>)
 8003312:	f7fd fcbb 	bl	8000c8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 11, ADC_SampleTime_480Cycles);	//VCO-Volume
 8003316:	2307      	movs	r3, #7
 8003318:	220b      	movs	r2, #11
 800331a:	210c      	movs	r1, #12
 800331c:	4813      	ldr	r0, [pc, #76]	; (800336c <init_adc+0x290>)
 800331e:	f7fd fcb5 	bl	8000c8c <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 12, ADC_SampleTime_480Cycles);	//ENVELOPE-sustain-amp
 8003322:	2307      	movs	r3, #7
 8003324:	220c      	movs	r2, #12
 8003326:	210e      	movs	r1, #14
 8003328:	4810      	ldr	r0, [pc, #64]	; (800336c <init_adc+0x290>)
 800332a:	f7fd fcaf 	bl	8000c8c <ADC_RegularChannelConfig>

	/* Enable ADC1 DMA */
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);			//enables DMA request after all adc conversions
 800332e:	2101      	movs	r1, #1
 8003330:	480e      	ldr	r0, [pc, #56]	; (800336c <init_adc+0x290>)
 8003332:	f7fd fd91 	bl	8000e58 <ADC_DMARequestAfterLastTransferCmd>
	ADC_DMACmd(ADC1, ENABLE);
 8003336:	2101      	movs	r1, #1
 8003338:	480c      	ldr	r0, [pc, #48]	; (800336c <init_adc+0x290>)
 800333a:	f7fd fd71 	bl	8000e20 <ADC_DMACmd>

	/* Enable ADC1 **************************************************************/
	ADC_Cmd(ADC1, ENABLE);
 800333e:	2101      	movs	r1, #1
 8003340:	480a      	ldr	r0, [pc, #40]	; (800336c <init_adc+0x290>)
 8003342:	f7fd fc87 	bl	8000c54 <ADC_Cmd>

	TIM_Cmd(TIM2, ENABLE);		//This could be dine in the main however gonna leave it here
 8003346:	2101      	movs	r1, #1
 8003348:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800334c:	f7ff f846 	bl	80023dc <TIM_Cmd>



}
 8003350:	bf00      	nop
 8003352:	3780      	adds	r7, #128	; 0x80
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40020000 	.word	0x40020000
 800335c:	40020400 	.word	0x40020400
 8003360:	40020800 	.word	0x40020800
 8003364:	4001204c 	.word	0x4001204c
 8003368:	40026410 	.word	0x40026410
 800336c:	40012000 	.word	0x40012000

08003370 <init_gpios>:
/*
 * Sets up the 5 position selectors and TIM4 to be used to debounce
 * if the interrupt priorities need to be changed make sure timer is higher than EXTI
 */

void init_gpios(){
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef EXTI_init_struct;
	NVIC_InitTypeDef EXTI_NVIC_init_struct;
	NVIC_InitTypeDef TIM4_NVIC_init_struct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE); 			//This is already turned on in ADC Init function
 8003376:	2101      	movs	r1, #1
 8003378:	2004      	movs	r0, #4
 800337a:	f7fe fcdd 	bl	8001d38 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE,ENABLE);
 800337e:	2101      	movs	r1, #1
 8003380:	2010      	movs	r0, #16
 8003382:	f7fe fcd9 	bl	8001d38 <RCC_AHB1PeriphClockCmd>
	 * PE12 	lfo_sine
	 * PE13		lfo_sawtooth
	 * PE14		lfo_square
	 * PE15		lfo_triangle
	 */
	GPIO_StructInit(&GPIO_InitStructure);							// Default values
 8003386:	f107 0320 	add.w	r3, r7, #32
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe f940 	bl	8001610 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8003390:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003394:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 8003396:	2300      	movs	r3, #0
 8003398:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;				//slow
 800339c:	2300      	movs	r3, #0
 800339e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//no
 80033a2:	2300      	movs	r3, #0
 80033a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 80033a8:	f107 0320 	add.w	r3, r7, #32
 80033ac:	4619      	mov	r1, r3
 80033ae:	484e      	ldr	r0, [pc, #312]	; (80034e8 <init_gpios+0x178>)
 80033b0:	f7fe f8a0 	bl	80014f4 <GPIO_Init>

	/*
	 * C bank pins
	 * PC6		lfo_other2
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 80033b4:	f107 0320 	add.w	r3, r7, #32
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe f929 	bl	8001610 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_6;
 80033be:	2340      	movs	r3, #64	; 0x40
 80033c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 80033c2:	2300      	movs	r3, #0
 80033c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;				//slow
 80033c8:	2300      	movs	r3, #0
 80033ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//no pull
 80033ce:	2300      	movs	r3, #0
 80033d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80033d4:	f107 0320 	add.w	r3, r7, #32
 80033d8:	4619      	mov	r1, r3
 80033da:	4844      	ldr	r0, [pc, #272]	; (80034ec <init_gpios+0x17c>)
 80033dc:	f7fe f88a 	bl	80014f4 <GPIO_Init>


	/*Configure Tim4 for debouncing	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80033e0:	2101      	movs	r1, #1
 80033e2:	2004      	movs	r0, #4
 80033e4:	f7fe fcc8 	bl	8001d78 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&tim4_base_struct);
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fe ffdb 	bl	80023a8 <TIM_TimeBaseStructInit>
	tim4_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 80033f2:	2300      	movs	r3, #0
 80033f4:	83bb      	strh	r3, [r7, #28]
	tim4_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 80033f6:	2300      	movs	r3, #0
 80033f8:	82fb      	strh	r3, [r7, #22]
	tim4_base_struct.TIM_Period = MYTIM4_PERIOD;
 80033fa:	f643 136c 	movw	r3, #14700	; 0x396c
 80033fe:	61bb      	str	r3, [r7, #24]
	tim4_base_struct.TIM_Prescaler = myTIM4_PRESCALER;
 8003400:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003404:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM4, &tim4_base_struct);
 8003406:	f107 0314 	add.w	r3, r7, #20
 800340a:	4619      	mov	r1, r3
 800340c:	4838      	ldr	r0, [pc, #224]	; (80034f0 <init_gpios+0x180>)
 800340e:	f7fe ff5f 	bl	80022d0 <TIM_TimeBaseInit>

	TIM4_NVIC_init_struct.NVIC_IRQChannel = TIM4_IRQn;
 8003412:	231e      	movs	r3, #30
 8003414:	713b      	strb	r3, [r7, #4]
	TIM4_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003416:	2301      	movs	r3, #1
 8003418:	71fb      	strb	r3, [r7, #7]
	TIM4_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x00;
 800341a:	2300      	movs	r3, #0
 800341c:	717b      	strb	r3, [r7, #5]
	TIM4_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x00;
 800341e:	2300      	movs	r3, #0
 8003420:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&TIM4_NVIC_init_struct);
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	4618      	mov	r0, r3
 8003426:	f7fd faf1 	bl	8000a0c <NVIC_Init>

	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 800342a:	2201      	movs	r2, #1
 800342c:	2101      	movs	r1, #1
 800342e:	4830      	ldr	r0, [pc, #192]	; (80034f0 <init_gpios+0x180>)
 8003430:	f7fe fff4 	bl	800241c <TIM_ITConfig>


	/*Configure pins as EXTI*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 8003434:	2101      	movs	r1, #1
 8003436:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800343a:	f7fe fcbd 	bl	8001db8 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource6);
 800343e:	2106      	movs	r1, #6
 8003440:	2002      	movs	r0, #2
 8003442:	f7fe ff03 	bl	800224c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource7);
 8003446:	2107      	movs	r1, #7
 8003448:	2004      	movs	r0, #4
 800344a:	f7fe feff 	bl	800224c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource8);
 800344e:	2108      	movs	r1, #8
 8003450:	2004      	movs	r0, #4
 8003452:	f7fe fefb 	bl	800224c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource9);
 8003456:	2109      	movs	r1, #9
 8003458:	2004      	movs	r0, #4
 800345a:	f7fe fef7 	bl	800224c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource10);
 800345e:	210a      	movs	r1, #10
 8003460:	2004      	movs	r0, #4
 8003462:	f7fe fef3 	bl	800224c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource11);
 8003466:	210b      	movs	r1, #11
 8003468:	2004      	movs	r0, #4
 800346a:	f7fe feef 	bl	800224c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource12);
 800346e:	210c      	movs	r1, #12
 8003470:	2004      	movs	r0, #4
 8003472:	f7fe feeb 	bl	800224c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource13);
 8003476:	210d      	movs	r1, #13
 8003478:	2004      	movs	r0, #4
 800347a:	f7fe fee7 	bl	800224c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource14);
 800347e:	210e      	movs	r1, #14
 8003480:	2004      	movs	r0, #4
 8003482:	f7fe fee3 	bl	800224c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource15);
 8003486:	210f      	movs	r1, #15
 8003488:	2004      	movs	r0, #4
 800348a:	f7fe fedf 	bl	800224c <SYSCFG_EXTILineConfig>


	//init EXTI
	EXTI_init_struct.EXTI_Line = EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9 | EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15;
 800348e:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8003492:	60fb      	str	r3, [r7, #12]
	EXTI_init_struct.EXTI_LineCmd = ENABLE;
 8003494:	2301      	movs	r3, #1
 8003496:	74bb      	strb	r3, [r7, #18]
	EXTI_init_struct.EXTI_Mode =  EXTI_Mode_Interrupt;
 8003498:	2300      	movs	r3, #0
 800349a:	743b      	strb	r3, [r7, #16]
	EXTI_init_struct.EXTI_Trigger = EXTI_Trigger_Rising;
 800349c:	2308      	movs	r3, #8
 800349e:	747b      	strb	r3, [r7, #17]
	EXTI_Init(&EXTI_init_struct);
 80034a0:	f107 030c 	add.w	r3, r7, #12
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fd ffa3 	bl	80013f0 <EXTI_Init>

	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI9_5_IRQn;
 80034aa:	2317      	movs	r3, #23
 80034ac:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80034ae:	230f      	movs	r3, #15
 80034b0:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80034b2:	230f      	movs	r3, #15
 80034b4:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80034b6:	2301      	movs	r3, #1
 80034b8:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80034ba:	f107 0308 	add.w	r3, r7, #8
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fd faa4 	bl	8000a0c <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI15_10_IRQn;;
 80034c4:	2328      	movs	r3, #40	; 0x28
 80034c6:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80034c8:	230f      	movs	r3, #15
 80034ca:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80034cc:	230f      	movs	r3, #15
 80034ce:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80034d0:	2301      	movs	r3, #1
 80034d2:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80034d4:	f107 0308 	add.w	r3, r7, #8
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fd fa97 	bl	8000a0c <NVIC_Init>




}
 80034de:	bf00      	nop
 80034e0:	3728      	adds	r7, #40	; 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40020800 	.word	0x40020800
 80034f0:	40000800 	.word	0x40000800

080034f4 <init_push_buttons>:

/*
 * Initialzes the pushbutton and pushbutton interrupts and limiting timer,
 * if the interrupt priorities need to be changed make sure timer is higher than EXTI
 */
void  init_push_buttons(){
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	; 0x28
 80034f8:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef tim3_base_struct;
	EXTI_InitTypeDef EXTI_init_struct;
	NVIC_InitTypeDef EXTI_NVIC_init_struct, TIM3_NVIC_init_struct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE,ENABLE); 			//This is already turned on in init gpio's but turn on incase
 80034fa:	2101      	movs	r1, #1
 80034fc:	2010      	movs	r0, #16
 80034fe:	f7fe fc1b 	bl	8001d38 <RCC_AHB1PeriphClockCmd>
	 * PE0		Menu up
	 * PE1		Menu down
	 * PE2		Menu back
	 * PE3		Menu enter
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 8003502:	f107 0320 	add.w	r3, r7, #32
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe f882 	bl	8001610 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
 800350c:	230f      	movs	r3, #15
 800350e:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 8003510:	2300      	movs	r3, #0
 8003512:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;				//medium
 8003516:	2301      	movs	r3, #1
 8003518:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//pull down
 800351c:	2300      	movs	r3, #0
 800351e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003522:	f107 0320 	add.w	r3, r7, #32
 8003526:	4619      	mov	r1, r3
 8003528:	4843      	ldr	r0, [pc, #268]	; (8003638 <init_push_buttons+0x144>)
 800352a:	f7fd ffe3 	bl	80014f4 <GPIO_Init>


	/*Configure Tim3 for debouncing	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800352e:	2101      	movs	r1, #1
 8003530:	2002      	movs	r0, #2
 8003532:	f7fe fc21 	bl	8001d78 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&tim3_base_struct);
 8003536:	f107 0314 	add.w	r3, r7, #20
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe ff34 	bl	80023a8 <TIM_TimeBaseStructInit>
	tim3_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 8003540:	2300      	movs	r3, #0
 8003542:	83bb      	strh	r3, [r7, #28]
	tim3_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 8003544:	2300      	movs	r3, #0
 8003546:	82fb      	strh	r3, [r7, #22]
	tim3_base_struct.TIM_Period = MYTIM3_PERIOD;
 8003548:	f643 136c 	movw	r3, #14700	; 0x396c
 800354c:	61bb      	str	r3, [r7, #24]
	tim3_base_struct.TIM_Prescaler = myTIM3_PRESCALER;
 800354e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003552:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM3, &tim3_base_struct);
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	4619      	mov	r1, r3
 800355a:	4838      	ldr	r0, [pc, #224]	; (800363c <init_push_buttons+0x148>)
 800355c:	f7fe feb8 	bl	80022d0 <TIM_TimeBaseInit>

	TIM3_NVIC_init_struct.NVIC_IRQChannel = TIM3_IRQn;
 8003560:	231d      	movs	r3, #29
 8003562:	713b      	strb	r3, [r7, #4]
	TIM3_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003564:	2301      	movs	r3, #1
 8003566:	71fb      	strb	r3, [r7, #7]
	TIM3_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x00;
 8003568:	2300      	movs	r3, #0
 800356a:	717b      	strb	r3, [r7, #5]
	TIM3_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x00;
 800356c:	2300      	movs	r3, #0
 800356e:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&TIM3_NVIC_init_struct);
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd fa4a 	bl	8000a0c <NVIC_Init>

	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8003578:	2201      	movs	r2, #1
 800357a:	2101      	movs	r1, #1
 800357c:	482f      	ldr	r0, [pc, #188]	; (800363c <init_push_buttons+0x148>)
 800357e:	f7fe ff4d 	bl	800241c <TIM_ITConfig>


	/*Configure pins as EXTI*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 8003582:	2101      	movs	r1, #1
 8003584:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003588:	f7fe fc16 	bl	8001db8 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource0);
 800358c:	2100      	movs	r1, #0
 800358e:	2004      	movs	r0, #4
 8003590:	f7fe fe5c 	bl	800224c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource1);
 8003594:	2101      	movs	r1, #1
 8003596:	2004      	movs	r0, #4
 8003598:	f7fe fe58 	bl	800224c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource2);
 800359c:	2102      	movs	r1, #2
 800359e:	2004      	movs	r0, #4
 80035a0:	f7fe fe54 	bl	800224c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource3);
 80035a4:	2103      	movs	r1, #3
 80035a6:	2004      	movs	r0, #4
 80035a8:	f7fe fe50 	bl	800224c <SYSCFG_EXTILineConfig>



	//init EXTI
	EXTI_init_struct.EXTI_Line = EXTI_Line0 | EXTI_Line1 | EXTI_Line2 | EXTI_Line3;
 80035ac:	230f      	movs	r3, #15
 80035ae:	60fb      	str	r3, [r7, #12]
	EXTI_init_struct.EXTI_LineCmd = ENABLE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	74bb      	strb	r3, [r7, #18]
	EXTI_init_struct.EXTI_Mode =  EXTI_Mode_Interrupt;
 80035b4:	2300      	movs	r3, #0
 80035b6:	743b      	strb	r3, [r7, #16]
	EXTI_init_struct.EXTI_Trigger = EXTI_Trigger_Rising;
 80035b8:	2308      	movs	r3, #8
 80035ba:	747b      	strb	r3, [r7, #17]
	EXTI_Init(&EXTI_init_struct);
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fd ff15 	bl	80013f0 <EXTI_Init>

	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI0_IRQn;
 80035c6:	2306      	movs	r3, #6
 80035c8:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80035ca:	230f      	movs	r3, #15
 80035cc:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80035ce:	230f      	movs	r3, #15
 80035d0:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80035d2:	2301      	movs	r3, #1
 80035d4:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fd fa16 	bl	8000a0c <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI1_IRQn;;
 80035e0:	2307      	movs	r3, #7
 80035e2:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80035e4:	230f      	movs	r3, #15
 80035e6:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 80035e8:	230f      	movs	r3, #15
 80035ea:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80035ec:	2301      	movs	r3, #1
 80035ee:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 80035f0:	f107 0308 	add.w	r3, r7, #8
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fd fa09 	bl	8000a0c <NVIC_Init>
	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI2_IRQn;
 80035fa:	2308      	movs	r3, #8
 80035fc:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80035fe:	230f      	movs	r3, #15
 8003600:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8003602:	230f      	movs	r3, #15
 8003604:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003606:	2301      	movs	r3, #1
 8003608:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 800360a:	f107 0308 	add.w	r3, r7, #8
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd f9fc 	bl	8000a0c <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI3_IRQn;;
 8003614:	2309      	movs	r3, #9
 8003616:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003618:	230f      	movs	r3, #15
 800361a:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 800361c:	230f      	movs	r3, #15
 800361e:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003620:	2301      	movs	r3, #1
 8003622:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8003624:	f107 0308 	add.w	r3, r7, #8
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd f9ef 	bl	8000a0c <NVIC_Init>


}
 800362e:	bf00      	nop
 8003630:	3728      	adds	r7, #40	; 0x28
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	40000400 	.word	0x40000400

08003640 <init_parallel>:

}



void init_parallel(){
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE); 			//This is already turned on in init gpio's but turn on incase
 8003646:	2101      	movs	r1, #1
 8003648:	2004      	movs	r0, #4
 800364a:	f7fe fb75 	bl	8001d38 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 800364e:	2101      	movs	r1, #1
 8003650:	2008      	movs	r0, #8
 8003652:	f7fe fb71 	bl	8001d38 <RCC_AHB1PeriphClockCmd>
	 * PC11		LCD DB2
	 * PC13		LCD DB3
	 * PC14 	LCD DB4
	 * PC15		LCD DB5
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 8003656:	463b      	mov	r3, r7
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd ffd9 	bl	8001610 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_11 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 800365e:	f44f 436b 	mov.w	r3, #60160	; 0xeb00
 8003662:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;					//CS output
 8003664:	2301      	movs	r3, #1
 8003666:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;				//medium
 8003668:	2301      	movs	r3, #1
 800366a:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				// no pull up/down
 800366c:	2300      	movs	r3, #0
 800366e:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003670:	463b      	mov	r3, r7
 8003672:	4619      	mov	r1, r3
 8003674:	480e      	ldr	r0, [pc, #56]	; (80036b0 <init_parallel+0x70>)
 8003676:	f7fd ff3d 	bl	80014f4 <GPIO_Init>
	 * PD12		LCD Enable
	 * PD13		LCD DB6
	 * PD14		LCD DB7
	 * PD15		LCD RS
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 800367a:	463b      	mov	r3, r7
 800367c:	4618      	mov	r0, r3
 800367e:	f7fd ffc7 	bl	8001610 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_6 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8003682:	f24f 0340 	movw	r3, #61504	; 0xf040
 8003686:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;					//CS output
 8003688:	2301      	movs	r3, #1
 800368a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;				//medium
 800368c:	2301      	movs	r3, #1
 800368e:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				// no pull up/down
 8003690:	2300      	movs	r3, #0
 8003692:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003694:	463b      	mov	r3, r7
 8003696:	4619      	mov	r1, r3
 8003698:	4806      	ldr	r0, [pc, #24]	; (80036b4 <init_parallel+0x74>)
 800369a:	f7fd ff2b 	bl	80014f4 <GPIO_Init>

	//set enable high
	GPIO_ResetBits(GPIOD, GPIO_Pin_12);
 800369e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036a2:	4804      	ldr	r0, [pc, #16]	; (80036b4 <init_parallel+0x74>)
 80036a4:	f7fd fff8 	bl	8001698 <GPIO_ResetBits>

}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40020800 	.word	0x40020800
 80036b4:	40020c00 	.word	0x40020c00

080036b8 <delay>:
#include "lcd.h"
#include "stm32f4xx_spi.h"

int g_lcd_pos;

void delay(int delay){
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	for(int i=delay;i>0;i--){
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e002      	b.n	80036cc <delay+0x14>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	dcf9      	bgt.n	80036c6 <delay+0xe>

	}
	return;
 80036d2:	bf00      	nop
}
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop

080036e0 <SPI_TX>:



void SPI_TX(int tx){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

	//RS
	if(tx & 0x0200){
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <SPI_TX+0x1e>
		GPIO_SetBits(GPIOD, GPIO_Pin_15);
 80036f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036f6:	4852      	ldr	r0, [pc, #328]	; (8003840 <SPI_TX+0x160>)
 80036f8:	f7fd ffbe 	bl	8001678 <GPIO_SetBits>
 80036fc:	e004      	b.n	8003708 <SPI_TX+0x28>
	}else{
		GPIO_ResetBits(GPIOD, GPIO_Pin_15);
 80036fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003702:	484f      	ldr	r0, [pc, #316]	; (8003840 <SPI_TX+0x160>)
 8003704:	f7fd ffc8 	bl	8001698 <GPIO_ResetBits>
	}

	//R/W
	if(tx & 0x0100){
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <SPI_TX+0x3c>
		GPIO_SetBits(GPIOD, GPIO_Pin_6);
 8003712:	2140      	movs	r1, #64	; 0x40
 8003714:	484a      	ldr	r0, [pc, #296]	; (8003840 <SPI_TX+0x160>)
 8003716:	f7fd ffaf 	bl	8001678 <GPIO_SetBits>
 800371a:	e003      	b.n	8003724 <SPI_TX+0x44>
	}else{
		GPIO_ResetBits(GPIOD, GPIO_Pin_6);
 800371c:	2140      	movs	r1, #64	; 0x40
 800371e:	4848      	ldr	r0, [pc, #288]	; (8003840 <SPI_TX+0x160>)
 8003720:	f7fd ffba 	bl	8001698 <GPIO_ResetBits>
	}

	GPIO_SetBits(GPIOD, GPIO_Pin_12);
 8003724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003728:	4845      	ldr	r0, [pc, #276]	; (8003840 <SPI_TX+0x160>)
 800372a:	f7fd ffa5 	bl	8001678 <GPIO_SetBits>

	//DB0
	if(tx & 0x01){
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <SPI_TX+0x64>
		GPIO_SetBits(GPIOC, GPIO_Pin_8);
 8003738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800373c:	4841      	ldr	r0, [pc, #260]	; (8003844 <SPI_TX+0x164>)
 800373e:	f7fd ff9b 	bl	8001678 <GPIO_SetBits>
 8003742:	e004      	b.n	800374e <SPI_TX+0x6e>
	}else{
		GPIO_ResetBits(GPIOC, GPIO_Pin_8);
 8003744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003748:	483e      	ldr	r0, [pc, #248]	; (8003844 <SPI_TX+0x164>)
 800374a:	f7fd ffa5 	bl	8001698 <GPIO_ResetBits>
	}
	//DB1
	if(tx & 0x02){
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <SPI_TX+0x84>
		GPIO_SetBits(GPIOC, GPIO_Pin_9);
 8003758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800375c:	4839      	ldr	r0, [pc, #228]	; (8003844 <SPI_TX+0x164>)
 800375e:	f7fd ff8b 	bl	8001678 <GPIO_SetBits>
 8003762:	e004      	b.n	800376e <SPI_TX+0x8e>
	}else{
		GPIO_ResetBits(GPIOC, GPIO_Pin_9);
 8003764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003768:	4836      	ldr	r0, [pc, #216]	; (8003844 <SPI_TX+0x164>)
 800376a:	f7fd ff95 	bl	8001698 <GPIO_ResetBits>
	}
	//DB2
	if(tx & 0x04){
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <SPI_TX+0xa4>
		GPIO_SetBits(GPIOC, GPIO_Pin_11);
 8003778:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800377c:	4831      	ldr	r0, [pc, #196]	; (8003844 <SPI_TX+0x164>)
 800377e:	f7fd ff7b 	bl	8001678 <GPIO_SetBits>
 8003782:	e004      	b.n	800378e <SPI_TX+0xae>
	}else{
		GPIO_ResetBits(GPIOC, GPIO_Pin_11);
 8003784:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003788:	482e      	ldr	r0, [pc, #184]	; (8003844 <SPI_TX+0x164>)
 800378a:	f7fd ff85 	bl	8001698 <GPIO_ResetBits>
	}
	//DB3
	if(tx & 0x08){
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <SPI_TX+0xc4>
		GPIO_SetBits(GPIOC, GPIO_Pin_13);
 8003798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800379c:	4829      	ldr	r0, [pc, #164]	; (8003844 <SPI_TX+0x164>)
 800379e:	f7fd ff6b 	bl	8001678 <GPIO_SetBits>
 80037a2:	e004      	b.n	80037ae <SPI_TX+0xce>
	}else{
		GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 80037a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037a8:	4826      	ldr	r0, [pc, #152]	; (8003844 <SPI_TX+0x164>)
 80037aa:	f7fd ff75 	bl	8001698 <GPIO_ResetBits>
	}
	//DB4
	if(tx & 0x10){
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <SPI_TX+0xe4>
		GPIO_SetBits(GPIOC, GPIO_Pin_14);
 80037b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037bc:	4821      	ldr	r0, [pc, #132]	; (8003844 <SPI_TX+0x164>)
 80037be:	f7fd ff5b 	bl	8001678 <GPIO_SetBits>
 80037c2:	e004      	b.n	80037ce <SPI_TX+0xee>
	}else{
		GPIO_ResetBits(GPIOC, GPIO_Pin_14);
 80037c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037c8:	481e      	ldr	r0, [pc, #120]	; (8003844 <SPI_TX+0x164>)
 80037ca:	f7fd ff65 	bl	8001698 <GPIO_ResetBits>
	}
	//DB5
	if(tx & 0x20){
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <SPI_TX+0x104>
		GPIO_SetBits(GPIOC, GPIO_Pin_15);
 80037d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037dc:	4819      	ldr	r0, [pc, #100]	; (8003844 <SPI_TX+0x164>)
 80037de:	f7fd ff4b 	bl	8001678 <GPIO_SetBits>
 80037e2:	e004      	b.n	80037ee <SPI_TX+0x10e>
	}else{
		GPIO_ResetBits(GPIOC, GPIO_Pin_15);
 80037e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037e8:	4816      	ldr	r0, [pc, #88]	; (8003844 <SPI_TX+0x164>)
 80037ea:	f7fd ff55 	bl	8001698 <GPIO_ResetBits>
	}
	//DB6
	if(tx & 0x40){
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <SPI_TX+0x124>
		GPIO_SetBits(GPIOD, GPIO_Pin_13);
 80037f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037fc:	4810      	ldr	r0, [pc, #64]	; (8003840 <SPI_TX+0x160>)
 80037fe:	f7fd ff3b 	bl	8001678 <GPIO_SetBits>
 8003802:	e004      	b.n	800380e <SPI_TX+0x12e>
	}else{
		GPIO_ResetBits(GPIOD, GPIO_Pin_13);
 8003804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003808:	480d      	ldr	r0, [pc, #52]	; (8003840 <SPI_TX+0x160>)
 800380a:	f7fd ff45 	bl	8001698 <GPIO_ResetBits>
	}
	//DB7
	if(tx & 0x80){
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <SPI_TX+0x144>
		GPIO_SetBits(GPIOD, GPIO_Pin_14);
 8003818:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800381c:	4808      	ldr	r0, [pc, #32]	; (8003840 <SPI_TX+0x160>)
 800381e:	f7fd ff2b 	bl	8001678 <GPIO_SetBits>
 8003822:	e004      	b.n	800382e <SPI_TX+0x14e>
	}else{
		GPIO_ResetBits(GPIOD, GPIO_Pin_14);
 8003824:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003828:	4805      	ldr	r0, [pc, #20]	; (8003840 <SPI_TX+0x160>)
 800382a:	f7fd ff35 	bl	8001698 <GPIO_ResetBits>
	}

	//cycle enable bits
	GPIO_ResetBits(GPIOD, GPIO_Pin_12);
 800382e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003832:	4803      	ldr	r0, [pc, #12]	; (8003840 <SPI_TX+0x160>)
 8003834:	f7fd ff30 	bl	8001698 <GPIO_ResetBits>
//	while(SPI2->SR & SPI_SR_BSY);					//wait for SPI2 to be ready
//	SPI_I2S_SendData(SPI2, tx);
//	while(SPI2->SR & SPI_SR_BSY);					//wait for SPI2 to be done
//	GPIO_SetBits(GPIOC, GPIO_Pin_5);				//chip select high

}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40020c00 	.word	0x40020c00
 8003844:	40020800 	.word	0x40020800

08003848 <LCD_TX>:

int LCD_TX(unsigned int RS,unsigned int RW, unsigned int data)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  int temp = data;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	617b      	str	r3, [r7, #20]
  temp += (RW<<8);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	021a      	lsls	r2, r3, #8
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	4413      	add	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
  temp+= (RS<<9);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	025a      	lsls	r2, r3, #9
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	4413      	add	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
  //GPIO_ResetBits(GPIOC, GPIO_Pin_5);				//chip select low no more chip select with parallel comms
  SPI_TX(temp);
 800386c:	6978      	ldr	r0, [r7, #20]
 800386e:	f7ff ff37 	bl	80036e0 <SPI_TX>
  //GPIO_SetBits(GPIOC, GPIO_Pin_5);				//chip select high no more chip select with parallel comms
  return temp;
 8003872:	697b      	ldr	r3, [r7, #20]

}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <LCD_SETDDRAM>:
    data += (ADdressCG & 0b111111);
    LCD_TX(rs,rw,data);
}

void LCD_SETDDRAM(int DDADress)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
    int rs = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
    int rw = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	613b      	str	r3, [r7, #16]
    int data = (0b1<<7);
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	60fb      	str	r3, [r7, #12]
    data += (DDADress & 0b1111111);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
    LCD_TX(rs,rw,data);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	6939      	ldr	r1, [r7, #16]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff ffd0 	bl	8003848 <LCD_TX>
}
 80038a8:	bf00      	nop
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <LCD_WRITE>:
//    //Bits 0-6 are address
}


void LCD_WRITE(int data)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
    int rs = 1;
 80038b8:	2301      	movs	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
    int rw = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	60bb      	str	r3, [r7, #8]
    LCD_TX(rs,rw,data);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff ffbe 	bl	8003848 <LCD_TX>
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <lcd_writeline>:
      //LCD_READSTATUS(busy,realaddr);
      addr++;
}

void lcd_writeline(char * str, int row)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
      int addr;
      switch(row){
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d817      	bhi.n	8003914 <lcd_writeline+0x40>
 80038e4:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <lcd_writeline+0x18>)
 80038e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ea:	bf00      	nop
 80038ec:	080038fd 	.word	0x080038fd
 80038f0:	08003903 	.word	0x08003903
 80038f4:	08003909 	.word	0x08003909
 80038f8:	0800390f 	.word	0x0800390f
          case 0: addr = 0x0; break;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e00b      	b.n	800391a <lcd_writeline+0x46>
          case 1: addr = 0x40;break;
 8003902:	2340      	movs	r3, #64	; 0x40
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e008      	b.n	800391a <lcd_writeline+0x46>
          case 2: addr = 0x14;break;
 8003908:	2314      	movs	r3, #20
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e005      	b.n	800391a <lcd_writeline+0x46>
          case 3: addr = 0x54;break;
 800390e:	2354      	movs	r3, #84	; 0x54
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e002      	b.n	800391a <lcd_writeline+0x46>
          default: addr=0x0;  break;}
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	bf00      	nop
      LCD_SETDDRAM(addr);
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff ffae 	bl	800387c <LCD_SETDDRAM>
      delay(0xfff);
 8003920:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003924:	f7ff fec8 	bl	80036b8 <delay>
      g_lcd_pos = addr;
 8003928:	4a15      	ldr	r2, [pc, #84]	; (8003980 <lcd_writeline+0xac>)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6013      	str	r3, [r2, #0]
      for(int i=0;i<strlen(str);i++)
 800392e:	2300      	movs	r3, #0
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	e01a      	b.n	800396a <lcd_writeline+0x96>
      {
          LCD_WRITE(str[i]);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	4413      	add	r3, r2
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ffb7 	bl	80038b0 <LCD_WRITE>
          delay(0xfff);
 8003942:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003946:	f7ff feb7 	bl	80036b8 <delay>
          //LCD_WRITE(str[i]);
          g_lcd_pos++;
 800394a:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <lcd_writeline+0xac>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3301      	adds	r3, #1
 8003950:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <lcd_writeline+0xac>)
 8003952:	6013      	str	r3, [r2, #0]
          if(i==20) i = strlen(str);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b14      	cmp	r3, #20
 8003958:	d104      	bne.n	8003964 <lcd_writeline+0x90>
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fc fc34 	bl	80001c8 <strlen>
 8003960:	4603      	mov	r3, r0
 8003962:	60bb      	str	r3, [r7, #8]
          case 3: addr = 0x54;break;
          default: addr=0x0;  break;}
      LCD_SETDDRAM(addr);
      delay(0xfff);
      g_lcd_pos = addr;
      for(int i=0;i<strlen(str);i++)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	3301      	adds	r3, #1
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7fc fc2c 	bl	80001c8 <strlen>
 8003970:	4602      	mov	r2, r0
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	429a      	cmp	r2, r3
 8003976:	d8dd      	bhi.n	8003934 <lcd_writeline+0x60>
          delay(0xfff);
          //LCD_WRITE(str[i]);
          g_lcd_pos++;
          if(i==20) i = strlen(str);
      }
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20006518 	.word	0x20006518

08003984 <main>:

/* Globals */
extern uint16_t buffer_output[LENGTH_BUFFER];

int main(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
	*  E.g.  SCB->VTOR = 0x20000000;
	*/

	/**************************** Run Initialization functions timer for tim2 started in init_adc*****************************/

	menubutton.button=back;					//initializes menubutton state for startup
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <main+0x40>)
 800398a:	2202      	movs	r2, #2
 800398c:	701a      	strb	r2, [r3, #0]
	init_gpios();								//initialize gpios
 800398e:	f7ff fcef 	bl	8003370 <init_gpios>
	init_push_buttons();						//initialize menu navigation buttons
 8003992:	f7ff fdaf 	bl	80034f4 <init_push_buttons>
	init_adc(ADCBuffer);						//initialize ADC, do this last because it starts the timer
 8003996:	480c      	ldr	r0, [pc, #48]	; (80039c8 <main+0x44>)
 8003998:	f7ff fba0 	bl	80030dc <init_adc>
	//init_spi();								//initialize the SPI for LCD not using SPI any more don't need this
	init_parallel();							//initializes all the GPIO's for parallel LCD communication
 800399c:	f7ff fe50 	bl	8003640 <init_parallel>
	// lcd_init();								//initializes LCD screen
	update_selector_state();					// get startup state
 80039a0:	f001 fe9a 	bl	80056d8 <update_selector_state>
	init_state();								//initialize the global state variable for the menu, filterstate, secondary VCO and modlulation
 80039a4:	f001 ff18 	bl	80057d8 <init_state>
	display_new_menu();
 80039a8:	f002 fa8e 	bl	8005ec8 <display_new_menu>

	EVAL_AUDIO_Init( OUTPUT_DEVICE_AUTO, VOL, SAMPLERATE);
 80039ac:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80039b0:	2150      	movs	r1, #80	; 0x50
 80039b2:	2004      	movs	r0, #4
 80039b4:	f7fe fd9c 	bl	80024f0 <EVAL_AUDIO_Init>
	EVAL_AUDIO_Play(buffer_output, LENGTH_BUFFER);
 80039b8:	2140      	movs	r1, #64	; 0x40
 80039ba:	4804      	ldr	r0, [pc, #16]	; (80039cc <main+0x48>)
 80039bc:	f7fe fdc4 	bl	8002548 <EVAL_AUDIO_Play>

	while (1)
	{

	}
 80039c0:	e7fe      	b.n	80039c0 <main+0x3c>
 80039c2:	bf00      	nop
 80039c4:	200064e8 	.word	0x200064e8
 80039c8:	200064f0 	.word	0x200064f0
 80039cc:	200000c0 	.word	0x200000c0

080039d0 <Codec_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None
  * @retval None
  */
uint32_t Codec_TIMEOUT_UserCallback(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
	// TODO: See instructions in function declaration.  I've seen this LED turn on, which may signal an issue.
	STM_EVAL_LEDOn(LED5); 				/*  alert : red LED !  */
 80039d4:	2002      	movs	r0, #2
 80039d6:	f7fe fd73 	bl	80024c0 <STM_EVAL_LEDOn>
	return (0);
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}

080039e0 <EVAL_AUDIO_HalfTransfer_CallBack>:
* @brief  Manages the DMA Half Transfer complete interrupt.
* @param  None
* @retval None
*/
void EVAL_AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
	the new data to the first half of buffer while DMA is transferring data from
	the second half. And when Transfer complete occurs, load the second half of
	the buffer while the DMA is transferring from the first half ...
	 */

	generate_waveforms(0, BUFF_LEN_HALF);
 80039ea:	2120      	movs	r1, #32
 80039ec:	2000      	movs	r0, #0
 80039ee:	f000 f827 	bl	8003a40 <generate_waveforms>
	return;
 80039f2:	bf00      	nop
}
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop

080039fc <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
	generate_waveforms(BUFF_LEN_HALF, LENGTH_BUFFER);
 8003a06:	2140      	movs	r1, #64	; 0x40
 8003a08:	2020      	movs	r0, #32
 8003a0a:	f000 f819 	bl	8003a40 <generate_waveforms>
	return;
 8003a0e:	bf00      	nop
}
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop

08003a18 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0

  // return -1;
	return 0;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <EVAL_AUDIO_Error_CallBack>:

void EVAL_AUDIO_Error_CallBack(void* pData)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	STM_EVAL_LEDOn(LED3);
 8003a30:	2001      	movs	r0, #1
 8003a32:	f7fe fd45 	bl	80024c0 <STM_EVAL_LEDOn>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop

08003a40 <generate_waveforms>:

// Get ADSR values.
volatile adsr_setting adsr_settings;			// Fall back on this.

void generate_waveforms(uint16_t start, uint16_t end)
{
 8003a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a42:	ed2d 8b02 	vpush	{d8}
 8003a46:	b089      	sub	sp, #36	; 0x24
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	460a      	mov	r2, r1
 8003a4e:	80fb      	strh	r3, [r7, #6]
 8003a50:	4613      	mov	r3, r2
 8003a52:	80bb      	strh	r3, [r7, #4]
	osc.vco_wav = vfo_state;				// VCO wave type.
 8003a54:	4ba2      	ldr	r3, [pc, #648]	; (8003ce0 <generate_waveforms+0x2a0>)
 8003a56:	781a      	ldrb	r2, [r3, #0]
 8003a58:	4ba2      	ldr	r3, [pc, #648]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003a5a:	741a      	strb	r2, [r3, #16]
	osc.lfo_wav = lfo_state;				// LFO wave type.
 8003a5c:	4ba2      	ldr	r3, [pc, #648]	; (8003ce8 <generate_waveforms+0x2a8>)
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	4ba0      	ldr	r3, [pc, #640]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003a62:	745a      	strb	r2, [r3, #17]
	osc.mod = current_menu_state.lfo_mod;	// Modulation type.
 8003a64:	4ba1      	ldr	r3, [pc, #644]	; (8003cec <generate_waveforms+0x2ac>)
 8003a66:	7a1a      	ldrb	r2, [r3, #8]
 8003a68:	4b9e      	ldr	r3, [pc, #632]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003a6a:	749a      	strb	r2, [r3, #18]
	// osc.mod = VCOfreq;			// TODO: comment-out when adding lcd and buttons
	// osc.mod = NO_MOD;
	// osc.mod = DualMode_VCO;

	// PC2
	osc.volume = (float32_t) moving_avg(mov_avg6, &mov_avg_sum6, mov_avg_index6, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[10] & 0xfffc));
 8003a6c:	4ba0      	ldr	r3, [pc, #640]	; (8003cf0 <generate_waveforms+0x2b0>)
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4ba0      	ldr	r3, [pc, #640]	; (8003cf4 <generate_waveforms+0x2b4>)
 8003a72:	8a9b      	ldrh	r3, [r3, #20]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	f023 0303 	bic.w	r3, r3, #3
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a82:	499d      	ldr	r1, [pc, #628]	; (8003cf8 <generate_waveforms+0x2b8>)
 8003a84:	489d      	ldr	r0, [pc, #628]	; (8003cfc <generate_waveforms+0x2bc>)
 8003a86:	f001 fb6f 	bl	8005168 <moving_avg>
 8003a8a:	ee07 0a90 	vmov	s15, r0
 8003a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a92:	4b94      	ldr	r3, [pc, #592]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003a94:	edc3 7a00 	vstr	s15, [r3]
	mov_avg_index6++;
 8003a98:	4b95      	ldr	r3, [pc, #596]	; (8003cf0 <generate_waveforms+0x2b0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	4a94      	ldr	r2, [pc, #592]	; (8003cf0 <generate_waveforms+0x2b0>)
 8003aa0:	6013      	str	r3, [r2, #0]
	if (mov_avg_index6 >= MOV_AVG_LENGTH_BUFFER)
 8003aa2:	4b93      	ldr	r3, [pc, #588]	; (8003cf0 <generate_waveforms+0x2b0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aaa:	d302      	bcc.n	8003ab2 <generate_waveforms+0x72>
	{
		mov_avg_index6 = 0;
 8003aac:	4b90      	ldr	r3, [pc, #576]	; (8003cf0 <generate_waveforms+0x2b0>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
	}

	// A0
	osc.vco_amp = moving_avg(mov_avg5, &mov_avg_sum5, mov_avg_index5, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[1] & 0xfffc));
 8003ab2:	4b93      	ldr	r3, [pc, #588]	; (8003d00 <generate_waveforms+0x2c0>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b8f      	ldr	r3, [pc, #572]	; (8003cf4 <generate_waveforms+0x2b4>)
 8003ab8:	885b      	ldrh	r3, [r3, #2]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f023 0303 	bic.w	r3, r3, #3
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ac8:	498e      	ldr	r1, [pc, #568]	; (8003d04 <generate_waveforms+0x2c4>)
 8003aca:	488f      	ldr	r0, [pc, #572]	; (8003d08 <generate_waveforms+0x2c8>)
 8003acc:	f001 fb4c 	bl	8005168 <moving_avg>
 8003ad0:	ee07 0a90 	vmov	s15, r0
 8003ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad8:	4b82      	ldr	r3, [pc, #520]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003ada:	edc3 7a05 	vstr	s15, [r3, #20]
	mov_avg_index5++;
 8003ade:	4b88      	ldr	r3, [pc, #544]	; (8003d00 <generate_waveforms+0x2c0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	4a86      	ldr	r2, [pc, #536]	; (8003d00 <generate_waveforms+0x2c0>)
 8003ae6:	6013      	str	r3, [r2, #0]
	if (mov_avg_index5 >= MOV_AVG_LENGTH_BUFFER)
 8003ae8:	4b85      	ldr	r3, [pc, #532]	; (8003d00 <generate_waveforms+0x2c0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af0:	d302      	bcc.n	8003af8 <generate_waveforms+0xb8>
	{
		mov_avg_index5 = 0;
 8003af2:	4b83      	ldr	r3, [pc, #524]	; (8003d00 <generate_waveforms+0x2c0>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
	}

	osc.volume = (float32_t) osc.volume / 2048;
 8003af8:	4b7a      	ldr	r3, [pc, #488]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003afa:	ed93 7a00 	vldr	s14, [r3]
 8003afe:	eddf 6a83 	vldr	s13, [pc, #524]	; 8003d0c <generate_waveforms+0x2cc>
 8003b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b06:	4b77      	ldr	r3, [pc, #476]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003b08:	edc3 7a00 	vstr	s15, [r3]
	osc.vco_amp = osc.vco_amp * osc.volume;
 8003b0c:	4b75      	ldr	r3, [pc, #468]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003b0e:	ed93 7a05 	vldr	s14, [r3, #20]
 8003b12:	4b74      	ldr	r3, [pc, #464]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003b14:	edd3 7a00 	vldr	s15, [r3]
 8003b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1c:	4b71      	ldr	r3, [pc, #452]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003b1e:	edc3 7a05 	vstr	s15, [r3, #20]

	// A1
	uint16_t tempf = pseudo_log(ADCBuffer[0] & 0xfffc);
 8003b22:	4b74      	ldr	r3, [pc, #464]	; (8003cf4 <generate_waveforms+0x2b4>)
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f023 0303 	bic.w	r3, r3, #3
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 fb3e 	bl	80051b0 <pseudo_log>
 8003b34:	4603      	mov	r3, r0
 8003b36:	82fb      	strh	r3, [r7, #22]
	// osc.vco_freq = moving_avg(mov_avg1, &mov_avg_sum1, mov_avg_index1, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[0] & 0xfffc)*2*PI);
	osc.vco_freq = moving_avg(mov_avg1, &mov_avg_sum1, mov_avg_index1, MOV_AVG_LENGTH_BUFFER, tempf * 2*PI);
 8003b38:	4b75      	ldr	r3, [pc, #468]	; (8003d10 <generate_waveforms+0x2d0>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	8afb      	ldrh	r3, [r7, #22]
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	ee07 3a90 	vmov	s15, r3
 8003b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b48:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003d14 <generate_waveforms+0x2d4>
 8003b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b54:	edc7 7a00 	vstr	s15, [r7]
 8003b58:	883b      	ldrh	r3, [r7, #0]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b62:	496d      	ldr	r1, [pc, #436]	; (8003d18 <generate_waveforms+0x2d8>)
 8003b64:	486d      	ldr	r0, [pc, #436]	; (8003d1c <generate_waveforms+0x2dc>)
 8003b66:	f001 faff 	bl	8005168 <moving_avg>
 8003b6a:	ee07 0a90 	vmov	s15, r0
 8003b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b72:	4b5c      	ldr	r3, [pc, #368]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003b74:	edc3 7a01 	vstr	s15, [r3, #4]
	mov_avg_index1++;
 8003b78:	4b65      	ldr	r3, [pc, #404]	; (8003d10 <generate_waveforms+0x2d0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	4a64      	ldr	r2, [pc, #400]	; (8003d10 <generate_waveforms+0x2d0>)
 8003b80:	6013      	str	r3, [r2, #0]
	if (mov_avg_index1 >= MOV_AVG_LENGTH_BUFFER)
 8003b82:	4b63      	ldr	r3, [pc, #396]	; (8003d10 <generate_waveforms+0x2d0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8a:	d302      	bcc.n	8003b92 <generate_waveforms+0x152>
	{
		mov_avg_index1 = 0;
 8003b8c:	4b60      	ldr	r3, [pc, #384]	; (8003d10 <generate_waveforms+0x2d0>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
	}

	osc.lfo_amp = moving_avg(mov_avg3, &mov_avg_sum3, mov_avg_index3, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[2] & 0xfffc));
 8003b92:	4b63      	ldr	r3, [pc, #396]	; (8003d20 <generate_waveforms+0x2e0>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b57      	ldr	r3, [pc, #348]	; (8003cf4 <generate_waveforms+0x2b4>)
 8003b98:	889b      	ldrh	r3, [r3, #4]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f023 0303 	bic.w	r3, r3, #3
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba8:	495e      	ldr	r1, [pc, #376]	; (8003d24 <generate_waveforms+0x2e4>)
 8003baa:	485f      	ldr	r0, [pc, #380]	; (8003d28 <generate_waveforms+0x2e8>)
 8003bac:	f001 fadc 	bl	8005168 <moving_avg>
 8003bb0:	ee07 0a90 	vmov	s15, r0
 8003bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb8:	4b4a      	ldr	r3, [pc, #296]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003bba:	edc3 7a07 	vstr	s15, [r3, #28]
	mov_avg_index3++;
 8003bbe:	4b58      	ldr	r3, [pc, #352]	; (8003d20 <generate_waveforms+0x2e0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	4a56      	ldr	r2, [pc, #344]	; (8003d20 <generate_waveforms+0x2e0>)
 8003bc6:	6013      	str	r3, [r2, #0]
	if (mov_avg_index3 >= MOV_AVG_LENGTH_BUFFER)
 8003bc8:	4b55      	ldr	r3, [pc, #340]	; (8003d20 <generate_waveforms+0x2e0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd0:	d302      	bcc.n	8003bd8 <generate_waveforms+0x198>
	{
		mov_avg_index3 = 0;
 8003bd2:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <generate_waveforms+0x2e0>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
	}
	osc.lfo_amp_am = osc.lfo_amp*LFO_AMP_AM;
 8003bd8:	4b42      	ldr	r3, [pc, #264]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fc fc5f 	bl	80004a0 <__aeabi_f2d>
 8003be2:	a33b      	add	r3, pc, #236	; (adr r3, 8003cd0 <generate_waveforms+0x290>)
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f7fc fcae 	bl	8000548 <__aeabi_dmul>
 8003bec:	4603      	mov	r3, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	f7fc feba 	bl	800096c <__aeabi_d2f>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b3a      	ldr	r3, [pc, #232]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003bfc:	621a      	str	r2, [r3, #32]
	osc.lfo_amp_fm = osc.lfo_amp*LFO_AMP_FM;
 8003bfe:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc fc4c 	bl	80004a0 <__aeabi_f2d>
 8003c08:	a333      	add	r3, pc, #204	; (adr r3, 8003cd8 <generate_waveforms+0x298>)
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	f7fc fc9b 	bl	8000548 <__aeabi_dmul>
 8003c12:	4603      	mov	r3, r0
 8003c14:	460c      	mov	r4, r1
 8003c16:	4618      	mov	r0, r3
 8003c18:	4621      	mov	r1, r4
 8003c1a:	f7fc fea7 	bl	800096c <__aeabi_d2f>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	4b30      	ldr	r3, [pc, #192]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24

	tempf = pseudo_log(ADCBuffer[3] & 0xfffc);
 8003c24:	4b33      	ldr	r3, [pc, #204]	; (8003cf4 <generate_waveforms+0x2b4>)
 8003c26:	88db      	ldrh	r3, [r3, #6]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	f023 0303 	bic.w	r3, r3, #3
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 fabd 	bl	80051b0 <pseudo_log>
 8003c36:	4603      	mov	r3, r0
 8003c38:	82fb      	strh	r3, [r7, #22]
	// osc.lfo_freq = moving_avg(mov_avg2, &mov_avg_sum2, mov_avg_index2, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[3] & 0xfffc));
	osc.lfo_freq = moving_avg(mov_avg2, &mov_avg_sum2, mov_avg_index2, MOV_AVG_LENGTH_BUFFER, tempf);
 8003c3a:	4b3c      	ldr	r3, [pc, #240]	; (8003d2c <generate_waveforms+0x2ec>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	8afb      	ldrh	r3, [r7, #22]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c46:	493a      	ldr	r1, [pc, #232]	; (8003d30 <generate_waveforms+0x2f0>)
 8003c48:	483a      	ldr	r0, [pc, #232]	; (8003d34 <generate_waveforms+0x2f4>)
 8003c4a:	f001 fa8d 	bl	8005168 <moving_avg>
 8003c4e:	ee07 0a90 	vmov	s15, r0
 8003c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c56:	4b23      	ldr	r3, [pc, #140]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003c58:	edc3 7a03 	vstr	s15, [r3, #12]
	mov_avg_index2++;
 8003c5c:	4b33      	ldr	r3, [pc, #204]	; (8003d2c <generate_waveforms+0x2ec>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	4a32      	ldr	r2, [pc, #200]	; (8003d2c <generate_waveforms+0x2ec>)
 8003c64:	6013      	str	r3, [r2, #0]
	if (mov_avg_index2 >= MOV_AVG_LENGTH_BUFFER)
 8003c66:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <generate_waveforms+0x2ec>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6e:	d302      	bcc.n	8003c76 <generate_waveforms+0x236>
	{
		mov_avg_index2 = 0;
 8003c70:	4b2e      	ldr	r3, [pc, #184]	; (8003d2c <generate_waveforms+0x2ec>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
	}
	// osc.lfo_freq = pseudo_log(osc.lfo_freq, ???);

	volatile uint32_t i = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
	adsr_settings.mod = current_menu_state.adsr_mod;
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <generate_waveforms+0x2ac>)
 8003c7c:	7a5a      	ldrb	r2, [r3, #9]
 8003c7e:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <generate_waveforms+0x2f8>)
 8003c80:	701a      	strb	r2, [r3, #0]
	// adsr_settings.mod = DualMode_VCO;
	// adsr_settings.mod = NO_MOD;
	// adsr_settings.mod = VCOfreq;

	//	// Calculate angle amount to increment per sample.
	volatile float32_t rads_per_sample_vco = osc.vco_freq / ONE_SECOND;		// Radians to increment for each iteration.
 8003c82:	4b18      	ldr	r3, [pc, #96]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003c84:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c88:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8003d3c <generate_waveforms+0x2fc>
 8003c8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c90:	edc7 7a03 	vstr	s15, [r7, #12]
	// volatile float32_t rads_per_sample_vco2 = rads_per_sample_vco/2;		// Radians to increment for each iteration.
	volatile float32_t rads_per_sample_lfo = osc.lfo_freq / ONE_SECOND;		// Radians to increment for each iteration.
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003c96:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c9a:	eddf 6a28 	vldr	s13, [pc, #160]	; 8003d3c <generate_waveforms+0x2fc>
 8003c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ca2:	edc7 7a02 	vstr	s15, [r7, #8]

	// Fill adsr buffer.
	if(adsr_settings.mod != NO_MOD)
 8003ca6:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <generate_waveforms+0x2f8>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <generate_waveforms+0x27c>
	{
		adsr(start, end);
 8003cb0:	88ba      	ldrh	r2, [r7, #4]
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fcde 	bl	8004678 <adsr>
	}


	// Sine LFO
	if(osc.lfo_wav == sine)
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <generate_waveforms+0x2a4>)
 8003cbe:	7c5b      	ldrb	r3, [r3, #17]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d15e      	bne.n	8003d82 <generate_waveforms+0x342>
	{
		for(i = start; i < end; i++)
 8003cc4:	88fb      	ldrh	r3, [r7, #6]
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	e056      	b.n	8003d78 <generate_waveforms+0x338>
 8003cca:	bf00      	nop
 8003ccc:	f3af 8000 	nop.w
 8003cd0:	eb1c432d 	.word	0xeb1c432d
 8003cd4:	3f1a36e2 	.word	0x3f1a36e2
 8003cd8:	47ae147b 	.word	0x47ae147b
 8003cdc:	3f847ae1 	.word	0x3f847ae1
 8003ce0:	200064e4 	.word	0x200064e4
 8003ce4:	20000054 	.word	0x20000054
 8003ce8:	200064e5 	.word	0x200064e5
 8003cec:	20006508 	.word	0x20006508
 8003cf0:	20006458 	.word	0x20006458
 8003cf4:	200064f0 	.word	0x200064f0
 8003cf8:	20006558 	.word	0x20006558
 8003cfc:	20005458 	.word	0x20005458
 8003d00:	20005454 	.word	0x20005454
 8003d04:	20006520 	.word	0x20006520
 8003d08:	20004454 	.word	0x20004454
 8003d0c:	45000000 	.word	0x45000000
 8003d10:	20001444 	.word	0x20001444
 8003d14:	40490fdb 	.word	0x40490fdb
 8003d18:	20006554 	.word	0x20006554
 8003d1c:	20000444 	.word	0x20000444
 8003d20:	2000344c 	.word	0x2000344c
 8003d24:	20006560 	.word	0x20006560
 8003d28:	2000244c 	.word	0x2000244c
 8003d2c:	20002448 	.word	0x20002448
 8003d30:	2000655c 	.word	0x2000655c
 8003d34:	20001448 	.word	0x20001448
 8003d38:	20006524 	.word	0x20006524
 8003d3c:	47bb8000 	.word	0x47bb8000
		{
			theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003d40:	4b98      	ldr	r3, [pc, #608]	; (8003fa4 <generate_waveforms+0x564>)
 8003d42:	ed93 7a00 	vldr	s14, [r3]
 8003d46:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d4e:	4b95      	ldr	r3, [pc, #596]	; (8003fa4 <generate_waveforms+0x564>)
 8003d50:	edc3 7a00 	vstr	s15, [r3]
			buffer_lfo_float[i] = arm_sin_f32(theta_lfo);
 8003d54:	693c      	ldr	r4, [r7, #16]
 8003d56:	4b93      	ldr	r3, [pc, #588]	; (8003fa4 <generate_waveforms+0x564>)
 8003d58:	edd3 7a00 	vldr	s15, [r3]
 8003d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d60:	f002 f95c 	bl	800601c <arm_sin_f32>
 8003d64:	eef0 7a40 	vmov.f32	s15, s0
 8003d68:	4a8f      	ldr	r2, [pc, #572]	; (8003fa8 <generate_waveforms+0x568>)
 8003d6a:	00a3      	lsls	r3, r4, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	edc3 7a00 	vstr	s15, [r3]


	// Sine LFO
	if(osc.lfo_wav == sine)
	{
		for(i = start; i < end; i++)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	3301      	adds	r3, #1
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	88ba      	ldrh	r2, [r7, #4]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d8df      	bhi.n	8003d40 <generate_waveforms+0x300>
 8003d80:	e107      	b.n	8003f92 <generate_waveforms+0x552>
			buffer_lfo_float[i] = arm_sin_f32(theta_lfo);
		}
	}

	// Square LFO
	else if(osc.lfo_wav == square)
 8003d82:	4b8a      	ldr	r3, [pc, #552]	; (8003fac <generate_waveforms+0x56c>)
 8003d84:	7c5b      	ldrb	r3, [r3, #17]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d154      	bne.n	8003e34 <generate_waveforms+0x3f4>
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8003d8a:	4b88      	ldr	r3, [pc, #544]	; (8003fac <generate_waveforms+0x56c>)
 8003d8c:	7c9b      	ldrb	r3, [r3, #18]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d003      	beq.n	8003d9a <generate_waveforms+0x35a>
 8003d92:	4b86      	ldr	r3, [pc, #536]	; (8003fac <generate_waveforms+0x56c>)
 8003d94:	7c9b      	ldrb	r3, [r3, #18]
 8003d96:	2b07      	cmp	r3, #7
 8003d98:	d123      	bne.n	8003de2 <generate_waveforms+0x3a2>
		{
			// AM
			for(i = start; i < end; i++)
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	e01b      	b.n	8003dd8 <generate_waveforms+0x398>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003da0:	4b80      	ldr	r3, [pc, #512]	; (8003fa4 <generate_waveforms+0x564>)
 8003da2:	ed93 7a00 	vldr	s14, [r3]
 8003da6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dae:	4b7d      	ldr	r3, [pc, #500]	; (8003fa4 <generate_waveforms+0x564>)
 8003db0:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_square_angle(theta_lfo);	// TODO: offset??
 8003db4:	693c      	ldr	r4, [r7, #16]
 8003db6:	4b7b      	ldr	r3, [pc, #492]	; (8003fa4 <generate_waveforms+0x564>)
 8003db8:	edd3 7a00 	vldr	s15, [r3]
 8003dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc0:	f000 ffd6 	bl	8004d70 <gen_square_angle>
 8003dc4:	eef0 7a40 	vmov.f32	s15, s0
 8003dc8:	4a77      	ldr	r2, [pc, #476]	; (8003fa8 <generate_waveforms+0x568>)
 8003dca:	00a3      	lsls	r3, r4, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	edc3 7a00 	vstr	s15, [r3]
	else if(osc.lfo_wav == square)
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
		{
			// AM
			for(i = start; i < end; i++)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	88ba      	ldrh	r2, [r7, #4]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d8df      	bhi.n	8003da0 <generate_waveforms+0x360>
	}

	// Square LFO
	else if(osc.lfo_wav == square)
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8003de0:	e0d7      	b.n	8003f92 <generate_waveforms+0x552>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
				buffer_lfo_float[i] = gen_square_angle(theta_lfo);	// TODO: offset??
			}
		}
		else if(osc.mod == VCOfreq)
 8003de2:	4b72      	ldr	r3, [pc, #456]	; (8003fac <generate_waveforms+0x56c>)
 8003de4:	7c9b      	ldrb	r3, [r3, #18]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	f040 80d3 	bne.w	8003f92 <generate_waveforms+0x552>
		{
			// FM
			for(i = start; i < end; i++)
 8003dec:	88fb      	ldrh	r3, [r7, #6]
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	e01b      	b.n	8003e2a <generate_waveforms+0x3ea>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003df2:	4b6c      	ldr	r3, [pc, #432]	; (8003fa4 <generate_waveforms+0x564>)
 8003df4:	ed93 7a00 	vldr	s14, [r3]
 8003df8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e00:	4b68      	ldr	r3, [pc, #416]	; (8003fa4 <generate_waveforms+0x564>)
 8003e02:	edc3 7a00 	vstr	s15, [r3]
				// Sawtooth is integral of triangle
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
 8003e06:	693c      	ldr	r4, [r7, #16]
 8003e08:	4b66      	ldr	r3, [pc, #408]	; (8003fa4 <generate_waveforms+0x564>)
 8003e0a:	edd3 7a00 	vldr	s15, [r3]
 8003e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e12:	f001 f8bb 	bl	8004f8c <gen_triangle_angle>
 8003e16:	eef0 7a40 	vmov.f32	s15, s0
 8003e1a:	4a63      	ldr	r2, [pc, #396]	; (8003fa8 <generate_waveforms+0x568>)
 8003e1c:	00a3      	lsls	r3, r4, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		else if(osc.mod == VCOfreq)
		{
			// FM
			for(i = start; i < end; i++)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	3301      	adds	r3, #1
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	88ba      	ldrh	r2, [r7, #4]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d8df      	bhi.n	8003df2 <generate_waveforms+0x3b2>
 8003e32:	e0ae      	b.n	8003f92 <generate_waveforms+0x552>
			}
		}
	}

	// Sawtooth LFO
	else if(osc.lfo_wav == sawtooth)
 8003e34:	4b5d      	ldr	r3, [pc, #372]	; (8003fac <generate_waveforms+0x56c>)
 8003e36:	7c5b      	ldrb	r3, [r3, #17]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d153      	bne.n	8003ee4 <generate_waveforms+0x4a4>
	{

		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8003e3c:	4b5b      	ldr	r3, [pc, #364]	; (8003fac <generate_waveforms+0x56c>)
 8003e3e:	7c9b      	ldrb	r3, [r3, #18]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d003      	beq.n	8003e4c <generate_waveforms+0x40c>
 8003e44:	4b59      	ldr	r3, [pc, #356]	; (8003fac <generate_waveforms+0x56c>)
 8003e46:	7c9b      	ldrb	r3, [r3, #18]
 8003e48:	2b07      	cmp	r3, #7
 8003e4a:	d123      	bne.n	8003e94 <generate_waveforms+0x454>
		{
			for(i = start; i < end; i++)
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	e01b      	b.n	8003e8a <generate_waveforms+0x44a>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003e52:	4b54      	ldr	r3, [pc, #336]	; (8003fa4 <generate_waveforms+0x564>)
 8003e54:	ed93 7a00 	vldr	s14, [r3]
 8003e58:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e60:	4b50      	ldr	r3, [pc, #320]	; (8003fa4 <generate_waveforms+0x564>)
 8003e62:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_sawtooth_angle(theta_lfo);
 8003e66:	693c      	ldr	r4, [r7, #16]
 8003e68:	4b4e      	ldr	r3, [pc, #312]	; (8003fa4 <generate_waveforms+0x564>)
 8003e6a:	edd3 7a00 	vldr	s15, [r3]
 8003e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e72:	f000 ffa5 	bl	8004dc0 <gen_sawtooth_angle>
 8003e76:	eef0 7a40 	vmov.f32	s15, s0
 8003e7a:	4a4b      	ldr	r2, [pc, #300]	; (8003fa8 <generate_waveforms+0x568>)
 8003e7c:	00a3      	lsls	r3, r4, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	edc3 7a00 	vstr	s15, [r3]
	else if(osc.lfo_wav == sawtooth)
	{

		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
		{
			for(i = start; i < end; i++)
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	3301      	adds	r3, #1
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	88ba      	ldrh	r2, [r7, #4]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d8df      	bhi.n	8003e52 <generate_waveforms+0x412>

	// Sawtooth LFO
	else if(osc.lfo_wav == sawtooth)
	{

		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8003e92:	e07e      	b.n	8003f92 <generate_waveforms+0x552>
				buffer_lfo_float[i] = gen_sawtooth_angle(theta_lfo);
			}
		}

		// If FM mod, need integral of modulating signal.  Integral of ramp is right side of parabola.
		else if(osc.mod == VCOfreq)
 8003e94:	4b45      	ldr	r3, [pc, #276]	; (8003fac <generate_waveforms+0x56c>)
 8003e96:	7c9b      	ldrb	r3, [r3, #18]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d17a      	bne.n	8003f92 <generate_waveforms+0x552>
		{
			for(i = start; i < end; i++)
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	e01b      	b.n	8003eda <generate_waveforms+0x49a>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003ea2:	4b40      	ldr	r3, [pc, #256]	; (8003fa4 <generate_waveforms+0x564>)
 8003ea4:	ed93 7a00 	vldr	s14, [r3]
 8003ea8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eb0:	4b3c      	ldr	r3, [pc, #240]	; (8003fa4 <generate_waveforms+0x564>)
 8003eb2:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_sawtooth_integral_angle(theta_lfo);
 8003eb6:	693c      	ldr	r4, [r7, #16]
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	; (8003fa4 <generate_waveforms+0x564>)
 8003eba:	edd3 7a00 	vldr	s15, [r3]
 8003ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec2:	f000 ffab 	bl	8004e1c <gen_sawtooth_integral_angle>
 8003ec6:	eef0 7a40 	vmov.f32	s15, s0
 8003eca:	4a37      	ldr	r2, [pc, #220]	; (8003fa8 <generate_waveforms+0x568>)
 8003ecc:	00a3      	lsls	r3, r4, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	edc3 7a00 	vstr	s15, [r3]
		}

		// If FM mod, need integral of modulating signal.  Integral of ramp is right side of parabola.
		else if(osc.mod == VCOfreq)
		{
			for(i = start; i < end; i++)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	88ba      	ldrh	r2, [r7, #4]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d8df      	bhi.n	8003ea2 <generate_waveforms+0x462>
 8003ee2:	e056      	b.n	8003f92 <generate_waveforms+0x552>
			}
		}
	}

	// Triangle LFO
	else if(osc.lfo_wav == triangle)
 8003ee4:	4b31      	ldr	r3, [pc, #196]	; (8003fac <generate_waveforms+0x56c>)
 8003ee6:	7c5b      	ldrb	r3, [r3, #17]
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d152      	bne.n	8003f92 <generate_waveforms+0x552>
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8003eec:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <generate_waveforms+0x56c>)
 8003eee:	7c9b      	ldrb	r3, [r3, #18]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d003      	beq.n	8003efc <generate_waveforms+0x4bc>
 8003ef4:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <generate_waveforms+0x56c>)
 8003ef6:	7c9b      	ldrb	r3, [r3, #18]
 8003ef8:	2b07      	cmp	r3, #7
 8003efa:	d123      	bne.n	8003f44 <generate_waveforms+0x504>
		{
			for(i = start; i < end; i++)
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	e01b      	b.n	8003f3a <generate_waveforms+0x4fa>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003f02:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <generate_waveforms+0x564>)
 8003f04:	ed93 7a00 	vldr	s14, [r3]
 8003f08:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f10:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <generate_waveforms+0x564>)
 8003f12:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
 8003f16:	693c      	ldr	r4, [r7, #16]
 8003f18:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <generate_waveforms+0x564>)
 8003f1a:	edd3 7a00 	vldr	s15, [r3]
 8003f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f22:	f001 f833 	bl	8004f8c <gen_triangle_angle>
 8003f26:	eef0 7a40 	vmov.f32	s15, s0
 8003f2a:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <generate_waveforms+0x568>)
 8003f2c:	00a3      	lsls	r3, r4, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	edc3 7a00 	vstr	s15, [r3]
	// Triangle LFO
	else if(osc.lfo_wav == triangle)
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
		{
			for(i = start; i < end; i++)
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	3301      	adds	r3, #1
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	88ba      	ldrh	r2, [r7, #4]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d8df      	bhi.n	8003f02 <generate_waveforms+0x4c2>
	}

	// Triangle LFO
	else if(osc.lfo_wav == triangle)
	{
		if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8003f42:	e026      	b.n	8003f92 <generate_waveforms+0x552>
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
			}
		}

		// If FM mod, need integral of modulating signal.
		else if(osc.mod == VCOfreq)
 8003f44:	4b19      	ldr	r3, [pc, #100]	; (8003fac <generate_waveforms+0x56c>)
 8003f46:	7c9b      	ldrb	r3, [r3, #18]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d122      	bne.n	8003f92 <generate_waveforms+0x552>
		{
			for(i = start; i < end; i++)
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	e01b      	b.n	8003f8a <generate_waveforms+0x54a>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003f52:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <generate_waveforms+0x564>)
 8003f54:	ed93 7a00 	vldr	s14, [r3]
 8003f58:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f60:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <generate_waveforms+0x564>)
 8003f62:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_triangle_integral_angle(theta_lfo);
 8003f66:	693c      	ldr	r4, [r7, #16]
 8003f68:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <generate_waveforms+0x564>)
 8003f6a:	edd3 7a00 	vldr	s15, [r3]
 8003f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f72:	f001 f851 	bl	8005018 <gen_triangle_integral_angle>
 8003f76:	eef0 7a40 	vmov.f32	s15, s0
 8003f7a:	4a0b      	ldr	r2, [pc, #44]	; (8003fa8 <generate_waveforms+0x568>)
 8003f7c:	00a3      	lsls	r3, r4, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	edc3 7a00 	vstr	s15, [r3]
		}

		// If FM mod, need integral of modulating signal.
		else if(osc.mod == VCOfreq)
		{
			for(i = start; i < end; i++)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	3301      	adds	r3, #1
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	88ba      	ldrh	r2, [r7, #4]
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d8df      	bhi.n	8003f52 <generate_waveforms+0x512>
//	NO_MOD,
//	VCOfreq,
//	VCOamp,

	// Sine VCO
	if(osc.vco_wav == sine)
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <generate_waveforms+0x56c>)
 8003f94:	7c1b      	ldrb	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 80ab 	bne.w	80040f2 <generate_waveforms+0x6b2>
	{

		for(i = start; i < end; i++)
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	e0a1      	b.n	80040e6 <generate_waveforms+0x6a6>
 8003fa2:	bf00      	nop
 8003fa4:	20006464 	.word	0x20006464
 8003fa8:	20000140 	.word	0x20000140
 8003fac:	20000054 	.word	0x20000054
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8003fb0:	4bab      	ldr	r3, [pc, #684]	; (8004260 <generate_waveforms+0x820>)
 8003fb2:	ed93 7a00 	vldr	s14, [r3]
 8003fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fbe:	4ba8      	ldr	r3, [pc, #672]	; (8004260 <generate_waveforms+0x820>)
 8003fc0:	edc3 7a00 	vstr	s15, [r3]
			// theta_vco2 = theta_vco2 + rads_per_sample_vco2;
			if(osc.mod == VCOfreq || osc.mod == DualMode_VCO)
 8003fc4:	4ba7      	ldr	r3, [pc, #668]	; (8004264 <generate_waveforms+0x824>)
 8003fc6:	7c9b      	ldrb	r3, [r3, #18]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d003      	beq.n	8003fd4 <generate_waveforms+0x594>
 8003fcc:	4ba5      	ldr	r3, [pc, #660]	; (8004264 <generate_waveforms+0x824>)
 8003fce:	7c9b      	ldrb	r3, [r3, #18]
 8003fd0:	2b07      	cmp	r3, #7
 8003fd2:	d14a      	bne.n	800406a <generate_waveforms+0x62a>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3 * buffer_adsr_fm[i]);
 8003fd4:	693c      	ldr	r4, [r7, #16]
 8003fd6:	4ba3      	ldr	r3, [pc, #652]	; (8004264 <generate_waveforms+0x824>)
 8003fd8:	ed93 8a05 	vldr	s16, [r3, #20]
 8003fdc:	4ba1      	ldr	r3, [pc, #644]	; (8004264 <generate_waveforms+0x824>)
 8003fde:	edd3 8a05 	vldr	s17, [r3, #20]
 8003fe2:	4ba0      	ldr	r3, [pc, #640]	; (8004264 <generate_waveforms+0x824>)
 8003fe4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4a9f      	ldr	r2, [pc, #636]	; (8004268 <generate_waveforms+0x828>)
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	edd3 7a00 	vldr	s15, [r3]
 8003ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ff8:	4b99      	ldr	r3, [pc, #612]	; (8004260 <generate_waveforms+0x820>)
 8003ffa:	edd3 7a00 	vldr	s15, [r3]
 8003ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004002:	ee17 0a90 	vmov	r0, s15
 8004006:	f7fc fa4b 	bl	80004a0 <__aeabi_f2d>
 800400a:	4605      	mov	r5, r0
 800400c:	460e      	mov	r6, r1
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4a96      	ldr	r2, [pc, #600]	; (800426c <generate_waveforms+0x82c>)
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7fc fa41 	bl	80004a0 <__aeabi_f2d>
 800401e:	a38e      	add	r3, pc, #568	; (adr r3, 8004258 <generate_waveforms+0x818>)
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f7fc fa90 	bl	8000548 <__aeabi_dmul>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4628      	mov	r0, r5
 800402e:	4631      	mov	r1, r6
 8004030:	f7fc f8d8 	bl	80001e4 <__adddf3>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	f7fc fc96 	bl	800096c <__aeabi_d2f>
 8004040:	4603      	mov	r3, r0
 8004042:	ee00 3a10 	vmov	s0, r3
 8004046:	f001 ffe9 	bl	800601c <arm_sin_f32>
 800404a:	eef0 7a40 	vmov.f32	s15, s0
 800404e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004052:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800405a:	edc7 7a00 	vstr	s15, [r7]
 800405e:	883b      	ldrh	r3, [r7, #0]
 8004060:	b29a      	uxth	r2, r3
 8004062:	4b83      	ldr	r3, [pc, #524]	; (8004270 <generate_waveforms+0x830>)
 8004064:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8004068:	e03a      	b.n	80040e0 <generate_waveforms+0x6a0>
				// buffer_output2[i] = 0.1*osc.vco_amp2 + 0.1*osc.vco_amp*arm_sin_f32(theta_vco2 + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3 * buffer_adsr_fm[i]);
				// buffer_output[i] = buffer_output[i] + buffer_output2[i];
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32(theta_vco + 0.3 * buffer_adsr_fm[i]);
 800406a:	693c      	ldr	r4, [r7, #16]
 800406c:	4b7d      	ldr	r3, [pc, #500]	; (8004264 <generate_waveforms+0x824>)
 800406e:	ed93 8a05 	vldr	s16, [r3, #20]
 8004072:	4b7c      	ldr	r3, [pc, #496]	; (8004264 <generate_waveforms+0x824>)
 8004074:	edd3 8a05 	vldr	s17, [r3, #20]
 8004078:	4b79      	ldr	r3, [pc, #484]	; (8004260 <generate_waveforms+0x820>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f7fc fa0f 	bl	80004a0 <__aeabi_f2d>
 8004082:	4605      	mov	r5, r0
 8004084:	460e      	mov	r6, r1
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4a78      	ldr	r2, [pc, #480]	; (800426c <generate_waveforms+0x82c>)
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7fc fa05 	bl	80004a0 <__aeabi_f2d>
 8004096:	a370      	add	r3, pc, #448	; (adr r3, 8004258 <generate_waveforms+0x818>)
 8004098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409c:	f7fc fa54 	bl	8000548 <__aeabi_dmul>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4628      	mov	r0, r5
 80040a6:	4631      	mov	r1, r6
 80040a8:	f7fc f89c 	bl	80001e4 <__adddf3>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4610      	mov	r0, r2
 80040b2:	4619      	mov	r1, r3
 80040b4:	f7fc fc5a 	bl	800096c <__aeabi_d2f>
 80040b8:	4603      	mov	r3, r0
 80040ba:	ee00 3a10 	vmov	s0, r3
 80040be:	f001 ffad 	bl	800601c <arm_sin_f32>
 80040c2:	eef0 7a40 	vmov.f32	s15, s0
 80040c6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80040ca:	ee78 7a27 	vadd.f32	s15, s16, s15
 80040ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040d2:	edc7 7a00 	vstr	s15, [r7]
 80040d6:	883b      	ldrh	r3, [r7, #0]
 80040d8:	b29a      	uxth	r2, r3
 80040da:	4b65      	ldr	r3, [pc, #404]	; (8004270 <generate_waveforms+0x830>)
 80040dc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// Sine VCO
	if(osc.vco_wav == sine)
	{

		for(i = start; i < end; i++)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	3301      	adds	r3, #1
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	88ba      	ldrh	r2, [r7, #4]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	f63f af60 	bhi.w	8003fb0 <generate_waveforms+0x570>
 80040f0:	e209      	b.n	8004506 <generate_waveforms+0xac6>
			}
		}
	}

	// Square VCO
	else if(osc.vco_wav == square)
 80040f2:	4b5c      	ldr	r3, [pc, #368]	; (8004264 <generate_waveforms+0x824>)
 80040f4:	7c1b      	ldrb	r3, [r3, #16]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	f040 80a4 	bne.w	8004244 <generate_waveforms+0x804>
	{

		for(i = start; i < end; i++)
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	e09a      	b.n	8004238 <generate_waveforms+0x7f8>
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8004102:	4b57      	ldr	r3, [pc, #348]	; (8004260 <generate_waveforms+0x820>)
 8004104:	ed93 7a00 	vldr	s14, [r3]
 8004108:	edd7 7a03 	vldr	s15, [r7, #12]
 800410c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004110:	4b53      	ldr	r3, [pc, #332]	; (8004260 <generate_waveforms+0x820>)
 8004112:	edc3 7a00 	vstr	s15, [r3]

			if(osc.mod == VCOfreq || osc.mod == DualMode_VCO)
 8004116:	4b53      	ldr	r3, [pc, #332]	; (8004264 <generate_waveforms+0x824>)
 8004118:	7c9b      	ldrb	r3, [r3, #18]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d003      	beq.n	8004126 <generate_waveforms+0x6e6>
 800411e:	4b51      	ldr	r3, [pc, #324]	; (8004264 <generate_waveforms+0x824>)
 8004120:	7c9b      	ldrb	r3, [r3, #18]
 8004122:	2b07      	cmp	r3, #7
 8004124:	d14a      	bne.n	80041bc <generate_waveforms+0x77c>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_square_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3 * buffer_adsr_fm[i]);
 8004126:	693c      	ldr	r4, [r7, #16]
 8004128:	4b4e      	ldr	r3, [pc, #312]	; (8004264 <generate_waveforms+0x824>)
 800412a:	ed93 8a05 	vldr	s16, [r3, #20]
 800412e:	4b4d      	ldr	r3, [pc, #308]	; (8004264 <generate_waveforms+0x824>)
 8004130:	edd3 8a05 	vldr	s17, [r3, #20]
 8004134:	4b4b      	ldr	r3, [pc, #300]	; (8004264 <generate_waveforms+0x824>)
 8004136:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4a4a      	ldr	r2, [pc, #296]	; (8004268 <generate_waveforms+0x828>)
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	edd3 7a00 	vldr	s15, [r3]
 8004146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800414a:	4b45      	ldr	r3, [pc, #276]	; (8004260 <generate_waveforms+0x820>)
 800414c:	edd3 7a00 	vldr	s15, [r3]
 8004150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004154:	ee17 0a90 	vmov	r0, s15
 8004158:	f7fc f9a2 	bl	80004a0 <__aeabi_f2d>
 800415c:	4605      	mov	r5, r0
 800415e:	460e      	mov	r6, r1
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4a42      	ldr	r2, [pc, #264]	; (800426c <generate_waveforms+0x82c>)
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fc f998 	bl	80004a0 <__aeabi_f2d>
 8004170:	a339      	add	r3, pc, #228	; (adr r3, 8004258 <generate_waveforms+0x818>)
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	f7fc f9e7 	bl	8000548 <__aeabi_dmul>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4628      	mov	r0, r5
 8004180:	4631      	mov	r1, r6
 8004182:	f7fc f82f 	bl	80001e4 <__adddf3>
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	f7fc fbed 	bl	800096c <__aeabi_d2f>
 8004192:	4603      	mov	r3, r0
 8004194:	ee00 3a10 	vmov	s0, r3
 8004198:	f000 fdea 	bl	8004d70 <gen_square_angle>
 800419c:	eef0 7a40 	vmov.f32	s15, s0
 80041a0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80041a4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80041a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ac:	edc7 7a00 	vstr	s15, [r7]
 80041b0:	883b      	ldrh	r3, [r7, #0]
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	4b2e      	ldr	r3, [pc, #184]	; (8004270 <generate_waveforms+0x830>)
 80041b6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 80041ba:	e03a      	b.n	8004232 <generate_waveforms+0x7f2>
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_square_angle(theta_vco + 0.3 * buffer_adsr_fm[i]);
 80041bc:	693c      	ldr	r4, [r7, #16]
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <generate_waveforms+0x824>)
 80041c0:	ed93 8a05 	vldr	s16, [r3, #20]
 80041c4:	4b27      	ldr	r3, [pc, #156]	; (8004264 <generate_waveforms+0x824>)
 80041c6:	edd3 8a05 	vldr	s17, [r3, #20]
 80041ca:	4b25      	ldr	r3, [pc, #148]	; (8004260 <generate_waveforms+0x820>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fc f966 	bl	80004a0 <__aeabi_f2d>
 80041d4:	4605      	mov	r5, r0
 80041d6:	460e      	mov	r6, r1
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4a24      	ldr	r2, [pc, #144]	; (800426c <generate_waveforms+0x82c>)
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fc f95c 	bl	80004a0 <__aeabi_f2d>
 80041e8:	a31b      	add	r3, pc, #108	; (adr r3, 8004258 <generate_waveforms+0x818>)
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f7fc f9ab 	bl	8000548 <__aeabi_dmul>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4628      	mov	r0, r5
 80041f8:	4631      	mov	r1, r6
 80041fa:	f7fb fff3 	bl	80001e4 <__adddf3>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4610      	mov	r0, r2
 8004204:	4619      	mov	r1, r3
 8004206:	f7fc fbb1 	bl	800096c <__aeabi_d2f>
 800420a:	4603      	mov	r3, r0
 800420c:	ee00 3a10 	vmov	s0, r3
 8004210:	f000 fdae 	bl	8004d70 <gen_square_angle>
 8004214:	eef0 7a40 	vmov.f32	s15, s0
 8004218:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800421c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004224:	edc7 7a00 	vstr	s15, [r7]
 8004228:	883b      	ldrh	r3, [r7, #0]
 800422a:	b29a      	uxth	r2, r3
 800422c:	4b10      	ldr	r3, [pc, #64]	; (8004270 <generate_waveforms+0x830>)
 800422e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// Square VCO
	else if(osc.vco_wav == square)
	{

		for(i = start; i < end; i++)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3301      	adds	r3, #1
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	88ba      	ldrh	r2, [r7, #4]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	429a      	cmp	r2, r3
 800423e:	f63f af60 	bhi.w	8004102 <generate_waveforms+0x6c2>
 8004242:	e160      	b.n	8004506 <generate_waveforms+0xac6>
			}
		}
	}

	// Sawtooth VCO
	else if(osc.vco_wav == sawtooth)
 8004244:	4b07      	ldr	r3, [pc, #28]	; (8004264 <generate_waveforms+0x824>)
 8004246:	7c1b      	ldrb	r3, [r3, #16]
 8004248:	2b01      	cmp	r3, #1
 800424a:	f040 80b4 	bne.w	80043b6 <generate_waveforms+0x976>
	{

		for(i = start; i < end; i++)
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	e0aa      	b.n	80043aa <generate_waveforms+0x96a>
 8004254:	f3af 8000 	nop.w
 8004258:	33333333 	.word	0x33333333
 800425c:	3fd33333 	.word	0x3fd33333
 8004260:	20006460 	.word	0x20006460
 8004264:	20000054 	.word	0x20000054
 8004268:	20000140 	.word	0x20000140
 800426c:	20000340 	.word	0x20000340
 8004270:	200000c0 	.word	0x200000c0
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8004274:	4bac      	ldr	r3, [pc, #688]	; (8004528 <generate_waveforms+0xae8>)
 8004276:	ed93 7a00 	vldr	s14, [r3]
 800427a:	edd7 7a03 	vldr	s15, [r7, #12]
 800427e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004282:	4ba9      	ldr	r3, [pc, #676]	; (8004528 <generate_waveforms+0xae8>)
 8004284:	edc3 7a00 	vstr	s15, [r3]

			if(osc.mod == VCOfreq || osc.mod == DualMode_VCO)
 8004288:	4ba8      	ldr	r3, [pc, #672]	; (800452c <generate_waveforms+0xaec>)
 800428a:	7c9b      	ldrb	r3, [r3, #18]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d003      	beq.n	8004298 <generate_waveforms+0x858>
 8004290:	4ba6      	ldr	r3, [pc, #664]	; (800452c <generate_waveforms+0xaec>)
 8004292:	7c9b      	ldrb	r3, [r3, #18]
 8004294:	2b07      	cmp	r3, #7
 8004296:	d14a      	bne.n	800432e <generate_waveforms+0x8ee>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_sawtooth_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3 * buffer_adsr_fm[i]);
 8004298:	693c      	ldr	r4, [r7, #16]
 800429a:	4ba4      	ldr	r3, [pc, #656]	; (800452c <generate_waveforms+0xaec>)
 800429c:	ed93 8a05 	vldr	s16, [r3, #20]
 80042a0:	4ba2      	ldr	r3, [pc, #648]	; (800452c <generate_waveforms+0xaec>)
 80042a2:	edd3 8a05 	vldr	s17, [r3, #20]
 80042a6:	4ba1      	ldr	r3, [pc, #644]	; (800452c <generate_waveforms+0xaec>)
 80042a8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4aa0      	ldr	r2, [pc, #640]	; (8004530 <generate_waveforms+0xaf0>)
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	edd3 7a00 	vldr	s15, [r3]
 80042b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042bc:	4b9a      	ldr	r3, [pc, #616]	; (8004528 <generate_waveforms+0xae8>)
 80042be:	edd3 7a00 	vldr	s15, [r3]
 80042c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042c6:	ee17 0a90 	vmov	r0, s15
 80042ca:	f7fc f8e9 	bl	80004a0 <__aeabi_f2d>
 80042ce:	4605      	mov	r5, r0
 80042d0:	460e      	mov	r6, r1
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4a97      	ldr	r2, [pc, #604]	; (8004534 <generate_waveforms+0xaf4>)
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fc f8df 	bl	80004a0 <__aeabi_f2d>
 80042e2:	a38f      	add	r3, pc, #572	; (adr r3, 8004520 <generate_waveforms+0xae0>)
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f7fc f92e 	bl	8000548 <__aeabi_dmul>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4628      	mov	r0, r5
 80042f2:	4631      	mov	r1, r6
 80042f4:	f7fb ff76 	bl	80001e4 <__adddf3>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	f7fc fb34 	bl	800096c <__aeabi_d2f>
 8004304:	4603      	mov	r3, r0
 8004306:	ee00 3a10 	vmov	s0, r3
 800430a:	f000 fd59 	bl	8004dc0 <gen_sawtooth_angle>
 800430e:	eef0 7a40 	vmov.f32	s15, s0
 8004312:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004316:	ee78 7a27 	vadd.f32	s15, s16, s15
 800431a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800431e:	edc7 7a00 	vstr	s15, [r7]
 8004322:	883b      	ldrh	r3, [r7, #0]
 8004324:	b29a      	uxth	r2, r3
 8004326:	4b84      	ldr	r3, [pc, #528]	; (8004538 <generate_waveforms+0xaf8>)
 8004328:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 800432c:	e03a      	b.n	80043a4 <generate_waveforms+0x964>
			}
			else
			{
				// buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_sawtooth_angle(theta_vco + 10*buffer_lfo_float[i] + 0.3 * buffer_adsr_fm[i]);
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_sawtooth_angle(theta_vco + 0.3 * buffer_adsr_fm[i]);
 800432e:	693c      	ldr	r4, [r7, #16]
 8004330:	4b7e      	ldr	r3, [pc, #504]	; (800452c <generate_waveforms+0xaec>)
 8004332:	ed93 8a05 	vldr	s16, [r3, #20]
 8004336:	4b7d      	ldr	r3, [pc, #500]	; (800452c <generate_waveforms+0xaec>)
 8004338:	edd3 8a05 	vldr	s17, [r3, #20]
 800433c:	4b7a      	ldr	r3, [pc, #488]	; (8004528 <generate_waveforms+0xae8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f7fc f8ad 	bl	80004a0 <__aeabi_f2d>
 8004346:	4605      	mov	r5, r0
 8004348:	460e      	mov	r6, r1
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4a79      	ldr	r2, [pc, #484]	; (8004534 <generate_waveforms+0xaf4>)
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f7fc f8a3 	bl	80004a0 <__aeabi_f2d>
 800435a:	a371      	add	r3, pc, #452	; (adr r3, 8004520 <generate_waveforms+0xae0>)
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f7fc f8f2 	bl	8000548 <__aeabi_dmul>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4628      	mov	r0, r5
 800436a:	4631      	mov	r1, r6
 800436c:	f7fb ff3a 	bl	80001e4 <__adddf3>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	f7fc faf8 	bl	800096c <__aeabi_d2f>
 800437c:	4603      	mov	r3, r0
 800437e:	ee00 3a10 	vmov	s0, r3
 8004382:	f000 fd1d 	bl	8004dc0 <gen_sawtooth_angle>
 8004386:	eef0 7a40 	vmov.f32	s15, s0
 800438a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800438e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004396:	edc7 7a00 	vstr	s15, [r7]
 800439a:	883b      	ldrh	r3, [r7, #0]
 800439c:	b29a      	uxth	r2, r3
 800439e:	4b66      	ldr	r3, [pc, #408]	; (8004538 <generate_waveforms+0xaf8>)
 80043a0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// Sawtooth VCO
	else if(osc.vco_wav == sawtooth)
	{

		for(i = start; i < end; i++)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	3301      	adds	r3, #1
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	88ba      	ldrh	r2, [r7, #4]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	f63f af60 	bhi.w	8004274 <generate_waveforms+0x834>
 80043b4:	e0a7      	b.n	8004506 <generate_waveforms+0xac6>
			}
		}
	}

	// Triangle VCO
	else if(osc.vco_wav == triangle)
 80043b6:	4b5d      	ldr	r3, [pc, #372]	; (800452c <generate_waveforms+0xaec>)
 80043b8:	7c1b      	ldrb	r3, [r3, #16]
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	f040 80a3 	bne.w	8004506 <generate_waveforms+0xac6>
	{

		for(i = start; i < end; i++)
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	e09a      	b.n	80044fc <generate_waveforms+0xabc>
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 80043c6:	4b58      	ldr	r3, [pc, #352]	; (8004528 <generate_waveforms+0xae8>)
 80043c8:	ed93 7a00 	vldr	s14, [r3]
 80043cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80043d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043d4:	4b54      	ldr	r3, [pc, #336]	; (8004528 <generate_waveforms+0xae8>)
 80043d6:	edc3 7a00 	vstr	s15, [r3]
			if(osc.mod == VCOfreq || osc.mod == DualMode_VCO)
 80043da:	4b54      	ldr	r3, [pc, #336]	; (800452c <generate_waveforms+0xaec>)
 80043dc:	7c9b      	ldrb	r3, [r3, #18]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d003      	beq.n	80043ea <generate_waveforms+0x9aa>
 80043e2:	4b52      	ldr	r3, [pc, #328]	; (800452c <generate_waveforms+0xaec>)
 80043e4:	7c9b      	ldrb	r3, [r3, #18]
 80043e6:	2b07      	cmp	r3, #7
 80043e8:	d14a      	bne.n	8004480 <generate_waveforms+0xa40>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_triangle_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3 * buffer_adsr_fm[i]);
 80043ea:	693c      	ldr	r4, [r7, #16]
 80043ec:	4b4f      	ldr	r3, [pc, #316]	; (800452c <generate_waveforms+0xaec>)
 80043ee:	ed93 8a05 	vldr	s16, [r3, #20]
 80043f2:	4b4e      	ldr	r3, [pc, #312]	; (800452c <generate_waveforms+0xaec>)
 80043f4:	edd3 8a05 	vldr	s17, [r3, #20]
 80043f8:	4b4c      	ldr	r3, [pc, #304]	; (800452c <generate_waveforms+0xaec>)
 80043fa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4a4b      	ldr	r2, [pc, #300]	; (8004530 <generate_waveforms+0xaf0>)
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	edd3 7a00 	vldr	s15, [r3]
 800440a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800440e:	4b46      	ldr	r3, [pc, #280]	; (8004528 <generate_waveforms+0xae8>)
 8004410:	edd3 7a00 	vldr	s15, [r3]
 8004414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004418:	ee17 0a90 	vmov	r0, s15
 800441c:	f7fc f840 	bl	80004a0 <__aeabi_f2d>
 8004420:	4605      	mov	r5, r0
 8004422:	460e      	mov	r6, r1
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4a43      	ldr	r2, [pc, #268]	; (8004534 <generate_waveforms+0xaf4>)
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f7fc f836 	bl	80004a0 <__aeabi_f2d>
 8004434:	a33a      	add	r3, pc, #232	; (adr r3, 8004520 <generate_waveforms+0xae0>)
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f7fc f885 	bl	8000548 <__aeabi_dmul>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4628      	mov	r0, r5
 8004444:	4631      	mov	r1, r6
 8004446:	f7fb fecd 	bl	80001e4 <__adddf3>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	f7fc fa8b 	bl	800096c <__aeabi_d2f>
 8004456:	4603      	mov	r3, r0
 8004458:	ee00 3a10 	vmov	s0, r3
 800445c:	f000 fd96 	bl	8004f8c <gen_triangle_angle>
 8004460:	eef0 7a40 	vmov.f32	s15, s0
 8004464:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004468:	ee78 7a27 	vadd.f32	s15, s16, s15
 800446c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004470:	edc7 7a00 	vstr	s15, [r7]
 8004474:	883b      	ldrh	r3, [r7, #0]
 8004476:	b29a      	uxth	r2, r3
 8004478:	4b2f      	ldr	r3, [pc, #188]	; (8004538 <generate_waveforms+0xaf8>)
 800447a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 800447e:	e03a      	b.n	80044f6 <generate_waveforms+0xab6>
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_triangle_angle(theta_vco + 0.3 * buffer_adsr_fm[i]);
 8004480:	693c      	ldr	r4, [r7, #16]
 8004482:	4b2a      	ldr	r3, [pc, #168]	; (800452c <generate_waveforms+0xaec>)
 8004484:	ed93 8a05 	vldr	s16, [r3, #20]
 8004488:	4b28      	ldr	r3, [pc, #160]	; (800452c <generate_waveforms+0xaec>)
 800448a:	edd3 8a05 	vldr	s17, [r3, #20]
 800448e:	4b26      	ldr	r3, [pc, #152]	; (8004528 <generate_waveforms+0xae8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fc f804 	bl	80004a0 <__aeabi_f2d>
 8004498:	4605      	mov	r5, r0
 800449a:	460e      	mov	r6, r1
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4a25      	ldr	r2, [pc, #148]	; (8004534 <generate_waveforms+0xaf4>)
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fb fffa 	bl	80004a0 <__aeabi_f2d>
 80044ac:	a31c      	add	r3, pc, #112	; (adr r3, 8004520 <generate_waveforms+0xae0>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f7fc f849 	bl	8000548 <__aeabi_dmul>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4628      	mov	r0, r5
 80044bc:	4631      	mov	r1, r6
 80044be:	f7fb fe91 	bl	80001e4 <__adddf3>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	f7fc fa4f 	bl	800096c <__aeabi_d2f>
 80044ce:	4603      	mov	r3, r0
 80044d0:	ee00 3a10 	vmov	s0, r3
 80044d4:	f000 fd5a 	bl	8004f8c <gen_triangle_angle>
 80044d8:	eef0 7a40 	vmov.f32	s15, s0
 80044dc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80044e0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80044e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044e8:	edc7 7a00 	vstr	s15, [r7]
 80044ec:	883b      	ldrh	r3, [r7, #0]
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	4b11      	ldr	r3, [pc, #68]	; (8004538 <generate_waveforms+0xaf8>)
 80044f2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// Triangle VCO
	else if(osc.vco_wav == triangle)
	{

		for(i = start; i < end; i++)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	3301      	adds	r3, #1
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	88ba      	ldrh	r2, [r7, #4]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	429a      	cmp	r2, r3
 8004502:	f63f af60 	bhi.w	80043c6 <generate_waveforms+0x986>

		}
	}

	// AM Modulate VCO with LFO
	if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
 8004506:	4b09      	ldr	r3, [pc, #36]	; (800452c <generate_waveforms+0xaec>)
 8004508:	7c9b      	ldrb	r3, [r3, #18]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d003      	beq.n	8004516 <generate_waveforms+0xad6>
 800450e:	4b07      	ldr	r3, [pc, #28]	; (800452c <generate_waveforms+0xaec>)
 8004510:	7c9b      	ldrb	r3, [r3, #18]
 8004512:	2b07      	cmp	r3, #7
 8004514:	d13e      	bne.n	8004594 <generate_waveforms+0xb54>
	{
		for(i = start; i < end; i++)
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	e037      	b.n	800458c <generate_waveforms+0xb4c>
 800451c:	f3af 8000 	nop.w
 8004520:	33333333 	.word	0x33333333
 8004524:	3fd33333 	.word	0x3fd33333
 8004528:	20006460 	.word	0x20006460
 800452c:	20000054 	.word	0x20000054
 8004530:	20000140 	.word	0x20000140
 8004534:	20000340 	.word	0x20000340
 8004538:	200000c0 	.word	0x200000c0
		{
			buffer_output[i] = buffer_output[i]*(osc.lfo_amp_am + osc.lfo_amp_am*buffer_lfo_float[i]);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4944      	ldr	r1, [pc, #272]	; (8004654 <generate_waveforms+0xc14>)
 8004542:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004546:	b292      	uxth	r2, r2
 8004548:	ee07 2a90 	vmov	s15, r2
 800454c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004550:	4a41      	ldr	r2, [pc, #260]	; (8004658 <generate_waveforms+0xc18>)
 8004552:	edd2 6a08 	vldr	s13, [r2, #32]
 8004556:	4a40      	ldr	r2, [pc, #256]	; (8004658 <generate_waveforms+0xc18>)
 8004558:	ed92 6a08 	vldr	s12, [r2, #32]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	493f      	ldr	r1, [pc, #252]	; (800465c <generate_waveforms+0xc1c>)
 8004560:	0092      	lsls	r2, r2, #2
 8004562:	440a      	add	r2, r1
 8004564:	edd2 7a00 	vldr	s15, [r2]
 8004568:	ee66 7a27 	vmul.f32	s15, s12, s15
 800456c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004578:	edc7 7a00 	vstr	s15, [r7]
 800457c:	883a      	ldrh	r2, [r7, #0]
 800457e:	b291      	uxth	r1, r2
 8004580:	4a34      	ldr	r2, [pc, #208]	; (8004654 <generate_waveforms+0xc14>)
 8004582:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// AM Modulate VCO with LFO
	if(osc.mod == VCOamp || osc.mod == DualMode_VCO)
	{
		for(i = start; i < end; i++)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	3301      	adds	r3, #1
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	88ba      	ldrh	r2, [r7, #4]
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	429a      	cmp	r2, r3
 8004592:	d8d3      	bhi.n	800453c <generate_waveforms+0xafc>
			buffer_output[i] = buffer_output[i]*(osc.lfo_amp_am + osc.lfo_amp_am*buffer_lfo_float[i]);
		}
	}

	// AM Modulate VCO with ADSR
	if(adsr_settings.mod == VCOamp || adsr_settings.mod == DualMode_VCO)
 8004594:	4b32      	ldr	r3, [pc, #200]	; (8004660 <generate_waveforms+0xc20>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d004      	beq.n	80045a8 <generate_waveforms+0xb68>
 800459e:	4b30      	ldr	r3, [pc, #192]	; (8004660 <generate_waveforms+0xc20>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b07      	cmp	r3, #7
 80045a6:	d124      	bne.n	80045f2 <generate_waveforms+0xbb2>
	{
		for(i = start; i < end; i++)
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	e01d      	b.n	80045ea <generate_waveforms+0xbaa>
		{
			buffer_output[i] = buffer_output[i]*buffer_adsr_am[i];
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4928      	ldr	r1, [pc, #160]	; (8004654 <generate_waveforms+0xc14>)
 80045b4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80045b8:	b292      	uxth	r2, r2
 80045ba:	ee07 2a90 	vmov	s15, r2
 80045be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4927      	ldr	r1, [pc, #156]	; (8004664 <generate_waveforms+0xc24>)
 80045c6:	0092      	lsls	r2, r2, #2
 80045c8:	440a      	add	r2, r1
 80045ca:	edd2 7a00 	vldr	s15, [r2]
 80045ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d6:	edc7 7a00 	vstr	s15, [r7]
 80045da:	883a      	ldrh	r2, [r7, #0]
 80045dc:	b291      	uxth	r1, r2
 80045de:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <generate_waveforms+0xc14>)
 80045e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// AM Modulate VCO with ADSR
	if(adsr_settings.mod == VCOamp || adsr_settings.mod == DualMode_VCO)
	{
		for(i = start; i < end; i++)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	3301      	adds	r3, #1
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	88ba      	ldrh	r2, [r7, #4]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d8dd      	bhi.n	80045ae <generate_waveforms+0xb6e>
		{
			buffer_output[i] = buffer_output[i]*buffer_adsr_am[i];
		}
	}

	theta_vco = fast_fmod(theta_vco, TWO_PI);
 80045f2:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <generate_waveforms+0xc28>)
 80045f4:	edd3 7a00 	vldr	s15, [r3]
 80045f8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800466c <generate_waveforms+0xc2c>
 80045fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004600:	f000 fd8e 	bl	8005120 <fast_fmod>
 8004604:	eef0 7a40 	vmov.f32	s15, s0
 8004608:	4b17      	ldr	r3, [pc, #92]	; (8004668 <generate_waveforms+0xc28>)
 800460a:	edc3 7a00 	vstr	s15, [r3]
	// theta_vco2 = fast_fmod(theta_vco2, TWO_PI);
	theta_lfo = fast_fmod(theta_lfo, TWO_PI);
 800460e:	4b18      	ldr	r3, [pc, #96]	; (8004670 <generate_waveforms+0xc30>)
 8004610:	edd3 7a00 	vldr	s15, [r3]
 8004614:	eddf 0a15 	vldr	s1, [pc, #84]	; 800466c <generate_waveforms+0xc2c>
 8004618:	eeb0 0a67 	vmov.f32	s0, s15
 800461c:	f000 fd80 	bl	8005120 <fast_fmod>
 8004620:	eef0 7a40 	vmov.f32	s15, s0
 8004624:	4b12      	ldr	r3, [pc, #72]	; (8004670 <generate_waveforms+0xc30>)
 8004626:	edc3 7a00 	vstr	s15, [r3]
	theta_adsr = fast_fmod(theta_adsr, TWO_PI);
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <generate_waveforms+0xc34>)
 800462c:	edd3 7a00 	vldr	s15, [r3]
 8004630:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800466c <generate_waveforms+0xc2c>
 8004634:	eeb0 0a67 	vmov.f32	s0, s15
 8004638:	f000 fd72 	bl	8005120 <fast_fmod>
 800463c:	eef0 7a40 	vmov.f32	s15, s0
 8004640:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <generate_waveforms+0xc34>)
 8004642:	edc3 7a00 	vstr	s15, [r3]

	return;
 8004646:	bf00      	nop
}
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	ecbd 8b02 	vpop	{d8}
 8004650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004652:	bf00      	nop
 8004654:	200000c0 	.word	0x200000c0
 8004658:	20000054 	.word	0x20000054
 800465c:	20000140 	.word	0x20000140
 8004660:	20006524 	.word	0x20006524
 8004664:	20000240 	.word	0x20000240
 8004668:	20006460 	.word	0x20006460
 800466c:	40c90fdb 	.word	0x40c90fdb
 8004670:	20006464 	.word	0x20006464
 8004674:	20000098 	.word	0x20000098

08004678 <adsr>:
	return;
}


void adsr(uint16_t start, uint16_t end)
{
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	ed2d 8b02 	vpush	{d8}
 800467e:	b08f      	sub	sp, #60	; 0x3c
 8004680:	af02      	add	r7, sp, #8
 8004682:	4603      	mov	r3, r0
 8004684:	460a      	mov	r2, r1
 8004686:	80fb      	strh	r3, [r7, #6]
 8004688:	4613      	mov	r3, r2
 800468a:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	// adsr_settings = adsr_03;
	adsr_settings.attack_len =  (ADCBuffer[4] & 0xfffc)*20;		// A5
 8004690:	4bac      	ldr	r3, [pc, #688]	; (8004944 <adsr+0x2cc>)
 8004692:	891b      	ldrh	r3, [r3, #8]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800469a:	401a      	ands	r2, r3
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	461a      	mov	r2, r3
 80046a6:	4ba8      	ldr	r3, [pc, #672]	; (8004948 <adsr+0x2d0>)
 80046a8:	609a      	str	r2, [r3, #8]
	adsr_settings.decay_len =   (ADCBuffer[9] & 0xfffc)*20;	// C1
 80046aa:	4ba6      	ldr	r3, [pc, #664]	; (8004944 <adsr+0x2cc>)
 80046ac:	8a5b      	ldrh	r3, [r3, #18]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80046b4:	401a      	ands	r2, r3
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	461a      	mov	r2, r3
 80046c0:	4ba1      	ldr	r3, [pc, #644]	; (8004948 <adsr+0x2d0>)
 80046c2:	60da      	str	r2, [r3, #12]
	adsr_settings.sustain_len = (ADCBuffer[5] & 0xfffc)*20;	// A7
 80046c4:	4b9f      	ldr	r3, [pc, #636]	; (8004944 <adsr+0x2cc>)
 80046c6:	895b      	ldrh	r3, [r3, #10]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80046ce:	401a      	ands	r2, r3
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	461a      	mov	r2, r3
 80046da:	4b9b      	ldr	r3, [pc, #620]	; (8004948 <adsr+0x2d0>)
 80046dc:	611a      	str	r2, [r3, #16]
	adsr_settings.release_len = (ADCBuffer[6] & 0xfffc)*20;	// B0
 80046de:	4b99      	ldr	r3, [pc, #612]	; (8004944 <adsr+0x2cc>)
 80046e0:	899b      	ldrh	r3, [r3, #12]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80046e8:	401a      	ands	r2, r3
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	461a      	mov	r2, r3
 80046f4:	4b94      	ldr	r3, [pc, #592]	; (8004948 <adsr+0x2d0>)
 80046f6:	615a      	str	r2, [r3, #20]
	adsr_settings.blank_len =   (ADCBuffer[8] & 0xfffc)*20;		// C0
 80046f8:	4b92      	ldr	r3, [pc, #584]	; (8004944 <adsr+0x2cc>)
 80046fa:	8a1b      	ldrh	r3, [r3, #16]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8004702:	401a      	ands	r2, r3
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	461a      	mov	r2, r3
 800470e:	4b8e      	ldr	r3, [pc, #568]	; (8004948 <adsr+0x2d0>)
 8004710:	619a      	str	r2, [r3, #24]
	volatile uint32_t samples_cycle_adsr = adsr_settings.attack_len + adsr_settings.decay_len + adsr_settings.sustain_len + adsr_settings.release_len + adsr_settings.blank_len;
 8004712:	4b8d      	ldr	r3, [pc, #564]	; (8004948 <adsr+0x2d0>)
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	4b8c      	ldr	r3, [pc, #560]	; (8004948 <adsr+0x2d0>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	441a      	add	r2, r3
 800471c:	4b8a      	ldr	r3, [pc, #552]	; (8004948 <adsr+0x2d0>)
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	441a      	add	r2, r3
 8004722:	4b89      	ldr	r3, [pc, #548]	; (8004948 <adsr+0x2d0>)
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	441a      	add	r2, r3
 8004728:	4b87      	ldr	r3, [pc, #540]	; (8004948 <adsr+0x2d0>)
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	4413      	add	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

	// C4
	uint16_t tempf = pseudo_log(ADCBuffer[11] & 0xfffc);
 8004730:	4b84      	ldr	r3, [pc, #528]	; (8004944 <adsr+0x2cc>)
 8004732:	8adb      	ldrh	r3, [r3, #22]
 8004734:	b29b      	uxth	r3, r3
 8004736:	f023 0303 	bic.w	r3, r3, #3
 800473a:	b29b      	uxth	r3, r3
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fd37 	bl	80051b0 <pseudo_log>
 8004742:	4603      	mov	r3, r0
 8004744:	85bb      	strh	r3, [r7, #44]	; 0x2c
	adsr_settings.sustain_amp = moving_avg(mov_avg4, &mov_avg_sum4, mov_avg_index4, MOV_AVG_LENGTH_BUFFER, tempf);
 8004746:	4b81      	ldr	r3, [pc, #516]	; (800494c <adsr+0x2d4>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004752:	497f      	ldr	r1, [pc, #508]	; (8004950 <adsr+0x2d8>)
 8004754:	487f      	ldr	r0, [pc, #508]	; (8004954 <adsr+0x2dc>)
 8004756:	f000 fd07 	bl	8005168 <moving_avg>
 800475a:	ee07 0a90 	vmov	s15, r0
 800475e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004762:	4b79      	ldr	r3, [pc, #484]	; (8004948 <adsr+0x2d0>)
 8004764:	edc3 7a01 	vstr	s15, [r3, #4]
	mov_avg_index4++;
 8004768:	4b78      	ldr	r3, [pc, #480]	; (800494c <adsr+0x2d4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3301      	adds	r3, #1
 800476e:	4a77      	ldr	r2, [pc, #476]	; (800494c <adsr+0x2d4>)
 8004770:	6013      	str	r3, [r2, #0]
	if (mov_avg_index4 >= MOV_AVG_LENGTH_BUFFER)
 8004772:	4b76      	ldr	r3, [pc, #472]	; (800494c <adsr+0x2d4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477a:	d302      	bcc.n	8004782 <adsr+0x10a>
	{
		mov_avg_index4 = 0;
 800477c:	4b73      	ldr	r3, [pc, #460]	; (800494c <adsr+0x2d4>)
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
	}

	adsr_settings.sustain_amp = adsr_settings.sustain_amp/8000.0;
 8004782:	4b71      	ldr	r3, [pc, #452]	; (8004948 <adsr+0x2d0>)
 8004784:	ed93 7a01 	vldr	s14, [r3, #4]
 8004788:	eddf 6a73 	vldr	s13, [pc, #460]	; 8004958 <adsr+0x2e0>
 800478c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004790:	4b6d      	ldr	r3, [pc, #436]	; (8004948 <adsr+0x2d0>)
 8004792:	edc3 7a01 	vstr	s15, [r3, #4]
	// adsr_settings.sustain_amp = pseudo_log(adsr_settings.sustain_amp, ???);

	// Calculate ADSR boundaries.
	uint32_t decay_start = adsr_settings.attack_len;
 8004796:	4b6c      	ldr	r3, [pc, #432]	; (8004948 <adsr+0x2d0>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t sustain_start = decay_start + adsr_settings.decay_len;
 800479c:	4b6a      	ldr	r3, [pc, #424]	; (8004948 <adsr+0x2d0>)
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	4413      	add	r3, r2
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t release_start = sustain_start + adsr_settings.sustain_len;
 80047a6:	4b68      	ldr	r3, [pc, #416]	; (8004948 <adsr+0x2d0>)
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	4413      	add	r3, r2
 80047ae:	623b      	str	r3, [r7, #32]
	uint32_t blank_start = release_start + adsr_settings.release_len;
 80047b0:	4b65      	ldr	r3, [pc, #404]	; (8004948 <adsr+0x2d0>)
 80047b2:	695a      	ldr	r2, [r3, #20]
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	4413      	add	r3, r2
 80047b8:	61fb      	str	r3, [r7, #28]
	uint32_t blank_end = blank_start + adsr_settings.blank_len;
 80047ba:	4b63      	ldr	r3, [pc, #396]	; (8004948 <adsr+0x2d0>)
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]


	volatile float32_t angle_attack = PI/adsr_settings.attack_len;
 80047c4:	4b60      	ldr	r3, [pc, #384]	; (8004948 <adsr+0x2d0>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	ee07 3a90 	vmov	s15, r3
 80047cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047d0:	eddf 6a62 	vldr	s13, [pc, #392]	; 800495c <adsr+0x2e4>
 80047d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047d8:	edc7 7a04 	vstr	s15, [r7, #16]
	volatile float32_t angle_decay = PI/adsr_settings.decay_len;
 80047dc:	4b5a      	ldr	r3, [pc, #360]	; (8004948 <adsr+0x2d0>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	ee07 3a90 	vmov	s15, r3
 80047e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047e8:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800495c <adsr+0x2e4>
 80047ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047f0:	edc7 7a03 	vstr	s15, [r7, #12]
	volatile float32_t angle_release = PI/adsr_settings.release_len;
 80047f4:	4b54      	ldr	r3, [pc, #336]	; (8004948 <adsr+0x2d0>)
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	ee07 3a90 	vmov	s15, r3
 80047fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004800:	eddf 6a56 	vldr	s13, [pc, #344]	; 800495c <adsr+0x2e4>
 8004804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004808:	edc7 7a02 	vstr	s15, [r7, #8]

	// Generic ADSR envelope
	// The waveform contains 5 segments (asdr + a blank space)
	if(adsr_settings.mod == VCOamp || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO)
 800480c:	4b4e      	ldr	r3, [pc, #312]	; (8004948 <adsr+0x2d0>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d00a      	beq.n	800482c <adsr+0x1b4>
 8004816:	4b4c      	ldr	r3, [pc, #304]	; (8004948 <adsr+0x2d0>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d005      	beq.n	800482c <adsr+0x1b4>
 8004820:	4b49      	ldr	r3, [pc, #292]	; (8004948 <adsr+0x2d0>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b07      	cmp	r3, #7
 8004828:	f040 80f6 	bne.w	8004a18 <adsr+0x3a0>
	{
		for(i = start; i < end; i++)
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004830:	e0ed      	b.n	8004a0e <adsr+0x396>
		{
			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			if( (sample_count_adsr+(i-start))%samples_cycle_adsr < decay_start)
 8004832:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004834:	88fb      	ldrh	r3, [r7, #6]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	461a      	mov	r2, r3
 800483a:	4b49      	ldr	r3, [pc, #292]	; (8004960 <adsr+0x2e8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4413      	add	r3, r2
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	fbb3 f1f2 	udiv	r1, r3, r2
 8004846:	fb02 f201 	mul.w	r2, r2, r1
 800484a:	1a9a      	subs	r2, r3, r2
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	429a      	cmp	r2, r3
 8004850:	d225      	bcs.n	800489e <adsr+0x226>
			{
				// Attack
				// Sine, FM --> Try 1.0
				// Square, FM --> Use 0.4
				// Triangle, FM ---> Try 2.0
				buffer_adsr_am[i] = 1.0 + 1.0 * gen_sawtooth_angle( (sample_count_adsr+(i-start)) % samples_cycle_adsr * angle_attack);
 8004852:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8004854:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	461a      	mov	r2, r3
 800485c:	4b40      	ldr	r3, [pc, #256]	; (8004960 <adsr+0x2e8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4413      	add	r3, r2
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	fbb3 f1f2 	udiv	r1, r3, r2
 8004868:	fb02 f201 	mul.w	r2, r2, r1
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004876:	edd7 7a04 	vldr	s15, [r7, #16]
 800487a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487e:	eeb0 0a67 	vmov.f32	s0, s15
 8004882:	f000 fa9d 	bl	8004dc0 <gen_sawtooth_angle>
 8004886:	eeb0 7a40 	vmov.f32	s14, s0
 800488a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800488e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004892:	4a34      	ldr	r2, [pc, #208]	; (8004964 <adsr+0x2ec>)
 8004894:	00a3      	lsls	r3, r4, #2
 8004896:	4413      	add	r3, r2
 8004898:	edc3 7a00 	vstr	s15, [r3]
 800489c:	e0b4      	b.n	8004a08 <adsr+0x390>
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < sustain_start)
 800489e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048a0:	88fb      	ldrh	r3, [r7, #6]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b2e      	ldr	r3, [pc, #184]	; (8004960 <adsr+0x2e8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4413      	add	r3, r2
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80048b2:	fb02 f201 	mul.w	r2, r2, r1
 80048b6:	1a9a      	subs	r2, r3, r2
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d22a      	bcs.n	8004914 <adsr+0x29c>
			{
				// Decay
				buffer_adsr_am[i] = 1.0 * gen_rampdown_angle2( (sample_count_adsr+(i-start-decay_start)) % samples_cycle_adsr * angle_decay, adsr_settings.sustain_amp, 1.0);
 80048be:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 80048c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048c2:	88fb      	ldrh	r3, [r7, #6]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	4b24      	ldr	r3, [pc, #144]	; (8004960 <adsr+0x2e8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4413      	add	r3, r2
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80048d8:	fb02 f201 	mul.w	r2, r2, r1
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80048ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ee:	4b16      	ldr	r3, [pc, #88]	; (8004948 <adsr+0x2d0>)
 80048f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80048f4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80048f8:	eef0 0a47 	vmov.f32	s1, s14
 80048fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004900:	f000 fafa 	bl	8004ef8 <gen_rampdown_angle2>
 8004904:	eef0 7a40 	vmov.f32	s15, s0
 8004908:	4a16      	ldr	r2, [pc, #88]	; (8004964 <adsr+0x2ec>)
 800490a:	00a3      	lsls	r3, r4, #2
 800490c:	4413      	add	r3, r2
 800490e:	edc3 7a00 	vstr	s15, [r3]
 8004912:	e079      	b.n	8004a08 <adsr+0x390>
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < release_start)
 8004914:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	461a      	mov	r2, r3
 800491c:	4b10      	ldr	r3, [pc, #64]	; (8004960 <adsr+0x2e8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4413      	add	r3, r2
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	fbb3 f1f2 	udiv	r1, r3, r2
 8004928:	fb02 f201 	mul.w	r2, r2, r1
 800492c:	1a9a      	subs	r2, r3, r2
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	429a      	cmp	r2, r3
 8004932:	d219      	bcs.n	8004968 <adsr+0x2f0>
			{
				// Sustain
				buffer_adsr_am[i] = adsr_settings.sustain_amp;
 8004934:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004936:	4a04      	ldr	r2, [pc, #16]	; (8004948 <adsr+0x2d0>)
 8004938:	6852      	ldr	r2, [r2, #4]
 800493a:	490a      	ldr	r1, [pc, #40]	; (8004964 <adsr+0x2ec>)
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	440b      	add	r3, r1
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	e061      	b.n	8004a08 <adsr+0x390>
 8004944:	200064f0 	.word	0x200064f0
 8004948:	20006524 	.word	0x20006524
 800494c:	20004450 	.word	0x20004450
 8004950:	2000651c 	.word	0x2000651c
 8004954:	20003450 	.word	0x20003450
 8004958:	45fa0000 	.word	0x45fa0000
 800495c:	40490fdb 	.word	0x40490fdb
 8004960:	20000440 	.word	0x20000440
 8004964:	20000240 	.word	0x20000240
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_start)
 8004968:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	461a      	mov	r2, r3
 8004970:	4bb0      	ldr	r3, [pc, #704]	; (8004c34 <adsr+0x5bc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4413      	add	r3, r2
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	fbb3 f1f2 	udiv	r1, r3, r2
 800497c:	fb02 f201 	mul.w	r2, r2, r1
 8004980:	1a9a      	subs	r2, r3, r2
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	429a      	cmp	r2, r3
 8004986:	d228      	bcs.n	80049da <adsr+0x362>
			{
				// Release
				buffer_adsr_am[i] = adsr_settings.sustain_amp * gen_rampdown_angle( (sample_count_adsr+(i-start-release_start)) % samples_cycle_adsr * angle_release);
 8004988:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 800498a:	4bab      	ldr	r3, [pc, #684]	; (8004c38 <adsr+0x5c0>)
 800498c:	ed93 8a01 	vldr	s16, [r3, #4]
 8004990:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	461a      	mov	r2, r3
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	1ad2      	subs	r2, r2, r3
 800499c:	4ba5      	ldr	r3, [pc, #660]	; (8004c34 <adsr+0x5bc>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4413      	add	r3, r2
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80049a8:	fb02 f201 	mul.w	r2, r2, r1
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80049ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049be:	eeb0 0a67 	vmov.f32	s0, s15
 80049c2:	f000 fa6b 	bl	8004e9c <gen_rampdown_angle>
 80049c6:	eef0 7a40 	vmov.f32	s15, s0
 80049ca:	ee68 7a27 	vmul.f32	s15, s16, s15
 80049ce:	4a9b      	ldr	r2, [pc, #620]	; (8004c3c <adsr+0x5c4>)
 80049d0:	00a3      	lsls	r3, r4, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	edc3 7a00 	vstr	s15, [r3]
 80049d8:	e016      	b.n	8004a08 <adsr+0x390>

			}
			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_end)
 80049da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	4b94      	ldr	r3, [pc, #592]	; (8004c34 <adsr+0x5bc>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4413      	add	r3, r2
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80049ee:	fb02 f201 	mul.w	r2, r2, r1
 80049f2:	1a9a      	subs	r2, r3, r2
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d206      	bcs.n	8004a08 <adsr+0x390>
			{
				// Blank
				buffer_adsr_am[i] = 0;
 80049fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049fc:	4a8f      	ldr	r2, [pc, #572]	; (8004c3c <adsr+0x5c4>)
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]

	// Generic ADSR envelope
	// The waveform contains 5 segments (asdr + a blank space)
	if(adsr_settings.mod == VCOamp || adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO)
	{
		for(i = start; i < end; i++)
 8004a08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a10:	88bb      	ldrh	r3, [r7, #4]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	f4ff af0d 	bcc.w	8004832 <adsr+0x1ba>

	/*
	 * ADSR frequency envelope.
	 * Uses the ADSR amplitude envelope and integrates each of the shapes.
	 */
	if(adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO)
 8004a18:	4b87      	ldr	r3, [pc, #540]	; (8004c38 <adsr+0x5c0>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d005      	beq.n	8004a2e <adsr+0x3b6>
 8004a22:	4b85      	ldr	r3, [pc, #532]	; (8004c38 <adsr+0x5c0>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b07      	cmp	r3, #7
 8004a2a:	f040 8180 	bne.w	8004d2e <adsr+0x6b6>
	{
		for(i = start; i < end; i++)
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a32:	e177      	b.n	8004d24 <adsr+0x6ac>
		{
			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			if( (sample_count_adsr+(i-start))%samples_cycle_adsr < decay_start)
 8004a34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a36:	88fb      	ldrh	r3, [r7, #6]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	4b7d      	ldr	r3, [pc, #500]	; (8004c34 <adsr+0x5bc>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4413      	add	r3, r2
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a48:	fb02 f201 	mul.w	r2, r2, r1
 8004a4c:	1a9a      	subs	r2, r3, r2
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d234      	bcs.n	8004abe <adsr+0x446>
			{
				// Attack
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8004a54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a58:	4978      	ldr	r1, [pc, #480]	; (8004c3c <adsr+0x5c4>)
 8004a5a:	0092      	lsls	r2, r2, #2
 8004a5c:	440a      	add	r2, r1
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	4977      	ldr	r1, [pc, #476]	; (8004c40 <adsr+0x5c8>)
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	601a      	str	r2, [r3, #0]
				if(i > 0)
 8004a68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d015      	beq.n	8004a9a <adsr+0x422>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 8004a6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a72:	4973      	ldr	r1, [pc, #460]	; (8004c40 <adsr+0x5c8>)
 8004a74:	0092      	lsls	r2, r2, #2
 8004a76:	440a      	add	r2, r1
 8004a78:	ed92 7a00 	vldr	s14, [r2]
 8004a7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a7e:	3a01      	subs	r2, #1
 8004a80:	496f      	ldr	r1, [pc, #444]	; (8004c40 <adsr+0x5c8>)
 8004a82:	0092      	lsls	r2, r2, #2
 8004a84:	440a      	add	r2, r1
 8004a86:	edd2 7a00 	vldr	s15, [r2]
 8004a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a8e:	4a6c      	ldr	r2, [pc, #432]	; (8004c40 <adsr+0x5c8>)
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	edc3 7a00 	vstr	s15, [r3]
 8004a98:	e141      	b.n	8004d1e <adsr+0x6a6>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 8004a9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a9c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004a9e:	4968      	ldr	r1, [pc, #416]	; (8004c40 <adsr+0x5c8>)
 8004aa0:	0092      	lsls	r2, r2, #2
 8004aa2:	440a      	add	r2, r1
 8004aa4:	ed92 7a00 	vldr	s14, [r2]
 8004aa8:	4a65      	ldr	r2, [pc, #404]	; (8004c40 <adsr+0x5c8>)
 8004aaa:	edd2 7a3f 	vldr	s15, [r2, #252]	; 0xfc
 8004aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ab2:	4a63      	ldr	r2, [pc, #396]	; (8004c40 <adsr+0x5c8>)
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	edc3 7a00 	vstr	s15, [r3]
 8004abc:	e12f      	b.n	8004d1e <adsr+0x6a6>
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < sustain_start)
 8004abe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	4b5b      	ldr	r3, [pc, #364]	; (8004c34 <adsr+0x5bc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4413      	add	r3, r2
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ad2:	fb02 f201 	mul.w	r2, r2, r1
 8004ad6:	1a9a      	subs	r2, r3, r2
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d234      	bcs.n	8004b48 <adsr+0x4d0>
			{
				// Decay
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8004ade:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ae0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ae2:	4956      	ldr	r1, [pc, #344]	; (8004c3c <adsr+0x5c4>)
 8004ae4:	0092      	lsls	r2, r2, #2
 8004ae6:	440a      	add	r2, r1
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	4955      	ldr	r1, [pc, #340]	; (8004c40 <adsr+0x5c8>)
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	601a      	str	r2, [r3, #0]
				if(i > 0)
 8004af2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d015      	beq.n	8004b24 <adsr+0x4ac>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 8004af8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004afa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004afc:	4950      	ldr	r1, [pc, #320]	; (8004c40 <adsr+0x5c8>)
 8004afe:	0092      	lsls	r2, r2, #2
 8004b00:	440a      	add	r2, r1
 8004b02:	ed92 7a00 	vldr	s14, [r2]
 8004b06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b08:	3a01      	subs	r2, #1
 8004b0a:	494d      	ldr	r1, [pc, #308]	; (8004c40 <adsr+0x5c8>)
 8004b0c:	0092      	lsls	r2, r2, #2
 8004b0e:	440a      	add	r2, r1
 8004b10:	edd2 7a00 	vldr	s15, [r2]
 8004b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b18:	4a49      	ldr	r2, [pc, #292]	; (8004c40 <adsr+0x5c8>)
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	edc3 7a00 	vstr	s15, [r3]
 8004b22:	e0fc      	b.n	8004d1e <adsr+0x6a6>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 8004b24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b28:	4945      	ldr	r1, [pc, #276]	; (8004c40 <adsr+0x5c8>)
 8004b2a:	0092      	lsls	r2, r2, #2
 8004b2c:	440a      	add	r2, r1
 8004b2e:	ed92 7a00 	vldr	s14, [r2]
 8004b32:	4a43      	ldr	r2, [pc, #268]	; (8004c40 <adsr+0x5c8>)
 8004b34:	edd2 7a3f 	vldr	s15, [r2, #252]	; 0xfc
 8004b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b3c:	4a40      	ldr	r2, [pc, #256]	; (8004c40 <adsr+0x5c8>)
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	edc3 7a00 	vstr	s15, [r3]
 8004b46:	e0ea      	b.n	8004d1e <adsr+0x6a6>
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < release_start)
 8004b48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4b38      	ldr	r3, [pc, #224]	; (8004c34 <adsr+0x5bc>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4413      	add	r3, r2
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b5c:	fb02 f201 	mul.w	r2, r2, r1
 8004b60:	1a9a      	subs	r2, r3, r2
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d27e      	bcs.n	8004c66 <adsr+0x5ee>
			{
				// Sustain
				// DO this only once--get last delta from previous section.
				if( (sample_count_adsr+(i-start))%samples_cycle_adsr == sustain_start)
 8004b68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4b30      	ldr	r3, [pc, #192]	; (8004c34 <adsr+0x5bc>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4413      	add	r3, r2
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b7c:	fb02 f201 	mul.w	r2, r2, r1
 8004b80:	1a9a      	subs	r2, r3, r2
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d13f      	bne.n	8004c08 <adsr+0x590>
				{
					if(i > 1)
 8004b88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d913      	bls.n	8004bb6 <adsr+0x53e>
					{
						delta = buffer_adsr_fm[i-1] - buffer_adsr_fm[i-2];
 8004b8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b90:	3b01      	subs	r3, #1
 8004b92:	4a2b      	ldr	r2, [pc, #172]	; (8004c40 <adsr+0x5c8>)
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	ed93 7a00 	vldr	s14, [r3]
 8004b9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b9e:	3b02      	subs	r3, #2
 8004ba0:	4a27      	ldr	r2, [pc, #156]	; (8004c40 <adsr+0x5c8>)
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	edd3 7a00 	vldr	s15, [r3]
 8004baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bae:	4b25      	ldr	r3, [pc, #148]	; (8004c44 <adsr+0x5cc>)
 8004bb0:	edc3 7a00 	vstr	s15, [r3]
 8004bb4:	e020      	b.n	8004bf8 <adsr+0x580>
					}
					else if(i == 0)
 8004bb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10b      	bne.n	8004bd4 <adsr+0x55c>
					{
						delta = buffer_adsr_fm[LENGTH_BUFFER-1] - buffer_adsr_fm[LENGTH_BUFFER-2];
 8004bbc:	4b20      	ldr	r3, [pc, #128]	; (8004c40 <adsr+0x5c8>)
 8004bbe:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 8004bc2:	4b1f      	ldr	r3, [pc, #124]	; (8004c40 <adsr+0x5c8>)
 8004bc4:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8004bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <adsr+0x5cc>)
 8004bce:	edc3 7a00 	vstr	s15, [r3]
 8004bd2:	e011      	b.n	8004bf8 <adsr+0x580>
					}
					else if(i == 1)
 8004bd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d10e      	bne.n	8004bf8 <adsr+0x580>
					{
						delta = buffer_adsr_fm[i-1] - buffer_adsr_fm[LENGTH_BUFFER-1];
 8004bda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	4a18      	ldr	r2, [pc, #96]	; (8004c40 <adsr+0x5c8>)
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	ed93 7a00 	vldr	s14, [r3]
 8004be8:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <adsr+0x5c8>)
 8004bea:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8004bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bf2:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <adsr+0x5cc>)
 8004bf4:	edc3 7a00 	vstr	s15, [r3]
					}
					buffer_adsr_fm[i] = 0.0;
 8004bf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bfa:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <adsr+0x5c8>)
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e08a      	b.n	8004d1e <adsr+0x6a6>
				}
				else
				{
					if(i > 0)
 8004c08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01c      	beq.n	8004c48 <adsr+0x5d0>
					{
						buffer_adsr_fm[i] = buffer_adsr_fm[i-1] + delta;
 8004c0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c12:	3a01      	subs	r2, #1
 8004c14:	490a      	ldr	r1, [pc, #40]	; (8004c40 <adsr+0x5c8>)
 8004c16:	0092      	lsls	r2, r2, #2
 8004c18:	440a      	add	r2, r1
 8004c1a:	ed92 7a00 	vldr	s14, [r2]
 8004c1e:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <adsr+0x5cc>)
 8004c20:	edd2 7a00 	vldr	s15, [r2]
 8004c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c28:	4a05      	ldr	r2, [pc, #20]	; (8004c40 <adsr+0x5c8>)
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	edc3 7a00 	vstr	s15, [r3]
 8004c32:	e074      	b.n	8004d1e <adsr+0x6a6>
 8004c34:	20000440 	.word	0x20000440
 8004c38:	20006524 	.word	0x20006524
 8004c3c:	20000240 	.word	0x20000240
 8004c40:	20000340 	.word	0x20000340
 8004c44:	2000645c 	.word	0x2000645c
					}
					else
					{
						buffer_adsr_fm[i] = buffer_adsr_fm[LENGTH_BUFFER-1] + delta;
 8004c48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c4a:	4a45      	ldr	r2, [pc, #276]	; (8004d60 <adsr+0x6e8>)
 8004c4c:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 8004c50:	4a44      	ldr	r2, [pc, #272]	; (8004d64 <adsr+0x6ec>)
 8004c52:	edd2 7a00 	vldr	s15, [r2]
 8004c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c5a:	4a41      	ldr	r2, [pc, #260]	; (8004d60 <adsr+0x6e8>)
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	edc3 7a00 	vstr	s15, [r3]
 8004c64:	e05b      	b.n	8004d1e <adsr+0x6a6>
					}
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_start)
 8004c66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c68:	88fb      	ldrh	r3, [r7, #6]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4b3e      	ldr	r3, [pc, #248]	; (8004d68 <adsr+0x6f0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4413      	add	r3, r2
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c7a:	fb02 f201 	mul.w	r2, r2, r1
 8004c7e:	1a9a      	subs	r2, r3, r2
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d234      	bcs.n	8004cf0 <adsr+0x678>
			{
				// Release
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8004c86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c88:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c8a:	4938      	ldr	r1, [pc, #224]	; (8004d6c <adsr+0x6f4>)
 8004c8c:	0092      	lsls	r2, r2, #2
 8004c8e:	440a      	add	r2, r1
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	4933      	ldr	r1, [pc, #204]	; (8004d60 <adsr+0x6e8>)
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	601a      	str	r2, [r3, #0]
				if(i > 0)
 8004c9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d015      	beq.n	8004ccc <adsr+0x654>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 8004ca0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ca2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004ca4:	492e      	ldr	r1, [pc, #184]	; (8004d60 <adsr+0x6e8>)
 8004ca6:	0092      	lsls	r2, r2, #2
 8004ca8:	440a      	add	r2, r1
 8004caa:	ed92 7a00 	vldr	s14, [r2]
 8004cae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004cb0:	3a01      	subs	r2, #1
 8004cb2:	492b      	ldr	r1, [pc, #172]	; (8004d60 <adsr+0x6e8>)
 8004cb4:	0092      	lsls	r2, r2, #2
 8004cb6:	440a      	add	r2, r1
 8004cb8:	edd2 7a00 	vldr	s15, [r2]
 8004cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cc0:	4a27      	ldr	r2, [pc, #156]	; (8004d60 <adsr+0x6e8>)
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	edc3 7a00 	vstr	s15, [r3]
 8004cca:	e028      	b.n	8004d1e <adsr+0x6a6>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 8004ccc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004cd0:	4923      	ldr	r1, [pc, #140]	; (8004d60 <adsr+0x6e8>)
 8004cd2:	0092      	lsls	r2, r2, #2
 8004cd4:	440a      	add	r2, r1
 8004cd6:	ed92 7a00 	vldr	s14, [r2]
 8004cda:	4a21      	ldr	r2, [pc, #132]	; (8004d60 <adsr+0x6e8>)
 8004cdc:	edd2 7a3f 	vldr	s15, [r2, #252]	; 0xfc
 8004ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce4:	4a1e      	ldr	r2, [pc, #120]	; (8004d60 <adsr+0x6e8>)
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	edc3 7a00 	vstr	s15, [r3]
 8004cee:	e016      	b.n	8004d1e <adsr+0x6a6>
				}
			}
			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_end)
 8004cf0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <adsr+0x6f0>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d04:	fb02 f201 	mul.w	r2, r2, r1
 8004d08:	1a9a      	subs	r2, r3, r2
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d206      	bcs.n	8004d1e <adsr+0x6a6>
			{
				// Blank
				buffer_adsr_fm[i] = 0;
 8004d10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d12:	4a13      	ldr	r2, [pc, #76]	; (8004d60 <adsr+0x6e8>)
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
	 * ADSR frequency envelope.
	 * Uses the ADSR amplitude envelope and integrates each of the shapes.
	 */
	if(adsr_settings.mod == VCOfreq || adsr_settings.mod == DualMode_VCO)
	{
		for(i = start; i < end; i++)
 8004d1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d20:	3301      	adds	r3, #1
 8004d22:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004d26:	88bb      	ldrh	r3, [r7, #4]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	f4ff ae83 	bcc.w	8004a34 <adsr+0x3bc>
				// Blank
				buffer_adsr_fm[i] = 0;
			}
		}
	}
	sample_count_adsr = sample_count_adsr + (i - start);
 8004d2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004d30:	88fb      	ldrh	r3, [r7, #6]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <adsr+0x6f0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <adsr+0x6f0>)
 8004d3e:	6013      	str	r3, [r2, #0]
	sample_count_adsr = sample_count_adsr % samples_cycle_adsr;
 8004d40:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <adsr+0x6f0>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d4a:	fb02 f201 	mul.w	r2, r2, r1
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	4a05      	ldr	r2, [pc, #20]	; (8004d68 <adsr+0x6f0>)
 8004d52:	6013      	str	r3, [r2, #0]
}
 8004d54:	bf00      	nop
 8004d56:	3734      	adds	r7, #52	; 0x34
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	ecbd 8b02 	vpop	{d8}
 8004d5e:	bd90      	pop	{r4, r7, pc}
 8004d60:	20000340 	.word	0x20000340
 8004d64:	2000645c 	.word	0x2000645c
 8004d68:	20000440 	.word	0x20000440
 8004d6c:	20000240 	.word	0x20000240

08004d70 <gen_square_angle>:

/* Parameters:
 * 	angle: normalized angle between 0 and 2*PI.  Similar to sine function.
 */
float32_t gen_square_angle(float32_t angle)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	ed87 0a01 	vstr	s0, [r7, #4]
	angle = fast_fmod(angle, 2*PI);
 8004d7a:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8004db4 <gen_square_angle+0x44>
 8004d7e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004d82:	f000 f9cd 	bl	8005120 <fast_fmod>
 8004d86:	ed87 0a01 	vstr	s0, [r7, #4]
	if (angle < PI)
 8004d8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d8e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004db8 <gen_square_angle+0x48>
 8004d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9a:	d501      	bpl.n	8004da0 <gen_square_angle+0x30>
	{
		return -1;
 8004d9c:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <gen_square_angle+0x4c>)
 8004d9e:	e001      	b.n	8004da4 <gen_square_angle+0x34>
	}
	return 1;
 8004da0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004da4:	ee07 3a90 	vmov	s15, r3
}
 8004da8:	eeb0 0a67 	vmov.f32	s0, s15
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40c90fdb 	.word	0x40c90fdb
 8004db8:	40490fdb 	.word	0x40490fdb
 8004dbc:	bf800000 	.word	0xbf800000

08004dc0 <gen_sawtooth_angle>:


float32_t gen_sawtooth_angle(float32_t angle)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0;
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]
	float32_t val = 0.0;
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8004dd6:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8004e14 <gen_sawtooth_angle+0x54>
 8004dda:	ed97 0a01 	vldr	s0, [r7, #4]
 8004dde:	f000 f99f 	bl	8005120 <fast_fmod>
 8004de2:	ed87 0a01 	vstr	s0, [r7, #4]

	// y = mx + b
	m = ONE_DIV_PI;
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <gen_sawtooth_angle+0x58>)
 8004de8:	60fb      	str	r3, [r7, #12]
	val = -1+angle*m;
 8004dea:	ed97 7a01 	vldr	s14, [r7, #4]
 8004dee:	edd7 7a03 	vldr	s15, [r7, #12]
 8004df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004dfe:	edc7 7a02 	vstr	s15, [r7, #8]
	return val;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	ee07 3a90 	vmov	s15, r3
}
 8004e08:	eeb0 0a67 	vmov.f32	s0, s15
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40c90fdb 	.word	0x40c90fdb
 8004e18:	3ea2f983 	.word	0x3ea2f983

08004e1c <gen_sawtooth_integral_angle>:


float32_t gen_sawtooth_integral_angle(float32_t angle)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0;
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0;
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8004e32:	eddf 0a18 	vldr	s1, [pc, #96]	; 8004e94 <gen_sawtooth_integral_angle+0x78>
 8004e36:	ed97 0a01 	vldr	s0, [r7, #4]
 8004e3a:	f000 f971 	bl	8005120 <fast_fmod>
 8004e3e:	ed87 0a01 	vstr	s0, [r7, #4]
	m = ONE_DIV_2_PI;
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <gen_sawtooth_integral_angle+0x7c>)
 8004e44:	60bb      	str	r3, [r7, #8]
	val = m*angle;			// Generate linear value between 0 and 1
 8004e46:	ed97 7a02 	vldr	s14, [r7, #8]
 8004e4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e52:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*val;			// Square it.  Produces parabola y: 0 to 1
 8004e56:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e62:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*2;			// Double it.
 8004e66:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e6a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004e6e:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val - 1;			// Shift it down
 8004e72:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e7e:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	ee07 3a90 	vmov	s15, r3
}
 8004e88:	eeb0 0a67 	vmov.f32	s0, s15
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40c90fdb 	.word	0x40c90fdb
 8004e98:	3e22f983 	.word	0x3e22f983

08004e9c <gen_rampdown_angle>:
/*
 * Generate ramp value from +1 down to 0 based on angle.
 * Parameter angle is a radian.
 */
float32_t gen_rampdown_angle(float32_t angle)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0;
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]
	float32_t val = 0.0;
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8004eb2:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8004ef0 <gen_rampdown_angle+0x54>
 8004eb6:	ed97 0a01 	vldr	s0, [r7, #4]
 8004eba:	f000 f931 	bl	8005120 <fast_fmod>
 8004ebe:	ed87 0a01 	vstr	s0, [r7, #4]

	// y = mx + b
	m = -ONE_DIV_PI;
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <gen_rampdown_angle+0x58>)
 8004ec4:	60fb      	str	r3, [r7, #12]
	val = 1.0 + angle*m;
 8004ec6:	ed97 7a01 	vldr	s14, [r7, #4]
 8004eca:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ed6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004eda:	edc7 7a02 	vstr	s15, [r7, #8]
	return val;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	ee07 3a90 	vmov	s15, r3
}
 8004ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40c90fdb 	.word	0x40c90fdb
 8004ef4:	bea2f983 	.word	0xbea2f983

08004ef8 <gen_rampdown_angle2>:


float32_t gen_rampdown_angle2( float32_t angle, float32_t min, float32_t max)
{
 8004ef8:	b590      	push	{r4, r7, lr}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8004f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8004f06:	ed87 1a01 	vstr	s2, [r7, #4]
	float32_t m = 0.0;
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
	float32_t val = 0.0;
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	613b      	str	r3, [r7, #16]

	angle = fast_fmod(angle, TWO_PI);
 8004f16:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8004f88 <gen_rampdown_angle2+0x90>
 8004f1a:	ed97 0a03 	vldr	s0, [r7, #12]
 8004f1e:	f000 f8ff 	bl	8005120 <fast_fmod>
 8004f22:	ed87 0a03 	vstr	s0, [r7, #12]

	// y = mx + b
	m = (min - max) * ONE_DIV_PI;
 8004f26:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f32:	ee17 0a90 	vmov	r0, s15
 8004f36:	f7fb fab3 	bl	80004a0 <__aeabi_f2d>
 8004f3a:	a311      	add	r3, pc, #68	; (adr r3, 8004f80 <gen_rampdown_angle2+0x88>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f7fb fb02 	bl	8000548 <__aeabi_dmul>
 8004f44:	4603      	mov	r3, r0
 8004f46:	460c      	mov	r4, r1
 8004f48:	4618      	mov	r0, r3
 8004f4a:	4621      	mov	r1, r4
 8004f4c:	f7fb fd0e 	bl	800096c <__aeabi_d2f>
 8004f50:	4603      	mov	r3, r0
 8004f52:	617b      	str	r3, [r7, #20]
	val = 1.0 + angle*m;
 8004f54:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f58:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f68:	edc7 7a04 	vstr	s15, [r7, #16]


	return val;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	ee07 3a90 	vmov	s15, r3
}
 8004f72:	eeb0 0a67 	vmov.f32	s0, s15
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd90      	pop	{r4, r7, pc}
 8004f7c:	f3af 8000 	nop.w
 8004f80:	6dc8bdc4 	.word	0x6dc8bdc4
 8004f84:	3fd45f30 	.word	0x3fd45f30
 8004f88:	40c90fdb 	.word	0x40c90fdb

08004f8c <gen_triangle_angle>:


float32_t gen_triangle_angle(float32_t angle)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0;
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0;
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	60bb      	str	r3, [r7, #8]

	// Increase from a negative value to its opposite value. Eg. -1 to 1 over 1/2 the wave's period
	// Then decrease from 1 to -1 over 1/2 the wave's period

	angle = fast_fmod(angle, 2*PI);
 8004fa2:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800500c <gen_triangle_angle+0x80>
 8004fa6:	ed97 0a01 	vldr	s0, [r7, #4]
 8004faa:	f000 f8b9 	bl	8005120 <fast_fmod>
 8004fae:	ed87 0a01 	vstr	s0, [r7, #4]
	m = TWO_DIV_PI;
 8004fb2:	4b17      	ldr	r3, [pc, #92]	; (8005010 <gen_triangle_angle+0x84>)
 8004fb4:	60bb      	str	r3, [r7, #8]
	if (angle < PI)
 8004fb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fba:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005014 <gen_triangle_angle+0x88>
 8004fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc6:	d50d      	bpl.n	8004fe4 <gen_triangle_angle+0x58>
	{
		val = -1 + m*angle;
 8004fc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8004fcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004fdc:	edc7 7a03 	vstr	s15, [r7, #12]
		return val;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	e00c      	b.n	8004ffe <gen_triangle_angle+0x72>
	}
	// Make sure difference can be negative.
	// return amp + (m * (int32_t)(samples_half_cycle - current_sample));
	val =  3 - m*angle;
 8004fe4:	ed97 7a02 	vldr	s14, [r7, #8]
 8004fe8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ff8:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	ee07 3a90 	vmov	s15, r3
}
 8005002:	eeb0 0a67 	vmov.f32	s0, s15
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40c90fdb 	.word	0x40c90fdb
 8005010:	3f22f983 	.word	0x3f22f983
 8005014:	40490fdb 	.word	0x40490fdb

08005018 <gen_triangle_integral_angle>:

// Integral of triangle wave is convex parabola going up and then concave parabola going down.
float32_t gen_triangle_integral_angle(float32_t angle)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0;
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0;
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, 2*PI);		// TODO: pull this out into generate_waveforms().
 800502e:	eddf 0a39 	vldr	s1, [pc, #228]	; 8005114 <gen_triangle_integral_angle+0xfc>
 8005032:	ed97 0a01 	vldr	s0, [r7, #4]
 8005036:	f000 f873 	bl	8005120 <fast_fmod>
 800503a:	ed87 0a01 	vstr	s0, [r7, #4]
	m = ONE_DIV_PI;
 800503e:	4b36      	ldr	r3, [pc, #216]	; (8005118 <gen_triangle_integral_angle+0x100>)
 8005040:	60bb      	str	r3, [r7, #8]
	if (angle < PI)
 8005042:	edd7 7a01 	vldr	s15, [r7, #4]
 8005046:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800511c <gen_triangle_integral_angle+0x104>
 800504a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005052:	d528      	bpl.n	80050a6 <gen_triangle_integral_angle+0x8e>

	if(angle < PI)
 8005054:	edd7 7a01 	vldr	s15, [r7, #4]
 8005058:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800511c <gen_triangle_integral_angle+0x104>
 800505c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005064:	d51f      	bpl.n	80050a6 <gen_triangle_integral_angle+0x8e>
	{
		val = m*angle;			// Generate linear value between 0 and 1
 8005066:	ed97 7a02 	vldr	s14, [r7, #8]
 800506a:	edd7 7a01 	vldr	s15, [r7, #4]
 800506e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005072:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val*val;			// Square it.  Produces parabola y: 0 to 1
 8005076:	ed97 7a03 	vldr	s14, [r7, #12]
 800507a:	edd7 7a03 	vldr	s15, [r7, #12]
 800507e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005082:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val*2;			// Double it.
 8005086:	edd7 7a03 	vldr	s15, [r7, #12]
 800508a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800508e:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val - 1;			// Shift it down
 8005092:	edd7 7a03 	vldr	s15, [r7, #12]
 8005096:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800509a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800509e:	edc7 7a03 	vstr	s15, [r7, #12]
		return val;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	e02e      	b.n	8005104 <gen_triangle_integral_angle+0xec>
	}

	angle = angle - PI;
 80050a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80050aa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800511c <gen_triangle_integral_angle+0x104>
 80050ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050b2:	edc7 7a01 	vstr	s15, [r7, #4]
	val = m*angle;			// Generate linear value between 0 and 1
 80050b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80050ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80050be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c2:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*val;			// Square it.  Produces parabola y: 0 to 1
 80050c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80050ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80050ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d2:	edc7 7a03 	vstr	s15, [r7, #12]
	val = 1 - val;			// Turn it upside down
 80050d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050da:	edd7 7a03 	vldr	s15, [r7, #12]
 80050de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050e2:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*2;			// Double it
 80050e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80050ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050ee:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val - 1;			// Shift it down
 80050f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80050f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050fe:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	ee07 3a90 	vmov	s15, r3
}
 8005108:	eeb0 0a67 	vmov.f32	s0, s15
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40c90fdb 	.word	0x40c90fdb
 8005118:	3ea2f983 	.word	0x3ea2f983
 800511c:	40490fdb 	.word	0x40490fdb

08005120 <fast_fmod>:
 * Modified it to work with float32_t.
 * NOTE: Possible alternative found here: https://stackoverflow.com/questions/26342823/implementation-of-fmod-function
 * 	return (a - b * floor(a / b));
 */
float32_t fast_fmod(float32_t x,float32_t y)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	ed87 0a01 	vstr	s0, [r7, #4]
 800512a:	edc7 0a00 	vstr	s1, [r7]
	float32_t a;
	return ( (a = x/y ) - (uint32_t)a ) * y;
 800512e:	edd7 6a01 	vldr	s13, [r7, #4]
 8005132:	ed97 7a00 	vldr	s14, [r7]
 8005136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800513a:	edc7 7a03 	vstr	s15, [r7, #12]
 800513e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514a:	ed97 7a03 	vldr	s14, [r7, #12]
 800514e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005152:	edd7 7a00 	vldr	s15, [r7]
 8005156:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800515a:	eeb0 0a67 	vmov.f32	s0, s15
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <moving_avg>:

/*
 * Found here: https://gist.github.com/bmccormack/d12f4bf0c96423d03f82
 */
uint32_t moving_avg(uint32_t *ptrArrNumbers, uint32_t *ptrSum, uint32_t pos, uint32_t len, uint16_t nextNum)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
  //Subtract the oldest number from the prev sum, add the new number
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	68f9      	ldr	r1, [r7, #12]
 8005180:	440b      	add	r3, r1
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	1ad2      	subs	r2, r2, r3
 8005186:	8b3b      	ldrh	r3, [r7, #24]
 8005188:	441a      	add	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	601a      	str	r2, [r3, #0]
  //Assign the nextNum to the position in the array
  ptrArrNumbers[pos] = nextNum;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4413      	add	r3, r2
 8005196:	8b3a      	ldrh	r2, [r7, #24]
 8005198:	601a      	str	r2, [r3, #0]
  //return the average
  return (uint32_t) *ptrSum / len;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <pseudo_log>:
/*
 * Make adc values seems as though they came from a log-taper potentiometer.
 */
// TODO: use int as input instead ... otherwise difficult to compare taper cutoff.
uint16_t pseudo_log(uint16_t x)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b089      	sub	sp, #36	; 0x24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	80fb      	strh	r3, [r7, #6]
	float32_t y1 = 0.0;
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	61fb      	str	r3, [r7, #28]
	float32_t y2 = 0.0;
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	61bb      	str	r3, [r7, #24]
	const uint16_t max = 4095;
 80051c6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80051ca:	82fb      	strh	r3, [r7, #22]
	const uint16_t xe = 3500;
 80051cc:	f640 53ac 	movw	r3, #3500	; 0xdac
 80051d0:	82bb      	strh	r3, [r7, #20]
	const float32_t m1 = 0.1;
 80051d2:	4b3a      	ldr	r3, [pc, #232]	; (80052bc <pseudo_log+0x10c>)
 80051d4:	613b      	str	r3, [r7, #16]
	uint16_t ye = m1*xe;
 80051d6:	8abb      	ldrh	r3, [r7, #20]
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80051e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ec:	edc7 7a00 	vstr	s15, [r7]
 80051f0:	883b      	ldrh	r3, [r7, #0]
 80051f2:	81fb      	strh	r3, [r7, #14]
	uint16_t m2 = (float32_t) (max - ye)/(max - xe);
 80051f4:	8afa      	ldrh	r2, [r7, #22]
 80051f6:	89fb      	ldrh	r3, [r7, #14]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005202:	8afa      	ldrh	r2, [r7, #22]
 8005204:	8abb      	ldrh	r3, [r7, #20]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	ee07 3a90 	vmov	s15, r3
 800520c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005218:	edc7 7a00 	vstr	s15, [r7]
 800521c:	883b      	ldrh	r3, [r7, #0]
 800521e:	81bb      	strh	r3, [r7, #12]

	float32_t b = 0.0;
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]

	y1 = (uint16_t) ((float32_t) m1 * x);
 8005226:	88fb      	ldrh	r3, [r7, #6]
 8005228:	ee07 3a90 	vmov	s15, r3
 800522c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005230:	edd7 7a04 	vldr	s15, [r7, #16]
 8005234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800523c:	edc7 7a00 	vstr	s15, [r7]
 8005240:	883b      	ldrh	r3, [r7, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524c:	edc7 7a07 	vstr	s15, [r7, #28]

	// Gradual taper.
	if(x < xe)
 8005250:	88fa      	ldrh	r2, [r7, #6]
 8005252:	8abb      	ldrh	r3, [r7, #20]
 8005254:	429a      	cmp	r2, r3
 8005256:	d208      	bcs.n	800526a <pseudo_log+0xba>
	{
		return (uint16_t) y1;
 8005258:	edd7 7a07 	vldr	s15, [r7, #28]
 800525c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005260:	edc7 7a00 	vstr	s15, [r7]
 8005264:	883b      	ldrh	r3, [r7, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	e021      	b.n	80052ae <pseudo_log+0xfe>
	}

	// Fast taper.
	b = ye - m2*xe;
 800526a:	89fa      	ldrh	r2, [r7, #14]
 800526c:	89bb      	ldrh	r3, [r7, #12]
 800526e:	8ab9      	ldrh	r1, [r7, #20]
 8005270:	fb01 f303 	mul.w	r3, r1, r3
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800527e:	edc7 7a02 	vstr	s15, [r7, #8]
	y2 = m2*x + b;		// y = mx+b
 8005282:	89bb      	ldrh	r3, [r7, #12]
 8005284:	88fa      	ldrh	r2, [r7, #6]
 8005286:	fb02 f303 	mul.w	r3, r2, r3
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005292:	edd7 7a02 	vldr	s15, [r7, #8]
 8005296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800529a:	edc7 7a06 	vstr	s15, [r7, #24]

	return (uint16_t) y2;
 800529e:	edd7 7a06 	vldr	s15, [r7, #24]
 80052a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a6:	edc7 7a00 	vstr	s15, [r7]
 80052aa:	883b      	ldrh	r3, [r7, #0]
 80052ac:	b29b      	uxth	r3, r3
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3724      	adds	r7, #36	; 0x24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	3dcccccd 	.word	0x3dcccccd

080052c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80052c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80052c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80052c6:	e003      	b.n	80052d0 <LoopCopyDataInit>

080052c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80052c8:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80052ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80052cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80052ce:	3104      	adds	r1, #4

080052d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80052d0:	480b      	ldr	r0, [pc, #44]	; (8005300 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80052d2:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80052d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80052d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80052d8:	d3f6      	bcc.n	80052c8 <CopyDataInit>
  ldr  r2, =_sbss
 80052da:	4a0b      	ldr	r2, [pc, #44]	; (8005308 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80052dc:	e002      	b.n	80052e4 <LoopFillZerobss>

080052de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80052de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80052e0:	f842 3b04 	str.w	r3, [r2], #4

080052e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80052e4:	4b09      	ldr	r3, [pc, #36]	; (800530c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80052e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80052e8:	d3f9      	bcc.n	80052de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80052ea:	f000 f92b 	bl	8005544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052ee:	f000 fed1 	bl	8006094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052f2:	f7fe fb47 	bl	8003984 <main>
  bx  lr    
 80052f6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80052f8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80052fc:	08006aa4 	.word	0x08006aa4
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005300:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005304:	2000009c 	.word	0x2000009c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8005308:	2000009c 	.word	0x2000009c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800530c:	20006564 	.word	0x20006564

08005310 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005310:	e7fe      	b.n	8005310 <CAN1_RX0_IRQHandler>
	...

08005314 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
}
 8005318:	bf00      	nop
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop

08005324 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8005328:	e7fe      	b.n	8005328 <HardFault_Handler+0x4>
 800532a:	bf00      	nop

0800532c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8005330:	e7fe      	b.n	8005330 <MemManage_Handler+0x4>
 8005332:	bf00      	nop

08005334 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8005338:	e7fe      	b.n	8005338 <BusFault_Handler+0x4>
 800533a:	bf00      	nop

0800533c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8005340:	e7fe      	b.n	8005340 <UsageFault_Handler+0x4>
 8005342:	bf00      	nop

08005344 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
}
 8005348:	bf00      	nop
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop

08005354 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
}
 8005358:	bf00      	nop
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop

08005364 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
}
 8005368:	bf00      	nop
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop

08005374 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop

08005384 <EXTI0_IRQHandler>:


/*
 * interrupt handler for up button
 */
void EXTI0_IRQHandler(void){
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line0);
 8005388:	2001      	movs	r0, #1
 800538a:	f7fc f8a3 	bl	80014d4 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 800538e:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <EXTI0_IRQHandler+0x2c>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <EXTI0_IRQHandler+0x26>
		menubutton.button = up;
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <EXTI0_IRQHandler+0x2c>)
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 800539c:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <EXTI0_IRQHandler+0x2c>)
 800539e:	2201      	movs	r2, #1
 80053a0:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 80053a2:	2101      	movs	r1, #1
 80053a4:	4803      	ldr	r0, [pc, #12]	; (80053b4 <EXTI0_IRQHandler+0x30>)
 80053a6:	f7fd f819 	bl	80023dc <TIM_Cmd>
	}
}
 80053aa:	bf00      	nop
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	200064e8 	.word	0x200064e8
 80053b4:	40000400 	.word	0x40000400

080053b8 <EXTI1_IRQHandler>:


/*
 * interrupt handler for down button
 */
void EXTI1_IRQHandler(void){
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line1);
 80053bc:	2002      	movs	r0, #2
 80053be:	f7fc f889 	bl	80014d4 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 80053c2:	4b08      	ldr	r3, [pc, #32]	; (80053e4 <EXTI1_IRQHandler+0x2c>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <EXTI1_IRQHandler+0x26>
		menubutton.button = down;
 80053ca:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <EXTI1_IRQHandler+0x2c>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <EXTI1_IRQHandler+0x2c>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 80053d6:	2101      	movs	r1, #1
 80053d8:	4803      	ldr	r0, [pc, #12]	; (80053e8 <EXTI1_IRQHandler+0x30>)
 80053da:	f7fc ffff 	bl	80023dc <TIM_Cmd>
	}
}
 80053de:	bf00      	nop
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	200064e8 	.word	0x200064e8
 80053e8:	40000400 	.word	0x40000400

080053ec <EXTI2_IRQHandler>:


/*
 * interrupt handler for back button
 */
void EXTI2_IRQHandler(void){
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line2);
 80053f0:	2004      	movs	r0, #4
 80053f2:	f7fc f86f 	bl	80014d4 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 80053f6:	4b08      	ldr	r3, [pc, #32]	; (8005418 <EXTI2_IRQHandler+0x2c>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d109      	bne.n	8005412 <EXTI2_IRQHandler+0x26>
		menubutton.button = back;
 80053fe:	4b06      	ldr	r3, [pc, #24]	; (8005418 <EXTI2_IRQHandler+0x2c>)
 8005400:	2202      	movs	r2, #2
 8005402:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <EXTI2_IRQHandler+0x2c>)
 8005406:	2201      	movs	r2, #1
 8005408:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 800540a:	2101      	movs	r1, #1
 800540c:	4803      	ldr	r0, [pc, #12]	; (800541c <EXTI2_IRQHandler+0x30>)
 800540e:	f7fc ffe5 	bl	80023dc <TIM_Cmd>
	}

}
 8005412:	bf00      	nop
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	200064e8 	.word	0x200064e8
 800541c:	40000400 	.word	0x40000400

08005420 <EXTI3_IRQHandler>:


/*
 * interrupt handler for enter button
 */
void EXTI3_IRQHandler(void){
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line3);
 8005424:	2008      	movs	r0, #8
 8005426:	f7fc f855 	bl	80014d4 <EXTI_ClearITPendingBit>

	if(menubutton.button_state == NOT_ACTIVE){
 800542a:	4b08      	ldr	r3, [pc, #32]	; (800544c <EXTI3_IRQHandler+0x2c>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <EXTI3_IRQHandler+0x26>
		menubutton.button = enter;
 8005432:	4b06      	ldr	r3, [pc, #24]	; (800544c <EXTI3_IRQHandler+0x2c>)
 8005434:	2203      	movs	r2, #3
 8005436:	701a      	strb	r2, [r3, #0]
		menubutton.button_state = ACTIVE;
 8005438:	4b04      	ldr	r3, [pc, #16]	; (800544c <EXTI3_IRQHandler+0x2c>)
 800543a:	2201      	movs	r2, #1
 800543c:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 800543e:	2101      	movs	r1, #1
 8005440:	4803      	ldr	r0, [pc, #12]	; (8005450 <EXTI3_IRQHandler+0x30>)
 8005442:	f7fc ffcb 	bl	80023dc <TIM_Cmd>
	}
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	200064e8 	.word	0x200064e8
 8005450:	40000400 	.word	0x40000400

08005454 <EXTI9_5_IRQHandler>:

//EXTI9_5_IRQn used for selector

void EXTI9_5_IRQHandler(void){
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0

	EXTI_ClearITPendingBit(EXTI_Line6 | EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9);
 8005458:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 800545c:	f7fc f83a 	bl	80014d4 <EXTI_ClearITPendingBit>

	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){			//is debounce timer off
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <EXTI9_5_IRQHandler+0x28>)
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d103      	bne.n	8005476 <EXTI9_5_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);								//turn on debounce timer
 800546e:	2101      	movs	r1, #1
 8005470:	4802      	ldr	r0, [pc, #8]	; (800547c <EXTI9_5_IRQHandler+0x28>)
 8005472:	f7fc ffb3 	bl	80023dc <TIM_Cmd>
	}
}
 8005476:	bf00      	nop
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40000800 	.word	0x40000800

08005480 <EXTI15_10_IRQHandler>:




//EXTI15_10_IRQn used for selector
void EXTI15_10_IRQHandler(void){
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15);
 8005484:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8005488:	f7fc f824 	bl	80014d4 <EXTI_ClearITPendingBit>

	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){		//is debounce timer off
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <EXTI15_10_IRQHandler+0x28>)
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <EXTI15_10_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);							//turn on debounce timer
 800549a:	2101      	movs	r1, #1
 800549c:	4802      	ldr	r0, [pc, #8]	; (80054a8 <EXTI15_10_IRQHandler+0x28>)
 800549e:	f7fc ff9d 	bl	80023dc <TIM_Cmd>
	}
}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40000800 	.word	0x40000800

080054ac <TIM3_IRQHandler>:



// Timer for limiting button pushes 100ms
void TIM3_IRQHandler(){
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0

	TIM_Cmd(TIM3, DISABLE);
 80054b2:	2100      	movs	r1, #0
 80054b4:	4813      	ldr	r0, [pc, #76]	; (8005504 <TIM3_IRQHandler+0x58>)
 80054b6:	f7fc ff91 	bl	80023dc <TIM_Cmd>
	int temp = menubutton.button;						//stop timer
 80054ba:	4b13      	ldr	r3, [pc, #76]	; (8005508 <TIM3_IRQHandler+0x5c>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	607b      	str	r3, [r7, #4]
	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);			//clear interrupt
 80054c0:	2101      	movs	r1, #1
 80054c2:	4810      	ldr	r0, [pc, #64]	; (8005504 <TIM3_IRQHandler+0x58>)
 80054c4:	f7fc ffce 	bl	8002464 <TIM_ClearITPendingBit>
	menubutton.button_state = NOT_ACTIVE;
 80054c8:	4b0f      	ldr	r3, [pc, #60]	; (8005508 <TIM3_IRQHandler+0x5c>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	605a      	str	r2, [r3, #4]
	if(temp == enter){
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d102      	bne.n	80054da <TIM3_IRQHandler+0x2e>
		handle_enter();
 80054d4:	f000 f99a 	bl	800580c <handle_enter>
	}else if(temp == up){
		handle_up();
	}else if(temp == down){
		handle_down();
	}
}
 80054d8:	e010      	b.n	80054fc <TIM3_IRQHandler+0x50>
	int temp = menubutton.button;						//stop timer
	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);			//clear interrupt
	menubutton.button_state = NOT_ACTIVE;
	if(temp == enter){
		handle_enter();
	}else if(temp == back){
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d102      	bne.n	80054e6 <TIM3_IRQHandler+0x3a>
		handle_back();
 80054e0:	f000 fb50 	bl	8005b84 <handle_back>
	}else if(temp == up){
		handle_up();
	}else if(temp == down){
		handle_down();
	}
}
 80054e4:	e00a      	b.n	80054fc <TIM3_IRQHandler+0x50>
	menubutton.button_state = NOT_ACTIVE;
	if(temp == enter){
		handle_enter();
	}else if(temp == back){
		handle_back();
	}else if(temp == up){
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d102      	bne.n	80054f2 <TIM3_IRQHandler+0x46>
		handle_up();
 80054ec:	f000 fb80 	bl	8005bf0 <handle_up>
	}else if(temp == down){
		handle_down();
	}
}
 80054f0:	e004      	b.n	80054fc <TIM3_IRQHandler+0x50>
		handle_enter();
	}else if(temp == back){
		handle_back();
	}else if(temp == up){
		handle_up();
	}else if(temp == down){
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <TIM3_IRQHandler+0x50>
		handle_down();
 80054f8:	f000 fc32 	bl	8005d60 <handle_down>
	}
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40000400 	.word	0x40000400
 8005508:	200064e8 	.word	0x200064e8

0800550c <TIM4_IRQHandler>:



// Timer for debouncing selectors 50ms
void TIM4_IRQHandler(){
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM4, DISABLE);								//stop timer
 8005510:	2100      	movs	r1, #0
 8005512:	4805      	ldr	r0, [pc, #20]	; (8005528 <TIM4_IRQHandler+0x1c>)
 8005514:	f7fc ff62 	bl	80023dc <TIM_Cmd>
	TIM_ClearITPendingBit(TIM4, TIM_IT_Update);			//clear interrupt
 8005518:	2101      	movs	r1, #1
 800551a:	4803      	ldr	r0, [pc, #12]	; (8005528 <TIM4_IRQHandler+0x1c>)
 800551c:	f7fc ffa2 	bl	8002464 <TIM_ClearITPendingBit>
	update_selector_state();							//update state
 8005520:	f000 f8da 	bl	80056d8 <update_selector_state>

}
 8005524:	bf00      	nop
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40000800 	.word	0x40000800

0800552c <ADC_IRQHandler>:

// not set up yet but might to see if the adc is working
void ADC_IRQHandler() {
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
	/* acknowledge interrupt */
	ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 8005530:	f240 2105 	movw	r1, #517	; 0x205
 8005534:	4802      	ldr	r0, [pc, #8]	; (8005540 <ADC_IRQHandler+0x14>)
 8005536:	f7fb fcab 	bl	8000e90 <ADC_ClearITPendingBit>
}
 800553a:	bf00      	nop
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40012000 	.word	0x40012000

08005544 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  // Mike Beard
  // #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005548:	4a16      	ldr	r2, [pc, #88]	; (80055a4 <SystemInit+0x60>)
 800554a:	4b16      	ldr	r3, [pc, #88]	; (80055a4 <SystemInit+0x60>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  // #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005558:	4a13      	ldr	r2, [pc, #76]	; (80055a8 <SystemInit+0x64>)
 800555a:	4b13      	ldr	r3, [pc, #76]	; (80055a8 <SystemInit+0x64>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f043 0301 	orr.w	r3, r3, #1
 8005562:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005564:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <SystemInit+0x64>)
 8005566:	2200      	movs	r2, #0
 8005568:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800556a:	4a0f      	ldr	r2, [pc, #60]	; (80055a8 <SystemInit+0x64>)
 800556c:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <SystemInit+0x64>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005578:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <SystemInit+0x64>)
 800557c:	4a0b      	ldr	r2, [pc, #44]	; (80055ac <SystemInit+0x68>)
 800557e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005580:	4a09      	ldr	r2, [pc, #36]	; (80055a8 <SystemInit+0x64>)
 8005582:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <SystemInit+0x64>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800558a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <SystemInit+0x64>)
 800558e:	2200      	movs	r2, #0
 8005590:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8005592:	f000 f80d 	bl	80055b0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005596:	4b03      	ldr	r3, [pc, #12]	; (80055a4 <SystemInit+0x60>)
 8005598:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800559c:	609a      	str	r2, [r3, #8]
#endif
}
 800559e:	bf00      	nop
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	e000ed00 	.word	0xe000ed00
 80055a8:	40023800 	.word	0x40023800
 80055ac:	24003010 	.word	0x24003010

080055b0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	607b      	str	r3, [r7, #4]
 80055ba:	2300      	movs	r3, #0
 80055bc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80055be:	4a41      	ldr	r2, [pc, #260]	; (80056c4 <SetSysClock+0x114>)
 80055c0:	4b40      	ldr	r3, [pc, #256]	; (80056c4 <SetSysClock+0x114>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80055ca:	4b3e      	ldr	r3, [pc, #248]	; (80056c4 <SetSysClock+0x114>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3301      	adds	r3, #1
 80055d8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d103      	bne.n	80055e8 <SetSysClock+0x38>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80055e6:	d1f0      	bne.n	80055ca <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80055e8:	4b36      	ldr	r3, [pc, #216]	; (80056c4 <SetSysClock+0x114>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80055f4:	2301      	movs	r3, #1
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	e001      	b.n	80055fe <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80055fa:	2300      	movs	r3, #0
 80055fc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d142      	bne.n	800568a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8005604:	4a2f      	ldr	r2, [pc, #188]	; (80056c4 <SetSysClock+0x114>)
 8005606:	4b2f      	ldr	r3, [pc, #188]	; (80056c4 <SetSysClock+0x114>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8005610:	4a2d      	ldr	r2, [pc, #180]	; (80056c8 <SetSysClock+0x118>)
 8005612:	4b2d      	ldr	r3, [pc, #180]	; (80056c8 <SetSysClock+0x118>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800561a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800561c:	4a29      	ldr	r2, [pc, #164]	; (80056c4 <SetSysClock+0x114>)
 800561e:	4b29      	ldr	r3, [pc, #164]	; (80056c4 <SetSysClock+0x114>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8005624:	4a27      	ldr	r2, [pc, #156]	; (80056c4 <SetSysClock+0x114>)
 8005626:	4b27      	ldr	r3, [pc, #156]	; (80056c4 <SetSysClock+0x114>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8005630:	4a24      	ldr	r2, [pc, #144]	; (80056c4 <SetSysClock+0x114>)
 8005632:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <SetSysClock+0x114>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800563a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800563c:	4b21      	ldr	r3, [pc, #132]	; (80056c4 <SetSysClock+0x114>)
 800563e:	4a23      	ldr	r2, [pc, #140]	; (80056cc <SetSysClock+0x11c>)
 8005640:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005642:	4a20      	ldr	r2, [pc, #128]	; (80056c4 <SetSysClock+0x114>)
 8005644:	4b1f      	ldr	r3, [pc, #124]	; (80056c4 <SetSysClock+0x114>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800564c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800564e:	bf00      	nop
 8005650:	4b1c      	ldr	r3, [pc, #112]	; (80056c4 <SetSysClock+0x114>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f9      	beq.n	8005650 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800565c:	4b1c      	ldr	r3, [pc, #112]	; (80056d0 <SetSysClock+0x120>)
 800565e:	f240 6205 	movw	r2, #1541	; 0x605
 8005662:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005664:	4a17      	ldr	r2, [pc, #92]	; (80056c4 <SetSysClock+0x114>)
 8005666:	4b17      	ldr	r3, [pc, #92]	; (80056c4 <SetSysClock+0x114>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005670:	4a14      	ldr	r2, [pc, #80]	; (80056c4 <SetSysClock+0x114>)
 8005672:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <SetSysClock+0x114>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f043 0302 	orr.w	r3, r3, #2
 800567a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800567c:	bf00      	nop
 800567e:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <SetSysClock+0x114>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 030c 	and.w	r3, r3, #12
 8005686:	2b08      	cmp	r3, #8
 8005688:	d1f9      	bne.n	800567e <SetSysClock+0xce>
// Re-added by Mike Beard
/******************************************************************************/
/*                          I2S clock configuration                           */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 800568a:	4a0e      	ldr	r2, [pc, #56]	; (80056c4 <SetSysClock+0x114>)
 800568c:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <SetSysClock+0x114>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005694:	6093      	str	r3, [r2, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8005696:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <SetSysClock+0x114>)
 8005698:	4a0e      	ldr	r2, [pc, #56]	; (80056d4 <SetSysClock+0x124>)
 800569a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 800569e:	4a09      	ldr	r2, [pc, #36]	; (80056c4 <SetSysClock+0x114>)
 80056a0:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <SetSysClock+0x114>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056a8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 80056aa:	bf00      	nop
 80056ac:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <SetSysClock+0x114>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0f9      	beq.n	80056ac <SetSysClock+0xfc>
  {
  }
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	40023800 	.word	0x40023800
 80056c8:	40007000 	.word	0x40007000
 80056cc:	07405408 	.word	0x07405408
 80056d0:	40023c00 	.word	0x40023c00
 80056d4:	30004080 	.word	0x30004080

080056d8 <update_selector_state>:

/*
 * Gets and updated the state of both the selector rotary switches
 * This funtion is called by the tim2 interrupt handler
 */
void update_selector_state (){
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_7) == 1){
 80056dc:	2180      	movs	r1, #128	; 0x80
 80056de:	483a      	ldr	r0, [pc, #232]	; (80057c8 <update_selector_state+0xf0>)
 80056e0:	f7fb ffb0 	bl	8001644 <GPIO_ReadInputDataBit>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d103      	bne.n	80056f2 <update_selector_state+0x1a>
		vfo_state = sine;
 80056ea:	4b38      	ldr	r3, [pc, #224]	; (80057cc <update_selector_state+0xf4>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	e02e      	b.n	8005750 <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_8) == 1){
 80056f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056f6:	4834      	ldr	r0, [pc, #208]	; (80057c8 <update_selector_state+0xf0>)
 80056f8:	f7fb ffa4 	bl	8001644 <GPIO_ReadInputDataBit>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d103      	bne.n	800570a <update_selector_state+0x32>
		vfo_state = sawtooth;
 8005702:	4b32      	ldr	r3, [pc, #200]	; (80057cc <update_selector_state+0xf4>)
 8005704:	2201      	movs	r2, #1
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	e022      	b.n	8005750 <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_9) == 1){
 800570a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800570e:	482e      	ldr	r0, [pc, #184]	; (80057c8 <update_selector_state+0xf0>)
 8005710:	f7fb ff98 	bl	8001644 <GPIO_ReadInputDataBit>
 8005714:	4603      	mov	r3, r0
 8005716:	2b01      	cmp	r3, #1
 8005718:	d103      	bne.n	8005722 <update_selector_state+0x4a>
		vfo_state = square;
 800571a:	4b2c      	ldr	r3, [pc, #176]	; (80057cc <update_selector_state+0xf4>)
 800571c:	2202      	movs	r2, #2
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	e016      	b.n	8005750 <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_10) == 1){
 8005722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005726:	4828      	ldr	r0, [pc, #160]	; (80057c8 <update_selector_state+0xf0>)
 8005728:	f7fb ff8c 	bl	8001644 <GPIO_ReadInputDataBit>
 800572c:	4603      	mov	r3, r0
 800572e:	2b01      	cmp	r3, #1
 8005730:	d103      	bne.n	800573a <update_selector_state+0x62>
		vfo_state = triangle;
 8005732:	4b26      	ldr	r3, [pc, #152]	; (80057cc <update_selector_state+0xf4>)
 8005734:	2203      	movs	r2, #3
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	e00a      	b.n	8005750 <update_selector_state+0x78>
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_11) == 1){
 800573a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800573e:	4822      	ldr	r0, [pc, #136]	; (80057c8 <update_selector_state+0xf0>)
 8005740:	f7fb ff80 	bl	8001644 <GPIO_ReadInputDataBit>
 8005744:	4603      	mov	r3, r0
 8005746:	2b01      	cmp	r3, #1
 8005748:	d102      	bne.n	8005750 <update_selector_state+0x78>
		vfo_state = other2;
 800574a:	4b20      	ldr	r3, [pc, #128]	; (80057cc <update_selector_state+0xf4>)
 800574c:	2204      	movs	r2, #4
 800574e:	701a      	strb	r2, [r3, #0]
	}
//could put some fault detection at the end of these if statements come back later if theres time

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
 8005750:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005754:	481c      	ldr	r0, [pc, #112]	; (80057c8 <update_selector_state+0xf0>)
 8005756:	f7fb ff75 	bl	8001644 <GPIO_ReadInputDataBit>
 800575a:	4603      	mov	r3, r0
 800575c:	2b01      	cmp	r3, #1
 800575e:	d103      	bne.n	8005768 <update_selector_state+0x90>
		lfo_state = sine;
 8005760:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <update_selector_state+0xf8>)
 8005762:	2200      	movs	r2, #0
 8005764:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_6) == 1){
		lfo_state = other2;
	}
}
 8005766:	e02d      	b.n	80057c4 <update_selector_state+0xec>
	}
//could put some fault detection at the end of these if statements come back later if theres time

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
 8005768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800576c:	4816      	ldr	r0, [pc, #88]	; (80057c8 <update_selector_state+0xf0>)
 800576e:	f7fb ff69 	bl	8001644 <GPIO_ReadInputDataBit>
 8005772:	4603      	mov	r3, r0
 8005774:	2b01      	cmp	r3, #1
 8005776:	d103      	bne.n	8005780 <update_selector_state+0xa8>
		lfo_state = sawtooth;
 8005778:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <update_selector_state+0xf8>)
 800577a:	2201      	movs	r2, #1
 800577c:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_6) == 1){
		lfo_state = other2;
	}
}
 800577e:	e021      	b.n	80057c4 <update_selector_state+0xec>

	if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_12) == 1){
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
 8005780:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005784:	4810      	ldr	r0, [pc, #64]	; (80057c8 <update_selector_state+0xf0>)
 8005786:	f7fb ff5d 	bl	8001644 <GPIO_ReadInputDataBit>
 800578a:	4603      	mov	r3, r0
 800578c:	2b01      	cmp	r3, #1
 800578e:	d103      	bne.n	8005798 <update_selector_state+0xc0>
		lfo_state = square;
 8005790:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <update_selector_state+0xf8>)
 8005792:	2202      	movs	r2, #2
 8005794:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_6) == 1){
		lfo_state = other2;
	}
}
 8005796:	e015      	b.n	80057c4 <update_selector_state+0xec>
		lfo_state = sine;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_13) == 1){
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
		lfo_state = square;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
 8005798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800579c:	480a      	ldr	r0, [pc, #40]	; (80057c8 <update_selector_state+0xf0>)
 800579e:	f7fb ff51 	bl	8001644 <GPIO_ReadInputDataBit>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d103      	bne.n	80057b0 <update_selector_state+0xd8>
		lfo_state = triangle;
 80057a8:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <update_selector_state+0xf8>)
 80057aa:	2203      	movs	r2, #3
 80057ac:	701a      	strb	r2, [r3, #0]
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_6) == 1){
		lfo_state = other2;
	}
}
 80057ae:	e009      	b.n	80057c4 <update_selector_state+0xec>
		lfo_state = sawtooth;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_14) == 1){
		lfo_state = square;
	}else if(GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_15) == 1){
		lfo_state = triangle;
	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_6) == 1){
 80057b0:	2140      	movs	r1, #64	; 0x40
 80057b2:	4808      	ldr	r0, [pc, #32]	; (80057d4 <update_selector_state+0xfc>)
 80057b4:	f7fb ff46 	bl	8001644 <GPIO_ReadInputDataBit>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d102      	bne.n	80057c4 <update_selector_state+0xec>
		lfo_state = other2;
 80057be:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <update_selector_state+0xf8>)
 80057c0:	2204      	movs	r2, #4
 80057c2:	701a      	strb	r2, [r3, #0]
	}
}
 80057c4:	bf00      	nop
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40021000 	.word	0x40021000
 80057cc:	200064e4 	.word	0x200064e4
 80057d0:	200064e5 	.word	0x200064e5
 80057d4:	40020800 	.word	0x40020800

080057d8 <init_state>:

void init_state(){
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0

	current_menu_state.menu_state = startup;
 80057dc:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <init_state+0x30>)
 80057de:	2200      	movs	r2, #0
 80057e0:	701a      	strb	r2, [r3, #0]
	current_menu_state.cursor_option = 0;
 80057e2:	4b09      	ldr	r3, [pc, #36]	; (8005808 <init_state+0x30>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	605a      	str	r2, [r3, #4]
	current_menu_state.adsr_mod = NO_MOD;
 80057e8:	4b07      	ldr	r3, [pc, #28]	; (8005808 <init_state+0x30>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	725a      	strb	r2, [r3, #9]
	current_menu_state.lfo_mod = NO_MOD;
 80057ee:	4b06      	ldr	r3, [pc, #24]	; (8005808 <init_state+0x30>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	721a      	strb	r2, [r3, #8]
	current_menu_state.filterst8 = no_filter;
 80057f4:	4b04      	ldr	r3, [pc, #16]	; (8005808 <init_state+0x30>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	729a      	strb	r2, [r3, #10]
	current_menu_state.secondary_vco = 0;
 80057fa:	4b03      	ldr	r3, [pc, #12]	; (8005808 <init_state+0x30>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	60da      	str	r2, [r3, #12]
	display_new_menu();
 8005800:	f000 fb62 	bl	8005ec8 <display_new_menu>

}
 8005804:	bf00      	nop
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20006508 	.word	0x20006508

0800580c <handle_enter>:



void handle_enter(){
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
	if(current_menu_state.menu_state == startup){
 8005810:	4bb2      	ldr	r3, [pc, #712]	; (8005adc <handle_enter+0x2d0>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d134      	bne.n	8005882 <handle_enter+0x76>
		switch(current_menu_state.cursor_option){
 8005818:	4bb0      	ldr	r3, [pc, #704]	; (8005adc <handle_enter+0x2d0>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b03      	cmp	r3, #3
 800581e:	f200 81ac 	bhi.w	8005b7a <handle_enter+0x36e>
 8005822:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <handle_enter+0x1c>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	08005839 	.word	0x08005839
 800582c:	0800584b 	.word	0x0800584b
 8005830:	0800585d 	.word	0x0800585d
 8005834:	0800586f 	.word	0x0800586f
			case 0:
				current_menu_state.menu_state = ADSR;
 8005838:	4ba8      	ldr	r3, [pc, #672]	; (8005adc <handle_enter+0x2d0>)
 800583a:	2202      	movs	r2, #2
 800583c:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 800583e:	4ba7      	ldr	r3, [pc, #668]	; (8005adc <handle_enter+0x2d0>)
 8005840:	2200      	movs	r2, #0
 8005842:	605a      	str	r2, [r3, #4]
				display_new_menu();
 8005844:	f000 fb40 	bl	8005ec8 <display_new_menu>
				break;
 8005848:	e197      	b.n	8005b7a <handle_enter+0x36e>

			case 1:
				current_menu_state.menu_state = filter;
 800584a:	4ba4      	ldr	r3, [pc, #656]	; (8005adc <handle_enter+0x2d0>)
 800584c:	2201      	movs	r2, #1
 800584e:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005850:	4ba2      	ldr	r3, [pc, #648]	; (8005adc <handle_enter+0x2d0>)
 8005852:	2200      	movs	r2, #0
 8005854:	605a      	str	r2, [r3, #4]
				display_new_menu();
 8005856:	f000 fb37 	bl	8005ec8 <display_new_menu>
				break;
 800585a:	e18e      	b.n	8005b7a <handle_enter+0x36e>

			case 2:
				current_menu_state.menu_state = LFO;
 800585c:	4b9f      	ldr	r3, [pc, #636]	; (8005adc <handle_enter+0x2d0>)
 800585e:	2203      	movs	r2, #3
 8005860:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005862:	4b9e      	ldr	r3, [pc, #632]	; (8005adc <handle_enter+0x2d0>)
 8005864:	2200      	movs	r2, #0
 8005866:	605a      	str	r2, [r3, #4]
				display_new_menu();
 8005868:	f000 fb2e 	bl	8005ec8 <display_new_menu>
				break;
 800586c:	e185      	b.n	8005b7a <handle_enter+0x36e>

			case 3:
				current_menu_state.menu_state = secondaryVCO;
 800586e:	4b9b      	ldr	r3, [pc, #620]	; (8005adc <handle_enter+0x2d0>)
 8005870:	2204      	movs	r2, #4
 8005872:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005874:	4b99      	ldr	r3, [pc, #612]	; (8005adc <handle_enter+0x2d0>)
 8005876:	2200      	movs	r2, #0
 8005878:	605a      	str	r2, [r3, #4]
				display_new_menu();
 800587a:	f000 fb25 	bl	8005ec8 <display_new_menu>
				break;
 800587e:	bf00      	nop
 8005880:	e17b      	b.n	8005b7a <handle_enter+0x36e>
		}

	}else if(current_menu_state.menu_state == filter){
 8005882:	4b96      	ldr	r3, [pc, #600]	; (8005adc <handle_enter+0x2d0>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d141      	bne.n	800590e <handle_enter+0x102>
		switch(current_menu_state.cursor_option){
 800588a:	4b94      	ldr	r3, [pc, #592]	; (8005adc <handle_enter+0x2d0>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b03      	cmp	r3, #3
 8005890:	f200 8173 	bhi.w	8005b7a <handle_enter+0x36e>
 8005894:	a201      	add	r2, pc, #4	; (adr r2, 800589c <handle_enter+0x90>)
 8005896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589a:	bf00      	nop
 800589c:	080058ad 	.word	0x080058ad
 80058a0:	080058c5 	.word	0x080058c5
 80058a4:	080058dd 	.word	0x080058dd
 80058a8:	080058f5 	.word	0x080058f5
			case 0:
				current_menu_state.menu_state = startup;
 80058ac:	4b8b      	ldr	r3, [pc, #556]	; (8005adc <handle_enter+0x2d0>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 80058b2:	4b8a      	ldr	r3, [pc, #552]	; (8005adc <handle_enter+0x2d0>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	605a      	str	r2, [r3, #4]
				current_menu_state.filterst8 = no_filter;
 80058b8:	4b88      	ldr	r3, [pc, #544]	; (8005adc <handle_enter+0x2d0>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	729a      	strb	r2, [r3, #10]
				display_new_menu();
 80058be:	f000 fb03 	bl	8005ec8 <display_new_menu>
				break;
 80058c2:	e15a      	b.n	8005b7a <handle_enter+0x36e>

			case 1:
				current_menu_state.menu_state = startup;
 80058c4:	4b85      	ldr	r3, [pc, #532]	; (8005adc <handle_enter+0x2d0>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 80058ca:	4b84      	ldr	r3, [pc, #528]	; (8005adc <handle_enter+0x2d0>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	605a      	str	r2, [r3, #4]
				current_menu_state.filterst8 = highpass;
 80058d0:	4b82      	ldr	r3, [pc, #520]	; (8005adc <handle_enter+0x2d0>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	729a      	strb	r2, [r3, #10]
				display_new_menu();
 80058d6:	f000 faf7 	bl	8005ec8 <display_new_menu>
				break;
 80058da:	e14e      	b.n	8005b7a <handle_enter+0x36e>

			case 2:
				current_menu_state.menu_state = startup;
 80058dc:	4b7f      	ldr	r3, [pc, #508]	; (8005adc <handle_enter+0x2d0>)
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 80058e2:	4b7e      	ldr	r3, [pc, #504]	; (8005adc <handle_enter+0x2d0>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	605a      	str	r2, [r3, #4]
				current_menu_state.filterst8 = lowpass;
 80058e8:	4b7c      	ldr	r3, [pc, #496]	; (8005adc <handle_enter+0x2d0>)
 80058ea:	2202      	movs	r2, #2
 80058ec:	729a      	strb	r2, [r3, #10]
				display_new_menu();
 80058ee:	f000 faeb 	bl	8005ec8 <display_new_menu>
				break;
 80058f2:	e142      	b.n	8005b7a <handle_enter+0x36e>

			case 3:
				current_menu_state.menu_state = startup;
 80058f4:	4b79      	ldr	r3, [pc, #484]	; (8005adc <handle_enter+0x2d0>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 80058fa:	4b78      	ldr	r3, [pc, #480]	; (8005adc <handle_enter+0x2d0>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	605a      	str	r2, [r3, #4]
				current_menu_state.filterst8 = bandpass;
 8005900:	4b76      	ldr	r3, [pc, #472]	; (8005adc <handle_enter+0x2d0>)
 8005902:	2203      	movs	r2, #3
 8005904:	729a      	strb	r2, [r3, #10]
				display_new_menu();
 8005906:	f000 fadf 	bl	8005ec8 <display_new_menu>
				break;
 800590a:	bf00      	nop
 800590c:	e135      	b.n	8005b7a <handle_enter+0x36e>
		}

	}else if(current_menu_state.menu_state == ADSR){
 800590e:	4b73      	ldr	r3, [pc, #460]	; (8005adc <handle_enter+0x2d0>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d13e      	bne.n	8005994 <handle_enter+0x188>
		switch(current_menu_state.cursor_option){
 8005916:	4b71      	ldr	r3, [pc, #452]	; (8005adc <handle_enter+0x2d0>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b03      	cmp	r3, #3
 800591c:	f200 812d 	bhi.w	8005b7a <handle_enter+0x36e>
 8005920:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <handle_enter+0x11c>)
 8005922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005926:	bf00      	nop
 8005928:	08005939 	.word	0x08005939
 800592c:	08005951 	.word	0x08005951
 8005930:	08005963 	.word	0x08005963
 8005934:	0800597b 	.word	0x0800597b
			case 0:
				current_menu_state.menu_state = startup;
 8005938:	4b68      	ldr	r3, [pc, #416]	; (8005adc <handle_enter+0x2d0>)
 800593a:	2200      	movs	r2, #0
 800593c:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 800593e:	4b67      	ldr	r3, [pc, #412]	; (8005adc <handle_enter+0x2d0>)
 8005940:	2200      	movs	r2, #0
 8005942:	605a      	str	r2, [r3, #4]
				current_menu_state.adsr_mod = NO_MOD;
 8005944:	4b65      	ldr	r3, [pc, #404]	; (8005adc <handle_enter+0x2d0>)
 8005946:	2200      	movs	r2, #0
 8005948:	725a      	strb	r2, [r3, #9]
				display_new_menu();
 800594a:	f000 fabd 	bl	8005ec8 <display_new_menu>
				break;
 800594e:	e114      	b.n	8005b7a <handle_enter+0x36e>

			case 1:
				current_menu_state.menu_state = ADSR_Mod;
 8005950:	4b62      	ldr	r3, [pc, #392]	; (8005adc <handle_enter+0x2d0>)
 8005952:	2205      	movs	r2, #5
 8005954:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005956:	4b61      	ldr	r3, [pc, #388]	; (8005adc <handle_enter+0x2d0>)
 8005958:	2200      	movs	r2, #0
 800595a:	605a      	str	r2, [r3, #4]
				display_new_menu();
 800595c:	f000 fab4 	bl	8005ec8 <display_new_menu>
				break;
 8005960:	e10b      	b.n	8005b7a <handle_enter+0x36e>

			case 2:
				current_menu_state.menu_state = startup;
 8005962:	4b5e      	ldr	r3, [pc, #376]	; (8005adc <handle_enter+0x2d0>)
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005968:	4b5c      	ldr	r3, [pc, #368]	; (8005adc <handle_enter+0x2d0>)
 800596a:	2200      	movs	r2, #0
 800596c:	605a      	str	r2, [r3, #4]
				current_menu_state.adsr_mod = DualMode_VCO;
 800596e:	4b5b      	ldr	r3, [pc, #364]	; (8005adc <handle_enter+0x2d0>)
 8005970:	2207      	movs	r2, #7
 8005972:	725a      	strb	r2, [r3, #9]
				display_new_menu();
 8005974:	f000 faa8 	bl	8005ec8 <display_new_menu>
				break;
 8005978:	e0ff      	b.n	8005b7a <handle_enter+0x36e>

			case 3:
				current_menu_state.menu_state = startup;
 800597a:	4b58      	ldr	r3, [pc, #352]	; (8005adc <handle_enter+0x2d0>)
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005980:	4b56      	ldr	r3, [pc, #344]	; (8005adc <handle_enter+0x2d0>)
 8005982:	2200      	movs	r2, #0
 8005984:	605a      	str	r2, [r3, #4]
				current_menu_state.adsr_mod = DualMode_LFO;
 8005986:	4b55      	ldr	r3, [pc, #340]	; (8005adc <handle_enter+0x2d0>)
 8005988:	2206      	movs	r2, #6
 800598a:	725a      	strb	r2, [r3, #9]
				display_new_menu();
 800598c:	f000 fa9c 	bl	8005ec8 <display_new_menu>
				break;
 8005990:	bf00      	nop
 8005992:	e0f2      	b.n	8005b7a <handle_enter+0x36e>
		}

	}else if(current_menu_state.menu_state == LFO){
 8005994:	4b51      	ldr	r3, [pc, #324]	; (8005adc <handle_enter+0x2d0>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d13a      	bne.n	8005a12 <handle_enter+0x206>
		switch(current_menu_state.cursor_option){
 800599c:	4b4f      	ldr	r3, [pc, #316]	; (8005adc <handle_enter+0x2d0>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	f200 80ea 	bhi.w	8005b7a <handle_enter+0x36e>
 80059a6:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <handle_enter+0x1a0>)
 80059a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ac:	080059bd 	.word	0x080059bd
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059e7 	.word	0x080059e7
 80059b8:	080059ff 	.word	0x080059ff
			case 0:
				current_menu_state.menu_state = startup;
 80059bc:	4b47      	ldr	r3, [pc, #284]	; (8005adc <handle_enter+0x2d0>)
 80059be:	2200      	movs	r2, #0
 80059c0:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 80059c2:	4b46      	ldr	r3, [pc, #280]	; (8005adc <handle_enter+0x2d0>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	605a      	str	r2, [r3, #4]
				current_menu_state.lfo_mod = NO_MOD;
 80059c8:	4b44      	ldr	r3, [pc, #272]	; (8005adc <handle_enter+0x2d0>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	721a      	strb	r2, [r3, #8]
				display_new_menu();
 80059ce:	f000 fa7b 	bl	8005ec8 <display_new_menu>
				break;
 80059d2:	e0d2      	b.n	8005b7a <handle_enter+0x36e>

			case 1:
				current_menu_state.menu_state = LFO_Mod;
 80059d4:	4b41      	ldr	r3, [pc, #260]	; (8005adc <handle_enter+0x2d0>)
 80059d6:	2206      	movs	r2, #6
 80059d8:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 80059da:	4b40      	ldr	r3, [pc, #256]	; (8005adc <handle_enter+0x2d0>)
 80059dc:	2200      	movs	r2, #0
 80059de:	605a      	str	r2, [r3, #4]
				display_new_menu();
 80059e0:	f000 fa72 	bl	8005ec8 <display_new_menu>
				break;
 80059e4:	e0c9      	b.n	8005b7a <handle_enter+0x36e>

			case 2:
				current_menu_state.menu_state = startup;
 80059e6:	4b3d      	ldr	r3, [pc, #244]	; (8005adc <handle_enter+0x2d0>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 80059ec:	4b3b      	ldr	r3, [pc, #236]	; (8005adc <handle_enter+0x2d0>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	605a      	str	r2, [r3, #4]
				current_menu_state.lfo_mod = DualMode_VCO;
 80059f2:	4b3a      	ldr	r3, [pc, #232]	; (8005adc <handle_enter+0x2d0>)
 80059f4:	2207      	movs	r2, #7
 80059f6:	721a      	strb	r2, [r3, #8]
				display_new_menu();
 80059f8:	f000 fa66 	bl	8005ec8 <display_new_menu>
				break;
 80059fc:	e0bd      	b.n	8005b7a <handle_enter+0x36e>

			case 3:														// should never be here so this is error handling
				current_menu_state.menu_state = LFO;
 80059fe:	4b37      	ldr	r3, [pc, #220]	; (8005adc <handle_enter+0x2d0>)
 8005a00:	2203      	movs	r2, #3
 8005a02:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005a04:	4b35      	ldr	r3, [pc, #212]	; (8005adc <handle_enter+0x2d0>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	605a      	str	r2, [r3, #4]
				display_new_menu();
 8005a0a:	f000 fa5d 	bl	8005ec8 <display_new_menu>
				break;
 8005a0e:	bf00      	nop
 8005a10:	e0b3      	b.n	8005b7a <handle_enter+0x36e>
		}

	}else if(current_menu_state.menu_state == secondaryVCO){
 8005a12:	4b32      	ldr	r3, [pc, #200]	; (8005adc <handle_enter+0x2d0>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d13b      	bne.n	8005a92 <handle_enter+0x286>
		switch(current_menu_state.cursor_option){
 8005a1a:	4b30      	ldr	r3, [pc, #192]	; (8005adc <handle_enter+0x2d0>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	f200 80ab 	bhi.w	8005b7a <handle_enter+0x36e>
 8005a24:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <handle_enter+0x220>)
 8005a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2a:	bf00      	nop
 8005a2c:	08005a3d 	.word	0x08005a3d
 8005a30:	08005a55 	.word	0x08005a55
 8005a34:	08005a6d 	.word	0x08005a6d
 8005a38:	08005a7f 	.word	0x08005a7f
			case 0:
				current_menu_state.menu_state = startup;
 8005a3c:	4b27      	ldr	r3, [pc, #156]	; (8005adc <handle_enter+0x2d0>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005a42:	4b26      	ldr	r3, [pc, #152]	; (8005adc <handle_enter+0x2d0>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	605a      	str	r2, [r3, #4]
				current_menu_state.secondary_vco = 0;
 8005a48:	4b24      	ldr	r3, [pc, #144]	; (8005adc <handle_enter+0x2d0>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	60da      	str	r2, [r3, #12]
				display_new_menu();
 8005a4e:	f000 fa3b 	bl	8005ec8 <display_new_menu>
				break;
 8005a52:	e092      	b.n	8005b7a <handle_enter+0x36e>

			case 1:
				current_menu_state.menu_state = startup;
 8005a54:	4b21      	ldr	r3, [pc, #132]	; (8005adc <handle_enter+0x2d0>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005a5a:	4b20      	ldr	r3, [pc, #128]	; (8005adc <handle_enter+0x2d0>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	605a      	str	r2, [r3, #4]
				current_menu_state.secondary_vco = 1;
 8005a60:	4b1e      	ldr	r3, [pc, #120]	; (8005adc <handle_enter+0x2d0>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	60da      	str	r2, [r3, #12]
				display_new_menu();
 8005a66:	f000 fa2f 	bl	8005ec8 <display_new_menu>
				break;
 8005a6a:	e086      	b.n	8005b7a <handle_enter+0x36e>

			case 2:														// should never be here so this is error handling
				current_menu_state.menu_state = secondaryVCO;
 8005a6c:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <handle_enter+0x2d0>)
 8005a6e:	2204      	movs	r2, #4
 8005a70:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005a72:	4b1a      	ldr	r3, [pc, #104]	; (8005adc <handle_enter+0x2d0>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	605a      	str	r2, [r3, #4]
				display_new_menu();
 8005a78:	f000 fa26 	bl	8005ec8 <display_new_menu>
				break;
 8005a7c:	e07d      	b.n	8005b7a <handle_enter+0x36e>

			case 3:														// should never be here so this is error handling
				current_menu_state.menu_state = secondaryVCO;
 8005a7e:	4b17      	ldr	r3, [pc, #92]	; (8005adc <handle_enter+0x2d0>)
 8005a80:	2204      	movs	r2, #4
 8005a82:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005a84:	4b15      	ldr	r3, [pc, #84]	; (8005adc <handle_enter+0x2d0>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	605a      	str	r2, [r3, #4]
				display_new_menu();
 8005a8a:	f000 fa1d 	bl	8005ec8 <display_new_menu>
				break;
 8005a8e:	bf00      	nop
 8005a90:	e073      	b.n	8005b7a <handle_enter+0x36e>
		}

	}else if(current_menu_state.menu_state == ADSR_Mod){
 8005a92:	4b12      	ldr	r3, [pc, #72]	; (8005adc <handle_enter+0x2d0>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b05      	cmp	r3, #5
 8005a98:	d12f      	bne.n	8005afa <handle_enter+0x2ee>
		switch(current_menu_state.cursor_option){
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <handle_enter+0x2d0>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d010      	beq.n	8005ac4 <handle_enter+0x2b8>
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d302      	bcc.n	8005aac <handle_enter+0x2a0>
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d01a      	beq.n	8005ae0 <handle_enter+0x2d4>
				current_menu_state.cursor_option = 0;
				display_new_menu();
				break;
		}
	}
}
 8005aaa:	e066      	b.n	8005b7a <handle_enter+0x36e>
		}

	}else if(current_menu_state.menu_state == ADSR_Mod){
		switch(current_menu_state.cursor_option){
			case 0:
				current_menu_state.menu_state = startup;
 8005aac:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <handle_enter+0x2d0>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005ab2:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <handle_enter+0x2d0>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	605a      	str	r2, [r3, #4]
				current_menu_state.adsr_mod = VCOamp;
 8005ab8:	4b08      	ldr	r3, [pc, #32]	; (8005adc <handle_enter+0x2d0>)
 8005aba:	2202      	movs	r2, #2
 8005abc:	725a      	strb	r2, [r3, #9]
				display_new_menu();
 8005abe:	f000 fa03 	bl	8005ec8 <display_new_menu>
				break;
 8005ac2:	e05a      	b.n	8005b7a <handle_enter+0x36e>

			case 1:
				current_menu_state.menu_state = startup;
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <handle_enter+0x2d0>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005aca:	4b04      	ldr	r3, [pc, #16]	; (8005adc <handle_enter+0x2d0>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	605a      	str	r2, [r3, #4]
				current_menu_state.adsr_mod = VCOfreq;
 8005ad0:	4b02      	ldr	r3, [pc, #8]	; (8005adc <handle_enter+0x2d0>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	725a      	strb	r2, [r3, #9]
				display_new_menu();
 8005ad6:	f000 f9f7 	bl	8005ec8 <display_new_menu>
				break;
 8005ada:	e04e      	b.n	8005b7a <handle_enter+0x36e>
 8005adc:	20006508 	.word	0x20006508

			case 2:
				current_menu_state.menu_state = startup;
 8005ae0:	4b27      	ldr	r3, [pc, #156]	; (8005b80 <handle_enter+0x374>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005ae6:	4b26      	ldr	r3, [pc, #152]	; (8005b80 <handle_enter+0x374>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	605a      	str	r2, [r3, #4]
				current_menu_state.adsr_mod = FILTER_freq;
 8005aec:	4b24      	ldr	r3, [pc, #144]	; (8005b80 <handle_enter+0x374>)
 8005aee:	2205      	movs	r2, #5
 8005af0:	725a      	strb	r2, [r3, #9]
				display_new_menu();
 8005af2:	f000 f9e9 	bl	8005ec8 <display_new_menu>
				break;
 8005af6:	bf00      	nop
 8005af8:	e03f      	b.n	8005b7a <handle_enter+0x36e>
		}

	}else if(current_menu_state.menu_state == LFO_Mod){
 8005afa:	4b21      	ldr	r3, [pc, #132]	; (8005b80 <handle_enter+0x374>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b06      	cmp	r3, #6
 8005b00:	d13b      	bne.n	8005b7a <handle_enter+0x36e>
		switch(current_menu_state.cursor_option){
 8005b02:	4b1f      	ldr	r3, [pc, #124]	; (8005b80 <handle_enter+0x374>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d837      	bhi.n	8005b7a <handle_enter+0x36e>
 8005b0a:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <handle_enter+0x304>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b21 	.word	0x08005b21
 8005b14:	08005b39 	.word	0x08005b39
 8005b18:	08005b51 	.word	0x08005b51
 8005b1c:	08005b69 	.word	0x08005b69
			case 0:
				current_menu_state.menu_state = startup;
 8005b20:	4b17      	ldr	r3, [pc, #92]	; (8005b80 <handle_enter+0x374>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005b26:	4b16      	ldr	r3, [pc, #88]	; (8005b80 <handle_enter+0x374>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	605a      	str	r2, [r3, #4]
				current_menu_state.lfo_mod = VCOamp;
 8005b2c:	4b14      	ldr	r3, [pc, #80]	; (8005b80 <handle_enter+0x374>)
 8005b2e:	2202      	movs	r2, #2
 8005b30:	721a      	strb	r2, [r3, #8]
				display_new_menu();
 8005b32:	f000 f9c9 	bl	8005ec8 <display_new_menu>
				break;
 8005b36:	e020      	b.n	8005b7a <handle_enter+0x36e>

			case 1:
				current_menu_state.menu_state = startup;
 8005b38:	4b11      	ldr	r3, [pc, #68]	; (8005b80 <handle_enter+0x374>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005b3e:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <handle_enter+0x374>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	605a      	str	r2, [r3, #4]
				current_menu_state.lfo_mod = VCOfreq;
 8005b44:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <handle_enter+0x374>)
 8005b46:	2201      	movs	r2, #1
 8005b48:	721a      	strb	r2, [r3, #8]
				display_new_menu();
 8005b4a:	f000 f9bd 	bl	8005ec8 <display_new_menu>
				break;
 8005b4e:	e014      	b.n	8005b7a <handle_enter+0x36e>

			case 2:
				current_menu_state.menu_state = startup;
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <handle_enter+0x374>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005b56:	4b0a      	ldr	r3, [pc, #40]	; (8005b80 <handle_enter+0x374>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	605a      	str	r2, [r3, #4]
				current_menu_state.lfo_mod = FILTER_freq;
 8005b5c:	4b08      	ldr	r3, [pc, #32]	; (8005b80 <handle_enter+0x374>)
 8005b5e:	2205      	movs	r2, #5
 8005b60:	721a      	strb	r2, [r3, #8]
				display_new_menu();
 8005b62:	f000 f9b1 	bl	8005ec8 <display_new_menu>
				break;
 8005b66:	e008      	b.n	8005b7a <handle_enter+0x36e>


			case 3:														// should never be here so this is error handling
				current_menu_state.menu_state = LFO_Mod;
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <handle_enter+0x374>)
 8005b6a:	2206      	movs	r2, #6
 8005b6c:	701a      	strb	r2, [r3, #0]
				current_menu_state.cursor_option = 0;
 8005b6e:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <handle_enter+0x374>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	605a      	str	r2, [r3, #4]
				display_new_menu();
 8005b74:	f000 f9a8 	bl	8005ec8 <display_new_menu>
				break;
 8005b78:	bf00      	nop
		}
	}
}
 8005b7a:	bf00      	nop
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20006508 	.word	0x20006508

08005b84 <handle_back>:

/*
 * not gonna use this button
 */
void handle_back(){
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0


	if(current_menu_state.menu_state == startup){
 8005b88:	4b18      	ldr	r3, [pc, #96]	; (8005bec <handle_back+0x68>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d108      	bne.n	8005ba2 <handle_back+0x1e>
		LCD_WRITE(32);
 8005b90:	2020      	movs	r0, #32
 8005b92:	f7fd fe8d 	bl	80038b0 <LCD_WRITE>
		current_menu_state.cursor_option = 0;
 8005b96:	4b15      	ldr	r3, [pc, #84]	; (8005bec <handle_back+0x68>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	605a      	str	r2, [r3, #4]
		curser_start();
 8005b9c:	f000 fa30 	bl	8006000 <curser_start>
		current_menu_state.menu_state = startup;
		current_menu_state.cursor_option = 0;
		display_new_menu();

	}
}
 8005ba0:	e021      	b.n	8005be6 <handle_back+0x62>
	if(current_menu_state.menu_state == startup){
		LCD_WRITE(32);
		current_menu_state.cursor_option = 0;
		curser_start();

	}else if(current_menu_state.menu_state == ADSR_Mod){
 8005ba2:	4b12      	ldr	r3, [pc, #72]	; (8005bec <handle_back+0x68>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b05      	cmp	r3, #5
 8005ba8:	d108      	bne.n	8005bbc <handle_back+0x38>
		current_menu_state.menu_state = ADSR;
 8005baa:	4b10      	ldr	r3, [pc, #64]	; (8005bec <handle_back+0x68>)
 8005bac:	2202      	movs	r2, #2
 8005bae:	701a      	strb	r2, [r3, #0]
		current_menu_state.cursor_option = 0;
 8005bb0:	4b0e      	ldr	r3, [pc, #56]	; (8005bec <handle_back+0x68>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	605a      	str	r2, [r3, #4]
		display_new_menu();
 8005bb6:	f000 f987 	bl	8005ec8 <display_new_menu>
		current_menu_state.menu_state = startup;
		current_menu_state.cursor_option = 0;
		display_new_menu();

	}
}
 8005bba:	e014      	b.n	8005be6 <handle_back+0x62>
	}else if(current_menu_state.menu_state == ADSR_Mod){
		current_menu_state.menu_state = ADSR;
		current_menu_state.cursor_option = 0;
		display_new_menu();

	}else if(current_menu_state.menu_state == LFO_Mod){
 8005bbc:	4b0b      	ldr	r3, [pc, #44]	; (8005bec <handle_back+0x68>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b06      	cmp	r3, #6
 8005bc2:	d108      	bne.n	8005bd6 <handle_back+0x52>
		current_menu_state.menu_state = LFO;
 8005bc4:	4b09      	ldr	r3, [pc, #36]	; (8005bec <handle_back+0x68>)
 8005bc6:	2203      	movs	r2, #3
 8005bc8:	701a      	strb	r2, [r3, #0]
		current_menu_state.cursor_option = 0;
 8005bca:	4b08      	ldr	r3, [pc, #32]	; (8005bec <handle_back+0x68>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	605a      	str	r2, [r3, #4]
		display_new_menu();
 8005bd0:	f000 f97a 	bl	8005ec8 <display_new_menu>
		current_menu_state.menu_state = startup;
		current_menu_state.cursor_option = 0;
		display_new_menu();

	}
}
 8005bd4:	e007      	b.n	8005be6 <handle_back+0x62>
		current_menu_state.menu_state = LFO;
		current_menu_state.cursor_option = 0;
		display_new_menu();

	}else{
		current_menu_state.menu_state = startup;
 8005bd6:	4b05      	ldr	r3, [pc, #20]	; (8005bec <handle_back+0x68>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
		current_menu_state.cursor_option = 0;
 8005bdc:	4b03      	ldr	r3, [pc, #12]	; (8005bec <handle_back+0x68>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	605a      	str	r2, [r3, #4]
		display_new_menu();
 8005be2:	f000 f971 	bl	8005ec8 <display_new_menu>

	}
}
 8005be6:	bf00      	nop
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20006508 	.word	0x20006508

08005bf0 <handle_up>:



void handle_up(){
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
	if(current_menu_state.menu_state == LFO || current_menu_state.menu_state == LFO_Mod || current_menu_state.menu_state == ADSR_Mod || current_menu_state.menu_state == ADSR ){
 8005bf4:	4b59      	ldr	r3, [pc, #356]	; (8005d5c <handle_up+0x16c>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d00b      	beq.n	8005c14 <handle_up+0x24>
 8005bfc:	4b57      	ldr	r3, [pc, #348]	; (8005d5c <handle_up+0x16c>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b06      	cmp	r3, #6
 8005c02:	d007      	beq.n	8005c14 <handle_up+0x24>
 8005c04:	4b55      	ldr	r3, [pc, #340]	; (8005d5c <handle_up+0x16c>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b05      	cmp	r3, #5
 8005c0a:	d003      	beq.n	8005c14 <handle_up+0x24>
 8005c0c:	4b53      	ldr	r3, [pc, #332]	; (8005d5c <handle_up+0x16c>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d132      	bne.n	8005c7a <handle_up+0x8a>
		switch(current_menu_state.cursor_option){
 8005c14:	4b51      	ldr	r3, [pc, #324]	; (8005d5c <handle_up+0x16c>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d014      	beq.n	8005c46 <handle_up+0x56>
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d302      	bcc.n	8005c26 <handle_up+0x36>
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d020      	beq.n	8005c66 <handle_up+0x76>
				current_menu_state.cursor_option = 0;
				curser_start();
				break;
		}

	}else if(current_menu_state.menu_state == secondaryVCO){
 8005c24:	e097      	b.n	8005d56 <handle_up+0x166>

void handle_up(){
	if(current_menu_state.menu_state == LFO || current_menu_state.menu_state == LFO_Mod || current_menu_state.menu_state == ADSR_Mod || current_menu_state.menu_state == ADSR ){
		switch(current_menu_state.cursor_option){
			case 0:
				LCD_WRITE(32);
 8005c26:	2020      	movs	r0, #32
 8005c28:	f7fd fe42 	bl	80038b0 <LCD_WRITE>
				current_menu_state.cursor_option = 1;
 8005c2c:	4b4b      	ldr	r3, [pc, #300]	; (8005d5c <handle_up+0x16c>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	605a      	str	r2, [r3, #4]
				LCD_SETDDRAM(0x1D);
 8005c32:	201d      	movs	r0, #29
 8005c34:	f7fd fe22 	bl	800387c <LCD_SETDDRAM>
				LCD_WRITE(199);
 8005c38:	20c7      	movs	r0, #199	; 0xc7
 8005c3a:	f7fd fe39 	bl	80038b0 <LCD_WRITE>
				LCD_SETDDRAM(0x1D);
 8005c3e:	201d      	movs	r0, #29
 8005c40:	f7fd fe1c 	bl	800387c <LCD_SETDDRAM>
				break;
 8005c44:	e018      	b.n	8005c78 <handle_up+0x88>

			case 1:
				LCD_WRITE(32);
 8005c46:	2020      	movs	r0, #32
 8005c48:	f7fd fe32 	bl	80038b0 <LCD_WRITE>
				current_menu_state.cursor_option = 2;
 8005c4c:	4b43      	ldr	r3, [pc, #268]	; (8005d5c <handle_up+0x16c>)
 8005c4e:	2202      	movs	r2, #2
 8005c50:	605a      	str	r2, [r3, #4]
				LCD_SETDDRAM(0x54);
 8005c52:	2054      	movs	r0, #84	; 0x54
 8005c54:	f7fd fe12 	bl	800387c <LCD_SETDDRAM>
				LCD_WRITE(199);
 8005c58:	20c7      	movs	r0, #199	; 0xc7
 8005c5a:	f7fd fe29 	bl	80038b0 <LCD_WRITE>
				LCD_SETDDRAM(0x54);
 8005c5e:	2054      	movs	r0, #84	; 0x54
 8005c60:	f7fd fe0c 	bl	800387c <LCD_SETDDRAM>
				break;
 8005c64:	e008      	b.n	8005c78 <handle_up+0x88>

			case 2:
				LCD_WRITE(32);
 8005c66:	2020      	movs	r0, #32
 8005c68:	f7fd fe22 	bl	80038b0 <LCD_WRITE>
				current_menu_state.cursor_option = 0;
 8005c6c:	4b3b      	ldr	r3, [pc, #236]	; (8005d5c <handle_up+0x16c>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	605a      	str	r2, [r3, #4]
				curser_start();
 8005c72:	f000 f9c5 	bl	8006000 <curser_start>
				break;
 8005c76:	bf00      	nop
		}

	}else if(current_menu_state.menu_state == secondaryVCO){
 8005c78:	e06d      	b.n	8005d56 <handle_up+0x166>
 8005c7a:	4b38      	ldr	r3, [pc, #224]	; (8005d5c <handle_up+0x16c>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d120      	bne.n	8005cc4 <handle_up+0xd4>
		switch(current_menu_state.cursor_option){
 8005c82:	4b36      	ldr	r3, [pc, #216]	; (8005d5c <handle_up+0x16c>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <handle_up+0xa0>
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d010      	beq.n	8005cb0 <handle_up+0xc0>
				current_menu_state.cursor_option = 0;
				curser_start();
				break;
		}
	}
}
 8005c8e:	e062      	b.n	8005d56 <handle_up+0x166>
		}

	}else if(current_menu_state.menu_state == secondaryVCO){
		switch(current_menu_state.cursor_option){
			case 0:
				LCD_WRITE(32);
 8005c90:	2020      	movs	r0, #32
 8005c92:	f7fd fe0d 	bl	80038b0 <LCD_WRITE>
				current_menu_state.cursor_option = 1;
 8005c96:	4b31      	ldr	r3, [pc, #196]	; (8005d5c <handle_up+0x16c>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	605a      	str	r2, [r3, #4]
				LCD_SETDDRAM(0x1D);
 8005c9c:	201d      	movs	r0, #29
 8005c9e:	f7fd fded 	bl	800387c <LCD_SETDDRAM>
				LCD_WRITE(199);
 8005ca2:	20c7      	movs	r0, #199	; 0xc7
 8005ca4:	f7fd fe04 	bl	80038b0 <LCD_WRITE>
				LCD_SETDDRAM(0x1D);
 8005ca8:	201d      	movs	r0, #29
 8005caa:	f7fd fde7 	bl	800387c <LCD_SETDDRAM>
				break;
 8005cae:	e052      	b.n	8005d56 <handle_up+0x166>

			case 1:
				LCD_WRITE(32);
 8005cb0:	2020      	movs	r0, #32
 8005cb2:	f7fd fdfd 	bl	80038b0 <LCD_WRITE>
				current_menu_state.cursor_option = 0;
 8005cb6:	4b29      	ldr	r3, [pc, #164]	; (8005d5c <handle_up+0x16c>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	605a      	str	r2, [r3, #4]
				curser_start();
 8005cbc:	f000 f9a0 	bl	8006000 <curser_start>
				break;
 8005cc0:	bf00      	nop
 8005cc2:	e048      	b.n	8005d56 <handle_up+0x166>
		}

	}else{
		switch(current_menu_state.cursor_option){
 8005cc4:	4b25      	ldr	r3, [pc, #148]	; (8005d5c <handle_up+0x16c>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d844      	bhi.n	8005d56 <handle_up+0x166>
 8005ccc:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <handle_up+0xe4>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	08005d25 	.word	0x08005d25
 8005ce0:	08005d45 	.word	0x08005d45
			case 0:
				LCD_WRITE(32);
 8005ce4:	2020      	movs	r0, #32
 8005ce6:	f7fd fde3 	bl	80038b0 <LCD_WRITE>
				current_menu_state.cursor_option = 1;
 8005cea:	4b1c      	ldr	r3, [pc, #112]	; (8005d5c <handle_up+0x16c>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	605a      	str	r2, [r3, #4]
				LCD_SETDDRAM(0x1D);
 8005cf0:	201d      	movs	r0, #29
 8005cf2:	f7fd fdc3 	bl	800387c <LCD_SETDDRAM>
				LCD_WRITE(199);
 8005cf6:	20c7      	movs	r0, #199	; 0xc7
 8005cf8:	f7fd fdda 	bl	80038b0 <LCD_WRITE>
				LCD_SETDDRAM(0x1D);
 8005cfc:	201d      	movs	r0, #29
 8005cfe:	f7fd fdbd 	bl	800387c <LCD_SETDDRAM>
				break;
 8005d02:	e028      	b.n	8005d56 <handle_up+0x166>

			case 1:
				LCD_WRITE(32);
 8005d04:	2020      	movs	r0, #32
 8005d06:	f7fd fdd3 	bl	80038b0 <LCD_WRITE>
				current_menu_state.cursor_option = 2;
 8005d0a:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <handle_up+0x16c>)
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	605a      	str	r2, [r3, #4]
				LCD_SETDDRAM(0x54);
 8005d10:	2054      	movs	r0, #84	; 0x54
 8005d12:	f7fd fdb3 	bl	800387c <LCD_SETDDRAM>
				LCD_WRITE(199);
 8005d16:	20c7      	movs	r0, #199	; 0xc7
 8005d18:	f7fd fdca 	bl	80038b0 <LCD_WRITE>
				LCD_SETDDRAM(0x54);
 8005d1c:	2054      	movs	r0, #84	; 0x54
 8005d1e:	f7fd fdad 	bl	800387c <LCD_SETDDRAM>
				break;
 8005d22:	e018      	b.n	8005d56 <handle_up+0x166>

			case 2:
				LCD_WRITE(32);
 8005d24:	2020      	movs	r0, #32
 8005d26:	f7fd fdc3 	bl	80038b0 <LCD_WRITE>
				current_menu_state.cursor_option = 3;
 8005d2a:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <handle_up+0x16c>)
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	605a      	str	r2, [r3, #4]
				LCD_SETDDRAM(0x5D);
 8005d30:	205d      	movs	r0, #93	; 0x5d
 8005d32:	f7fd fda3 	bl	800387c <LCD_SETDDRAM>
				LCD_WRITE(199);
 8005d36:	20c7      	movs	r0, #199	; 0xc7
 8005d38:	f7fd fdba 	bl	80038b0 <LCD_WRITE>
				LCD_SETDDRAM(0x5D);
 8005d3c:	205d      	movs	r0, #93	; 0x5d
 8005d3e:	f7fd fd9d 	bl	800387c <LCD_SETDDRAM>
				break;
 8005d42:	e008      	b.n	8005d56 <handle_up+0x166>

			case 3:
				LCD_WRITE(32);
 8005d44:	2020      	movs	r0, #32
 8005d46:	f7fd fdb3 	bl	80038b0 <LCD_WRITE>
				current_menu_state.cursor_option = 0;
 8005d4a:	4b04      	ldr	r3, [pc, #16]	; (8005d5c <handle_up+0x16c>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	605a      	str	r2, [r3, #4]
				curser_start();
 8005d50:	f000 f956 	bl	8006000 <curser_start>
				break;
 8005d54:	bf00      	nop
		}
	}
}
 8005d56:	bf00      	nop
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20006508 	.word	0x20006508

08005d60 <handle_down>:


/*
 * not gonna use this button
 */
void handle_down(){
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
	if(current_menu_state.menu_state == LFO || current_menu_state.menu_state == LFO_Mod || current_menu_state.menu_state == ADSR_Mod ){
 8005d64:	4b57      	ldr	r3, [pc, #348]	; (8005ec4 <handle_down+0x164>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d007      	beq.n	8005d7c <handle_down+0x1c>
 8005d6c:	4b55      	ldr	r3, [pc, #340]	; (8005ec4 <handle_down+0x164>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b06      	cmp	r3, #6
 8005d72:	d003      	beq.n	8005d7c <handle_down+0x1c>
 8005d74:	4b53      	ldr	r3, [pc, #332]	; (8005ec4 <handle_down+0x164>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b05      	cmp	r3, #5
 8005d7a:	d132      	bne.n	8005de2 <handle_down+0x82>
		switch(current_menu_state.cursor_option){
 8005d7c:	4b51      	ldr	r3, [pc, #324]	; (8005ec4 <handle_down+0x164>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d014      	beq.n	8005dae <handle_down+0x4e>
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d302      	bcc.n	8005d8e <handle_down+0x2e>
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d019      	beq.n	8005dc0 <handle_down+0x60>
				LCD_WRITE(199);
				LCD_SETDDRAM(0x1D);
				break;
			}

	}else if(current_menu_state.menu_state == secondaryVCO){
 8005d8c:	e097      	b.n	8005ebe <handle_down+0x15e>
 */
void handle_down(){
	if(current_menu_state.menu_state == LFO || current_menu_state.menu_state == LFO_Mod || current_menu_state.menu_state == ADSR_Mod ){
		switch(current_menu_state.cursor_option){
			case 0:
				LCD_WRITE(32);
 8005d8e:	2020      	movs	r0, #32
 8005d90:	f7fd fd8e 	bl	80038b0 <LCD_WRITE>
				current_menu_state.cursor_option = 2;
 8005d94:	4b4b      	ldr	r3, [pc, #300]	; (8005ec4 <handle_down+0x164>)
 8005d96:	2202      	movs	r2, #2
 8005d98:	605a      	str	r2, [r3, #4]
				LCD_SETDDRAM(0x54);
 8005d9a:	2054      	movs	r0, #84	; 0x54
 8005d9c:	f7fd fd6e 	bl	800387c <LCD_SETDDRAM>
				LCD_WRITE(199);
 8005da0:	20c7      	movs	r0, #199	; 0xc7
 8005da2:	f7fd fd85 	bl	80038b0 <LCD_WRITE>
				LCD_SETDDRAM(0x54);
 8005da6:	2054      	movs	r0, #84	; 0x54
 8005da8:	f7fd fd68 	bl	800387c <LCD_SETDDRAM>
				break;
 8005dac:	e018      	b.n	8005de0 <handle_down+0x80>

			case 1:
				LCD_WRITE(32);
 8005dae:	2020      	movs	r0, #32
 8005db0:	f7fd fd7e 	bl	80038b0 <LCD_WRITE>
				current_menu_state.cursor_option = 0;
 8005db4:	4b43      	ldr	r3, [pc, #268]	; (8005ec4 <handle_down+0x164>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	605a      	str	r2, [r3, #4]
				curser_start();
 8005dba:	f000 f921 	bl	8006000 <curser_start>
				break;
 8005dbe:	e00f      	b.n	8005de0 <handle_down+0x80>

			case 2:
				LCD_WRITE(32);
 8005dc0:	2020      	movs	r0, #32
 8005dc2:	f7fd fd75 	bl	80038b0 <LCD_WRITE>
				current_menu_state.cursor_option = 1;
 8005dc6:	4b3f      	ldr	r3, [pc, #252]	; (8005ec4 <handle_down+0x164>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	605a      	str	r2, [r3, #4]
				LCD_SETDDRAM(0x1D);
 8005dcc:	201d      	movs	r0, #29
 8005dce:	f7fd fd55 	bl	800387c <LCD_SETDDRAM>
				LCD_WRITE(199);
 8005dd2:	20c7      	movs	r0, #199	; 0xc7
 8005dd4:	f7fd fd6c 	bl	80038b0 <LCD_WRITE>
				LCD_SETDDRAM(0x1D);
 8005dd8:	201d      	movs	r0, #29
 8005dda:	f7fd fd4f 	bl	800387c <LCD_SETDDRAM>
				break;
 8005dde:	bf00      	nop
			}

	}else if(current_menu_state.menu_state == secondaryVCO){
 8005de0:	e06d      	b.n	8005ebe <handle_down+0x15e>
 8005de2:	4b38      	ldr	r3, [pc, #224]	; (8005ec4 <handle_down+0x164>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d120      	bne.n	8005e2c <handle_down+0xcc>
			switch(current_menu_state.cursor_option){
 8005dea:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <handle_down+0x164>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <handle_down+0x98>
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d010      	beq.n	8005e18 <handle_down+0xb8>
			LCD_WRITE(199);
			LCD_SETDDRAM(0x54);
			break;
		}
	}
}
 8005df6:	e062      	b.n	8005ebe <handle_down+0x15e>
			}

	}else if(current_menu_state.menu_state == secondaryVCO){
			switch(current_menu_state.cursor_option){
				case 0:
					LCD_WRITE(32);
 8005df8:	2020      	movs	r0, #32
 8005dfa:	f7fd fd59 	bl	80038b0 <LCD_WRITE>
					current_menu_state.cursor_option = 1;
 8005dfe:	4b31      	ldr	r3, [pc, #196]	; (8005ec4 <handle_down+0x164>)
 8005e00:	2201      	movs	r2, #1
 8005e02:	605a      	str	r2, [r3, #4]
					LCD_SETDDRAM(0x1D);
 8005e04:	201d      	movs	r0, #29
 8005e06:	f7fd fd39 	bl	800387c <LCD_SETDDRAM>
					LCD_WRITE(199);
 8005e0a:	20c7      	movs	r0, #199	; 0xc7
 8005e0c:	f7fd fd50 	bl	80038b0 <LCD_WRITE>
					LCD_SETDDRAM(0x1D);
 8005e10:	201d      	movs	r0, #29
 8005e12:	f7fd fd33 	bl	800387c <LCD_SETDDRAM>
					break;
 8005e16:	e052      	b.n	8005ebe <handle_down+0x15e>

				case 1:
					LCD_WRITE(32);
 8005e18:	2020      	movs	r0, #32
 8005e1a:	f7fd fd49 	bl	80038b0 <LCD_WRITE>
					current_menu_state.cursor_option = 0;
 8005e1e:	4b29      	ldr	r3, [pc, #164]	; (8005ec4 <handle_down+0x164>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	605a      	str	r2, [r3, #4]
					curser_start();
 8005e24:	f000 f8ec 	bl	8006000 <curser_start>
					break;
 8005e28:	bf00      	nop
 8005e2a:	e048      	b.n	8005ebe <handle_down+0x15e>
			}

	}else{
		switch(current_menu_state.cursor_option){
 8005e2c:	4b25      	ldr	r3, [pc, #148]	; (8005ec4 <handle_down+0x164>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d844      	bhi.n	8005ebe <handle_down+0x15e>
 8005e34:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <handle_down+0xdc>)
 8005e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005e4d 	.word	0x08005e4d
 8005e40:	08005e6d 	.word	0x08005e6d
 8005e44:	08005e7f 	.word	0x08005e7f
 8005e48:	08005e9f 	.word	0x08005e9f
		case 0:
			LCD_WRITE(32);
 8005e4c:	2020      	movs	r0, #32
 8005e4e:	f7fd fd2f 	bl	80038b0 <LCD_WRITE>
			current_menu_state.cursor_option = 3;
 8005e52:	4b1c      	ldr	r3, [pc, #112]	; (8005ec4 <handle_down+0x164>)
 8005e54:	2203      	movs	r2, #3
 8005e56:	605a      	str	r2, [r3, #4]
			LCD_SETDDRAM(0x5D);
 8005e58:	205d      	movs	r0, #93	; 0x5d
 8005e5a:	f7fd fd0f 	bl	800387c <LCD_SETDDRAM>
			LCD_WRITE(199);
 8005e5e:	20c7      	movs	r0, #199	; 0xc7
 8005e60:	f7fd fd26 	bl	80038b0 <LCD_WRITE>
			LCD_SETDDRAM(0x5D);
 8005e64:	205d      	movs	r0, #93	; 0x5d
 8005e66:	f7fd fd09 	bl	800387c <LCD_SETDDRAM>
			break;
 8005e6a:	e028      	b.n	8005ebe <handle_down+0x15e>

		case 1:
			LCD_WRITE(32);
 8005e6c:	2020      	movs	r0, #32
 8005e6e:	f7fd fd1f 	bl	80038b0 <LCD_WRITE>
			current_menu_state.cursor_option = 0;
 8005e72:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <handle_down+0x164>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	605a      	str	r2, [r3, #4]
			curser_start();
 8005e78:	f000 f8c2 	bl	8006000 <curser_start>
			break;
 8005e7c:	e01f      	b.n	8005ebe <handle_down+0x15e>

		case 2:
			LCD_WRITE(32);
 8005e7e:	2020      	movs	r0, #32
 8005e80:	f7fd fd16 	bl	80038b0 <LCD_WRITE>
			current_menu_state.cursor_option = 1;
 8005e84:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <handle_down+0x164>)
 8005e86:	2201      	movs	r2, #1
 8005e88:	605a      	str	r2, [r3, #4]
			LCD_SETDDRAM(0x1D);
 8005e8a:	201d      	movs	r0, #29
 8005e8c:	f7fd fcf6 	bl	800387c <LCD_SETDDRAM>
			LCD_WRITE(199);
 8005e90:	20c7      	movs	r0, #199	; 0xc7
 8005e92:	f7fd fd0d 	bl	80038b0 <LCD_WRITE>
			LCD_SETDDRAM(0x1D);
 8005e96:	201d      	movs	r0, #29
 8005e98:	f7fd fcf0 	bl	800387c <LCD_SETDDRAM>
			break;
 8005e9c:	e00f      	b.n	8005ebe <handle_down+0x15e>

		case 3:
			LCD_WRITE(32);
 8005e9e:	2020      	movs	r0, #32
 8005ea0:	f7fd fd06 	bl	80038b0 <LCD_WRITE>
			current_menu_state.cursor_option = 2;
 8005ea4:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <handle_down+0x164>)
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	605a      	str	r2, [r3, #4]
			LCD_SETDDRAM(0x54);
 8005eaa:	2054      	movs	r0, #84	; 0x54
 8005eac:	f7fd fce6 	bl	800387c <LCD_SETDDRAM>
			LCD_WRITE(199);
 8005eb0:	20c7      	movs	r0, #199	; 0xc7
 8005eb2:	f7fd fcfd 	bl	80038b0 <LCD_WRITE>
			LCD_SETDDRAM(0x54);
 8005eb6:	2054      	movs	r0, #84	; 0x54
 8005eb8:	f7fd fce0 	bl	800387c <LCD_SETDDRAM>
			break;
 8005ebc:	bf00      	nop
		}
	}
}
 8005ebe:	bf00      	nop
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20006508 	.word	0x20006508

08005ec8 <display_new_menu>:

void display_new_menu(){
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0

	switch(current_menu_state.menu_state){
 8005ecc:	4b3a      	ldr	r3, [pc, #232]	; (8005fb8 <display_new_menu+0xf0>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b06      	cmp	r3, #6
 8005ed2:	d86c      	bhi.n	8005fae <display_new_menu+0xe6>
 8005ed4:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <display_new_menu+0x14>)
 8005ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eda:	bf00      	nop
 8005edc:	08005ef9 	.word	0x08005ef9
 8005ee0:	08005f13 	.word	0x08005f13
 8005ee4:	08005f2d 	.word	0x08005f2d
 8005ee8:	08005f61 	.word	0x08005f61
 8005eec:	08005f95 	.word	0x08005f95
 8005ef0:	08005f47 	.word	0x08005f47
 8005ef4:	08005f7b 	.word	0x08005f7b

		case startup:
			lcd_writeline("     Main  Menu     ", 1);
 8005ef8:	2101      	movs	r1, #1
 8005efa:	4830      	ldr	r0, [pc, #192]	; (8005fbc <display_new_menu+0xf4>)
 8005efc:	f7fd fcea 	bl	80038d4 <lcd_writeline>
			lcd_writeline(" ADSR     Filter    ", 2);
 8005f00:	2102      	movs	r1, #2
 8005f02:	482f      	ldr	r0, [pc, #188]	; (8005fc0 <display_new_menu+0xf8>)
 8005f04:	f7fd fce6 	bl	80038d4 <lcd_writeline>
			lcd_writeline(" LFO      Sec VCO   ", 3);
 8005f08:	2103      	movs	r1, #3
 8005f0a:	482e      	ldr	r0, [pc, #184]	; (8005fc4 <display_new_menu+0xfc>)
 8005f0c:	f7fd fce2 	bl	80038d4 <lcd_writeline>
			break;
 8005f10:	e04d      	b.n	8005fae <display_new_menu+0xe6>

		case filter:
			lcd_writeline("    Filter  Menu    ", 1);
 8005f12:	2101      	movs	r1, #1
 8005f14:	482c      	ldr	r0, [pc, #176]	; (8005fc8 <display_new_menu+0x100>)
 8005f16:	f7fd fcdd 	bl	80038d4 <lcd_writeline>
			lcd_writeline(" Off      HighPass  ", 2);
 8005f1a:	2102      	movs	r1, #2
 8005f1c:	482b      	ldr	r0, [pc, #172]	; (8005fcc <display_new_menu+0x104>)
 8005f1e:	f7fd fcd9 	bl	80038d4 <lcd_writeline>
			lcd_writeline(" LowPass  BandPass  ", 3);
 8005f22:	2103      	movs	r1, #3
 8005f24:	482a      	ldr	r0, [pc, #168]	; (8005fd0 <display_new_menu+0x108>)
 8005f26:	f7fd fcd5 	bl	80038d4 <lcd_writeline>
			break;
 8005f2a:	e040      	b.n	8005fae <display_new_menu+0xe6>

		case ADSR:
			lcd_writeline("     ADSR  Menu     ", 1);
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	4829      	ldr	r0, [pc, #164]	; (8005fd4 <display_new_menu+0x10c>)
 8005f30:	f7fd fcd0 	bl	80038d4 <lcd_writeline>
			lcd_writeline(" Off      ON        ", 2);
 8005f34:	2102      	movs	r1, #2
 8005f36:	4828      	ldr	r0, [pc, #160]	; (8005fd8 <display_new_menu+0x110>)
 8005f38:	f7fd fccc 	bl	80038d4 <lcd_writeline>
			lcd_writeline(" AM+FM_VCO_Mode     ", 3);
 8005f3c:	2103      	movs	r1, #3
 8005f3e:	4827      	ldr	r0, [pc, #156]	; (8005fdc <display_new_menu+0x114>)
 8005f40:	f7fd fcc8 	bl	80038d4 <lcd_writeline>
			break;
 8005f44:	e033      	b.n	8005fae <display_new_menu+0xe6>

		case ADSR_Mod:
			lcd_writeline("ADSR Modulation Menu", 1);
 8005f46:	2101      	movs	r1, #1
 8005f48:	4825      	ldr	r0, [pc, #148]	; (8005fe0 <display_new_menu+0x118>)
 8005f4a:	f7fd fcc3 	bl	80038d4 <lcd_writeline>
			lcd_writeline(" VCO_AMP  VCO_FREQ  ", 2);
 8005f4e:	2102      	movs	r1, #2
 8005f50:	4824      	ldr	r0, [pc, #144]	; (8005fe4 <display_new_menu+0x11c>)
 8005f52:	f7fd fcbf 	bl	80038d4 <lcd_writeline>
			lcd_writeline(" Filter_Freq        ", 3);
 8005f56:	2103      	movs	r1, #3
 8005f58:	4823      	ldr	r0, [pc, #140]	; (8005fe8 <display_new_menu+0x120>)
 8005f5a:	f7fd fcbb 	bl	80038d4 <lcd_writeline>
			break;
 8005f5e:	e026      	b.n	8005fae <display_new_menu+0xe6>

		case LFO:

			lcd_writeline("     LFO   Menu     ", 1);
 8005f60:	2101      	movs	r1, #1
 8005f62:	4822      	ldr	r0, [pc, #136]	; (8005fec <display_new_menu+0x124>)
 8005f64:	f7fd fcb6 	bl	80038d4 <lcd_writeline>
			lcd_writeline(" OFF      ON        ", 2);
 8005f68:	2102      	movs	r1, #2
 8005f6a:	4821      	ldr	r0, [pc, #132]	; (8005ff0 <display_new_menu+0x128>)
 8005f6c:	f7fd fcb2 	bl	80038d4 <lcd_writeline>
			lcd_writeline(" AM+FM_VCO_Mode     ", 3);
 8005f70:	2103      	movs	r1, #3
 8005f72:	481a      	ldr	r0, [pc, #104]	; (8005fdc <display_new_menu+0x114>)
 8005f74:	f7fd fcae 	bl	80038d4 <lcd_writeline>
			break;
 8005f78:	e019      	b.n	8005fae <display_new_menu+0xe6>

		case LFO_Mod:
			lcd_writeline("LFO Modulation Menu ", 1);
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	481d      	ldr	r0, [pc, #116]	; (8005ff4 <display_new_menu+0x12c>)
 8005f7e:	f7fd fca9 	bl	80038d4 <lcd_writeline>
			lcd_writeline(" VCO_AMP  VCO_FREQ  ", 2);
 8005f82:	2102      	movs	r1, #2
 8005f84:	4817      	ldr	r0, [pc, #92]	; (8005fe4 <display_new_menu+0x11c>)
 8005f86:	f7fd fca5 	bl	80038d4 <lcd_writeline>
			lcd_writeline(" Filter_Freq        ", 3);
 8005f8a:	2103      	movs	r1, #3
 8005f8c:	4816      	ldr	r0, [pc, #88]	; (8005fe8 <display_new_menu+0x120>)
 8005f8e:	f7fd fca1 	bl	80038d4 <lcd_writeline>
			break;
 8005f92:	e00c      	b.n	8005fae <display_new_menu+0xe6>

		case secondaryVCO:
			lcd_writeline(" Secondary VCO Menu ", 1);
 8005f94:	2101      	movs	r1, #1
 8005f96:	4818      	ldr	r0, [pc, #96]	; (8005ff8 <display_new_menu+0x130>)
 8005f98:	f7fd fc9c 	bl	80038d4 <lcd_writeline>
			lcd_writeline(" OFF      ON        ", 2);
 8005f9c:	2102      	movs	r1, #2
 8005f9e:	4814      	ldr	r0, [pc, #80]	; (8005ff0 <display_new_menu+0x128>)
 8005fa0:	f7fd fc98 	bl	80038d4 <lcd_writeline>
			lcd_writeline("                    ", 3);
 8005fa4:	2103      	movs	r1, #3
 8005fa6:	4815      	ldr	r0, [pc, #84]	; (8005ffc <display_new_menu+0x134>)
 8005fa8:	f7fd fc94 	bl	80038d4 <lcd_writeline>
			break;
 8005fac:	bf00      	nop
		}
	curser_start();
 8005fae:	f000 f827 	bl	8006000 <curser_start>
	}
 8005fb2:	bf00      	nop
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20006508 	.word	0x20006508
 8005fbc:	080060f8 	.word	0x080060f8
 8005fc0:	08006110 	.word	0x08006110
 8005fc4:	08006128 	.word	0x08006128
 8005fc8:	08006140 	.word	0x08006140
 8005fcc:	08006158 	.word	0x08006158
 8005fd0:	08006170 	.word	0x08006170
 8005fd4:	08006188 	.word	0x08006188
 8005fd8:	080061a0 	.word	0x080061a0
 8005fdc:	080061b8 	.word	0x080061b8
 8005fe0:	080061d0 	.word	0x080061d0
 8005fe4:	080061e8 	.word	0x080061e8
 8005fe8:	08006200 	.word	0x08006200
 8005fec:	08006218 	.word	0x08006218
 8005ff0:	08006230 	.word	0x08006230
 8005ff4:	08006248 	.word	0x08006248
 8005ff8:	08006260 	.word	0x08006260
 8005ffc:	08006278 	.word	0x08006278

08006000 <curser_start>:


void curser_start(){
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
	LCD_SETDDRAM(0x14);
 8006004:	2014      	movs	r0, #20
 8006006:	f7fd fc39 	bl	800387c <LCD_SETDDRAM>
	LCD_WRITE(199);
 800600a:	20c7      	movs	r0, #199	; 0xc7
 800600c:	f7fd fc50 	bl	80038b0 <LCD_WRITE>
	LCD_SETDDRAM(0x14);
 8006010:	2014      	movs	r0, #20
 8006012:	f7fd fc33 	bl	800387c <LCD_SETDDRAM>
}
 8006016:	bf00      	nop
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop

0800601c <arm_sin_f32>:
 800601c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006088 <arm_sin_f32+0x6c>
 8006020:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006024:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800602c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8006030:	d504      	bpl.n	800603c <arm_sin_f32+0x20>
 8006032:	ee17 3a90 	vmov	r3, s15
 8006036:	3b01      	subs	r3, #1
 8006038:	ee07 3a90 	vmov	s15, r3
 800603c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006040:	eddf 6a12 	vldr	s13, [pc, #72]	; 800608c <arm_sin_f32+0x70>
 8006044:	4a12      	ldr	r2, [pc, #72]	; (8006090 <arm_sin_f32+0x74>)
 8006046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800604a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800604e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006052:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8006056:	ee16 3a90 	vmov	r3, s13
 800605a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605e:	ee06 3a90 	vmov	s13, r3
 8006062:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 8006066:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800606a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800606e:	edd1 6a00 	vldr	s13, [r1]
 8006072:	ed91 7a01 	vldr	s14, [r1, #4]
 8006076:	ee30 0a67 	vsub.f32	s0, s0, s15
 800607a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800607e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006082:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006086:	4770      	bx	lr
 8006088:	3e22f983 	.word	0x3e22f983
 800608c:	44000000 	.word	0x44000000
 8006090:	08006298 	.word	0x08006298

08006094 <__libc_init_array>:
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	4b0e      	ldr	r3, [pc, #56]	; (80060d0 <__libc_init_array+0x3c>)
 8006098:	4c0e      	ldr	r4, [pc, #56]	; (80060d4 <__libc_init_array+0x40>)
 800609a:	1ae4      	subs	r4, r4, r3
 800609c:	10a4      	asrs	r4, r4, #2
 800609e:	2500      	movs	r5, #0
 80060a0:	461e      	mov	r6, r3
 80060a2:	42a5      	cmp	r5, r4
 80060a4:	d004      	beq.n	80060b0 <__libc_init_array+0x1c>
 80060a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060aa:	4798      	blx	r3
 80060ac:	3501      	adds	r5, #1
 80060ae:	e7f8      	b.n	80060a2 <__libc_init_array+0xe>
 80060b0:	f000 f816 	bl	80060e0 <_init>
 80060b4:	4c08      	ldr	r4, [pc, #32]	; (80060d8 <__libc_init_array+0x44>)
 80060b6:	4b09      	ldr	r3, [pc, #36]	; (80060dc <__libc_init_array+0x48>)
 80060b8:	1ae4      	subs	r4, r4, r3
 80060ba:	10a4      	asrs	r4, r4, #2
 80060bc:	2500      	movs	r5, #0
 80060be:	461e      	mov	r6, r3
 80060c0:	42a5      	cmp	r5, r4
 80060c2:	d004      	beq.n	80060ce <__libc_init_array+0x3a>
 80060c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060c8:	4798      	blx	r3
 80060ca:	3501      	adds	r5, #1
 80060cc:	e7f8      	b.n	80060c0 <__libc_init_array+0x2c>
 80060ce:	bd70      	pop	{r4, r5, r6, pc}
 80060d0:	08006a9c 	.word	0x08006a9c
 80060d4:	08006a9c 	.word	0x08006a9c
 80060d8:	08006aa0 	.word	0x08006aa0
 80060dc:	08006a9c 	.word	0x08006a9c

080060e0 <_init>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	bf00      	nop
 80060e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e6:	bc08      	pop	{r3}
 80060e8:	469e      	mov	lr, r3
 80060ea:	4770      	bx	lr

080060ec <_fini>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	bf00      	nop
 80060f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f2:	bc08      	pop	{r3}
 80060f4:	469e      	mov	lr, r3
 80060f6:	4770      	bx	lr
