
C:\stm32_workspace\synth_02\Debug\synth_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a10  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08009b98  08009b98  00019b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a988  0800a988  0001a988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a98c  0800a98c  0001a98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000005a4  20000000  0800a990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000205a4  2**0
                  CONTENTS
  7 .bss          00004508  200005a4  200005a4  000205a4  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20004aac  20004aac  000205a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000205a4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c803  00000000  00000000  000205d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fbe  00000000  00000000  0002cdd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f10  00000000  00000000  0002ed98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000da0  00000000  00000000  0002fca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005843  00000000  00000000  00030a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004ce1  00000000  00000000  0003628b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000ee  00000000  00000000  0003af6c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004740  00000000  00000000  0003b05c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000000c8  00000000  00000000  0003f79c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200005a4 	.word	0x200005a4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009b80 	.word	0x08009b80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200005a8 	.word	0x200005a8
 80001c4:	08009b80 	.word	0x08009b80

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2iz>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d215      	bcs.n	8000ace <__aeabi_d2iz+0x36>
 8000aa2:	d511      	bpl.n	8000ac8 <__aeabi_d2iz+0x30>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d912      	bls.n	8000ad4 <__aeabi_d2iz+0x3c>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_d2iz+0x48>
 8000ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	bf08      	it	eq
 8000ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	2300      	movs	r3, #0
 8000b96:	73bb      	strb	r3, [r7, #14]
 8000b98:	230f      	movs	r3, #15
 8000b9a:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	78db      	ldrb	r3, [r3, #3]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d038      	beq.n	8000c16 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <NVIC_Init+0xbc>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bae:	0a1b      	lsrs	r3, r3, #8
 8000bb0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	f1c3 0304 	rsb	r3, r3, #4
 8000bb8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000bba:	7b7a      	ldrb	r2, [r7, #13]
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	fa42 f303 	asr.w	r3, r2, r3
 8000bc2:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	785b      	ldrb	r3, [r3, #1]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	7bbb      	ldrb	r3, [r7, #14]
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	789a      	ldrb	r2, [r3, #2]
 8000bd6:	7b7b      	ldrb	r3, [r7, #13]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000be8:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <NVIC_Init+0xc0>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	7bfa      	ldrb	r2, [r7, #15]
 8000bf2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <NVIC_Init+0xc0>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	095b      	lsrs	r3, r3, #5
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	f003 031f 	and.w	r3, r3, #31
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c10:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000c14:	e00f      	b.n	8000c36 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c16:	490c      	ldr	r1, [pc, #48]	; (8000c48 <NVIC_Init+0xc0>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	095b      	lsrs	r3, r3, #5
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	f003 031f 	and.w	r3, r3, #31
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c2e:	f100 0320 	add.w	r3, r0, #32
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000c50:	2101      	movs	r1, #1
 8000c52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c56:	f001 f973 	bl	8001f40 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c60:	f001 f96e 	bl	8001f40 <RCC_APB2PeriphResetCmd>
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000c86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c8a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000c96:	4313      	orrs	r3, r2
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <ADC_Init+0xa8>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000cba:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000cc0:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	795b      	ldrb	r3, [r3, #5]
 8000cc6:	005b      	lsls	r3, r3, #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cda:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000ce2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	7d1b      	ldrb	r3, [r3, #20]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	7afb      	ldrb	r3, [r7, #11]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000cf2:	7afb      	ldrb	r3, [r7, #11]
 8000cf4:	051b      	lsls	r3, r3, #20
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	c0fff7fd 	.word	0xc0fff7fd

08000d14 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2201      	movs	r2, #1
 8000d44:	751a      	strb	r2, [r3, #20]
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <ADC_CommonInit+0x48>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <ADC_CommonInit+0x4c>)
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000d76:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000d7c:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000d82:	4313      	orrs	r3, r2
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <ADC_CommonInit+0x48>)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	6053      	str	r3, [r2, #4]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	40012300 	.word	0x40012300
 8000da0:	fffc30e0 	.word	0xfffc30e0

08000da4 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	60da      	str	r2, [r3, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d006      	beq.n	8000df0 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f043 0201 	orr.w	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000dee:	e005      	b.n	8000dfc <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f023 0201 	bic.w	r2, r3, #1
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	4608      	mov	r0, r1
 8000e12:	4611      	mov	r1, r2
 8000e14:	461a      	mov	r2, r3
 8000e16:	4603      	mov	r3, r0
 8000e18:	70fb      	strb	r3, [r7, #3]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	70bb      	strb	r3, [r7, #2]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000e2a:	78fb      	ldrb	r3, [r7, #3]
 8000e2c:	2b09      	cmp	r3, #9
 8000e2e:	d923      	bls.n	8000e78 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000e36:	78fb      	ldrb	r3, [r7, #3]
 8000e38:	f1a3 020a 	sub.w	r2, r3, #10
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	2207      	movs	r2, #7
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	4013      	ands	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000e54:	7879      	ldrb	r1, [r7, #1]
 8000e56:	78fb      	ldrb	r3, [r7, #3]
 8000e58:	f1a3 020a 	sub.w	r2, r3, #10
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4413      	add	r3, r2
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	e01e      	b.n	8000eb6 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000e7e:	78fa      	ldrb	r2, [r7, #3]
 8000e80:	4613      	mov	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	2207      	movs	r2, #7
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000e98:	7879      	ldrb	r1, [r7, #1]
 8000e9a:	78fa      	ldrb	r2, [r7, #3]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4413      	add	r3, r2
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000eb6:	78bb      	ldrb	r3, [r7, #2]
 8000eb8:	2b06      	cmp	r3, #6
 8000eba:	d821      	bhi.n	8000f00 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000ec2:	78bb      	ldrb	r3, [r7, #2]
 8000ec4:	1e5a      	subs	r2, r3, #1
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	221f      	movs	r2, #31
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4013      	ands	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000ede:	78f9      	ldrb	r1, [r7, #3]
 8000ee0:	78bb      	ldrb	r3, [r7, #2]
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000efe:	e047      	b.n	8000f90 <ADC_RegularChannelConfig+0x188>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000f00:	78bb      	ldrb	r3, [r7, #2]
 8000f02:	2b0c      	cmp	r3, #12
 8000f04:	d821      	bhi.n	8000f4a <ADC_RegularChannelConfig+0x142>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000f0c:	78bb      	ldrb	r3, [r7, #2]
 8000f0e:	1fda      	subs	r2, r3, #7
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	221f      	movs	r2, #31
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000f28:	78f9      	ldrb	r1, [r7, #3]
 8000f2a:	78bb      	ldrb	r3, [r7, #2]
 8000f2c:	1fda      	subs	r2, r3, #7
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	631a      	str	r2, [r3, #48]	; 0x30
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000f48:	e022      	b.n	8000f90 <ADC_RegularChannelConfig+0x188>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000f50:	78bb      	ldrb	r3, [r7, #2]
 8000f52:	f1a3 020d 	sub.w	r2, r3, #13
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	221f      	movs	r2, #31
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000f6e:	78f9      	ldrb	r1, [r7, #3]
 8000f70:	78bb      	ldrb	r3, [r7, #2]
 8000f72:	f1a3 020d 	sub.w	r2, r3, #13
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000fba:	e005      	b.n	8000fc8 <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
  }
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fe0:	78fb      	ldrb	r3, [r7, #3]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8000ff2:	e005      	b.n	8001000 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
  }
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	b29b      	uxth	r3, r3
 8001022:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	43da      	mvns	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	601a      	str	r2, [r3, #0]
}                    
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <DAC_Init+0x64>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8001050:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4013      	ands	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001070:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001076:	4313      	orrs	r3, r2
 8001078:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <DAC_Init+0x64>)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6013      	str	r3, [r2, #0]
}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40007400 	.word	0x40007400

080010a0 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d009      	beq.n	80010c6 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 80010b2:	490d      	ldr	r1, [pc, #52]	; (80010e8 <DAC_Cmd+0x48>)
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <DAC_Cmd+0x48>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	2001      	movs	r0, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	fa00 f303 	lsl.w	r3, r0, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 80010c4:	e009      	b.n	80010da <DAC_Cmd+0x3a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 80010c6:	4908      	ldr	r1, [pc, #32]	; (80010e8 <DAC_Cmd+0x48>)
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <DAC_Cmd+0x48>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2001      	movs	r0, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	fa00 f303 	lsl.w	r3, r0, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	4013      	ands	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40007400 	.word	0x40007400

080010ec <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <DAC_SetChannel1Data+0x34>)
 80010fe:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	3308      	adds	r3, #8
 8001108:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	461a      	mov	r2, r3
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	6013      	str	r3, [r2, #0]
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40007400 	.word	0x40007400

08001124 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 0201 	bic.w	r2, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2221      	movs	r2, #33	; 0x21
 800115a:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a46      	ldr	r2, [pc, #280]	; (8001278 <DMA_DeInit+0x154>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d103      	bne.n	800116c <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8001164:	4b45      	ldr	r3, [pc, #276]	; (800127c <DMA_DeInit+0x158>)
 8001166:	223d      	movs	r2, #61	; 0x3d
 8001168:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800116a:	e07e      	b.n	800126a <DMA_DeInit+0x146>
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a44      	ldr	r2, [pc, #272]	; (8001280 <DMA_DeInit+0x15c>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d104      	bne.n	800117e <DMA_DeInit+0x5a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8001174:	4b41      	ldr	r3, [pc, #260]	; (800127c <DMA_DeInit+0x158>)
 8001176:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800117a:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800117c:	e075      	b.n	800126a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a40      	ldr	r2, [pc, #256]	; (8001284 <DMA_DeInit+0x160>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d104      	bne.n	8001190 <DMA_DeInit+0x6c>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8001186:	4b3d      	ldr	r3, [pc, #244]	; (800127c <DMA_DeInit+0x158>)
 8001188:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800118c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800118e:	e06c      	b.n	800126a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a3d      	ldr	r2, [pc, #244]	; (8001288 <DMA_DeInit+0x164>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d104      	bne.n	80011a2 <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8001198:	4b38      	ldr	r3, [pc, #224]	; (800127c <DMA_DeInit+0x158>)
 800119a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800119e:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011a0:	e063      	b.n	800126a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a39      	ldr	r2, [pc, #228]	; (800128c <DMA_DeInit+0x168>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d103      	bne.n	80011b2 <DMA_DeInit+0x8e>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80011aa:	4b34      	ldr	r3, [pc, #208]	; (800127c <DMA_DeInit+0x158>)
 80011ac:	4a38      	ldr	r2, [pc, #224]	; (8001290 <DMA_DeInit+0x16c>)
 80011ae:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011b0:	e05b      	b.n	800126a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a37      	ldr	r2, [pc, #220]	; (8001294 <DMA_DeInit+0x170>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d103      	bne.n	80011c2 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 80011ba:	4b30      	ldr	r3, [pc, #192]	; (800127c <DMA_DeInit+0x158>)
 80011bc:	4a36      	ldr	r2, [pc, #216]	; (8001298 <DMA_DeInit+0x174>)
 80011be:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011c0:	e053      	b.n	800126a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a35      	ldr	r2, [pc, #212]	; (800129c <DMA_DeInit+0x178>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d103      	bne.n	80011d2 <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <DMA_DeInit+0x158>)
 80011cc:	4a34      	ldr	r2, [pc, #208]	; (80012a0 <DMA_DeInit+0x17c>)
 80011ce:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011d0:	e04b      	b.n	800126a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a33      	ldr	r2, [pc, #204]	; (80012a4 <DMA_DeInit+0x180>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d104      	bne.n	80011e4 <DMA_DeInit+0xc0>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 80011da:	4b28      	ldr	r3, [pc, #160]	; (800127c <DMA_DeInit+0x158>)
 80011dc:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80011e0:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011e2:	e042      	b.n	800126a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <DMA_DeInit+0x184>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d103      	bne.n	80011f4 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <DMA_DeInit+0x188>)
 80011ee:	223d      	movs	r2, #61	; 0x3d
 80011f0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80011f2:	e03a      	b.n	800126a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a2e      	ldr	r2, [pc, #184]	; (80012b0 <DMA_DeInit+0x18c>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d104      	bne.n	8001206 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80011fc:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <DMA_DeInit+0x188>)
 80011fe:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8001202:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001204:	e031      	b.n	800126a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a2a      	ldr	r2, [pc, #168]	; (80012b4 <DMA_DeInit+0x190>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d104      	bne.n	8001218 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800120e:	4b27      	ldr	r3, [pc, #156]	; (80012ac <DMA_DeInit+0x188>)
 8001210:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001214:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001216:	e028      	b.n	800126a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <DMA_DeInit+0x194>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d104      	bne.n	800122a <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <DMA_DeInit+0x188>)
 8001222:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8001226:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001228:	e01f      	b.n	800126a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a23      	ldr	r2, [pc, #140]	; (80012bc <DMA_DeInit+0x198>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d103      	bne.n	800123a <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <DMA_DeInit+0x188>)
 8001234:	4a16      	ldr	r2, [pc, #88]	; (8001290 <DMA_DeInit+0x16c>)
 8001236:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001238:	e017      	b.n	800126a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a20      	ldr	r2, [pc, #128]	; (80012c0 <DMA_DeInit+0x19c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d103      	bne.n	800124a <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <DMA_DeInit+0x188>)
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <DMA_DeInit+0x174>)
 8001246:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001248:	e00f      	b.n	800126a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <DMA_DeInit+0x1a0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d103      	bne.n	800125a <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <DMA_DeInit+0x188>)
 8001254:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <DMA_DeInit+0x17c>)
 8001256:	60da      	str	r2, [r3, #12]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001258:	e007      	b.n	800126a <DMA_DeInit+0x146>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a1a      	ldr	r2, [pc, #104]	; (80012c8 <DMA_DeInit+0x1a4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d103      	bne.n	800126a <DMA_DeInit+0x146>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <DMA_DeInit+0x188>)
 8001264:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001268:	60da      	str	r2, [r3, #12]
    }
  }
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40026010 	.word	0x40026010
 800127c:	40026000 	.word	0x40026000
 8001280:	40026028 	.word	0x40026028
 8001284:	40026040 	.word	0x40026040
 8001288:	40026058 	.word	0x40026058
 800128c:	40026070 	.word	0x40026070
 8001290:	2000003d 	.word	0x2000003d
 8001294:	40026088 	.word	0x40026088
 8001298:	20000f40 	.word	0x20000f40
 800129c:	400260a0 	.word	0x400260a0
 80012a0:	203d0000 	.word	0x203d0000
 80012a4:	400260b8 	.word	0x400260b8
 80012a8:	40026410 	.word	0x40026410
 80012ac:	40026400 	.word	0x40026400
 80012b0:	40026428 	.word	0x40026428
 80012b4:	40026440 	.word	0x40026440
 80012b8:	40026458 	.word	0x40026458
 80012bc:	40026470 	.word	0x40026470
 80012c0:	40026488 	.word	0x40026488
 80012c4:	400264a0 	.word	0x400264a0
 80012c8:	400264b8 	.word	0x400264b8

080012cc <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <DMA_Init+0xac>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80012f6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001302:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800130e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800131a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001320:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f023 0307 	bic.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4313      	orrs	r3, r2
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	691a      	ldr	r2, [r3, #16]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	60da      	str	r2, [r3, #12]
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	f01c803f 	.word	0xf01c803f

0800137c <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop

080013ec <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d006      	beq.n	800140c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f043 0201 	orr.w	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800140a:	e005      	b.n	8001418 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f023 0201 	bic.w	r2, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	601a      	str	r2, [r3, #0]
  }
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a15      	ldr	r2, [pc, #84]	; (8001490 <DMA_GetFlagStatus+0x6c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d802      	bhi.n	8001444 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <DMA_GetFlagStatus+0x70>)
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	e001      	b.n	8001448 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <DMA_GetFlagStatus+0x74>)
 8001446:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e002      	b.n	8001460 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001466:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800146a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8001476:	2301      	movs	r3, #1
 8001478:	75fb      	strb	r3, [r7, #23]
 800147a:	e001      	b.n	8001480 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001480:	7dfb      	ldrb	r3, [r7, #23]
}
 8001482:	4618      	mov	r0, r3
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	4002640f 	.word	0x4002640f
 8001494:	40026000 	.word	0x40026000
 8001498:	40026400 	.word	0x40026400

0800149c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a10      	ldr	r2, [pc, #64]	; (80014ec <DMA_ClearFlag+0x50>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d802      	bhi.n	80014b4 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <DMA_ClearFlag+0x54>)
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	e001      	b.n	80014b8 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <DMA_ClearFlag+0x58>)
 80014b6:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80014c8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80014d0:	e006      	b.n	80014e0 <DMA_ClearFlag+0x44>
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80014d8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	6093      	str	r3, [r2, #8]
  }    
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	4002640f 	.word	0x4002640f
 80014f0:	40026000 	.word	0x40026000
 80014f4:	40026400 	.word	0x40026400

080014f8 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	4613      	mov	r3, r2
 8001504:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00f      	beq.n	8001530 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d006      	beq.n	8001524 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	e005      	b.n	8001530 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b80      	cmp	r3, #128	; 0x80
 8001534:	d014      	beq.n	8001560 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	f003 031e 	and.w	r3, r3, #30
 8001546:	431a      	orrs	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 800154c:	e008      	b.n	8001560 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	f003 031e 	and.w	r3, r3, #30
 8001558:	43db      	mvns	r3, r3
 800155a:	401a      	ands	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001578:	4b34      	ldr	r3, [pc, #208]	; (800164c <EXTI_Init+0xe0>)
 800157a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	799b      	ldrb	r3, [r3, #6]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d04f      	beq.n	8001624 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001584:	4931      	ldr	r1, [pc, #196]	; (800164c <EXTI_Init+0xe0>)
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <EXTI_Init+0xe0>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	43db      	mvns	r3, r3
 8001590:	4013      	ands	r3, r2
 8001592:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001594:	492d      	ldr	r1, [pc, #180]	; (800164c <EXTI_Init+0xe0>)
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <EXTI_Init+0xe0>)
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	43db      	mvns	r3, r3
 80015a0:	4013      	ands	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	791b      	ldrb	r3, [r3, #4]
 80015a8:	461a      	mov	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4413      	add	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	6811      	ldr	r1, [r2, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80015be:	4923      	ldr	r1, [pc, #140]	; (800164c <EXTI_Init+0xe0>)
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <EXTI_Init+0xe0>)
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	4013      	ands	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80015ce:	491f      	ldr	r1, [pc, #124]	; (800164c <EXTI_Init+0xe0>)
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <EXTI_Init+0xe0>)
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	43db      	mvns	r3, r3
 80015da:	4013      	ands	r3, r2
 80015dc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	795b      	ldrb	r3, [r3, #5]
 80015e2:	2b10      	cmp	r3, #16
 80015e4:	d10e      	bne.n	8001604 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80015e6:	4919      	ldr	r1, [pc, #100]	; (800164c <EXTI_Init+0xe0>)
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <EXTI_Init+0xe0>)
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80015f4:	4915      	ldr	r1, [pc, #84]	; (800164c <EXTI_Init+0xe0>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <EXTI_Init+0xe0>)
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4313      	orrs	r3, r2
 8001600:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001602:	e01d      	b.n	8001640 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <EXTI_Init+0xe0>)
 8001606:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	795b      	ldrb	r3, [r3, #5]
 800160c:	461a      	mov	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4413      	add	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	6811      	ldr	r1, [r2, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8001622:	e00d      	b.n	8001640 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	791b      	ldrb	r3, [r3, #4]
 8001628:	461a      	mov	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4413      	add	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	6811      	ldr	r1, [r2, #0]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	43d2      	mvns	r2, r2
 800163c:	400a      	ands	r2, r1
 800163e:	601a      	str	r2, [r3, #0]
  }
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40013c00 	.word	0x40013c00

08001650 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <EXTI_ClearITPendingBit+0x1c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6153      	str	r3, [r2, #20]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40013c00 	.word	0x40013c00

08001670 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e076      	b.n	800177a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800168c:	2201      	movs	r2, #1
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d165      	bne.n	8001774 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2103      	movs	r1, #3
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	401a      	ands	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	791b      	ldrb	r3, [r3, #4]
 80016c6:	4619      	mov	r1, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	791b      	ldrb	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d003      	beq.n	80016e6 <GPIO_Init+0x76>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	791b      	ldrb	r3, [r3, #4]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d12e      	bne.n	8001744 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2103      	movs	r1, #3
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	401a      	ands	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	795b      	ldrb	r3, [r3, #5]
 8001704:	4619      	mov	r1, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	b29b      	uxth	r3, r3
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	401a      	ands	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	799b      	ldrb	r3, [r3, #6]
 8001732:	4619      	mov	r1, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	b29b      	uxth	r3, r3
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	b29b      	uxth	r3, r3
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	b29b      	uxth	r3, r3
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2103      	movs	r1, #3
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	401a      	ands	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	79db      	ldrb	r3, [r3, #7]
 8001764:	4619      	mov	r1, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3301      	adds	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d985      	bls.n	800168c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001780:	bf00      	nop
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800179a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	71da      	strb	r2, [r3, #7]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	887a      	ldrh	r2, [r7, #2]
 80017da:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80017dc:	e002      	b.n	80017e4 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	887a      	ldrh	r2, [r7, #2]
 80017e2:	835a      	strh	r2, [r3, #26]
  }
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
 80017fc:	4613      	mov	r3, r2
 80017fe:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001808:	787a      	ldrb	r2, [r7, #1]
 800180a:	887b      	ldrh	r3, [r7, #2]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001818:	887b      	ldrh	r3, [r7, #2]
 800181a:	08db      	lsrs	r3, r3, #3
 800181c:	b29b      	uxth	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	887b      	ldrh	r3, [r7, #2]
 8001822:	08db      	lsrs	r3, r3, #3
 8001824:	b29b      	uxth	r3, r3
 8001826:	461a      	mov	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	210f      	movs	r1, #15
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	ea02 0103 	and.w	r1, r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f100 0208 	add.w	r2, r0, #8
 800184a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	08db      	lsrs	r3, r3, #3
 8001852:	b29b      	uxth	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3208      	adds	r2, #8
 800185a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	b29b      	uxth	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3208      	adds	r2, #8
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop

08001884 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <I2C_DeInit+0x68>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d10a      	bne.n	80018aa <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001894:	2101      	movs	r1, #1
 8001896:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800189a:	f000 fb31 	bl	8001f00 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800189e:	2100      	movs	r1, #0
 80018a0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80018a4:	f000 fb2c 	bl	8001f00 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80018a8:	e01c      	b.n	80018e4 <I2C_DeInit+0x60>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <I2C_DeInit+0x6c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d10a      	bne.n	80018c8 <I2C_DeInit+0x44>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80018b2:	2101      	movs	r1, #1
 80018b4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80018b8:	f000 fb22 	bl	8001f00 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80018bc:	2100      	movs	r1, #0
 80018be:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80018c2:	f000 fb1d 	bl	8001f00 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80018c6:	e00d      	b.n	80018e4 <I2C_DeInit+0x60>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <I2C_DeInit+0x70>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d109      	bne.n	80018e4 <I2C_DeInit+0x60>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80018d0:	2101      	movs	r1, #1
 80018d2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80018d6:	f000 fb13 	bl	8001f00 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80018da:	2100      	movs	r1, #0
 80018dc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80018e0:	f000 fb0e 	bl	8001f00 <RCC_APB1PeriphResetCmd>
    }
  }
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40005400 	.word	0x40005400
 80018f0:	40005800 	.word	0x40005800
 80018f4:	40005c00 	.word	0x40005c00

080018f8 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001906:	2300      	movs	r3, #0
 8001908:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800190a:	2304      	movs	r3, #4
 800190c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800190e:	4b57      	ldr	r3, [pc, #348]	; (8001a6c <I2C_Init+0x174>)
 8001910:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	889b      	ldrh	r3, [r3, #4]
 8001916:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001918:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800191a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800191e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f9e1 	bl	8001cec <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	4a4f      	ldr	r2, [pc, #316]	; (8001a70 <I2C_Init+0x178>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0c9b      	lsrs	r3, r3, #18
 8001938:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800193a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800193c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800193e:	4313      	orrs	r3, r2
 8001940:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001946:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	b29b      	uxth	r3, r3
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	b29a      	uxth	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a44      	ldr	r2, [pc, #272]	; (8001a74 <I2C_Init+0x17c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d815      	bhi.n	8001992 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8001974:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001976:	2b03      	cmp	r3, #3
 8001978:	d801      	bhi.n	800197e <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800197a:	2304      	movs	r3, #4
 800197c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800197e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001982:	4313      	orrs	r3, r2
 8001984:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001986:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001988:	3301      	adds	r3, #1
 800198a:	b29a      	uxth	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	841a      	strh	r2, [r3, #32]
 8001990:	e040      	b.n	8001a14 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	88db      	ldrh	r3, [r3, #6]
 8001996:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800199a:	4293      	cmp	r3, r2
 800199c:	d109      	bne.n	80019b2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80019b0:	e00e      	b.n	80019d0 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	009a      	lsls	r2, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80019c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80019d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d103      	bne.n	80019e2 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80019da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80019e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019f2:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80019f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019fa:	fb02 f303 	mul.w	r3, r2, r3
 80019fe:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <I2C_Init+0x180>)
 8001a00:	fb82 1203 	smull	r1, r2, r2, r3
 8001a04:	1192      	asrs	r2, r2, #6
 8001a06:	17db      	asrs	r3, r3, #31
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001a18:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001a30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a32:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001a36:	f023 0302 	bic.w	r3, r3, #2
 8001a3a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	889a      	ldrh	r2, [r3, #4]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	895b      	ldrh	r3, [r3, #10]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001a52:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	899a      	ldrh	r2, [r3, #12]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	891b      	ldrh	r3, [r3, #8]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	811a      	strh	r2, [r3, #8]
}
 8001a64:	bf00      	nop
 8001a66:	3728      	adds	r7, #40	; 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	007a1200 	.word	0x007a1200
 8001a70:	431bde83 	.word	0x431bde83
 8001a74:	000186a0 	.word	0x000186a0
 8001a78:	10624dd3 	.word	0x10624dd3

08001a7c <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d008      	beq.n	8001aa0 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 8001a9e:	e007      	b.n	8001ab0 <I2C_Cmd+0x34>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	801a      	strh	r2, [r3, #0]
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d008      	beq.n	8001ae0 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 8001ade:	e007      	b.n	8001af0 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	801a      	strh	r2, [r3, #0]
  }
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d008      	beq.n	8001b20 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8001b1e:	e007      	b.n	8001b30 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	801a      	strh	r2, [r3, #0]
  }
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	70fb      	strb	r3, [r7, #3]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001b4c:	78bb      	ldrb	r3, [r7, #2]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d004      	beq.n	8001b5c <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	70fb      	strb	r3, [r7, #3]
 8001b5a:	e003      	b.n	8001b64 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	f023 0301 	bic.w	r3, r3, #1
 8001b62:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	821a      	strh	r2, [r3, #16]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d008      	beq.n	8001b9c <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8001b9a:	e007      	b.n	8001bac <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	801a      	strh	r2, [r3, #0]
  }
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	821a      	strh	r2, [r3, #16]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	8a1b      	ldrh	r3, [r3, #16]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	8a9b      	ldrh	r3, [r3, #20]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	8b1b      	ldrh	r3, [r3, #24]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	041b      	lsls	r3, r3, #16
 8001c22:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c2e:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	401a      	ands	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d102      	bne.n	8001c42 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	75fb      	strb	r3, [r7, #23]
 8001c40:	e001      	b.n	8001c46 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	0f1b      	lsrs	r3, r3, #28
 8001c72:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c7a:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	3314      	adds	r3, #20
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	e005      	b.n	8001c96 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	0c1b      	lsrs	r3, r3, #16
 8001c8e:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3318      	adds	r3, #24
 8001c94:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	75fb      	strb	r3, [r7, #23]
 8001ca6:	e001      	b.n	8001cac <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001cd0:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	829a      	strh	r2, [r3, #20]
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop

08001cec <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	2302      	movs	r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001d0c:	4b48      	ldr	r3, [pc, #288]	; (8001e30 <RCC_GetClocksFreq+0x144>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d007      	beq.n	8001d2c <RCC_GetClocksFreq+0x40>
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d009      	beq.n	8001d34 <RCC_GetClocksFreq+0x48>
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d13f      	bne.n	8001da4 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a43      	ldr	r2, [pc, #268]	; (8001e34 <RCC_GetClocksFreq+0x148>)
 8001d28:	601a      	str	r2, [r3, #0]
      break;
 8001d2a:	e03f      	b.n	8001dac <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a42      	ldr	r2, [pc, #264]	; (8001e38 <RCC_GetClocksFreq+0x14c>)
 8001d30:	601a      	str	r2, [r3, #0]
      break;
 8001d32:	e03b      	b.n	8001dac <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001d34:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <RCC_GetClocksFreq+0x144>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3c:	0d9b      	lsrs	r3, r3, #22
 8001d3e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d40:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <RCC_GetClocksFreq+0x144>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d48:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00d      	beq.n	8001d6c <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001d50:	4a39      	ldr	r2, [pc, #228]	; (8001e38 <RCC_GetClocksFreq+0x14c>)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d58:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <RCC_GetClocksFreq+0x144>)
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d60:	400b      	ands	r3, r1
 8001d62:	099b      	lsrs	r3, r3, #6
 8001d64:	fb03 f302 	mul.w	r3, r3, r2
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	e00c      	b.n	8001d86 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001d6c:	4a31      	ldr	r2, [pc, #196]	; (8001e34 <RCC_GetClocksFreq+0x148>)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d74:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <RCC_GetClocksFreq+0x144>)
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d7c:	400b      	ands	r3, r1
 8001d7e:	099b      	lsrs	r3, r3, #6
 8001d80:	fb03 f302 	mul.w	r3, r3, r2
 8001d84:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001d86:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <RCC_GetClocksFreq+0x144>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d8e:	0c1b      	lsrs	r3, r3, #16
 8001d90:	3301      	adds	r3, #1
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	601a      	str	r2, [r3, #0]
      break;
 8001da2:	e003      	b.n	8001dac <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <RCC_GetClocksFreq+0x148>)
 8001da8:	601a      	str	r2, [r3, #0]
      break;
 8001daa:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001dac:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <RCC_GetClocksFreq+0x144>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001dbc:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <RCC_GetClocksFreq+0x150>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	40da      	lsrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001dd4:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <RCC_GetClocksFreq+0x144>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001ddc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	0a9b      	lsrs	r3, r3, #10
 8001de2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001de4:	4a15      	ldr	r2, [pc, #84]	; (8001e3c <RCC_GetClocksFreq+0x150>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	40da      	lsrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <RCC_GetClocksFreq+0x144>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001e04:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	0b5b      	lsrs	r3, r3, #13
 8001e0a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <RCC_GetClocksFreq+0x150>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4413      	add	r3, r2
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	40da      	lsrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	60da      	str	r2, [r3, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3724      	adds	r7, #36	; 0x24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40023800 	.word	0x40023800
 8001e34:	00f42400 	.word	0x00f42400
 8001e38:	007a1200 	.word	0x007a1200
 8001e3c:	20000000 	.word	0x20000000

08001e40 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d006      	beq.n	8001e60 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001e52:	490a      	ldr	r1, [pc, #40]	; (8001e7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001e5e:	e006      	b.n	8001e6e <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001e60:	4906      	ldr	r1, [pc, #24]	; (8001e7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8001e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800

08001e80 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d006      	beq.n	8001ea0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001e92:	490a      	ldr	r1, [pc, #40]	; (8001ebc <RCC_APB1PeriphClockCmd+0x3c>)
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <RCC_APB1PeriphClockCmd+0x3c>)
 8001e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8001e9e:	e006      	b.n	8001eae <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001ea0:	4906      	ldr	r1, [pc, #24]	; (8001ebc <RCC_APB1PeriphClockCmd+0x3c>)
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <RCC_APB1PeriphClockCmd+0x3c>)
 8001ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4013      	ands	r3, r2
 8001eac:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800

08001ec0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001ed2:	490a      	ldr	r1, [pc, #40]	; (8001efc <RCC_APB2PeriphClockCmd+0x3c>)
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <RCC_APB2PeriphClockCmd+0x3c>)
 8001ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001ede:	e006      	b.n	8001eee <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001ee0:	4906      	ldr	r1, [pc, #24]	; (8001efc <RCC_APB2PeriphClockCmd+0x3c>)
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <RCC_APB2PeriphClockCmd+0x3c>)
 8001ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	4013      	ands	r3, r2
 8001eec:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800

08001f00 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d006      	beq.n	8001f20 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001f12:	490a      	ldr	r1, [pc, #40]	; (8001f3c <RCC_APB1PeriphResetCmd+0x3c>)
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <RCC_APB1PeriphResetCmd+0x3c>)
 8001f16:	6a1a      	ldr	r2, [r3, #32]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8001f1e:	e006      	b.n	8001f2e <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001f20:	4906      	ldr	r1, [pc, #24]	; (8001f3c <RCC_APB1PeriphResetCmd+0x3c>)
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <RCC_APB1PeriphResetCmd+0x3c>)
 8001f24:	6a1a      	ldr	r2, [r3, #32]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	620b      	str	r3, [r1, #32]
  }
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800

08001f40 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001f52:	490a      	ldr	r1, [pc, #40]	; (8001f7c <RCC_APB2PeriphResetCmd+0x3c>)
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <RCC_APB2PeriphResetCmd+0x3c>)
 8001f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8001f5e:	e006      	b.n	8001f6e <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001f60:	4906      	ldr	r1, [pc, #24]	; (8001f7c <RCC_APB2PeriphResetCmd+0x3c>)
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <RCC_APB2PeriphResetCmd+0x3c>)
 8001f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800

08001f80 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a2e      	ldr	r2, [pc, #184]	; (8002044 <SPI_I2S_DeInit+0xc4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d10a      	bne.n	8001fa6 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001f90:	2101      	movs	r1, #1
 8001f92:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f96:	f7ff ffd3 	bl	8001f40 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001fa0:	f7ff ffce 	bl	8001f40 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001fa4:	e049      	b.n	800203a <SPI_I2S_DeInit+0xba>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a27      	ldr	r2, [pc, #156]	; (8002048 <SPI_I2S_DeInit+0xc8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d10a      	bne.n	8001fc4 <SPI_I2S_DeInit+0x44>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001fae:	2101      	movs	r1, #1
 8001fb0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001fb4:	f7ff ffa4 	bl	8001f00 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001fbe:	f7ff ff9f 	bl	8001f00 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001fc2:	e03a      	b.n	800203a <SPI_I2S_DeInit+0xba>
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else if (SPIx == SPI3)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a21      	ldr	r2, [pc, #132]	; (800204c <SPI_I2S_DeInit+0xcc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d10a      	bne.n	8001fe2 <SPI_I2S_DeInit+0x62>
  {
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001fcc:	2101      	movs	r1, #1
 8001fce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fd2:	f7ff ff95 	bl	8001f00 <RCC_APB1PeriphResetCmd>
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fdc:	f7ff ff90 	bl	8001f00 <RCC_APB1PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001fe0:	e02b      	b.n	800203a <SPI_I2S_DeInit+0xba>
    /* Enable SPI3 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    /* Release SPI3 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  }
  else if (SPIx == SPI4)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1a      	ldr	r2, [pc, #104]	; (8002050 <SPI_I2S_DeInit+0xd0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10a      	bne.n	8002000 <SPI_I2S_DeInit+0x80>
  {
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8001fea:	2101      	movs	r1, #1
 8001fec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ff0:	f7ff ffa6 	bl	8001f40 <RCC_APB2PeriphResetCmd>
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ffa:	f7ff ffa1 	bl	8001f40 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001ffe:	e01c      	b.n	800203a <SPI_I2S_DeInit+0xba>
    /* Enable SPI4 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
    /* Release SPI4 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
  }
  else if (SPIx == SPI5)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a14      	ldr	r2, [pc, #80]	; (8002054 <SPI_I2S_DeInit+0xd4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d10a      	bne.n	800201e <SPI_I2S_DeInit+0x9e>
  {
    /* Enable SPI5 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8002008:	2101      	movs	r1, #1
 800200a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800200e:	f7ff ff97 	bl	8001f40 <RCC_APB2PeriphResetCmd>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8002012:	2100      	movs	r1, #0
 8002014:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002018:	f7ff ff92 	bl	8001f40 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 800201c:	e00d      	b.n	800203a <SPI_I2S_DeInit+0xba>
    /* Release SPI5 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
  }
  else 
  {
    if (SPIx == SPI6)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <SPI_I2S_DeInit+0xd8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d109      	bne.n	800203a <SPI_I2S_DeInit+0xba>
    {
      /* Enable SPI6 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8002026:	2101      	movs	r1, #1
 8002028:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800202c:	f7ff ff88 	bl	8001f40 <RCC_APB2PeriphResetCmd>
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8002030:	2100      	movs	r1, #0
 8002032:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002036:	f7ff ff83 	bl	8001f40 <RCC_APB2PeriphResetCmd>
    }
  }
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40013000 	.word	0x40013000
 8002048:	40003800 	.word	0x40003800
 800204c:	40003c00 	.word	0x40003c00
 8002050:	40013400 	.word	0x40013400
 8002054:	40015000 	.word	0x40015000
 8002058:	40015400 	.word	0x40015400

0800205c <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800205c:	b480      	push	{r7}
 800205e:	b08b      	sub	sp, #44	; 0x2c
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8002066:	2300      	movs	r3, #0
 8002068:	837b      	strh	r3, [r7, #26]
 800206a:	2302      	movs	r3, #2
 800206c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800206e:	2300      	movs	r3, #0
 8002070:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002072:	2301      	movs	r3, #1
 8002074:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8b9b      	ldrh	r3, [r3, #28]
 800208e:	b29b      	uxth	r3, r3
 8002090:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002094:	f023 030f 	bic.w	r3, r3, #15
 8002098:	b29a      	uxth	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2202      	movs	r2, #2
 80020a2:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	8b9b      	ldrh	r3, [r3, #28]
 80020a8:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d104      	bne.n	80020bc <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 80020b6:	2302      	movs	r3, #2
 80020b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80020ba:	e072      	b.n	80021a2 <I2S_Init+0x146>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	889b      	ldrh	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 80020c4:	2301      	movs	r3, #1
 80020c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80020c8:	e001      	b.n	80020ce <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 80020ca:	2302      	movs	r3, #2
 80020cc:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80020ce:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <I2S_Init+0x1a8>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 80020da:	4a4a      	ldr	r2, [pc, #296]	; (8002204 <I2S_Init+0x1a8>)
 80020dc:	4b49      	ldr	r3, [pc, #292]	; (8002204 <I2S_Init+0x1a8>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020e4:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <I2S_Init+0x1a8>)
 80020e8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020f0:	4013      	ands	r3, r2
 80020f2:	099b      	lsrs	r3, r3, #6
 80020f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f8:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 80020fa:	4b42      	ldr	r3, [pc, #264]	; (8002204 <I2S_Init+0x1a8>)
 80020fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002100:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8002104:	0f1b      	lsrs	r3, r3, #28
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800210c:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <I2S_Init+0x1a8>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002114:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8002116:	4a3c      	ldr	r2, [pc, #240]	; (8002208 <I2S_Init+0x1ac>)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	fb02 f203 	mul.w	r2, r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	88db      	ldrh	r3, [r3, #6]
 8002130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002134:	d10f      	bne.n	8002156 <I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	0a1a      	lsrs	r2, r3, #8
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	461a      	mov	r2, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	b29b      	uxth	r3, r3
 800214e:	3305      	adds	r3, #5
 8002150:	b29b      	uxth	r3, r3
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	e012      	b.n	800217c <I2S_Init+0x120>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002156:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002158:	015b      	lsls	r3, r3, #5
 800215a:	461a      	mov	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	461a      	mov	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	b29b      	uxth	r3, r3
 8002176:	3305      	adds	r3, #5
 8002178:	b29b      	uxth	r3, r3
 800217a:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	4a23      	ldr	r2, [pc, #140]	; (800220c <I2S_Init+0x1b0>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	08db      	lsrs	r3, r3, #3
 8002186:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	b29b      	uxth	r3, r3
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	085b      	lsrs	r3, r3, #1
 800219a:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800219c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80021a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d902      	bls.n	80021ae <I2S_Init+0x152>
 80021a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021aa:	2bff      	cmp	r3, #255	; 0xff
 80021ac:	d903      	bls.n	80021b6 <I2S_Init+0x15a>
  {
    /* Set the default values */
    i2sdiv = 2;
 80021ae:	2302      	movs	r3, #2
 80021b0:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	88da      	ldrh	r2, [r3, #6]
 80021ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021bc:	4313      	orrs	r3, r2
 80021be:	b29a      	uxth	r2, r3
 80021c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	8859      	ldrh	r1, [r3, #2]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80021da:	4303      	orrs	r3, r0
 80021dc:	b29b      	uxth	r3, r3
 80021de:	430b      	orrs	r3, r1
 80021e0:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 80021e2:	4313      	orrs	r3, r2
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	8b7b      	ldrh	r3, [r7, #26]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021f0:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	8b7a      	ldrh	r2, [r7, #26]
 80021f6:	839a      	strh	r2, [r3, #28]
}
 80021f8:	bf00      	nop
 80021fa:	372c      	adds	r7, #44	; 0x2c
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	40023800 	.word	0x40023800
 8002208:	007a1200 	.word	0x007a1200
 800220c:	cccccccd 	.word	0xcccccccd

08002210 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	8b9b      	ldrh	r3, [r3, #28]
 8002226:	b29b      	uxth	r3, r3
 8002228:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800222c:	b29a      	uxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 8002232:	e007      	b.n	8002244 <I2S_Cmd+0x34>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	8b9b      	ldrh	r3, [r3, #28]
 8002238:	b29b      	uxth	r3, r3
 800223a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800223e:	b29a      	uxth	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	839a      	strh	r2, [r3, #28]
  }
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	819a      	strh	r2, [r3, #12]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop

08002270 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d008      	beq.n	8002298 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	889b      	ldrh	r3, [r3, #4]
 800228a:	b29a      	uxth	r2, r3
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	4313      	orrs	r3, r2
 8002290:	b29a      	uxth	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 8002296:	e009      	b.n	80022ac <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	889b      	ldrh	r3, [r3, #4]
 800229c:	b29a      	uxth	r2, r3
 800229e:	887b      	ldrh	r3, [r7, #2]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4013      	ands	r3, r2
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	809a      	strh	r2, [r3, #4]
  }
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	70fb      	strb	r3, [r7, #3]
 80022c4:	4613      	mov	r3, r2
 80022c6:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 80022c8:	2300      	movs	r3, #0
 80022ca:	81fb      	strh	r3, [r7, #14]
 80022cc:	2300      	movs	r3, #0
 80022ce:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 80022d8:	89fb      	ldrh	r3, [r7, #14]
 80022da:	2201      	movs	r2, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 80022e2:	78bb      	ldrb	r3, [r7, #2]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	889b      	ldrh	r3, [r3, #4]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	89bb      	ldrh	r3, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 80022f8:	e009      	b.n	800230e <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	889b      	ldrh	r3, [r3, #4]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	89bb      	ldrh	r3, [r7, #12]
 8002302:	43db      	mvns	r3, r3
 8002304:	b29b      	uxth	r3, r3
 8002306:	4013      	ands	r3, r2
 8002308:	b29a      	uxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	809a      	strh	r2, [r3, #4]
  }
}
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop

0800231c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	891b      	ldrh	r3, [r3, #8]
 8002330:	b29a      	uxth	r2, r3
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	4013      	ands	r3, r2
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	e001      	b.n	8002346 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8002354:	b490      	push	{r4, r7}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	460a      	mov	r2, r1
 800235e:	71fb      	strb	r3, [r7, #7]
 8002360:	4613      	mov	r3, r2
 8002362:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8002368:	79bb      	ldrb	r3, [r7, #6]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	220f      	movs	r2, #15
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8002378:	4916      	ldr	r1, [pc, #88]	; (80023d4 <SYSCFG_EXTILineConfig+0x80>)
 800237a:	79bb      	ldrb	r3, [r7, #6]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	b2db      	uxtb	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <SYSCFG_EXTILineConfig+0x80>)
 8002384:	79bb      	ldrb	r3, [r7, #6]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	b2db      	uxtb	r3, r3
 800238a:	3302      	adds	r3, #2
 800238c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	43db      	mvns	r3, r3
 8002394:	401a      	ands	r2, r3
 8002396:	1c83      	adds	r3, r0, #2
 8002398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800239c:	480d      	ldr	r0, [pc, #52]	; (80023d4 <SYSCFG_EXTILineConfig+0x80>)
 800239e:	79bb      	ldrb	r3, [r7, #6]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461c      	mov	r4, r3
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <SYSCFG_EXTILineConfig+0x80>)
 80023a8:	79bb      	ldrb	r3, [r7, #6]
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	3302      	adds	r3, #2
 80023b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023b4:	79f9      	ldrb	r1, [r7, #7]
 80023b6:	79bb      	ldrb	r3, [r7, #6]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	431a      	orrs	r2, r3
 80023c4:	1ca3      	adds	r3, r4, #2
 80023c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc90      	pop	{r4, r7}
 80023d2:	4770      	bx	lr
 80023d4:	40013800 	.word	0x40013800

080023d8 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a29      	ldr	r2, [pc, #164]	; (8002494 <TIM_TimeBaseInit+0xbc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d013      	beq.n	800241c <TIM_TimeBaseInit+0x44>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a28      	ldr	r2, [pc, #160]	; (8002498 <TIM_TimeBaseInit+0xc0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d00f      	beq.n	800241c <TIM_TimeBaseInit+0x44>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002402:	d00b      	beq.n	800241c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a25      	ldr	r2, [pc, #148]	; (800249c <TIM_TimeBaseInit+0xc4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d007      	beq.n	800241c <TIM_TimeBaseInit+0x44>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a24      	ldr	r2, [pc, #144]	; (80024a0 <TIM_TimeBaseInit+0xc8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d003      	beq.n	800241c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <TIM_TimeBaseInit+0xcc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d108      	bne.n	800242e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800241c:	89fb      	ldrh	r3, [r7, #14]
 800241e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002422:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	885a      	ldrh	r2, [r3, #2]
 8002428:	89fb      	ldrh	r3, [r7, #14]
 800242a:	4313      	orrs	r3, r2
 800242c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <TIM_TimeBaseInit+0xd0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00c      	beq.n	8002450 <TIM_TimeBaseInit+0x78>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <TIM_TimeBaseInit+0xd4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d008      	beq.n	8002450 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800243e:	89fb      	ldrh	r3, [r7, #14]
 8002440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002444:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	891a      	ldrh	r2, [r3, #8]
 800244a:	89fb      	ldrh	r3, [r7, #14]
 800244c:	4313      	orrs	r3, r2
 800244e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	89fa      	ldrh	r2, [r7, #14]
 8002454:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	881a      	ldrh	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <TIM_TimeBaseInit+0xbc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d003      	beq.n	8002476 <TIM_TimeBaseInit+0x9e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a09      	ldr	r2, [pc, #36]	; (8002498 <TIM_TimeBaseInit+0xc0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d104      	bne.n	8002480 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	7a9b      	ldrb	r3, [r3, #10]
 800247a:	b29a      	uxth	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	829a      	strh	r2, [r3, #20]
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40010000 	.word	0x40010000
 8002498:	40010400 	.word	0x40010400
 800249c:	40000400 	.word	0x40000400
 80024a0:	40000800 	.word	0x40000800
 80024a4:	40000c00 	.word	0x40000c00
 80024a8:	40001000 	.word	0x40001000
 80024ac:	40001400 	.word	0x40001400

080024b0 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f04f 32ff 	mov.w	r2, #4294967295
 80024be:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	729a      	strb	r2, [r3, #10]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8002506:	e007      	b.n	8002518 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	f023 0301 	bic.w	r3, r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	801a      	strh	r2, [r3, #0]
  }
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
 8002530:	4613      	mov	r3, r2
 8002532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002534:	787b      	ldrb	r3, [r7, #1]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	899b      	ldrh	r3, [r3, #12]
 800253e:	b29a      	uxth	r2, r3
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	4313      	orrs	r3, r2
 8002544:	b29a      	uxth	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800254a:	e009      	b.n	8002560 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	899b      	ldrh	r3, [r3, #12]
 8002550:	b29a      	uxth	r2, r3
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	43db      	mvns	r3, r3
 8002556:	b29b      	uxth	r3, r3
 8002558:	4013      	ands	r3, r2
 800255a:	b29a      	uxth	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	819a      	strh	r2, [r3, #12]
  }
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002578:	887b      	ldrh	r3, [r7, #2]
 800257a:	43db      	mvns	r3, r3
 800257c:	b29a      	uxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	821a      	strh	r2, [r3, #16]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop

08002590 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	889b      	ldrh	r3, [r3, #4]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	889b      	ldrh	r3, [r3, #4]
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	809a      	strh	r2, [r3, #4]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <STM_EVAL_LEDOn+0x28>)
 80025d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025da:	79fa      	ldrb	r2, [r7, #7]
 80025dc:	4905      	ldr	r1, [pc, #20]	; (80025f4 <STM_EVAL_LEDOn+0x2c>)
 80025de:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80025e2:	831a      	strh	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	20000010 	.word	0x20000010
 80025f4:	08009b98 	.word	0x08009b98

080025f8 <EVAL_AUDIO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	603a      	str	r2, [r7, #0]
 8002602:	80fb      	strh	r3, [r7, #6]
 8002604:	460b      	mov	r3, r1
 8002606:	717b      	strb	r3, [r7, #5]
  /* Perform low layer Codec initialization */
  if (Codec_Init(OutputDevice, VOLUME_CONVERT(Volume), AudioFreq) != 0)
 8002608:	797b      	ldrb	r3, [r7, #5]
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d80b      	bhi.n	8002626 <EVAL_AUDIO_Init+0x2e>
 800260e:	797a      	ldrb	r2, [r7, #5]
 8002610:	4613      	mov	r3, r2
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	4a0d      	ldr	r2, [pc, #52]	; (800264c <EVAL_AUDIO_Init+0x54>)
 8002618:	fb82 1203 	smull	r1, r2, r2, r3
 800261c:	1152      	asrs	r2, r2, #5
 800261e:	17db      	asrs	r3, r3, #31
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	e000      	b.n	8002628 <EVAL_AUDIO_Init+0x30>
 8002626:	2364      	movs	r3, #100	; 0x64
 8002628:	88f8      	ldrh	r0, [r7, #6]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	f000 f8f3 	bl	8002818 <Codec_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <EVAL_AUDIO_Init+0x44>
  {
    return 1;                
 8002638:	2301      	movs	r3, #1
 800263a:	e002      	b.n	8002642 <EVAL_AUDIO_Init+0x4a>
  }
  else
  {    
    /* I2S data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
    Audio_MAL_Init();
 800263c:	f000 fcb4 	bl	8002fa8 <Audio_MAL_Init>
    
    /* Return 0 when all operations are OK */
    return 0;
 8002640:	2300      	movs	r3, #0
  }
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	51eb851f 	.word	0x51eb851f

08002650 <EVAL_AUDIO_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data half-words (16bits).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t EVAL_AUDIO_Play(uint16_t* pBuffer, uint32_t Size)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  /* Set the total number of data to be played (count in half-word) */
  AudioTotalSize = Size;
 800265a:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <EVAL_AUDIO_Play+0x60>)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6013      	str	r3, [r2, #0]

  /* Call the audio Codec Play function */
  Codec_Play();
 8002660:	f000 f986 	bl	8002970 <Codec_Play>
  
  /* Update the Media layer and enable it for play */  
  Audio_MAL_Play((uint32_t)pBuffer, (uint32_t)(DMA_MAX(Size)));
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800266c:	4293      	cmp	r3, r2
 800266e:	bf28      	it	cs
 8002670:	4613      	movcs	r3, r2
 8002672:	4619      	mov	r1, r3
 8002674:	f000 fd40 	bl	80030f8 <Audio_MAL_Play>
  
  /* Update the remaining number of data to be played */
  AudioRemSize = Size - DMA_MAX(AudioTotalSize);
 8002678:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <EVAL_AUDIO_Play+0x60>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002680:	4293      	cmp	r3, r2
 8002682:	bf28      	it	cs
 8002684:	4613      	movcs	r3, r2
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <EVAL_AUDIO_Play+0x64>)
 800268c:	6013      	str	r3, [r2, #0]
  
  /* Update the current audio pointer position */
  CurrentPos = pBuffer + DMA_MAX(AudioTotalSize);
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <EVAL_AUDIO_Play+0x60>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002696:	4293      	cmp	r3, r2
 8002698:	bf28      	it	cs
 800269a:	4613      	movcs	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <EVAL_AUDIO_Play+0x68>)
 80026a4:	6013      	str	r3, [r2, #0]
  
  return 0;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000020 	.word	0x20000020
 80026b4:	20000024 	.word	0x20000024
 80026b8:	200049b0 	.word	0x200049b0

080026bc <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
#ifndef AUDIO_MAL_MODE_NORMAL
  uint16_t *pAddr = (uint16_t *)CurrentPos;
 80026c2:	4b36      	ldr	r3, [pc, #216]	; (800279c <Audio_MAL_IRQHandler+0xe0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	603b      	str	r3, [r7, #0]
  uint32_t Size = AudioRemSize;
 80026c8:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <Audio_MAL_IRQHandler+0xe4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	607b      	str	r3, [r7, #4]
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80026ce:	4b35      	ldr	r3, [pc, #212]	; (80027a4 <Audio_MAL_IRQHandler+0xe8>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4b35      	ldr	r3, [pc, #212]	; (80027a8 <Audio_MAL_IRQHandler+0xec>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4619      	mov	r1, r3
 80026d8:	4610      	mov	r0, r2
 80026da:	f7fe fea3 	bl	8001424 <DMA_GetFlagStatus>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00c      	beq.n	80026fe <Audio_MAL_IRQHandler+0x42>
    }
    
 #elif defined(AUDIO_MAL_MODE_CIRCULAR)
    /* Manage the remaining file size and new address offset: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_TransferComplete_CallBack((uint32_t)pAddr, Size);    
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f001 fa1b 	bl	8003b24 <EVAL_AUDIO_TransferComplete_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);
 80026ee:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <Audio_MAL_IRQHandler+0xe8>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <Audio_MAL_IRQHandler+0xec>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4619      	mov	r1, r3
 80026f8:	4610      	mov	r0, r2
 80026fa:	f7fe fecf 	bl	800149c <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_TC_EN */

#ifdef AUDIO_MAL_DMA_IT_HT_EN
  /* Half Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT) != RESET)
 80026fe:	4b29      	ldr	r3, [pc, #164]	; (80027a4 <Audio_MAL_IRQHandler+0xe8>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <Audio_MAL_IRQHandler+0xf0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4619      	mov	r1, r3
 8002708:	4610      	mov	r0, r2
 800270a:	f7fe fe8b 	bl	8001424 <DMA_GetFlagStatus>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00c      	beq.n	800272e <Audio_MAL_IRQHandler+0x72>
  {
    /* Manage the remaining file size and new address offset: This function
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */
    EVAL_AUDIO_HalfTransfer_CallBack((uint32_t)pAddr, Size);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4618      	mov	r0, r3
 800271a:	f001 f9f5 	bl	8003b08 <EVAL_AUDIO_HalfTransfer_CallBack>

    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_HT);
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <Audio_MAL_IRQHandler+0xe8>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <Audio_MAL_IRQHandler+0xf0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4619      	mov	r1, r3
 8002728:	4610      	mov	r0, r2
 800272a:	f7fe feb7 	bl	800149c <DMA_ClearFlag>
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 800272e:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <Audio_MAL_IRQHandler+0xe8>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <Audio_MAL_IRQHandler+0xf4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4619      	mov	r1, r3
 8002738:	4610      	mov	r0, r2
 800273a:	f7fe fe73 	bl	8001424 <DMA_GetFlagStatus>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d115      	bne.n	8002770 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 8002744:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <Audio_MAL_IRQHandler+0xe8>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <Audio_MAL_IRQHandler+0xf8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f7fe fe68 	bl	8001424 <DMA_GetFlagStatus>
 8002754:	4603      	mov	r3, r0
  }
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10a      	bne.n	8002770 <Audio_MAL_IRQHandler+0xb4>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <Audio_MAL_IRQHandler+0xe8>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <Audio_MAL_IRQHandler+0xfc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	4610      	mov	r0, r2
 8002766:	f7fe fe5d 	bl	8001424 <DMA_GetFlagStatus>
 800276a:	4603      	mov	r3, r0
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
  
#ifdef AUDIO_MAL_DMA_IT_TE_EN  
  /* FIFO Error interrupt */
  if ((DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE) != RESET) || \
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_FE) != RESET) || \
 800276c:	2b00      	cmp	r3, #0
 800276e:	d010      	beq.n	8002792 <Audio_MAL_IRQHandler+0xd6>
     (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_DME) != RESET))
    
  {
    /* Manage the error generated on DMA FIFO: This function 
       should be coded by user (its prototype is already declared in stm32f4_discovery_audio_codec.h) */  
    EVAL_AUDIO_Error_CallBack((uint32_t*)&pAddr);    
 8002770:	463b      	mov	r3, r7
 8002772:	4618      	mov	r0, r3
 8002774:	f001 f9ee 	bl	8003b54 <EVAL_AUDIO_Error_CallBack>
    
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <Audio_MAL_IRQHandler+0xe8>)
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <Audio_MAL_IRQHandler+0xf4>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <Audio_MAL_IRQHandler+0xf8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	431a      	orrs	r2, r3
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <Audio_MAL_IRQHandler+0xfc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4313      	orrs	r3, r2
 800278c:	4619      	mov	r1, r3
 800278e:	f7fe fe85 	bl	800149c <DMA_ClearFlag>
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	200049b0 	.word	0x200049b0
 80027a0:	20000024 	.word	0x20000024
 80027a4:	20000034 	.word	0x20000034
 80027a8:	20000040 	.word	0x20000040
 80027ac:	20000044 	.word	0x20000044
 80027b0:	2000004c 	.word	0x2000004c
 80027b4:	20000048 	.word	0x20000048
 80027b8:	20000050 	.word	0x20000050

080027bc <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80027c0:	f7ff ff7c 	bl	80026bc <Audio_MAL_IRQHandler>
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80027cc:	f7ff ff76 	bl	80026bc <Audio_MAL_IRQHandler>
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80027d8:	2102      	movs	r1, #2
 80027da:	480d      	ldr	r0, [pc, #52]	; (8002810 <SPI3_IRQHandler+0x3c>)
 80027dc:	f7ff fd9e 	bl	800231c <SPI_I2S_GetFlagStatus>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d011      	beq.n	800280a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <SPI3_IRQHandler+0x40>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d106      	bne.n	80027fc <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80027ee:	f001 f9a9 	bl	8003b44 <EVAL_AUDIO_GetSampleCallBack>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4619      	mov	r1, r3
 80027f6:	2004      	movs	r0, #4
 80027f8:	f7fe fc78 	bl	80010ec <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80027fc:	f001 f9a2 	bl	8003b44 <EVAL_AUDIO_GetSampleCallBack>
 8002800:	4603      	mov	r3, r0
 8002802:	4619      	mov	r1, r3
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <SPI3_IRQHandler+0x3c>)
 8002806:	f7ff fd23 	bl	8002250 <SPI_I2S_SendData>
  }
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40003c00 	.word	0x40003c00
 8002814:	2000002c 	.word	0x2000002c

08002818 <Codec_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	603a      	str	r2, [r7, #0]
 8002822:	80fb      	strh	r3, [r7, #6]
 8002824:	460b      	mov	r3, r1
 8002826:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]

  /* Configure the Codec related IOs */
  Codec_GPIO_Init();   
 800282c:	f000 fb1a 	bl	8002e64 <Codec_GPIO_Init>
  
  /* Reset the Codec Registers */
  Codec_Reset();
 8002830:	f000 f8e2 	bl	80029f8 <Codec_Reset>

  /* Initialize the Control interface of the Audio Codec */
  Codec_CtrlInterface_Init();     
 8002834:	f000 faa8 	bl	8002d88 <Codec_CtrlInterface_Init>
  
  /* Keep Codec powered OFF */
  counter += Codec_WriteRegister(0x02, 0x01);  
 8002838:	2101      	movs	r1, #1
 800283a:	2002      	movs	r0, #2
 800283c:	f000 f8f0 	bl	8002a20 <Codec_WriteRegister>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4413      	add	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
      
  counter += Codec_WriteRegister(0x04, 0xAF); /* SPK always OFF & HP always ON */
 8002848:	21af      	movs	r1, #175	; 0xaf
 800284a:	2004      	movs	r0, #4
 800284c:	f000 f8e8 	bl	8002a20 <Codec_WriteRegister>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4413      	add	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
  OutputDev = 0xAF;
 8002858:	4b43      	ldr	r3, [pc, #268]	; (8002968 <Codec_Init+0x150>)
 800285a:	22af      	movs	r2, #175	; 0xaf
 800285c:	701a      	strb	r2, [r3, #0]
  
  /* Clock configuration: Auto detection */  
  counter += Codec_WriteRegister(0x05, 0x81);
 800285e:	2181      	movs	r1, #129	; 0x81
 8002860:	2005      	movs	r0, #5
 8002862:	f000 f8dd 	bl	8002a20 <Codec_WriteRegister>
 8002866:	4602      	mov	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += Codec_WriteRegister(0x06, CODEC_STANDARD);
 800286e:	2104      	movs	r1, #4
 8002870:	2006      	movs	r0, #6
 8002872:	f000 f8d5 	bl	8002a20 <Codec_WriteRegister>
 8002876:	4602      	mov	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4413      	add	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
      
  /* Set the Master volume */
  Codec_VolumeCtrl(Volume);
 800287e:	797b      	ldrb	r3, [r7, #5]
 8002880:	4618      	mov	r0, r3
 8002882:	f000 f87d 	bl	8002980 <Codec_VolumeCtrl>
  
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002886:	4b39      	ldr	r3, [pc, #228]	; (800296c <Codec_Init+0x154>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d127      	bne.n	80028de <Codec_Init+0xc6>
  {
    /* Enable the PassThrough on AIN1A and AIN1B */
    counter += Codec_WriteRegister(0x08, 0x01);
 800288e:	2101      	movs	r1, #1
 8002890:	2008      	movs	r0, #8
 8002892:	f000 f8c5 	bl	8002a20 <Codec_WriteRegister>
 8002896:	4602      	mov	r2, r0
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4413      	add	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x09, 0x01);
 800289e:	2101      	movs	r1, #1
 80028a0:	2009      	movs	r0, #9
 80028a2:	f000 f8bd 	bl	8002a20 <Codec_WriteRegister>
 80028a6:	4602      	mov	r2, r0
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
    
    /* Route the analog input to the HP line */
    counter += Codec_WriteRegister(0x0E, 0xC0);
 80028ae:	21c0      	movs	r1, #192	; 0xc0
 80028b0:	200e      	movs	r0, #14
 80028b2:	f000 f8b5 	bl	8002a20 <Codec_WriteRegister>
 80028b6:	4602      	mov	r2, r0
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4413      	add	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
    
    /* Set the Passthough volume */
    counter += Codec_WriteRegister(0x14, 0x00);
 80028be:	2100      	movs	r1, #0
 80028c0:	2014      	movs	r0, #20
 80028c2:	f000 f8ad 	bl	8002a20 <Codec_WriteRegister>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4413      	add	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x15, 0x00);
 80028ce:	2100      	movs	r1, #0
 80028d0:	2015      	movs	r0, #21
 80028d2:	f000 f8a5 	bl	8002a20 <Codec_WriteRegister>
 80028d6:	4602      	mov	r2, r0
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  }

  /* Power on the Codec */
  counter += Codec_WriteRegister(0x02, 0x9E);  
 80028de:	219e      	movs	r1, #158	; 0x9e
 80028e0:	2002      	movs	r0, #2
 80028e2:	f000 f89d 	bl	8002a20 <Codec_WriteRegister>
 80028e6:	4602      	mov	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4413      	add	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
      off the I2S peripheral MCLK clock (which is the operating clock for Codec).
      If this delay is not inserted, then the codec will not shut down properly and
      it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += Codec_WriteRegister(0x0A, 0x00);
 80028ee:	2100      	movs	r1, #0
 80028f0:	200a      	movs	r0, #10
 80028f2:	f000 f895 	bl	8002a20 <Codec_WriteRegister>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  if (CurrAudioInterface != AUDIO_INTERFACE_DAC)
 80028fe:	4b1b      	ldr	r3, [pc, #108]	; (800296c <Codec_Init+0x154>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d007      	beq.n	8002916 <Codec_Init+0xfe>
  {  
    /* Disable the digital soft ramp */
    counter += Codec_WriteRegister(0x0E, 0x04);
 8002906:	2104      	movs	r1, #4
 8002908:	200e      	movs	r0, #14
 800290a:	f000 f889 	bl	8002a20 <Codec_WriteRegister>
 800290e:	4602      	mov	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4413      	add	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  }
  /* Disable the limiter attack level */
  counter += Codec_WriteRegister(0x27, 0x00);
 8002916:	2100      	movs	r1, #0
 8002918:	2027      	movs	r0, #39	; 0x27
 800291a:	f000 f881 	bl	8002a20 <Codec_WriteRegister>
 800291e:	4602      	mov	r2, r0
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  /* Adjust Bass and Treble levels */
  counter += Codec_WriteRegister(0x1F, 0x0F);
 8002926:	210f      	movs	r1, #15
 8002928:	201f      	movs	r0, #31
 800292a:	f000 f879 	bl	8002a20 <Codec_WriteRegister>
 800292e:	4602      	mov	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  /* Adjust PCM volume level */
  counter += Codec_WriteRegister(0x1A, 0x0A);
 8002936:	210a      	movs	r1, #10
 8002938:	201a      	movs	r0, #26
 800293a:	f000 f871 	bl	8002a20 <Codec_WriteRegister>
 800293e:	4602      	mov	r2, r0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
  counter += Codec_WriteRegister(0x1B, 0x0A);
 8002946:	210a      	movs	r1, #10
 8002948:	201b      	movs	r0, #27
 800294a:	f000 f869 	bl	8002a20 <Codec_WriteRegister>
 800294e:	4602      	mov	r2, r0
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]

  /* Configure the I2S peripheral */
  Codec_AudioInterface_Init(AudioFreq);  
 8002956:	6838      	ldr	r0, [r7, #0]
 8002958:	f000 fa42 	bl	8002de0 <Codec_AudioInterface_Init>
  
  /* Return communication control value */
  return counter;  
 800295c:	68fb      	ldr	r3, [r7, #12]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200005c0 	.word	0x200005c0
 800296c:	2000002c 	.word	0x2000002c

08002970 <Codec_Play>:
  * @note   For this codec no Play options are required.
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_Play(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* 
     No actions required on Codec level for play command
     */  

  /* Return communication control value */
  return 0;  
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <Codec_VolumeCtrl>:
  * @param  Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_VolumeCtrl(uint8_t Volume)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
  
  if (Volume > 0xE6)
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	2be6      	cmp	r3, #230	; 0xe6
 8002992:	d916      	bls.n	80029c2 <Codec_VolumeCtrl+0x42>
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume - 0xE7); 
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	3319      	adds	r3, #25
 8002998:	b2db      	uxtb	r3, r3
 800299a:	4619      	mov	r1, r3
 800299c:	2020      	movs	r0, #32
 800299e:	f000 f83f 	bl	8002a20 <Codec_WriteRegister>
 80029a2:	4602      	mov	r2, r0
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume - 0xE7);     
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	3319      	adds	r3, #25
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	4619      	mov	r1, r3
 80029b2:	2021      	movs	r0, #33	; 0x21
 80029b4:	f000 f834 	bl	8002a20 <Codec_WriteRegister>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4413      	add	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e015      	b.n	80029ee <Codec_VolumeCtrl+0x6e>
  }
  else
  {
    /* Set the Master volume */
    counter += Codec_WriteRegister(0x20, Volume + 0x19); 
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	3319      	adds	r3, #25
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	4619      	mov	r1, r3
 80029ca:	2020      	movs	r0, #32
 80029cc:	f000 f828 	bl	8002a20 <Codec_WriteRegister>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4413      	add	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
    counter += Codec_WriteRegister(0x21, Volume + 0x19); 
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	3319      	adds	r3, #25
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	4619      	mov	r1, r3
 80029e0:	2021      	movs	r0, #33	; 0x21
 80029e2:	f000 f81d 	bl	8002a20 <Codec_WriteRegister>
 80029e6:	4602      	mov	r2, r0
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  }

  return counter;  
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <Codec_Reset>:
  * @note   This function calls an external driver function: The IO Expander driver.
  * @param  None
  * @retval None
  */
static void Codec_Reset(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Power Down the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_RESET);
 80029fc:	2200      	movs	r2, #0
 80029fe:	2110      	movs	r1, #16
 8002a00:	4806      	ldr	r0, [pc, #24]	; (8002a1c <Codec_Reset+0x24>)
 8002a02:	f7fe fedd 	bl	80017c0 <GPIO_WriteBit>

  /* wait for a delay to insure registers erasing */
  Delay(CODEC_RESET_DELAY); 
 8002a06:	f644 70ff 	movw	r0, #20479	; 0x4fff
 8002a0a:	f000 fabb 	bl	8002f84 <Delay>
  
  /* Power on the codec */
  GPIO_WriteBit(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, Bit_SET);
 8002a0e:	2201      	movs	r2, #1
 8002a10:	2110      	movs	r1, #16
 8002a12:	4802      	ldr	r0, [pc, #8]	; (8002a1c <Codec_Reset+0x24>)
 8002a14:	f7fe fed4 	bl	80017c0 <GPIO_WriteBit>
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40020c00 	.word	0x40020c00

08002a20 <Codec_WriteRegister>:
  * @param  RegisterAddr: The address (location) of the register to be written.
  * @param  RegisterValue: the Byte value to be written into destination register.
  * @retval 0 if correct communication, else wrong communication
  */
static uint32_t Codec_WriteRegister(uint8_t RegisterAddr, uint8_t RegisterValue)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	460a      	mov	r2, r1
 8002a2a:	71fb      	strb	r3, [r7, #7]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	71bb      	strb	r3, [r7, #6]
  uint32_t result = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002a34:	4b4c      	ldr	r3, [pc, #304]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002a36:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002a3a:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002a3c:	e00a      	b.n	8002a54 <Codec_WriteRegister+0x34>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a3e:	4b4a      	ldr	r3, [pc, #296]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	1e5a      	subs	r2, r3, #1
 8002a44:	4948      	ldr	r1, [pc, #288]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002a46:	600a      	str	r2, [r1, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <Codec_WriteRegister+0x34>
 8002a4c:	f001 f854 	bl	8003af8 <Codec_TIMEOUT_UserCallback>
 8002a50:	4603      	mov	r3, r0
 8002a52:	e085      	b.n	8002b60 <Codec_WriteRegister+0x140>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002a54:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002a58:	4844      	ldr	r0, [pc, #272]	; (8002b6c <Codec_WriteRegister+0x14c>)
 8002a5a:	f7ff f8fb 	bl	8001c54 <I2C_GetFlagStatus>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ec      	bne.n	8002a3e <Codec_WriteRegister+0x1e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002a64:	2101      	movs	r1, #1
 8002a66:	4841      	ldr	r0, [pc, #260]	; (8002b6c <Codec_WriteRegister+0x14c>)
 8002a68:	f7ff f828 	bl	8001abc <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002a6c:	4b3e      	ldr	r3, [pc, #248]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002a6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a72:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002a74:	e00a      	b.n	8002a8c <Codec_WriteRegister+0x6c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002a76:	4b3c      	ldr	r3, [pc, #240]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	1e5a      	subs	r2, r3, #1
 8002a7c:	493a      	ldr	r1, [pc, #232]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002a7e:	600a      	str	r2, [r1, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d103      	bne.n	8002a8c <Codec_WriteRegister+0x6c>
 8002a84:	f001 f838 	bl	8003af8 <Codec_TIMEOUT_UserCallback>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	e069      	b.n	8002b60 <Codec_WriteRegister+0x140>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002a8c:	4938      	ldr	r1, [pc, #224]	; (8002b70 <Codec_WriteRegister+0x150>)
 8002a8e:	4837      	ldr	r0, [pc, #220]	; (8002b6c <Codec_WriteRegister+0x14c>)
 8002a90:	f7ff f8b0 	bl	8001bf4 <I2C_CheckEvent>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ed      	beq.n	8002a76 <Codec_WriteRegister+0x56>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2194      	movs	r1, #148	; 0x94
 8002a9e:	4833      	ldr	r0, [pc, #204]	; (8002b6c <Codec_WriteRegister+0x14c>)
 8002aa0:	f7ff f84c 	bl	8001b3c <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002aa4:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002aa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002aaa:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002aac:	e00a      	b.n	8002ac4 <Codec_WriteRegister+0xa4>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002aae:	4b2e      	ldr	r3, [pc, #184]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	1e5a      	subs	r2, r3, #1
 8002ab4:	492c      	ldr	r1, [pc, #176]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002ab6:	600a      	str	r2, [r1, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d103      	bne.n	8002ac4 <Codec_WriteRegister+0xa4>
 8002abc:	f001 f81c 	bl	8003af8 <Codec_TIMEOUT_UserCallback>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	e04d      	b.n	8002b60 <Codec_WriteRegister+0x140>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002ac4:	492b      	ldr	r1, [pc, #172]	; (8002b74 <Codec_WriteRegister+0x154>)
 8002ac6:	4829      	ldr	r0, [pc, #164]	; (8002b6c <Codec_WriteRegister+0x14c>)
 8002ac8:	f7ff f894 	bl	8001bf4 <I2C_CheckEvent>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0ed      	beq.n	8002aae <Codec_WriteRegister+0x8e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4825      	ldr	r0, [pc, #148]	; (8002b6c <Codec_WriteRegister+0x14c>)
 8002ad8:	f7ff f86e 	bl	8001bb8 <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002adc:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ae2:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8002ae4:	e00a      	b.n	8002afc <Codec_WriteRegister+0xdc>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	1e5a      	subs	r2, r3, #1
 8002aec:	491e      	ldr	r1, [pc, #120]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002aee:	600a      	str	r2, [r1, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <Codec_WriteRegister+0xdc>
 8002af4:	f001 f800 	bl	8003af8 <Codec_TIMEOUT_UserCallback>
 8002af8:	4603      	mov	r3, r0
 8002afa:	e031      	b.n	8002b60 <Codec_WriteRegister+0x140>
  /* Transmit the first address for write operation */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
 8002afc:	491e      	ldr	r1, [pc, #120]	; (8002b78 <Codec_WriteRegister+0x158>)
 8002afe:	481b      	ldr	r0, [pc, #108]	; (8002b6c <Codec_WriteRegister+0x14c>)
 8002b00:	f7ff f878 	bl	8001bf4 <I2C_CheckEvent>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0ed      	beq.n	8002ae6 <Codec_WriteRegister+0xc6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
 8002b0a:	79bb      	ldrb	r3, [r7, #6]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4817      	ldr	r0, [pc, #92]	; (8002b6c <Codec_WriteRegister+0x14c>)
 8002b10:	f7ff f852 	bl	8001bb8 <I2C_SendData>
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002b14:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002b16:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002b1a:	601a      	str	r2, [r3, #0]
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8002b1c:	e008      	b.n	8002b30 <Codec_WriteRegister+0x110>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
 8002b1e:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	1e5a      	subs	r2, r3, #1
 8002b24:	4910      	ldr	r1, [pc, #64]	; (8002b68 <Codec_WriteRegister+0x148>)
 8002b26:	600a      	str	r2, [r1, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <Codec_WriteRegister+0x110>
 8002b2c:	f000 ffe4 	bl	8003af8 <Codec_TIMEOUT_UserCallback>
  /* Prepare the register value to be sent */
  I2C_SendData(CODEC_I2C, RegisterValue);
  
  /*!< Wait till all data have been physically transferred on the bus */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(!I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF))
 8002b30:	4912      	ldr	r1, [pc, #72]	; (8002b7c <Codec_WriteRegister+0x15c>)
 8002b32:	480e      	ldr	r0, [pc, #56]	; (8002b6c <Codec_WriteRegister+0x14c>)
 8002b34:	f7ff f88e 	bl	8001c54 <I2C_GetFlagStatus>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0ef      	beq.n	8002b1e <Codec_WriteRegister+0xfe>
  {
    if((CODECTimeout--) == 0) Codec_TIMEOUT_UserCallback();
  }
  
  /* End the configuration sequence */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);  
 8002b3e:	2101      	movs	r1, #1
 8002b40:	480a      	ldr	r0, [pc, #40]	; (8002b6c <Codec_WriteRegister+0x14c>)
 8002b42:	f7fe ffdb 	bl	8001afc <I2C_GenerateSTOP>
  
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (Codec_ReadRegister(RegisterAddr) == RegisterValue)? 0:1;
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f819 	bl	8002b80 <Codec_ReadRegister>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	79bb      	ldrb	r3, [r7, #6]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	bf14      	ite	ne
 8002b56:	2301      	movne	r3, #1
 8002b58:	2300      	moveq	r3, #0
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	60fb      	str	r3, [r7, #12]
#endif /* VERIFY_WRITTENDATA */

  /* Return the verifying value: 0 (Passed) or 1 (Failed) */
  return result;  
 8002b5e:	68fb      	ldr	r3, [r7, #12]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000028 	.word	0x20000028
 8002b6c:	40005400 	.word	0x40005400
 8002b70:	00030001 	.word	0x00030001
 8002b74:	00070082 	.word	0x00070082
 8002b78:	00070080 	.word	0x00070080
 8002b7c:	10000004 	.word	0x10000004

08002b80 <Codec_ReadRegister>:
  * @param  RegisterAddr: Address of the register to be read.
  * @retval Value of the register to be read or dummy value if the communication
  *         fails.
  */
static uint32_t Codec_ReadRegister(uint8_t RegisterAddr)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
  uint32_t result = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
 8002b8e:	4b76      	ldr	r3, [pc, #472]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002b90:	f44f 1296 	mov.w	r2, #1228800	; 0x12c000
 8002b94:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002b96:	e00a      	b.n	8002bae <Codec_ReadRegister+0x2e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002b98:	4b73      	ldr	r3, [pc, #460]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	1e5a      	subs	r2, r3, #1
 8002b9e:	4972      	ldr	r1, [pc, #456]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002ba0:	600a      	str	r2, [r1, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d103      	bne.n	8002bae <Codec_ReadRegister+0x2e>
 8002ba6:	f000 ffa7 	bl	8003af8 <Codec_TIMEOUT_UserCallback>
 8002baa:	4603      	mov	r3, r0
 8002bac:	e0d7      	b.n	8002d5e <Codec_ReadRegister+0x1de>
{
  uint32_t result = 0;

  /*!< While the bus is busy */
  CODECTimeout = CODEC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BUSY))
 8002bae:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002bb2:	486e      	ldr	r0, [pc, #440]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002bb4:	f7ff f84e 	bl	8001c54 <I2C_GetFlagStatus>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ec      	bne.n	8002b98 <Codec_ReadRegister+0x18>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	486a      	ldr	r0, [pc, #424]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002bc2:	f7fe ff7b 	bl	8001abc <I2C_GenerateSTART>

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002bc6:	4b68      	ldr	r3, [pc, #416]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002bc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bcc:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002bce:	e00a      	b.n	8002be6 <Codec_ReadRegister+0x66>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002bd0:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	1e5a      	subs	r2, r3, #1
 8002bd6:	4964      	ldr	r1, [pc, #400]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002bd8:	600a      	str	r2, [r1, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d103      	bne.n	8002be6 <Codec_ReadRegister+0x66>
 8002bde:	f000 ff8b 	bl	8003af8 <Codec_TIMEOUT_UserCallback>
 8002be2:	4603      	mov	r3, r0
 8002be4:	e0bb      	b.n	8002d5e <Codec_ReadRegister+0x1de>
  /* Start the config sequence */
  I2C_GenerateSTART(CODEC_I2C, ENABLE);

  /* Test on EV5 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002be6:	4962      	ldr	r1, [pc, #392]	; (8002d70 <Codec_ReadRegister+0x1f0>)
 8002be8:	4860      	ldr	r0, [pc, #384]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002bea:	f7ff f803 	bl	8001bf4 <I2C_CheckEvent>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0ed      	beq.n	8002bd0 <Codec_ReadRegister+0x50>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2194      	movs	r1, #148	; 0x94
 8002bf8:	485c      	ldr	r0, [pc, #368]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002bfa:	f7fe ff9f 	bl	8001b3c <I2C_Send7bitAddress>

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002bfe:	4b5a      	ldr	r3, [pc, #360]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002c00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c04:	601a      	str	r2, [r3, #0]
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002c06:	e00a      	b.n	8002c1e <Codec_ReadRegister+0x9e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002c08:	4b57      	ldr	r3, [pc, #348]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	1e5a      	subs	r2, r3, #1
 8002c0e:	4956      	ldr	r1, [pc, #344]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002c10:	600a      	str	r2, [r1, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d103      	bne.n	8002c1e <Codec_ReadRegister+0x9e>
 8002c16:	f000 ff6f 	bl	8003af8 <Codec_TIMEOUT_UserCallback>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	e09f      	b.n	8002d5e <Codec_ReadRegister+0x1de>
  /* Transmit the slave address and enable writing operation */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Transmitter);

  /* Test on EV6 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8002c1e:	4955      	ldr	r1, [pc, #340]	; (8002d74 <Codec_ReadRegister+0x1f4>)
 8002c20:	4852      	ldr	r0, [pc, #328]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002c22:	f7fe ffe7 	bl	8001bf4 <I2C_CheckEvent>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0ed      	beq.n	8002c08 <Codec_ReadRegister+0x88>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }

  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	484e      	ldr	r0, [pc, #312]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002c32:	f7fe ffc1 	bl	8001bb8 <I2C_SendData>

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002c36:	4b4c      	ldr	r3, [pc, #304]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002c38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c3c:	601a      	str	r2, [r3, #0]
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002c3e:	e00a      	b.n	8002c56 <Codec_ReadRegister+0xd6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002c40:	4b49      	ldr	r3, [pc, #292]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	4948      	ldr	r1, [pc, #288]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002c48:	600a      	str	r2, [r1, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <Codec_ReadRegister+0xd6>
 8002c4e:	f000 ff53 	bl	8003af8 <Codec_TIMEOUT_UserCallback>
 8002c52:	4603      	mov	r3, r0
 8002c54:	e083      	b.n	8002d5e <Codec_ReadRegister+0x1de>
  /* Transmit the register address to be read */
  I2C_SendData(CODEC_I2C, RegisterAddr);

  /* Test on EV8 and clear it */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while (I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_BTF) == RESET)
 8002c56:	4948      	ldr	r1, [pc, #288]	; (8002d78 <Codec_ReadRegister+0x1f8>)
 8002c58:	4844      	ldr	r0, [pc, #272]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002c5a:	f7fe fffb 	bl	8001c54 <I2C_GetFlagStatus>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ed      	beq.n	8002c40 <Codec_ReadRegister+0xc0>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
 8002c64:	2101      	movs	r1, #1
 8002c66:	4841      	ldr	r0, [pc, #260]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002c68:	f7fe ff28 	bl	8001abc <I2C_GenerateSTART>
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002c6c:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002c6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c72:	601a      	str	r2, [r3, #0]
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002c74:	e00a      	b.n	8002c8c <Codec_ReadRegister+0x10c>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002c76:	4b3c      	ldr	r3, [pc, #240]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	1e5a      	subs	r2, r3, #1
 8002c7c:	493a      	ldr	r1, [pc, #232]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002c7e:	600a      	str	r2, [r1, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d103      	bne.n	8002c8c <Codec_ReadRegister+0x10c>
 8002c84:	f000 ff38 	bl	8003af8 <Codec_TIMEOUT_UserCallback>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	e068      	b.n	8002d5e <Codec_ReadRegister+0x1de>
  /*!< Send START condition a second time */  
  I2C_GenerateSTART(CODEC_I2C, ENABLE);
  
  /*!< Test on EV5 and clear it (cleared by reading SR1 then writing to DR) */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(!I2C_CheckEvent(CODEC_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 8002c8c:	4938      	ldr	r1, [pc, #224]	; (8002d70 <Codec_ReadRegister+0x1f0>)
 8002c8e:	4837      	ldr	r0, [pc, #220]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002c90:	f7fe ffb0 	bl	8001bf4 <I2C_CheckEvent>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0ed      	beq.n	8002c76 <Codec_ReadRegister+0xf6>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  } 
  
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	2194      	movs	r1, #148	; 0x94
 8002c9e:	4833      	ldr	r0, [pc, #204]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002ca0:	f7fe ff4c 	bl	8001b3c <I2C_Send7bitAddress>
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002ca4:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002ca6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002caa:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002cac:	e00a      	b.n	8002cc4 <Codec_ReadRegister+0x144>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002cae:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	1e5a      	subs	r2, r3, #1
 8002cb4:	492c      	ldr	r1, [pc, #176]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002cb6:	600a      	str	r2, [r1, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d103      	bne.n	8002cc4 <Codec_ReadRegister+0x144>
 8002cbc:	f000 ff1c 	bl	8003af8 <Codec_TIMEOUT_UserCallback>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	e04c      	b.n	8002d5e <Codec_ReadRegister+0x1de>
  /*!< Send Codec address for read */
  I2C_Send7bitAddress(CODEC_I2C, CODEC_ADDRESS, I2C_Direction_Receiver);  
  
  /* Wait on ADDR flag to be set (ADDR is still not cleared at this level */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_ADDR) == RESET)
 8002cc4:	492d      	ldr	r1, [pc, #180]	; (8002d7c <Codec_ReadRegister+0x1fc>)
 8002cc6:	4829      	ldr	r0, [pc, #164]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002cc8:	f7fe ffc4 	bl	8001c54 <I2C_GetFlagStatus>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0ed      	beq.n	8002cae <Codec_ReadRegister+0x12e>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }     
  
  /*!< Disable Acknowledgment */
  I2C_AcknowledgeConfig(CODEC_I2C, DISABLE);   
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4825      	ldr	r0, [pc, #148]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002cd6:	f7fe ff4f 	bl	8001b78 <I2C_AcknowledgeConfig>
  
  /* Clear ADDR register by reading SR1 then SR2 register (SR1 has already been read) */
  (void)CODEC_I2C->SR2;
 8002cda:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002cdc:	8b1b      	ldrh	r3, [r3, #24]
  
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
 8002cde:	2101      	movs	r1, #1
 8002ce0:	4822      	ldr	r0, [pc, #136]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002ce2:	f7fe ff0b 	bl	8001afc <I2C_GenerateSTOP>
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002ce8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cec:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002cee:	e00a      	b.n	8002d06 <Codec_ReadRegister+0x186>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	1e5a      	subs	r2, r3, #1
 8002cf6:	491c      	ldr	r1, [pc, #112]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002cf8:	600a      	str	r2, [r1, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d103      	bne.n	8002d06 <Codec_ReadRegister+0x186>
 8002cfe:	f000 fefb 	bl	8003af8 <Codec_TIMEOUT_UserCallback>
 8002d02:	4603      	mov	r3, r0
 8002d04:	e02b      	b.n	8002d5e <Codec_ReadRegister+0x1de>
  /*!< Send STOP Condition */
  I2C_GenerateSTOP(CODEC_I2C, ENABLE);
  
  /* Wait for the byte to be received */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(I2C_GetFlagStatus(CODEC_I2C, I2C_FLAG_RXNE) == RESET)
 8002d06:	491e      	ldr	r1, [pc, #120]	; (8002d80 <Codec_ReadRegister+0x200>)
 8002d08:	4818      	ldr	r0, [pc, #96]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002d0a:	f7fe ffa3 	bl	8001c54 <I2C_GetFlagStatus>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0ed      	beq.n	8002cf0 <Codec_ReadRegister+0x170>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }
  
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
 8002d14:	4815      	ldr	r0, [pc, #84]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002d16:	f7fe ff5f 	bl	8001bd8 <I2C_ReceiveData>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	60fb      	str	r3, [r7, #12]
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002d20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d24:	601a      	str	r2, [r3, #0]
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 8002d26:	e00a      	b.n	8002d3e <Codec_ReadRegister+0x1be>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	1e5a      	subs	r2, r3, #1
 8002d2e:	490e      	ldr	r1, [pc, #56]	; (8002d68 <Codec_ReadRegister+0x1e8>)
 8002d30:	600a      	str	r2, [r1, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d103      	bne.n	8002d3e <Codec_ReadRegister+0x1be>
 8002d36:	f000 fedf 	bl	8003af8 <Codec_TIMEOUT_UserCallback>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	e00f      	b.n	8002d5e <Codec_ReadRegister+0x1de>
  /*!< Read the byte received from the Codec */
  result = I2C_ReceiveData(CODEC_I2C);
  
  /* Wait to make sure that STOP flag has been cleared */
  CODECTimeout = CODEC_FLAG_TIMEOUT;
  while(CODEC_I2C->CR1 & I2C_CR1_STOP)
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ed      	bne.n	8002d28 <Codec_ReadRegister+0x1a8>
  {
    if((CODECTimeout--) == 0) return Codec_TIMEOUT_UserCallback();
  }  
  
  /*!< Re-Enable Acknowledgment to be ready for another reception */
  I2C_AcknowledgeConfig(CODEC_I2C, ENABLE);  
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	4807      	ldr	r0, [pc, #28]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002d50:	f7fe ff12 	bl	8001b78 <I2C_AcknowledgeConfig>
  
  /* Clear AF flag for next communication */
  I2C_ClearFlag(CODEC_I2C, I2C_FLAG_AF); 
 8002d54:	490b      	ldr	r1, [pc, #44]	; (8002d84 <Codec_ReadRegister+0x204>)
 8002d56:	4805      	ldr	r0, [pc, #20]	; (8002d6c <Codec_ReadRegister+0x1ec>)
 8002d58:	f7fe ffb0 	bl	8001cbc <I2C_ClearFlag>
  
  /* Return the byte read from Codec */
  return result;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000028 	.word	0x20000028
 8002d6c:	40005400 	.word	0x40005400
 8002d70:	00030001 	.word	0x00030001
 8002d74:	00070082 	.word	0x00070082
 8002d78:	10000004 	.word	0x10000004
 8002d7c:	10000002 	.word	0x10000002
 8002d80:	10000040 	.word	0x10000040
 8002d84:	10000400 	.word	0x10000400

08002d88 <Codec_CtrlInterface_Init>:
  * @brief  Initializes the Audio Codec control interface (I2C).
  * @param  None
  * @retval None
  */
static void Codec_CtrlInterface_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
  I2C_InitTypeDef I2C_InitStructure;
  
  /* Enable the CODEC_I2C peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2C_CLK, ENABLE);
 8002d8e:	2101      	movs	r1, #1
 8002d90:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002d94:	f7ff f874 	bl	8001e80 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2C peripheral configuration */
  I2C_DeInit(CODEC_I2C);
 8002d98:	480f      	ldr	r0, [pc, #60]	; (8002dd8 <Codec_CtrlInterface_Init+0x50>)
 8002d9a:	f7fe fd73 	bl	8001884 <I2C_DeInit>
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	80bb      	strh	r3, [r7, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8002da2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002da6:	80fb      	strh	r3, [r7, #6]
  I2C_InitStructure.I2C_OwnAddress1 = 0x33;
 8002da8:	2333      	movs	r3, #51	; 0x33
 8002daa:	813b      	strh	r3, [r7, #8]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002db0:	817b      	strh	r3, [r7, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002db2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002db6:	81bb      	strh	r3, [r7, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <Codec_CtrlInterface_Init+0x54>)
 8002dba:	603b      	str	r3, [r7, #0]
  /* Enable the I2C peripheral */
  I2C_Cmd(CODEC_I2C, ENABLE);  
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4806      	ldr	r0, [pc, #24]	; (8002dd8 <Codec_CtrlInterface_Init+0x50>)
 8002dc0:	f7fe fe5c 	bl	8001a7c <I2C_Cmd>
  I2C_Init(CODEC_I2C, &I2C_InitStructure);
 8002dc4:	463b      	mov	r3, r7
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4803      	ldr	r0, [pc, #12]	; (8002dd8 <Codec_CtrlInterface_Init+0x50>)
 8002dca:	f7fe fd95 	bl	80018f8 <I2C_Init>
}
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40005400 	.word	0x40005400
 8002ddc:	000186a0 	.word	0x000186a0

08002de0 <Codec_AudioInterface_Init>:
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  * @retval None
  */
static void Codec_AudioInterface_Init(uint32_t AudioFreq)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  I2S_InitTypeDef I2S_InitStructure;
  DAC_InitTypeDef  DAC_InitStructure;

  /* Enable the CODEC_I2S peripheral clock */
  RCC_APB1PeriphClockCmd(CODEC_I2S_CLK, ENABLE);
 8002de8:	2101      	movs	r1, #1
 8002dea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002dee:	f7ff f847 	bl	8001e80 <RCC_APB1PeriphClockCmd>
  
  /* CODEC_I2S peripheral configuration */
  SPI_I2S_DeInit(CODEC_I2S);
 8002df2:	481a      	ldr	r0, [pc, #104]	; (8002e5c <Codec_AudioInterface_Init+0x7c>)
 8002df4:	f7ff f8c4 	bl	8001f80 <SPI_I2S_DeInit>
  I2S_InitStructure.I2S_AudioFreq = AudioFreq;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	623b      	str	r3, [r7, #32]
  I2S_InitStructure.I2S_Standard = I2S_STANDARD;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	837b      	strh	r3, [r7, #26]
  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 8002e00:	2300      	movs	r3, #0
 8002e02:	83bb      	strh	r3, [r7, #28]
  I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 8002e04:	2300      	movs	r3, #0
 8002e06:	84bb      	strh	r3, [r7, #36]	; 0x24
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterRx;
  }
  else
  {
#else
   I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 8002e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e0c:	833b      	strh	r3, [r7, #24]
#endif
#ifdef DAC_USE_I2S_DMA
  }
#endif /* DAC_USE_I2S_DMA */
#ifdef CODEC_MCLK_ENABLED
  I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 8002e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e12:	83fb      	strh	r3, [r7, #30]
#else
#error "No selection for the MCLK output has been defined !"
#endif /* CODEC_MCLK_ENABLED */
  
  /* Initialize the I2S peripheral with the structure above */
  I2S_Init(CODEC_I2S, &I2S_InitStructure);
 8002e14:	f107 0318 	add.w	r3, r7, #24
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4810      	ldr	r0, [pc, #64]	; (8002e5c <Codec_AudioInterface_Init+0x7c>)
 8002e1c:	f7ff f91e 	bl	800205c <I2S_Init>


  /* Configure the DAC interface */
  if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <Codec_AudioInterface_Init+0x80>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d114      	bne.n	8002e52 <Codec_AudioInterface_Init+0x72>
  {    
    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8002e28:	2101      	movs	r1, #1
 8002e2a:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002e2e:	f7ff f827 	bl	8001e80 <RCC_APB1PeriphClockCmd>
    
    /* DAC channel1 Configuration */
    DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
    DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 8002e3e:	f107 0308 	add.w	r3, r7, #8
 8002e42:	4619      	mov	r1, r3
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fe f8f7 	bl	8001038 <DAC_Init>
    
    /* Enable DAC Channel1 */
    DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);  
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7fe f927 	bl	80010a0 <DAC_Cmd>
  }
  
  /* The I2S peripheral will be enabled only in the EVAL_AUDIO_Play() function 
       or by user functions if DMA mode not enabled */  
}
 8002e52:	bf00      	nop
 8002e54:	3728      	adds	r7, #40	; 0x28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40003c00 	.word	0x40003c00
 8002e60:	2000002c 	.word	0x2000002c

08002e64 <Codec_GPIO_Init>:
  *        interfaces).
  * @param  None
  * @retval None
  */
static void Codec_GPIO_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable Reset GPIO Clock */
  RCC_AHB1PeriphClockCmd(AUDIO_RESET_GPIO_CLK,ENABLE);
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	2008      	movs	r0, #8
 8002e6e:	f7fe ffe7 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
  
  /* Audio reset pin configuration -------------------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = AUDIO_RESET_PIN; 
 8002e72:	2310      	movs	r3, #16
 8002e74:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002e76:	2301      	movs	r3, #1
 8002e78:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStructure);    
 8002e86:	463b      	mov	r3, r7
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4839      	ldr	r0, [pc, #228]	; (8002f70 <Codec_GPIO_Init+0x10c>)
 8002e8c:	f7fe fbf0 	bl	8001670 <GPIO_Init>
  
  /* Enable I2S and I2C GPIO clocks */
  RCC_AHB1PeriphClockCmd(CODEC_I2C_GPIO_CLOCK | CODEC_I2S_GPIO_CLOCK, ENABLE);
 8002e90:	2101      	movs	r1, #1
 8002e92:	2007      	movs	r0, #7
 8002e94:	f7fe ffd4 	bl	8001e40 <RCC_AHB1PeriphClockCmd>

  /* CODEC_I2C SCL and SDA pins configuration -------------------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2C_SCL_PIN | CODEC_I2C_SDA_PIN; 
 8002e98:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002e9c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2C_GPIO, &GPIO_InitStructure);     
 8002eae:	463b      	mov	r3, r7
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4830      	ldr	r0, [pc, #192]	; (8002f74 <Codec_GPIO_Init+0x110>)
 8002eb4:	f7fe fbdc 	bl	8001670 <GPIO_Init>
  /* Connect pins to I2C peripheral */
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SCL_PINSRC, CODEC_I2C_GPIO_AF);  
 8002eb8:	2204      	movs	r2, #4
 8002eba:	2106      	movs	r1, #6
 8002ebc:	482d      	ldr	r0, [pc, #180]	; (8002f74 <Codec_GPIO_Init+0x110>)
 8002ebe:	f7fe fc97 	bl	80017f0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2C_GPIO, CODEC_I2S_SDA_PINSRC, CODEC_I2C_GPIO_AF);  
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	2109      	movs	r1, #9
 8002ec6:	482b      	ldr	r0, [pc, #172]	; (8002f74 <Codec_GPIO_Init+0x110>)
 8002ec8:	f7fe fc92 	bl	80017f0 <GPIO_PinAFConfig>

  /* CODEC_I2S pins configuration: WS, SCK and SD pins -----------------------------*/
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_SCK_PIN | CODEC_I2S_SD_PIN; 
 8002ecc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ed0:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002eda:	2300      	movs	r3, #0
 8002edc:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_GPIO, &GPIO_InitStructure);
 8002ee2:	463b      	mov	r3, r7
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4824      	ldr	r0, [pc, #144]	; (8002f78 <Codec_GPIO_Init+0x114>)
 8002ee8:	f7fe fbc2 	bl	8001670 <GPIO_Init>
  
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_WS_GPIO, CODEC_I2S_WS_PINSRC, CODEC_I2S_GPIO_AF);  
 8002eec:	2206      	movs	r2, #6
 8002eee:	2104      	movs	r1, #4
 8002ef0:	4822      	ldr	r0, [pc, #136]	; (8002f7c <Codec_GPIO_Init+0x118>)
 8002ef2:	f7fe fc7d 	bl	80017f0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SCK_PINSRC, CODEC_I2S_GPIO_AF);
 8002ef6:	2206      	movs	r2, #6
 8002ef8:	210a      	movs	r1, #10
 8002efa:	481f      	ldr	r0, [pc, #124]	; (8002f78 <Codec_GPIO_Init+0x114>)
 8002efc:	f7fe fc78 	bl	80017f0 <GPIO_PinAFConfig>

  if (CurrAudioInterface != AUDIO_INTERFACE_DAC) 
 8002f00:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <Codec_GPIO_Init+0x11c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d00c      	beq.n	8002f22 <Codec_GPIO_Init+0xbe>
  {
    GPIO_InitStructure.GPIO_Pin = CODEC_I2S_WS_PIN ;
 8002f08:	2310      	movs	r3, #16
 8002f0a:	603b      	str	r3, [r7, #0]
    GPIO_Init(CODEC_I2S_WS_GPIO, &GPIO_InitStructure); 
 8002f0c:	463b      	mov	r3, r7
 8002f0e:	4619      	mov	r1, r3
 8002f10:	481a      	ldr	r0, [pc, #104]	; (8002f7c <Codec_GPIO_Init+0x118>)
 8002f12:	f7fe fbad 	bl	8001670 <GPIO_Init>
    GPIO_PinAFConfig(CODEC_I2S_GPIO, CODEC_I2S_SD_PINSRC, CODEC_I2S_GPIO_AF);
 8002f16:	2206      	movs	r2, #6
 8002f18:	210c      	movs	r1, #12
 8002f1a:	4817      	ldr	r0, [pc, #92]	; (8002f78 <Codec_GPIO_Init+0x114>)
 8002f1c:	f7fe fc68 	bl	80017f0 <GPIO_PinAFConfig>
 8002f20:	e00e      	b.n	8002f40 <Codec_GPIO_Init+0xdc>
  }
  else
  {
    /* GPIOA clock enable (to be used with DAC) */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002f22:	2101      	movs	r1, #1
 8002f24:	2001      	movs	r0, #1
 8002f26:	f7fe ff8b 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
   
    /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8002f2a:	2310      	movs	r3, #16
 8002f2c:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002f36:	463b      	mov	r3, r7
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4810      	ldr	r0, [pc, #64]	; (8002f7c <Codec_GPIO_Init+0x118>)
 8002f3c:	f7fe fb98 	bl	8001670 <GPIO_Init>
  }

#ifdef CODEC_MCLK_ENABLED
  /* CODEC_I2S pins configuration: MCK pin */
  GPIO_InitStructure.GPIO_Pin = CODEC_I2S_MCK_PIN; 
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002f44:	2302      	movs	r3, #2
 8002f46:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(CODEC_I2S_MCK_GPIO, &GPIO_InitStructure);   
 8002f54:	463b      	mov	r3, r7
 8002f56:	4619      	mov	r1, r3
 8002f58:	4807      	ldr	r0, [pc, #28]	; (8002f78 <Codec_GPIO_Init+0x114>)
 8002f5a:	f7fe fb89 	bl	8001670 <GPIO_Init>
  /* Connect pins to I2S peripheral  */
  GPIO_PinAFConfig(CODEC_I2S_MCK_GPIO, CODEC_I2S_MCK_PINSRC, CODEC_I2S_GPIO_AF); 
 8002f5e:	2206      	movs	r2, #6
 8002f60:	2107      	movs	r1, #7
 8002f62:	4805      	ldr	r0, [pc, #20]	; (8002f78 <Codec_GPIO_Init+0x114>)
 8002f64:	f7fe fc44 	bl	80017f0 <GPIO_PinAFConfig>
#endif /* CODEC_MCLK_ENABLED */ 
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40020c00 	.word	0x40020c00
 8002f74:	40020400 	.word	0x40020400
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	2000002c 	.word	0x2000002c

08002f84 <Delay>:
  * @param  nCount: specifies the delay time length.
  * @retval None
  */

static void Delay( __IO uint32_t nCount)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  for (; nCount != 0; nCount--);
 8002f8c:	e002      	b.n	8002f94 <Delay+0x10>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f9      	bne.n	8002f8e <Delay+0xa>
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop

08002fa8 <Audio_MAL_Init>:
  *         from Media to the I2S peripheral.
  * @param  None
  * @retval None
  */
static void Audio_MAL_Init(void)  
{ 
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
#else  
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
  NVIC_InitTypeDef NVIC_InitStructure;
#endif

  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8002fae:	4b4a      	ldr	r3, [pc, #296]	; (80030d8 <Audio_MAL_Init+0x130>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d16e      	bne.n	8003094 <Audio_MAL_Init+0xec>
  {
    /* Enable the DMA clock */
    RCC_AHB1PeriphClockCmd(AUDIO_MAL_DMA_CLOCK, ENABLE); 
 8002fb6:	4b49      	ldr	r3, [pc, #292]	; (80030dc <Audio_MAL_Init+0x134>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe ff3f 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
    
    /* Configure the DMA Stream */
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);
 8002fc2:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <Audio_MAL_Init+0x138>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe fa0f 	bl	80013ec <DMA_Cmd>
    DMA_DeInit(AUDIO_MAL_DMA_STREAM);
 8002fce:	4b44      	ldr	r3, [pc, #272]	; (80030e0 <Audio_MAL_Init+0x138>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe f8a6 	bl	8001124 <DMA_DeInit>
    /* Set the parameters to be configured */
    DMA_InitStructure.DMA_Channel = AUDIO_MAL_DMA_CHANNEL;  
 8002fd8:	4b42      	ldr	r3, [pc, #264]	; (80030e4 <Audio_MAL_Init+0x13c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a42      	ldr	r2, [pc, #264]	; (80030e8 <Audio_MAL_Init+0x140>)
 8002fde:	6013      	str	r3, [r2, #0]
    DMA_InitStructure.DMA_PeripheralBaseAddr = AUDIO_MAL_DMA_DREG;
 8002fe0:	4b42      	ldr	r3, [pc, #264]	; (80030ec <Audio_MAL_Init+0x144>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a40      	ldr	r2, [pc, #256]	; (80030e8 <Audio_MAL_Init+0x140>)
 8002fe6:	6053      	str	r3, [r2, #4]
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)0;      /* This field will be configured in play function */
 8002fe8:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <Audio_MAL_Init+0x140>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
    DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8002fee:	4b3e      	ldr	r3, [pc, #248]	; (80030e8 <Audio_MAL_Init+0x140>)
 8002ff0:	2240      	movs	r2, #64	; 0x40
 8002ff2:	60da      	str	r2, [r3, #12]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)0xFFFE;      /* This field will be configured in play function */
 8002ff4:	4b3c      	ldr	r3, [pc, #240]	; (80030e8 <Audio_MAL_Init+0x140>)
 8002ff6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ffa:	611a      	str	r2, [r3, #16]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002ffc:	4b3a      	ldr	r3, [pc, #232]	; (80030e8 <Audio_MAL_Init+0x140>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	615a      	str	r2, [r3, #20]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003002:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <Audio_MAL_Init+0x140>)
 8003004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003008:	619a      	str	r2, [r3, #24]
    DMA_InitStructure.DMA_PeripheralDataSize = AUDIO_MAL_DMA_PERIPH_DATA_SIZE;
 800300a:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <Audio_MAL_Init+0x140>)
 800300c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003010:	61da      	str	r2, [r3, #28]
    DMA_InitStructure.DMA_MemoryDataSize = AUDIO_MAL_DMA_MEM_DATA_SIZE; 
 8003012:	4b35      	ldr	r3, [pc, #212]	; (80030e8 <Audio_MAL_Init+0x140>)
 8003014:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003018:	621a      	str	r2, [r3, #32]
#ifdef AUDIO_MAL_MODE_NORMAL
    DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
#elif defined(AUDIO_MAL_MODE_CIRCULAR)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800301a:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <Audio_MAL_Init+0x140>)
 800301c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003020:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error "AUDIO_MAL_MODE_NORMAL or AUDIO_MAL_MODE_CIRCULAR should be selected !!"
#endif /* AUDIO_MAL_MODE_NORMAL */  
    DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8003022:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <Audio_MAL_Init+0x140>)
 8003024:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003028:	629a      	str	r2, [r3, #40]	; 0x28
    DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
 800302a:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <Audio_MAL_Init+0x140>)
 800302c:	2200      	movs	r2, #0
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c
    DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8003030:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <Audio_MAL_Init+0x140>)
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
    DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <Audio_MAL_Init+0x140>)
 8003038:	2200      	movs	r2, #0
 800303a:	635a      	str	r2, [r3, #52]	; 0x34
    DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;  
 800303c:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <Audio_MAL_Init+0x140>)
 800303e:	2200      	movs	r2, #0
 8003040:	639a      	str	r2, [r3, #56]	; 0x38
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);  
 8003042:	4b27      	ldr	r3, [pc, #156]	; (80030e0 <Audio_MAL_Init+0x138>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4928      	ldr	r1, [pc, #160]	; (80030e8 <Audio_MAL_Init+0x140>)
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe f93f 	bl	80012cc <DMA_Init>
    
    /* Enable the selected DMA interrupts (selected in "stm32f4_discovery_eval_audio_codec.h" defines) */
#ifdef AUDIO_MAL_DMA_IT_TC_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TC, ENABLE);
 800304e:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <Audio_MAL_Init+0x138>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2201      	movs	r2, #1
 8003054:	2110      	movs	r1, #16
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fa4e 	bl	80014f8 <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TC_EN */
#ifdef AUDIO_MAL_DMA_IT_HT_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_HT, ENABLE);
 800305c:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <Audio_MAL_Init+0x138>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	2108      	movs	r1, #8
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe fa47 	bl	80014f8 <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_HT_EN */
#ifdef AUDIO_MAL_DMA_IT_TE_EN
    DMA_ITConfig(AUDIO_MAL_DMA_STREAM, DMA_IT_TE | DMA_IT_FE | DMA_IT_DME, ENABLE);
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <Audio_MAL_Init+0x138>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2201      	movs	r2, #1
 8003070:	2186      	movs	r1, #134	; 0x86
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fa40 	bl	80014f8 <DMA_ITConfig>
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
    
#if defined(AUDIO_MAL_DMA_IT_TC_EN) || defined(AUDIO_MAL_DMA_IT_HT_EN) || defined(AUDIO_MAL_DMA_IT_TE_EN)
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = AUDIO_MAL_DMA_IRQ;
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <Audio_MAL_Init+0x148>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 8003080:	2300      	movs	r3, #0
 8003082:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 8003084:	2300      	movs	r3, #0
 8003086:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003088:	2301      	movs	r3, #1
 800308a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fd7a 	bl	8000b88 <NVIC_Init>
    NVIC_Init(&NVIC_InitStructure);
#endif 
  }
#endif /* DAC_USE_I2S_DMA */
  
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <Audio_MAL_Init+0x130>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d105      	bne.n	80030a8 <Audio_MAL_Init+0x100>
  {
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
 800309c:	2201      	movs	r2, #1
 800309e:	2102      	movs	r1, #2
 80030a0:	4814      	ldr	r0, [pc, #80]	; (80030f4 <Audio_MAL_Init+0x14c>)
 80030a2:	f7ff f8e5 	bl	8002270 <SPI_I2S_DMACmd>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 80030a6:	e012      	b.n	80030ce <Audio_MAL_Init+0x126>
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Tx, ENABLE);  
  }
  else
  {
    /* Configure the STM32 DAC to geenrate audio analog signal */
    DAC_Config();
 80030a8:	f000 f86c 	bl	8003184 <DAC_Config>
    
#ifndef DAC_USE_I2S_DMA
    /* Enable the I2S interrupt used to write into the DAC register */
    SPI_I2S_ITConfig(SPI3, SPI_I2S_IT_TXE, ENABLE);
 80030ac:	2201      	movs	r2, #1
 80030ae:	2171      	movs	r1, #113	; 0x71
 80030b0:	4810      	ldr	r0, [pc, #64]	; (80030f4 <Audio_MAL_Init+0x14c>)
 80030b2:	f7ff f901 	bl	80022b8 <SPI_I2S_ITConfig>
    
    /* I2S DMA IRQ Channel configuration */
    NVIC_InitStructure.NVIC_IRQChannel = CODEC_I2S_IRQ;
 80030b6:	2333      	movs	r3, #51	; 0x33
 80030b8:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = EVAL_AUDIO_IRQ_PREPRIO;
 80030ba:	2300      	movs	r3, #0
 80030bc:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = EVAL_AUDIO_IRQ_SUBRIO;
 80030be:	2300      	movs	r3, #0
 80030c0:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure); 
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fd5d 	bl	8000b88 <NVIC_Init>
    /* Enable the I2S DMA request */
    SPI_I2S_DMACmd(CODEC_I2S, SPI_I2S_DMAReq_Rx, ENABLE);   
#endif /* DAC_USE_I2S_DMA */
  }
#endif
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	2000002c 	.word	0x2000002c
 80030dc:	20000030 	.word	0x20000030
 80030e0:	20000034 	.word	0x20000034
 80030e4:	200005c4 	.word	0x200005c4
 80030e8:	200049f0 	.word	0x200049f0
 80030ec:	20000038 	.word	0x20000038
 80030f0:	2000003c 	.word	0x2000003c
 80030f4:	40003c00 	.word	0x40003c00

080030f8 <Audio_MAL_Play>:
  * @brief  Starts playing audio stream from the audio Media.
  * @param  None
  * @retval None
  */
void Audio_MAL_Play(uint32_t Addr, uint32_t Size)
{         
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  if (CurrAudioInterface == AUDIO_INTERFACE_I2S)
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <Audio_MAL_Play+0x7c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d112      	bne.n	8003130 <Audio_MAL_Play+0x38>
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 800310a:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <Audio_MAL_Play+0x80>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 8003110:	4a19      	ldr	r2, [pc, #100]	; (8003178 <Audio_MAL_Play+0x80>)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8003116:	4b19      	ldr	r3, [pc, #100]	; (800317c <Audio_MAL_Play+0x84>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4917      	ldr	r1, [pc, #92]	; (8003178 <Audio_MAL_Play+0x80>)
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe f8d5 	bl	80012cc <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);   
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <Audio_MAL_Play+0x84>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe f95f 	bl	80013ec <DMA_Cmd>
 800312e:	e011      	b.n	8003154 <Audio_MAL_Play+0x5c>
  }
#ifndef DAC_USE_I2S_DMA
  else
  {
    /* Configure the buffer address and size */
    DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)Addr;
 8003130:	4a11      	ldr	r2, [pc, #68]	; (8003178 <Audio_MAL_Play+0x80>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6093      	str	r3, [r2, #8]
    DMA_InitStructure.DMA_BufferSize = (uint32_t)Size;
 8003136:	4a10      	ldr	r2, [pc, #64]	; (8003178 <Audio_MAL_Play+0x80>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6113      	str	r3, [r2, #16]
    
    /* Configure the DMA Stream with the new parameters */
    DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <Audio_MAL_Play+0x84>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	490d      	ldr	r1, [pc, #52]	; (8003178 <Audio_MAL_Play+0x80>)
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe f8c2 	bl	80012cc <DMA_Init>
    
    /* Enable the I2S DMA Stream*/
    DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <Audio_MAL_Play+0x84>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2101      	movs	r1, #1
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe f94c 	bl	80013ec <DMA_Cmd>
  }
#endif /* DAC_USE_I2S_DMA */
  
  /* If the I2S peripheral is still not enabled, enable it */
  if ((CODEC_I2S->I2SCFGR & I2S_ENABLE_MASK) == 0)
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <Audio_MAL_Play+0x88>)
 8003156:	8b9b      	ldrh	r3, [r3, #28]
 8003158:	b29b      	uxth	r3, r3
 800315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <Audio_MAL_Play+0x72>
  {
    I2S_Cmd(CODEC_I2S, ENABLE);
 8003162:	2101      	movs	r1, #1
 8003164:	4806      	ldr	r0, [pc, #24]	; (8003180 <Audio_MAL_Play+0x88>)
 8003166:	f7ff f853 	bl	8002210 <I2S_Cmd>
  }
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	2000002c 	.word	0x2000002c
 8003178:	200049f0 	.word	0x200049f0
 800317c:	20000034 	.word	0x20000034
 8003180:	40003c00 	.word	0x40003c00

08003184 <DAC_Config>:
  * @brief  DAC  Channel1 Configuration
  * @param  None
  * @retval None
  */
void DAC_Config(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
  DAC_InitTypeDef  DAC_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;

  /* DMA1 clock and GPIOA clock enable (to be used with DAC) */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1 | RCC_AHB1Periph_GPIOA, ENABLE);
 800318a:	2101      	movs	r1, #1
 800318c:	4813      	ldr	r0, [pc, #76]	; (80031dc <DAC_Config+0x58>)
 800318e:	f7fe fe57 	bl	8001e40 <RCC_AHB1PeriphClockCmd>

  /* DAC Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8003192:	2101      	movs	r1, #1
 8003194:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003198:	f7fe fe72 	bl	8001e80 <RCC_APB1PeriphClockCmd>

  /* DAC channel 1 & 2 (DAC_OUT1 = PA.4) configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 800319c:	2310      	movs	r3, #16
 800319e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80031a0:	2303      	movs	r3, #3
 80031a2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80031a8:	463b      	mov	r3, r7
 80031aa:	4619      	mov	r1, r3
 80031ac:	480c      	ldr	r0, [pc, #48]	; (80031e0 <DAC_Config+0x5c>)
 80031ae:	f7fe fa5f 	bl	8001670 <GPIO_Init>

  /* DAC channel1 Configuration */
  DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  DAC_Init(AUDIO_DAC_CHANNEL, &DAC_InitStructure);
 80031be:	f107 0308 	add.w	r3, r7, #8
 80031c2:	4619      	mov	r1, r3
 80031c4:	2000      	movs	r0, #0
 80031c6:	f7fd ff37 	bl	8001038 <DAC_Init>

  /* Enable DAC Channel1 */
  DAC_Cmd(AUDIO_DAC_CHANNEL, ENABLE);
 80031ca:	2101      	movs	r1, #1
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7fd ff67 	bl	80010a0 <DAC_Cmd>
}
 80031d2:	bf00      	nop
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	00200001 	.word	0x00200001
 80031e0:	40020000 	.word	0x40020000

080031e4 <sf_biquad_process>:
// the biquad filter processes a sound using 10 parameters:
//   b0, b1, b2, a1, a2      transformation coefficients
//   xn0, xn1, xn2           the unfiltered sample at position x[n], x[n-1], and x[n-2]
//   yn1, yn2                the filtered sample at position y[n-1] and y[n-2]
void sf_biquad_process(sf_biquad_state_st *state, int size, sf_sample_st *input,
	sf_sample_st *output){
 80031e4:	b480      	push	{r7}
 80031e6:	b097      	sub	sp, #92	; 0x5c
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]

	// pull out the state into local variables
	float b0 = state->b0;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	653b      	str	r3, [r7, #80]	; 0x50
	float b1 = state->b1;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	64fb      	str	r3, [r7, #76]	; 0x4c
	float b2 = state->b2;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	64bb      	str	r3, [r7, #72]	; 0x48
	float a1 = state->a1;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	647b      	str	r3, [r7, #68]	; 0x44
	float a2 = state->a2;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	643b      	str	r3, [r7, #64]	; 0x40
	sf_sample_st xn1 = state->xn1;
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003216:	3214      	adds	r2, #20
 8003218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800321c:	e883 0003 	stmia.w	r3, {r0, r1}
	sf_sample_st xn2 = state->xn2;
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003226:	321c      	adds	r2, #28
 8003228:	e892 0003 	ldmia.w	r2, {r0, r1}
 800322c:	e883 0003 	stmia.w	r3, {r0, r1}
	sf_sample_st yn1 = state->yn1;
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	f107 0320 	add.w	r3, r7, #32
 8003236:	3224      	adds	r2, #36	; 0x24
 8003238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800323c:	e883 0003 	stmia.w	r3, {r0, r1}
	sf_sample_st yn2 = state->yn2;
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	f107 0318 	add.w	r3, r7, #24
 8003246:	322c      	adds	r2, #44	; 0x2c
 8003248:	e892 0003 	ldmia.w	r2, {r0, r1}
 800324c:	e883 0003 	stmia.w	r3, {r0, r1}

	// loop for each sample
	for (int n = 0; n < size; n++){
 8003250:	2300      	movs	r3, #0
 8003252:	657b      	str	r3, [r7, #84]	; 0x54
 8003254:	e086      	b.n	8003364 <sf_biquad_process+0x180>
		// get the current sample
		sf_sample_st xn0 = input[n];
 8003256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	441a      	add	r2, r3
 800325e:	f107 0310 	add.w	r3, r7, #16
 8003262:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003266:	e883 0003 	stmia.w	r3, {r0, r1}

		// the formula is the same for each channel
		float L =
			b0 * xn0.L +
 800326a:	ed97 7a04 	vldr	s14, [r7, #16]
 800326e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003272:	ee27 7a27 	vmul.f32	s14, s14, s15
			b1 * xn1.L +
 8003276:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800327a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800327e:	ee66 7aa7 	vmul.f32	s15, s13, s15
		// get the current sample
		sf_sample_st xn0 = input[n];

		// the formula is the same for each channel
		float L =
			b0 * xn0.L +
 8003282:	ee37 7a27 	vadd.f32	s14, s14, s15
			b1 * xn1.L +
			b2 * xn2.L -
 8003286:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800328a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800328e:	ee66 7aa7 	vmul.f32	s15, s13, s15
		sf_sample_st xn0 = input[n];

		// the formula is the same for each channel
		float L =
			b0 * xn0.L +
			b1 * xn1.L +
 8003292:	ee37 7a27 	vadd.f32	s14, s14, s15
			b2 * xn2.L -
			a1 * yn1.L -
 8003296:	edd7 6a08 	vldr	s13, [r7, #32]
 800329a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800329e:	ee66 7aa7 	vmul.f32	s15, s13, s15

		// the formula is the same for each channel
		float L =
			b0 * xn0.L +
			b1 * xn1.L +
			b2 * xn2.L -
 80032a2:	ee37 7a67 	vsub.f32	s14, s14, s15
			a1 * yn1.L -
			a2 * yn2.L;
 80032a6:	edd7 6a06 	vldr	s13, [r7, #24]
 80032aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80032ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
	for (int n = 0; n < size; n++){
		// get the current sample
		sf_sample_st xn0 = input[n];

		// the formula is the same for each channel
		float L =
 80032b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			b1 * xn1.L +
			b2 * xn2.L -
			a1 * yn1.L -
			a2 * yn2.L;
		float R =
			b0 * xn0.R +
 80032ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80032be:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80032c2:	ee27 7a27 	vmul.f32	s14, s14, s15
			b1 * xn1.R +
 80032c6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80032ca:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80032ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
			b1 * xn1.L +
			b2 * xn2.L -
			a1 * yn1.L -
			a2 * yn2.L;
		float R =
			b0 * xn0.R +
 80032d2:	ee37 7a27 	vadd.f32	s14, s14, s15
			b1 * xn1.R +
			b2 * xn2.R -
 80032d6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80032da:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80032de:	ee66 7aa7 	vmul.f32	s15, s13, s15
			b2 * xn2.L -
			a1 * yn1.L -
			a2 * yn2.L;
		float R =
			b0 * xn0.R +
			b1 * xn1.R +
 80032e2:	ee37 7a27 	vadd.f32	s14, s14, s15
			b2 * xn2.R -
			a1 * yn1.R -
 80032e6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80032ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80032ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
			a1 * yn1.L -
			a2 * yn2.L;
		float R =
			b0 * xn0.R +
			b1 * xn1.R +
			b2 * xn2.R -
 80032f2:	ee37 7a67 	vsub.f32	s14, s14, s15
			a1 * yn1.R -
			a2 * yn2.R;
 80032f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80032fa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80032fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
			b0 * xn0.L +
			b1 * xn1.L +
			b2 * xn2.L -
			a1 * yn1.L -
			a2 * yn2.L;
		float R =
 8003302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003306:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			b2 * xn2.R -
			a1 * yn1.R -
			a2 * yn2.R;

		// save the result
		output[n] = (sf_sample_st){ L, R };
 800330a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	4413      	add	r3, r2
 8003312:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003318:	605a      	str	r2, [r3, #4]

		// slide everything down one sample
		xn2 = xn1;
 800331a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800331e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003322:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003326:	e883 0003 	stmia.w	r3, {r0, r1}
		xn1 = xn0;
 800332a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800332e:	f107 0210 	add.w	r2, r7, #16
 8003332:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003336:	e883 0003 	stmia.w	r3, {r0, r1}
		yn2 = yn1;
 800333a:	f107 0318 	add.w	r3, r7, #24
 800333e:	f107 0220 	add.w	r2, r7, #32
 8003342:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003346:	e883 0003 	stmia.w	r3, {r0, r1}
		yn1 = output[n];
 800334a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	441a      	add	r2, r3
 8003352:	f107 0320 	add.w	r3, r7, #32
 8003356:	e892 0003 	ldmia.w	r2, {r0, r1}
 800335a:	e883 0003 	stmia.w	r3, {r0, r1}
	sf_sample_st xn2 = state->xn2;
	sf_sample_st yn1 = state->yn1;
	sf_sample_st yn2 = state->yn2;

	// loop for each sample
	for (int n = 0; n < size; n++){
 800335e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003360:	3301      	adds	r3, #1
 8003362:	657b      	str	r3, [r7, #84]	; 0x54
 8003364:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	f6ff af74 	blt.w	8003256 <sf_biquad_process+0x72>
		yn2 = yn1;
		yn1 = output[n];
	}

	// save the state for future processing
	state->xn1 = xn1;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3314      	adds	r3, #20
 8003372:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800337a:	e883 0003 	stmia.w	r3, {r0, r1}
	state->xn2 = xn2;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	331c      	adds	r3, #28
 8003382:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800338a:	e883 0003 	stmia.w	r3, {r0, r1}
	state->yn1 = yn1;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3324      	adds	r3, #36	; 0x24
 8003392:	f107 0220 	add.w	r2, r7, #32
 8003396:	e892 0003 	ldmia.w	r2, {r0, r1}
 800339a:	e883 0003 	stmia.w	r3, {r0, r1}
	state->yn2 = yn2;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	332c      	adds	r3, #44	; 0x2c
 80033a2:	f107 0218 	add.w	r2, r7, #24
 80033a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033aa:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80033ae:	bf00      	nop
 80033b0:	375c      	adds	r7, #92	; 0x5c
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop

080033bc <state_reset>:
//
// formulas extracted and massaged from Chromium source, Biquad.cpp, here:
//   https://git.io/v10H2

// clear the samples saved across process boundaries
static inline void state_reset(sf_biquad_state_st *state){
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	state->xn1 = (sf_sample_st){ 0, 0 };
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	615a      	str	r2, [r3, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	619a      	str	r2, [r3, #24]
	state->xn2 = (sf_sample_st){ 0, 0 };
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	61da      	str	r2, [r3, #28]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	621a      	str	r2, [r3, #32]
	state->yn1 = (sf_sample_st){ 0, 0 };
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28
	state->yn2 = (sf_sample_st){ 0, 0 };
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <state_scale>:

// set the coefficients so that the output is the input scaled by `amt`
static inline void state_scale(sf_biquad_state_st *state, float amt){
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	ed87 0a00 	vstr	s0, [r7]
	state->b0 = amt;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	601a      	str	r2, [r3, #0]
	state->b1 = 0.0f;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	605a      	str	r2, [r3, #4]
	state->b2 = 0.0f;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
	state->a1 = 0.0f;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	60da      	str	r2, [r3, #12]
	state->a2 = 0.0f;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	611a      	str	r2, [r3, #16]
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop

08003450 <state_passthrough>:

// set the coefficients so that the output is an exact copy of the input
static inline void state_passthrough(sf_biquad_state_st *state){
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	state_scale(state, 1.0f);
 8003458:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ffd7 	bl	8003410 <state_scale>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop

0800346c <state_zero>:

// set the coefficients so that the output is zeroed out
static inline void state_zero(sf_biquad_state_st *state){
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	state_scale(state, 0.0f);
 8003474:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8003488 <state_zero+0x1c>
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ffc9 	bl	8003410 <state_scale>
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	00000000 	.word	0x00000000

0800348c <sf_lowpass>:

// initialize the biquad state to be a lowpass filter
void sf_lowpass(sf_biquad_state_st *state, int rate, float cutoff, float resonance){
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	ed87 0a01 	vstr	s0, [r7, #4]
 800349a:	edc7 0a00 	vstr	s1, [r7]
	state_reset(state);
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f7ff ff8c 	bl	80033bc <state_reset>
	float nyquist = rate * 0.5f;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	ee07 3a90 	vmov	s15, r3
 80034aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80034b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034b6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	cutoff /= nyquist;
 80034ba:	edd7 6a01 	vldr	s13, [r7, #4]
 80034be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80034c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c6:	edc7 7a01 	vstr	s15, [r7, #4]

	if (cutoff >= 1.0f)
 80034ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80034ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034da:	db03      	blt.n	80034e4 <sf_lowpass+0x58>
		state_passthrough(state);
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f7ff ffb7 	bl	8003450 <state_passthrough>
		state->b1 = a0inv * 2.0f * beta;
		state->b2 = a0inv * beta;
		state->a1 = a0inv * -2.0f * cosw;
		state->a2 = a0inv * (1.0f - alpha);
	}
}
 80034e2:	e083      	b.n	80035ec <sf_lowpass+0x160>
	float nyquist = rate * 0.5f;
	cutoff /= nyquist;

	if (cutoff >= 1.0f)
		state_passthrough(state);
	else if (cutoff <= 0.0f)
 80034e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80034e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f0:	d803      	bhi.n	80034fa <sf_lowpass+0x6e>
		state_zero(state);
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f7ff ffba 	bl	800346c <state_zero>
		state->b1 = a0inv * 2.0f * beta;
		state->b2 = a0inv * beta;
		state->a1 = a0inv * -2.0f * cosw;
		state->a2 = a0inv * (1.0f - alpha);
	}
}
 80034f8:	e078      	b.n	80035ec <sf_lowpass+0x160>
	if (cutoff >= 1.0f)
		state_passthrough(state);
	else if (cutoff <= 0.0f)
		state_zero(state);
	else{
		resonance = powf(10.0f, resonance * 0.05f); // convert resonance from dB to linear
 80034fa:	edd7 7a00 	vldr	s15, [r7]
 80034fe:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80035f4 <sf_lowpass+0x168>
 8003502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003506:	eef0 0a67 	vmov.f32	s1, s15
 800350a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800350e:	f003 fe7b 	bl	8007208 <powf>
 8003512:	ed87 0a00 	vstr	s0, [r7]
		float theta = (float)M_PI * 2.0f * cutoff;
 8003516:	edd7 7a01 	vldr	s15, [r7, #4]
 800351a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80035f8 <sf_lowpass+0x16c>
 800351e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003522:	edc7 7a08 	vstr	s15, [r7, #32]
		float alpha = sinf(theta) / (2.0f * resonance);
 8003526:	ed97 0a08 	vldr	s0, [r7, #32]
 800352a:	f003 fd51 	bl	8006fd0 <sinf>
 800352e:	eef0 6a40 	vmov.f32	s13, s0
 8003532:	edd7 7a00 	vldr	s15, [r7]
 8003536:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800353a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800353e:	edc7 7a07 	vstr	s15, [r7, #28]
		float cosw  = cosf(theta);
 8003542:	ed97 0a08 	vldr	s0, [r7, #32]
 8003546:	f003 fd03 	bl	8006f50 <cosf>
 800354a:	ed87 0a06 	vstr	s0, [r7, #24]
		float beta  = (1.0f - cosw) * 0.5f;
 800354e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003552:	edd7 7a06 	vldr	s15, [r7, #24]
 8003556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800355a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800355e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003562:	edc7 7a05 	vstr	s15, [r7, #20]
		float a0inv = 1.0f / (1.0f + alpha);
 8003566:	edd7 7a07 	vldr	s15, [r7, #28]
 800356a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800356e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800357a:	edc7 7a04 	vstr	s15, [r7, #16]
		state->b0 = a0inv * beta;
 800357e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003582:	edd7 7a05 	vldr	s15, [r7, #20]
 8003586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	edc3 7a00 	vstr	s15, [r3]
		state->b1 = a0inv * 2.0f * beta;
 8003590:	edd7 7a04 	vldr	s15, [r7, #16]
 8003594:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003598:	edd7 7a05 	vldr	s15, [r7, #20]
 800359c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	edc3 7a01 	vstr	s15, [r3, #4]
		state->b2 = a0inv * beta;
 80035a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80035aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80035ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	edc3 7a02 	vstr	s15, [r3, #8]
		state->a1 = a0inv * -2.0f * cosw;
 80035b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80035bc:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80035c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80035c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	edc3 7a03 	vstr	s15, [r3, #12]
		state->a2 = a0inv * (1.0f - alpha);
 80035d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80035da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035de:	edd7 7a04 	vldr	s15, [r7, #16]
 80035e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	edc3 7a04 	vstr	s15, [r3, #16]
	}
}
 80035ec:	bf00      	nop
 80035ee:	3728      	adds	r7, #40	; 0x28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	3d4ccccd 	.word	0x3d4ccccd
 80035f8:	40c90fdb 	.word	0x40c90fdb

080035fc <init_adc>:
 * Initializes the ADC to work in scan mode with 13 channels for pots
 * Uses DMA to transfer data and a timer to throttle the ADC conversion
 * The conversion cycle occurs every 75ms this function starts the timer.
 */
void init_adc(volatile uint16_t ADCBuffer[NUM_CHANNELS])
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b0a0      	sub	sp, #128	; 0x80
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	DMA_InitTypeDef DMA_Init_struct;
	GPIO_InitTypeDef GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef time_base_struct;

	/* Enable timer (timer runs at 13.3 Hz)*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8003604:	2101      	movs	r1, #1
 8003606:	2001      	movs	r0, #1
 8003608:	f7fe fc3a 	bl	8001e80 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&time_base_struct);
 800360c:	f107 0308 	add.w	r3, r7, #8
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe ff4d 	bl	80024b0 <TIM_TimeBaseStructInit>
	time_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 8003616:	2300      	movs	r3, #0
 8003618:	823b      	strh	r3, [r7, #16]
	time_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 800361a:	2300      	movs	r3, #0
 800361c:	817b      	strh	r3, [r7, #10]
	time_base_struct.TIM_Period = myTIM2_PERIOD;
 800361e:	f243 1338 	movw	r3, #12600	; 0x3138
 8003622:	60fb      	str	r3, [r7, #12]
	time_base_struct.TIM_Prescaler = myTIM2_PRESCALER;
 8003624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003628:	813b      	strh	r3, [r7, #8]
	TIM_TimeBaseInit(TIM2, &time_base_struct);
 800362a:	f107 0308 	add.w	r3, r7, #8
 800362e:	4619      	mov	r1, r3
 8003630:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003634:	f7fe fed0 	bl	80023d8 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM2,TIM_TRGOSource_Update);
 8003638:	2120      	movs	r1, #32
 800363a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800363e:	f7fe ffa7 	bl	8002590 <TIM_SelectOutputTrigger>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8003642:	2201      	movs	r2, #1
 8003644:	2101      	movs	r1, #1
 8003646:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800364a:	f7fe ff6b 	bl	8002524 <TIM_ITConfig>

	/* Enable clock on DMA1 & GPIO's */
	/* Enable DMA2, thats where ADC peripheral is used */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 800364e:	2101      	movs	r1, #1
 8003650:	2001      	movs	r0, #1
 8003652:	f7fe fbf5 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 8003656:	2101      	movs	r1, #1
 8003658:	2002      	movs	r0, #2
 800365a:	f7fe fbf1 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
 800365e:	2101      	movs	r1, #1
 8003660:	2004      	movs	r0, #4
 8003662:	f7fe fbed 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,ENABLE);
 8003666:	2101      	movs	r1, #1
 8003668:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800366c:	f7fe fbe8 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
	//GPIO_Pin_1	VFO-Frequency
	//GPIO_Pin_2	LFO-Amplitude
	//GPIO_Pin_3	LFO-Frequency
	//GPIO_Pin_5	ENVELOPE-Attack
	//GPIO_Pin_7	ENVELOPE-Sustain-time
	GPIO_StructInit(&GPIO_InitStructure);
 8003670:	f107 0314 	add.w	r3, r7, #20
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe f889 	bl	800178c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_5  | GPIO_Pin_7;
 800367a:	23af      	movs	r3, #175	; 0xaf
 800367c:	617b      	str	r3, [r7, #20]
	//GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_5  | GPIO_Pin_6  | GPIO_Pin_7; // MB: test - A6 doesn't seem to work
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 800367e:	2303      	movs	r3, #3
 8003680:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003682:	2302      	movs	r3, #2
 8003684:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800368a:	f107 0314 	add.w	r3, r7, #20
 800368e:	4619      	mov	r1, r3
 8003690:	4879      	ldr	r0, [pc, #484]	; (8003878 <init_adc+0x27c>)
 8003692:	f7fd ffed 	bl	8001670 <GPIO_Init>

	//B bank pins
	//GPIO_Pin_0	ENVELOPE-Release
	//GPIO_Pin_1	FILTER-FreqLow
	GPIO_StructInit(&GPIO_InitStructure);
 8003696:	f107 0314 	add.w	r3, r7, #20
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe f876 	bl	800178c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1;
 80036a0:	2303      	movs	r3, #3
 80036a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 80036a4:	2303      	movs	r3, #3
 80036a6:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80036a8:	2302      	movs	r3, #2
 80036aa:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	4619      	mov	r1, r3
 80036b6:	4871      	ldr	r0, [pc, #452]	; (800387c <init_adc+0x280>)
 80036b8:	f7fd ffda 	bl	8001670 <GPIO_Init>
	//C bank pins//GPIO_Pin_0
	//GPIO_Pin_0	ENVELOPE blsnk_len
	//GPIO_Pin_1	ENVELOPE-decay
	//GPIO_Pin_2	VC02 Amplitude
	//GPIO_Pin_4	ENVELOPE-sustain-amp
	GPIO_StructInit(&GPIO_InitStructure);
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe f863 	bl	800178c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_4;
 80036c6:	2317      	movs	r3, #23
 80036c8:	617b      	str	r3, [r7, #20]
	// GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4;		// MB turned off C2
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AIN;
 80036ca:	2303      	movs	r3, #3
 80036cc:	763b      	strb	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80036ce:	2302      	movs	r3, #2
 80036d0:	767b      	strb	r3, [r7, #25]
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80036d6:	f107 0314 	add.w	r3, r7, #20
 80036da:	4619      	mov	r1, r3
 80036dc:	4868      	ldr	r0, [pc, #416]	; (8003880 <init_adc+0x284>)
 80036de:	f7fd ffc7 	bl	8001670 <GPIO_Init>


	/*  Initialise DMA */
	DMA_StructInit(&DMA_Init_struct);							// reset struct
 80036e2:	f107 031c 	add.w	r3, r7, #28
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fe48 	bl	800137c <DMA_StructInit>

	/* config of DMA */
	DMA_Init_struct.DMA_Channel = DMA_Channel_0; 				/* See Tab 43 */
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
	DMA_Init_struct.DMA_BufferSize = NUM_CHANNELS;				/*  13adc channels */
 80036f0:	230d      	movs	r3, #13
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	DMA_Init_struct.DMA_DIR = DMA_DIR_PeripheralToMemory; 		/* ADC to mem */
 80036f4:	2300      	movs	r3, #0
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_Init_struct.DMA_FIFOMode = DMA_FIFOMode_Disable; 		/* no FIFO */
 80036f8:	2300      	movs	r3, #0
 80036fa:	64bb      	str	r3, [r7, #72]	; 0x48
	DMA_Init_struct.DMA_FIFOThreshold = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	DMA_Init_struct.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003700:	2300      	movs	r3, #0
 8003702:	653b      	str	r3, [r7, #80]	; 0x50
	DMA_Init_struct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8003704:	2300      	movs	r3, #0
 8003706:	657b      	str	r3, [r7, #84]	; 0x54
	DMA_Init_struct.DMA_Mode = DMA_Mode_Circular; 				/* circular buffer */
 8003708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800370c:	643b      	str	r3, [r7, #64]	; 0x40
	DMA_Init_struct.DMA_Priority = DMA_Priority_High; 			/* high priority */
 800370e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003712:	647b      	str	r3, [r7, #68]	; 0x44
	DMA_Init_struct.DMA_Memory0BaseAddr = (uint32_t)ADCBuffer; 	/* target addr */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_Init_struct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord; /* 16 bit */
 8003718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800371c:	63fb      	str	r3, [r7, #60]	; 0x3c
	DMA_Init_struct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;
 800371e:	4b59      	ldr	r3, [pc, #356]	; (8003884 <init_adc+0x288>)
 8003720:	623b      	str	r3, [r7, #32]
	DMA_Init_struct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8003722:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003726:	63bb      	str	r3, [r7, #56]	; 0x38
	DMA_Init_struct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8003728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800372c:	637b      	str	r3, [r7, #52]	; 0x34
	DMA_Init_struct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800372e:	2300      	movs	r3, #0
 8003730:	633b      	str	r3, [r7, #48]	; 0x30
	DMA_Init(DMA2_Stream0, &DMA_Init_struct); 					/* See Table 43 for mapping */
 8003732:	f107 031c 	add.w	r3, r7, #28
 8003736:	4619      	mov	r1, r3
 8003738:	4853      	ldr	r0, [pc, #332]	; (8003888 <init_adc+0x28c>)
 800373a:	f7fd fdc7 	bl	80012cc <DMA_Init>
	DMA_Cmd(DMA2_Stream0, ENABLE);
 800373e:	2101      	movs	r1, #1
 8003740:	4851      	ldr	r0, [pc, #324]	; (8003888 <init_adc+0x28c>)
 8003742:	f7fd fe53 	bl	80013ec <DMA_Cmd>

	/*Initialize ADC*/
	ADC_StructInit(&adc_init_struct);						//populates structs with reset defaults
 8003746:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd fae2 	bl	8000d14 <ADC_StructInit>
	ADC_CommonStructInit(&adc_com_init_struct);
 8003750:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd fb25 	bl	8000da4 <ADC_CommonStructInit>
	ADC_Cmd(ADC1, DISABLE);
 800375a:	2100      	movs	r1, #0
 800375c:	484b      	ldr	r0, [pc, #300]	; (800388c <init_adc+0x290>)
 800375e:	f7fd fb37 	bl	8000dd0 <ADC_Cmd>
	ADC_DeInit();
 8003762:	f7fd fa73 	bl	8000c4c <ADC_DeInit>

	/* init ADC clock */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8003766:	2101      	movs	r1, #1
 8003768:	f44f 7080 	mov.w	r0, #256	; 0x100
 800376c:	f7fe fba8 	bl	8001ec0 <RCC_APB2PeriphClockCmd>

	/*Initialize Common ADC */
	adc_com_init_struct.ADC_Mode = ADC_Mode_Independent;
 8003770:	2300      	movs	r3, #0
 8003772:	65bb      	str	r3, [r7, #88]	; 0x58
	adc_com_init_struct.ADC_Prescaler = ADC_Prescaler_Div2;
 8003774:	2300      	movs	r3, #0
 8003776:	65fb      	str	r3, [r7, #92]	; 0x5c
	adc_com_init_struct.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8003778:	2300      	movs	r3, #0
 800377a:	663b      	str	r3, [r7, #96]	; 0x60
	adc_com_init_struct.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_20Cycles;
 800377c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003780:	667b      	str	r3, [r7, #100]	; 0x64
	ADC_CommonInit(&adc_com_init_struct);
 8003782:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd fae4 	bl	8000d54 <ADC_CommonInit>

	/* Initialize ADC1 */
	adc_init_struct.ADC_Resolution = ADC_Resolution_12b;
 800378c:	2300      	movs	r3, #0
 800378e:	66bb      	str	r3, [r7, #104]	; 0x68
	adc_init_struct.ADC_ScanConvMode = ENABLE;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	adc_init_struct.ADC_ContinuousConvMode = DISABLE;
 8003796:	2300      	movs	r3, #0
 8003798:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	adc_init_struct.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
 800379c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80037a0:	673b      	str	r3, [r7, #112]	; 0x70
	adc_init_struct.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_TRGO;
 80037a2:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80037a6:	677b      	str	r3, [r7, #116]	; 0x74
	adc_init_struct.ADC_DataAlign = ADC_DataAlign_Right;
 80037a8:	2300      	movs	r3, #0
 80037aa:	67bb      	str	r3, [r7, #120]	; 0x78
	adc_init_struct.ADC_NbrOfConversion = NUM_CHANNELS;			// 5 channels in total MB: I think it's 12 now.
 80037ac:	230d      	movs	r3, #13
 80037ae:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	ADC_Init(ADC1, &adc_init_struct);
 80037b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037b6:	4619      	mov	r1, r3
 80037b8:	4834      	ldr	r0, [pc, #208]	; (800388c <init_adc+0x290>)
 80037ba:	f7fd fa55 	bl	8000c68 <ADC_Init>

	/* Configure channels */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_480Cycles);		//VCO-Amplitude
 80037be:	2307      	movs	r3, #7
 80037c0:	2201      	movs	r2, #1
 80037c2:	2100      	movs	r1, #0
 80037c4:	4831      	ldr	r0, [pc, #196]	; (800388c <init_adc+0x290>)
 80037c6:	f7fd fb1f 	bl	8000e08 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_480Cycles);		//VCO-Frequency
 80037ca:	2307      	movs	r3, #7
 80037cc:	2202      	movs	r2, #2
 80037ce:	2101      	movs	r1, #1
 80037d0:	482e      	ldr	r0, [pc, #184]	; (800388c <init_adc+0x290>)
 80037d2:	f7fd fb19 	bl	8000e08 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 3, ADC_SampleTime_480Cycles);		//LFO-Amplitude
 80037d6:	2307      	movs	r3, #7
 80037d8:	2203      	movs	r2, #3
 80037da:	2102      	movs	r1, #2
 80037dc:	482b      	ldr	r0, [pc, #172]	; (800388c <init_adc+0x290>)
 80037de:	f7fd fb13 	bl	8000e08 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_3, 4, ADC_SampleTime_480Cycles);		//LFO-Frequency
 80037e2:	2307      	movs	r3, #7
 80037e4:	2204      	movs	r2, #4
 80037e6:	2103      	movs	r1, #3
 80037e8:	4828      	ldr	r0, [pc, #160]	; (800388c <init_adc+0x290>)
 80037ea:	f7fd fb0d 	bl	8000e08 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_5, 5, ADC_SampleTime_480Cycles);		//ENVELOPE-Attack
 80037ee:	2307      	movs	r3, #7
 80037f0:	2205      	movs	r2, #5
 80037f2:	2105      	movs	r1, #5
 80037f4:	4825      	ldr	r0, [pc, #148]	; (800388c <init_adc+0x290>)
 80037f6:	f7fd fb07 	bl	8000e08 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_7, 6, ADC_SampleTime_480Cycles);		//ENVELOPE-Sustain-time
 80037fa:	2307      	movs	r3, #7
 80037fc:	2206      	movs	r2, #6
 80037fe:	2107      	movs	r1, #7
 8003800:	4822      	ldr	r0, [pc, #136]	; (800388c <init_adc+0x290>)
 8003802:	f7fd fb01 	bl	8000e08 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 7, ADC_SampleTime_480Cycles);		//ENVELOPE-Release
 8003806:	2307      	movs	r3, #7
 8003808:	2207      	movs	r2, #7
 800380a:	2108      	movs	r1, #8
 800380c:	481f      	ldr	r0, [pc, #124]	; (800388c <init_adc+0x290>)
 800380e:	f7fd fafb 	bl	8000e08 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 8, ADC_SampleTime_480Cycles);		//FILTER-FreqLow
 8003812:	2307      	movs	r3, #7
 8003814:	2208      	movs	r2, #8
 8003816:	2109      	movs	r1, #9
 8003818:	481c      	ldr	r0, [pc, #112]	; (800388c <init_adc+0x290>)
 800381a:	f7fd faf5 	bl	8000e08 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 9, ADC_SampleTime_480Cycles);	//ENVELOPE blsnk_len
 800381e:	2307      	movs	r3, #7
 8003820:	2209      	movs	r2, #9
 8003822:	210a      	movs	r1, #10
 8003824:	4819      	ldr	r0, [pc, #100]	; (800388c <init_adc+0x290>)
 8003826:	f7fd faef 	bl	8000e08 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 10, ADC_SampleTime_480Cycles);	//ENVELOPE-decay
 800382a:	2307      	movs	r3, #7
 800382c:	220a      	movs	r2, #10
 800382e:	210b      	movs	r1, #11
 8003830:	4816      	ldr	r0, [pc, #88]	; (800388c <init_adc+0x290>)
 8003832:	f7fd fae9 	bl	8000e08 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 11, ADC_SampleTime_480Cycles);	//VCO2-Amplitude (MB)
 8003836:	2307      	movs	r3, #7
 8003838:	220b      	movs	r2, #11
 800383a:	210c      	movs	r1, #12
 800383c:	4813      	ldr	r0, [pc, #76]	; (800388c <init_adc+0x290>)
 800383e:	f7fd fae3 	bl	8000e08 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 12, ADC_SampleTime_480Cycles);	//ENVELOPE-sustain-amp
 8003842:	2307      	movs	r3, #7
 8003844:	220c      	movs	r2, #12
 8003846:	210e      	movs	r1, #14
 8003848:	4810      	ldr	r0, [pc, #64]	; (800388c <init_adc+0x290>)
 800384a:	f7fd fadd 	bl	8000e08 <ADC_RegularChannelConfig>

	/* Enable ADC1 DMA */
	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);			//enables DMA request after all adc conversions
 800384e:	2101      	movs	r1, #1
 8003850:	480e      	ldr	r0, [pc, #56]	; (800388c <init_adc+0x290>)
 8003852:	f7fd fbbf 	bl	8000fd4 <ADC_DMARequestAfterLastTransferCmd>
	ADC_DMACmd(ADC1, ENABLE);
 8003856:	2101      	movs	r1, #1
 8003858:	480c      	ldr	r0, [pc, #48]	; (800388c <init_adc+0x290>)
 800385a:	f7fd fb9f 	bl	8000f9c <ADC_DMACmd>

	/* Enable ADC1 **************************************************************/
	ADC_Cmd(ADC1, ENABLE);
 800385e:	2101      	movs	r1, #1
 8003860:	480a      	ldr	r0, [pc, #40]	; (800388c <init_adc+0x290>)
 8003862:	f7fd fab5 	bl	8000dd0 <ADC_Cmd>

	TIM_Cmd(TIM2, ENABLE);		//This could be dine in the main however gonna leave it here
 8003866:	2101      	movs	r1, #1
 8003868:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800386c:	f7fe fe3a 	bl	80024e4 <TIM_Cmd>
}
 8003870:	bf00      	nop
 8003872:	3780      	adds	r7, #128	; 0x80
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40020000 	.word	0x40020000
 800387c:	40020400 	.word	0x40020400
 8003880:	40020800 	.word	0x40020800
 8003884:	4001204c 	.word	0x4001204c
 8003888:	40026410 	.word	0x40026410
 800388c:	40012000 	.word	0x40012000

08003890 <init_gpios>:
/*
 * Sets up the 5 position selectors and TIM4 to be used to debounce
 * if the interrupt priorities need to be changed make sure timer is higher than EXTI
 */

void init_gpios(){
 8003890:	b580      	push	{r7, lr}
 8003892:	b08a      	sub	sp, #40	; 0x28
 8003894:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef EXTI_init_struct;
	NVIC_InitTypeDef EXTI_NVIC_init_struct;
	NVIC_InitTypeDef TIM4_NVIC_init_struct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE); 			//This is already turned on in ADC Init function
 8003896:	2101      	movs	r1, #1
 8003898:	2004      	movs	r0, #4
 800389a:	f7fe fad1 	bl	8001e40 <RCC_AHB1PeriphClockCmd>

	/*
	 * C bank pins
	 * PC6		lfo_other2
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 800389e:	f107 0320 	add.w	r3, r7, #32
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd ff72 	bl	800178c <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_6;
 80038a8:	2340      	movs	r3, #64	; 0x40
 80038aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 80038ac:	2300      	movs	r3, #0
 80038ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;				//slow
 80038b2:	2300      	movs	r3, #0
 80038b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//no pull
 80038b8:	2300      	movs	r3, #0
 80038ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80038be:	f107 0320 	add.w	r3, r7, #32
 80038c2:	4619      	mov	r1, r3
 80038c4:	4829      	ldr	r0, [pc, #164]	; (800396c <init_gpios+0xdc>)
 80038c6:	f7fd fed3 	bl	8001670 <GPIO_Init>


	/*Configure Tim4 for debouncing	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 80038ca:	2101      	movs	r1, #1
 80038cc:	2004      	movs	r0, #4
 80038ce:	f7fe fad7 	bl	8001e80 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&tim4_base_struct);
 80038d2:	f107 0314 	add.w	r3, r7, #20
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fdea 	bl	80024b0 <TIM_TimeBaseStructInit>
	tim4_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 80038dc:	2300      	movs	r3, #0
 80038de:	83bb      	strh	r3, [r7, #28]
	tim4_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 80038e0:	2300      	movs	r3, #0
 80038e2:	82fb      	strh	r3, [r7, #22]
	tim4_base_struct.TIM_Period = MYTIM4_PERIOD;
 80038e4:	f643 136c 	movw	r3, #14700	; 0x396c
 80038e8:	61bb      	str	r3, [r7, #24]
	tim4_base_struct.TIM_Prescaler = myTIM4_PRESCALER;
 80038ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80038ee:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM4, &tim4_base_struct);
 80038f0:	f107 0314 	add.w	r3, r7, #20
 80038f4:	4619      	mov	r1, r3
 80038f6:	481e      	ldr	r0, [pc, #120]	; (8003970 <init_gpios+0xe0>)
 80038f8:	f7fe fd6e 	bl	80023d8 <TIM_TimeBaseInit>

	TIM4_NVIC_init_struct.NVIC_IRQChannel = TIM4_IRQn;
 80038fc:	231e      	movs	r3, #30
 80038fe:	713b      	strb	r3, [r7, #4]
	TIM4_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003900:	2301      	movs	r3, #1
 8003902:	71fb      	strb	r3, [r7, #7]
	TIM4_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x00;
 8003904:	2300      	movs	r3, #0
 8003906:	717b      	strb	r3, [r7, #5]
	TIM4_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x00;
 8003908:	2300      	movs	r3, #0
 800390a:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&TIM4_NVIC_init_struct);
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	4618      	mov	r0, r3
 8003910:	f7fd f93a 	bl	8000b88 <NVIC_Init>

	TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8003914:	2201      	movs	r2, #1
 8003916:	2101      	movs	r1, #1
 8003918:	4815      	ldr	r0, [pc, #84]	; (8003970 <init_gpios+0xe0>)
 800391a:	f7fe fe03 	bl	8002524 <TIM_ITConfig>


	/*Configure pins as EXTI*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 800391e:	2101      	movs	r1, #1
 8003920:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003924:	f7fe facc 	bl	8001ec0 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource6);
 8003928:	2106      	movs	r1, #6
 800392a:	2002      	movs	r0, #2
 800392c:	f7fe fd12 	bl	8002354 <SYSCFG_EXTILineConfig>
//	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource15);


	//init EXTI
	// MB EXTI_init_struct.EXTI_Line = EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9 | EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15;
	EXTI_init_struct.EXTI_Line = EXTI_Line6;
 8003930:	2340      	movs	r3, #64	; 0x40
 8003932:	60fb      	str	r3, [r7, #12]
	EXTI_init_struct.EXTI_LineCmd = ENABLE;
 8003934:	2301      	movs	r3, #1
 8003936:	74bb      	strb	r3, [r7, #18]
	EXTI_init_struct.EXTI_Mode =  EXTI_Mode_Interrupt;
 8003938:	2300      	movs	r3, #0
 800393a:	743b      	strb	r3, [r7, #16]
	EXTI_init_struct.EXTI_Trigger = EXTI_Trigger_Rising;
 800393c:	2308      	movs	r3, #8
 800393e:	747b      	strb	r3, [r7, #17]
	EXTI_Init(&EXTI_init_struct);
 8003940:	f107 030c 	add.w	r3, r7, #12
 8003944:	4618      	mov	r0, r3
 8003946:	f7fd fe11 	bl	800156c <EXTI_Init>

	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI9_5_IRQn;
 800394a:	2317      	movs	r3, #23
 800394c:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800394e:	230f      	movs	r3, #15
 8003950:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8003952:	230f      	movs	r3, #15
 8003954:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003956:	2301      	movs	r3, #1
 8003958:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 800395a:	f107 0308 	add.w	r3, r7, #8
 800395e:	4618      	mov	r0, r3
 8003960:	f7fd f912 	bl	8000b88 <NVIC_Init>
//	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI15_10_IRQn;
//	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
//	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
//	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
//	NVIC_Init(&EXTI_NVIC_init_struct);
}
 8003964:	bf00      	nop
 8003966:	3728      	adds	r7, #40	; 0x28
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40020800 	.word	0x40020800
 8003970:	40000800 	.word	0x40000800

08003974 <init_push_buttons>:

/*
 * Initialzes the pushbutton and pushbutton interrupts and limiting timer,
 * if the interrupt priorities need to be changed make sure timer is higher than EXTI
 */
void  init_push_buttons(){
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef tim3_base_struct;
	EXTI_InitTypeDef EXTI_init_struct;
	NVIC_InitTypeDef EXTI_NVIC_init_struct, TIM3_NVIC_init_struct;


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE,ENABLE); 			//This is already turned on in init gpio's but turn on incase
 800397a:	2101      	movs	r1, #1
 800397c:	2010      	movs	r0, #16
 800397e:	f7fe fa5f 	bl	8001e40 <RCC_AHB1PeriphClockCmd>
	 * PE0		Menu up
	 * PE1		Menu down
	 * PE2		Menu back
	 * PE3		Menu enter
	 */
	GPIO_StructInit(&GPIO_InitStructure);							//default values
 8003982:	f107 0320 	add.w	r3, r7, #32
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd ff00 	bl	800178c <GPIO_StructInit>
	// GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4;		// MB - to turn filter on
 800398c:	231f      	movs	r3, #31
 800398e:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;					//input
 8003990:	2300      	movs	r3, #0
 8003992:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;				//medium
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;				//pull down
 800399c:	2300      	movs	r3, #0
 800399e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 80039a2:	f107 0320 	add.w	r3, r7, #32
 80039a6:	4619      	mov	r1, r3
 80039a8:	4843      	ldr	r0, [pc, #268]	; (8003ab8 <init_push_buttons+0x144>)
 80039aa:	f7fd fe61 	bl	8001670 <GPIO_Init>


	/*Configure Tim3 for debouncing	 */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 80039ae:	2101      	movs	r1, #1
 80039b0:	2002      	movs	r0, #2
 80039b2:	f7fe fa65 	bl	8001e80 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructInit(&tim3_base_struct);
 80039b6:	f107 0314 	add.w	r3, r7, #20
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe fd78 	bl	80024b0 <TIM_TimeBaseStructInit>
	tim3_base_struct.TIM_ClockDivision = TIM_CKD_DIV1;
 80039c0:	2300      	movs	r3, #0
 80039c2:	83bb      	strh	r3, [r7, #28]
	tim3_base_struct.TIM_CounterMode = TIM_CounterMode_Up;
 80039c4:	2300      	movs	r3, #0
 80039c6:	82fb      	strh	r3, [r7, #22]
	tim3_base_struct.TIM_Period = MYTIM3_PERIOD;
 80039c8:	f643 136c 	movw	r3, #14700	; 0x396c
 80039cc:	61bb      	str	r3, [r7, #24]
	tim3_base_struct.TIM_Prescaler = myTIM3_PRESCALER;
 80039ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80039d2:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInit(TIM3, &tim3_base_struct);
 80039d4:	f107 0314 	add.w	r3, r7, #20
 80039d8:	4619      	mov	r1, r3
 80039da:	4838      	ldr	r0, [pc, #224]	; (8003abc <init_push_buttons+0x148>)
 80039dc:	f7fe fcfc 	bl	80023d8 <TIM_TimeBaseInit>

	TIM3_NVIC_init_struct.NVIC_IRQChannel = TIM3_IRQn;
 80039e0:	231d      	movs	r3, #29
 80039e2:	713b      	strb	r3, [r7, #4]
	TIM3_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	71fb      	strb	r3, [r7, #7]
	TIM3_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x00;
 80039e8:	2300      	movs	r3, #0
 80039ea:	717b      	strb	r3, [r7, #5]
	TIM3_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x00;
 80039ec:	2300      	movs	r3, #0
 80039ee:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&TIM3_NVIC_init_struct);
 80039f0:	1d3b      	adds	r3, r7, #4
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd f8c8 	bl	8000b88 <NVIC_Init>

	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 80039f8:	2201      	movs	r2, #1
 80039fa:	2101      	movs	r1, #1
 80039fc:	482f      	ldr	r0, [pc, #188]	; (8003abc <init_push_buttons+0x148>)
 80039fe:	f7fe fd91 	bl	8002524 <TIM_ITConfig>


	/*Configure pins as EXTI*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 8003a02:	2101      	movs	r1, #1
 8003a04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003a08:	f7fe fa5a 	bl	8001ec0 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource0);
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	2004      	movs	r0, #4
 8003a10:	f7fe fca0 	bl	8002354 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource1);
 8003a14:	2101      	movs	r1, #1
 8003a16:	2004      	movs	r0, #4
 8003a18:	f7fe fc9c 	bl	8002354 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource2);
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	2004      	movs	r0, #4
 8003a20:	f7fe fc98 	bl	8002354 <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOE, EXTI_PinSource3);
 8003a24:	2103      	movs	r1, #3
 8003a26:	2004      	movs	r0, #4
 8003a28:	f7fe fc94 	bl	8002354 <SYSCFG_EXTILineConfig>



	//init EXTI
	EXTI_init_struct.EXTI_Line = EXTI_Line0 | EXTI_Line1 | EXTI_Line2 | EXTI_Line3;
 8003a2c:	230f      	movs	r3, #15
 8003a2e:	60fb      	str	r3, [r7, #12]
	EXTI_init_struct.EXTI_LineCmd = ENABLE;
 8003a30:	2301      	movs	r3, #1
 8003a32:	74bb      	strb	r3, [r7, #18]
	EXTI_init_struct.EXTI_Mode =  EXTI_Mode_Interrupt;
 8003a34:	2300      	movs	r3, #0
 8003a36:	743b      	strb	r3, [r7, #16]
	EXTI_init_struct.EXTI_Trigger = EXTI_Trigger_Rising;
 8003a38:	2308      	movs	r3, #8
 8003a3a:	747b      	strb	r3, [r7, #17]
	EXTI_Init(&EXTI_init_struct);
 8003a3c:	f107 030c 	add.w	r3, r7, #12
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fd fd93 	bl	800156c <EXTI_Init>

	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI0_IRQn;
 8003a46:	2306      	movs	r3, #6
 8003a48:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003a4a:	230f      	movs	r3, #15
 8003a4c:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8003a4e:	230f      	movs	r3, #15
 8003a50:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003a52:	2301      	movs	r3, #1
 8003a54:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fd f894 	bl	8000b88 <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI1_IRQn;;
 8003a60:	2307      	movs	r3, #7
 8003a62:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003a64:	230f      	movs	r3, #15
 8003a66:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8003a68:	230f      	movs	r3, #15
 8003a6a:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8003a70:	f107 0308 	add.w	r3, r7, #8
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fd f887 	bl	8000b88 <NVIC_Init>
	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI2_IRQn;
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003a7e:	230f      	movs	r3, #15
 8003a80:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8003a82:	230f      	movs	r3, #15
 8003a84:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003a86:	2301      	movs	r3, #1
 8003a88:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8003a8a:	f107 0308 	add.w	r3, r7, #8
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fd f87a 	bl	8000b88 <NVIC_Init>


	EXTI_NVIC_init_struct.NVIC_IRQChannel = EXTI3_IRQn;;
 8003a94:	2309      	movs	r3, #9
 8003a96:	723b      	strb	r3, [r7, #8]
	EXTI_NVIC_init_struct.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003a98:	230f      	movs	r3, #15
 8003a9a:	727b      	strb	r3, [r7, #9]
	EXTI_NVIC_init_struct.NVIC_IRQChannelSubPriority = 0x0F;
 8003a9c:	230f      	movs	r3, #15
 8003a9e:	72bb      	strb	r3, [r7, #10]
	EXTI_NVIC_init_struct.NVIC_IRQChannelCmd = ENABLE;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&EXTI_NVIC_init_struct);
 8003aa4:	f107 0308 	add.w	r3, r7, #8
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fd f86d 	bl	8000b88 <NVIC_Init>
}
 8003aae:	bf00      	nop
 8003ab0:	3728      	adds	r7, #40	; 0x28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40000400 	.word	0x40000400

08003ac0 <main>:

/* Globals */
extern uint16_t buffer_output[LENGTH_BUFFER];

int main(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
	*/

	/**************************** Run Initialization functions timer for tim2 started in init_adc*****************************/

	// menubutton.button=back;					//initializes menubutton state for startup
	init_gpios();								//initialize gpios
 8003ac4:	f7ff fee4 	bl	8003890 <init_gpios>
	init_push_buttons();						//initialize menu navigation buttons
 8003ac8:	f7ff ff54 	bl	8003974 <init_push_buttons>
	init_adc(ADCBuffer);						//initialize ADC, do this last because it starts the timer
 8003acc:	4808      	ldr	r0, [pc, #32]	; (8003af0 <main+0x30>)
 8003ace:	f7ff fd95 	bl	80035fc <init_adc>
	//init_spi();								//initialize the SPI for LCD not using SPI any more don't need this
	// init_parallel();							//initializes all the GPIO's for parallel LCD communication
	// lcd_init();								//initializes LCD screen
	// update_selector_state();					// get startup state
	init_state();								//initialize the global state variable for the menu, filterstate, secondary VCO and modlulation
 8003ad2:	f002 fdeb 	bl	80066ac <init_state>
	// display_new_menu();

	EVAL_AUDIO_Init( OUTPUT_DEVICE_AUTO, VOL, SAMPLERATE);
 8003ad6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003ada:	2150      	movs	r1, #80	; 0x50
 8003adc:	2004      	movs	r0, #4
 8003ade:	f7fe fd8b 	bl	80025f8 <EVAL_AUDIO_Init>
	EVAL_AUDIO_Play(buffer_output, LENGTH_BUFFER);
 8003ae2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ae6:	4803      	ldr	r0, [pc, #12]	; (8003af4 <main+0x34>)
 8003ae8:	f7fe fdb2 	bl	8002650 <EVAL_AUDIO_Play>

	while (1)
	{

	}
 8003aec:	e7fe      	b.n	8003aec <main+0x2c>
 8003aee:	bf00      	nop
 8003af0:	20004a34 	.word	0x20004a34
 8003af4:	200005c8 	.word	0x200005c8

08003af8 <Codec_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None
  * @retval None
  */
uint32_t Codec_TIMEOUT_UserCallback(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	// TODO: See instructions in function declaration.  I've seen this LED turn on, which may signal an issue.
	STM_EVAL_LEDOn(LED5); 				/*  alert : red LED !  */
 8003afc:	2002      	movs	r0, #2
 8003afe:	f7fe fd63 	bl	80025c8 <STM_EVAL_LEDOn>
	return (0);
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <EVAL_AUDIO_HalfTransfer_CallBack>:
* @brief  Manages the DMA Half Transfer complete interrupt.
* @param  None
* @retval None
*/
void EVAL_AUDIO_HalfTransfer_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
	the new data to the first half of buffer while DMA is transferring data from
	the second half. And when Transfer complete occurs, load the second half of
	the buffer while the DMA is transferring from the first half ...
	 */

	generate_waveforms(0, BUFF_LEN_HALF);
 8003b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b16:	2000      	movs	r0, #0
 8003b18:	f000 f82a 	bl	8003b70 <generate_waveforms>
	return;
 8003b1c:	bf00      	nop
}
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
	generate_waveforms(BUFF_LEN_HALF, LENGTH_BUFFER);
 8003b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b36:	f000 f81b 	bl	8003b70 <generate_waveforms>
	return;
 8003b3a:	bf00      	nop
}
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop

08003b44 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0

  // return -1;
	return 0;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <EVAL_AUDIO_Error_CallBack>:

void EVAL_AUDIO_Error_CallBack(void* pData)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	STM_EVAL_LEDOn(LED3);
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f7fe fd33 	bl	80025c8 <STM_EVAL_LEDOn>
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	0000      	movs	r0, r0
	...

08003b70 <generate_waveforms>:
volatile uint16_t testflag = 0;

volatile adsr_setting adsr_settings;

void generate_waveforms(uint16_t start, uint16_t end)
{
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	ed2d 8b02 	vpush	{d8}
 8003b76:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	4602      	mov	r2, r0
 8003b80:	f107 0310 	add.w	r3, r7, #16
 8003b84:	3b0a      	subs	r3, #10
 8003b86:	801a      	strh	r2, [r3, #0]
 8003b88:	f107 0310 	add.w	r3, r7, #16
 8003b8c:	3b0c      	subs	r3, #12
 8003b8e:	460a      	mov	r2, r1
 8003b90:	801a      	strh	r2, [r3, #0]
	osc.vco_wav = vco_wave;				// VCO wave type.
 8003b92:	4ba9      	ldr	r3, [pc, #676]	; (8003e38 <generate_waveforms+0x2c8>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	4ba8      	ldr	r3, [pc, #672]	; (8003e3c <generate_waveforms+0x2cc>)
 8003b9a:	821a      	strh	r2, [r3, #16]
	osc.lfo_wav = lfo_wave;				// LFO wave type.
 8003b9c:	4ba8      	ldr	r3, [pc, #672]	; (8003e40 <generate_waveforms+0x2d0>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	4ba6      	ldr	r3, [pc, #664]	; (8003e3c <generate_waveforms+0x2cc>)
 8003ba4:	825a      	strh	r2, [r3, #18]

	osc.am_mod = OFF; // TODO: *** get value of pushbutton ***
 8003ba6:	4ba5      	ldr	r3, [pc, #660]	; (8003e3c <generate_waveforms+0x2cc>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	829a      	strh	r2, [r3, #20]
	osc.fm_mod = OFF; // TODO: *** get value of pushbutton ***
 8003bac:	4ba3      	ldr	r3, [pc, #652]	; (8003e3c <generate_waveforms+0x2cc>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	82da      	strh	r2, [r3, #22]

	osc.am_mod = lfo_mod.am_mod;
 8003bb2:	4ba4      	ldr	r3, [pc, #656]	; (8003e44 <generate_waveforms+0x2d4>)
 8003bb4:	881a      	ldrh	r2, [r3, #0]
 8003bb6:	4ba1      	ldr	r3, [pc, #644]	; (8003e3c <generate_waveforms+0x2cc>)
 8003bb8:	829a      	strh	r2, [r3, #20]
	osc.fm_mod = lfo_mod.fm_mod;
 8003bba:	4ba2      	ldr	r3, [pc, #648]	; (8003e44 <generate_waveforms+0x2d4>)
 8003bbc:	885a      	ldrh	r2, [r3, #2]
 8003bbe:	4b9f      	ldr	r3, [pc, #636]	; (8003e3c <generate_waveforms+0x2cc>)
 8003bc0:	82da      	strh	r2, [r3, #22]
	// osc.mod = VCOfreq;			// TODO: comment-out when adding lcd and buttons
	// osc.mod = NO_MOD;
	// osc.mod = DualMode_VCO;

	// A0
	osc.vco_amp = moving_avg(mov_avg5, &mov_avg_sum5, mov_avg_index5, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[1] & 0xfffc));
 8003bc2:	4ba1      	ldr	r3, [pc, #644]	; (8003e48 <generate_waveforms+0x2d8>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4ba1      	ldr	r3, [pc, #644]	; (8003e4c <generate_waveforms+0x2dc>)
 8003bc8:	885b      	ldrh	r3, [r3, #2]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	f023 0303 	bic.w	r3, r3, #3
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2320      	movs	r3, #32
 8003bd6:	499e      	ldr	r1, [pc, #632]	; (8003e50 <generate_waveforms+0x2e0>)
 8003bd8:	489e      	ldr	r0, [pc, #632]	; (8003e54 <generate_waveforms+0x2e4>)
 8003bda:	f002 f9b9 	bl	8005f50 <moving_avg>
 8003bde:	ee07 0a90 	vmov	s15, r0
 8003be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be6:	4b95      	ldr	r3, [pc, #596]	; (8003e3c <generate_waveforms+0x2cc>)
 8003be8:	edc3 7a06 	vstr	s15, [r3, #24]
	mov_avg_index5++;
 8003bec:	4b96      	ldr	r3, [pc, #600]	; (8003e48 <generate_waveforms+0x2d8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	4a95      	ldr	r2, [pc, #596]	; (8003e48 <generate_waveforms+0x2d8>)
 8003bf4:	6013      	str	r3, [r2, #0]
	if (mov_avg_index5 >= MOV_AVG_LENGTH_BUFFER)
 8003bf6:	4b94      	ldr	r3, [pc, #592]	; (8003e48 <generate_waveforms+0x2d8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b1f      	cmp	r3, #31
 8003bfc:	d902      	bls.n	8003c04 <generate_waveforms+0x94>
	{
		mov_avg_index5 = 0;
 8003bfe:	4b92      	ldr	r3, [pc, #584]	; (8003e48 <generate_waveforms+0x2d8>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

//	osc.volume = (float32_t) osc.volume / 2048;
//	osc.vco_amp = osc.vco_amp * osc.volume;

	// A1
	uint16_t tempf = pseudo_log(ADCBuffer[0] & 0xfffc);
 8003c04:	4b91      	ldr	r3, [pc, #580]	; (8003e4c <generate_waveforms+0x2dc>)
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	4618      	mov	r0, r3
 8003c12:	f002 f9c1 	bl	8005f98 <pseudo_log>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003c1c:	f102 020e 	add.w	r2, r2, #14
 8003c20:	8013      	strh	r3, [r2, #0]
	// osc.vco_freq = moving_avg(mov_avg1, &mov_avg_sum1, mov_avg_index1, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[0] & 0xfffc)*2*PI);
	osc.vco_freq = moving_avg(mov_avg1, &mov_avg_sum1, mov_avg_index1, MOV_AVG_LENGTH_BUFFER, tempf * 2*PI);
 8003c22:	4b8d      	ldr	r3, [pc, #564]	; (8003e58 <generate_waveforms+0x2e8>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003c2a:	f103 030e 	add.w	r3, r3, #14
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c3a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8003e5c <generate_waveforms+0x2ec>
 8003c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c46:	edc7 7a00 	vstr	s15, [r7]
 8003c4a:	883b      	ldrh	r3, [r7, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2320      	movs	r3, #32
 8003c52:	4983      	ldr	r1, [pc, #524]	; (8003e60 <generate_waveforms+0x2f0>)
 8003c54:	4883      	ldr	r0, [pc, #524]	; (8003e64 <generate_waveforms+0x2f4>)
 8003c56:	f002 f97b 	bl	8005f50 <moving_avg>
 8003c5a:	ee07 0a90 	vmov	s15, r0
 8003c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c62:	4b76      	ldr	r3, [pc, #472]	; (8003e3c <generate_waveforms+0x2cc>)
 8003c64:	edc3 7a01 	vstr	s15, [r3, #4]
	mov_avg_index1++;
 8003c68:	4b7b      	ldr	r3, [pc, #492]	; (8003e58 <generate_waveforms+0x2e8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	4a7a      	ldr	r2, [pc, #488]	; (8003e58 <generate_waveforms+0x2e8>)
 8003c70:	6013      	str	r3, [r2, #0]
	if (mov_avg_index1 >= MOV_AVG_LENGTH_BUFFER)
 8003c72:	4b79      	ldr	r3, [pc, #484]	; (8003e58 <generate_waveforms+0x2e8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b1f      	cmp	r3, #31
 8003c78:	d902      	bls.n	8003c80 <generate_waveforms+0x110>
	{
		mov_avg_index1 = 0;
 8003c7a:	4b77      	ldr	r3, [pc, #476]	; (8003e58 <generate_waveforms+0x2e8>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
	}

	// C2
	osc.vco2_amp = moving_avg(mov_avg6, &mov_avg_sum6, mov_avg_index6, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[10] & 0xfffc));
 8003c80:	4b79      	ldr	r3, [pc, #484]	; (8003e68 <generate_waveforms+0x2f8>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b71      	ldr	r3, [pc, #452]	; (8003e4c <generate_waveforms+0x2dc>)
 8003c86:	8a9b      	ldrh	r3, [r3, #20]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f023 0303 	bic.w	r3, r3, #3
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	2320      	movs	r3, #32
 8003c94:	4975      	ldr	r1, [pc, #468]	; (8003e6c <generate_waveforms+0x2fc>)
 8003c96:	4876      	ldr	r0, [pc, #472]	; (8003e70 <generate_waveforms+0x300>)
 8003c98:	f002 f95a 	bl	8005f50 <moving_avg>
 8003c9c:	ee07 0a90 	vmov	s15, r0
 8003ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca4:	4b65      	ldr	r3, [pc, #404]	; (8003e3c <generate_waveforms+0x2cc>)
 8003ca6:	edc3 7a07 	vstr	s15, [r3, #28]
	mov_avg_index6++;
 8003caa:	4b6f      	ldr	r3, [pc, #444]	; (8003e68 <generate_waveforms+0x2f8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	4a6d      	ldr	r2, [pc, #436]	; (8003e68 <generate_waveforms+0x2f8>)
 8003cb2:	6013      	str	r3, [r2, #0]
	if (mov_avg_index6 >= MOV_AVG_LENGTH_BUFFER)
 8003cb4:	4b6c      	ldr	r3, [pc, #432]	; (8003e68 <generate_waveforms+0x2f8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b1f      	cmp	r3, #31
 8003cba:	d902      	bls.n	8003cc2 <generate_waveforms+0x152>
	{
		mov_avg_index6 = 0;
 8003cbc:	4b6a      	ldr	r3, [pc, #424]	; (8003e68 <generate_waveforms+0x2f8>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
	}

	// B1
	osc.vco2_freqoffset = moving_avg(mov_avg7, &mov_avg_sum7, mov_avg_index7, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[7] & 0xfffc));
 8003cc2:	4b6c      	ldr	r3, [pc, #432]	; (8003e74 <generate_waveforms+0x304>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <generate_waveforms+0x2dc>)
 8003cc8:	89db      	ldrh	r3, [r3, #14]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	f023 0303 	bic.w	r3, r3, #3
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	2320      	movs	r3, #32
 8003cd6:	4968      	ldr	r1, [pc, #416]	; (8003e78 <generate_waveforms+0x308>)
 8003cd8:	4868      	ldr	r0, [pc, #416]	; (8003e7c <generate_waveforms+0x30c>)
 8003cda:	f002 f939 	bl	8005f50 <moving_avg>
 8003cde:	ee07 0a90 	vmov	s15, r0
 8003ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce6:	4b55      	ldr	r3, [pc, #340]	; (8003e3c <generate_waveforms+0x2cc>)
 8003ce8:	edc3 7a02 	vstr	s15, [r3, #8]
	mov_avg_index7++;
 8003cec:	4b61      	ldr	r3, [pc, #388]	; (8003e74 <generate_waveforms+0x304>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	4a60      	ldr	r2, [pc, #384]	; (8003e74 <generate_waveforms+0x304>)
 8003cf4:	6013      	str	r3, [r2, #0]
	if (mov_avg_index7 >= MOV_AVG_LENGTH_BUFFER)
 8003cf6:	4b5f      	ldr	r3, [pc, #380]	; (8003e74 <generate_waveforms+0x304>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b1f      	cmp	r3, #31
 8003cfc:	d902      	bls.n	8003d04 <generate_waveforms+0x194>
	{
		mov_avg_index7 = 0;
 8003cfe:	4b5d      	ldr	r3, [pc, #372]	; (8003e74 <generate_waveforms+0x304>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
	}


	// A2
	osc.lfo_amp = moving_avg(mov_avg3, &mov_avg_sum3, mov_avg_index3, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[2] & 0xfffc));
 8003d04:	4b5e      	ldr	r3, [pc, #376]	; (8003e80 <generate_waveforms+0x310>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <generate_waveforms+0x2dc>)
 8003d0a:	889b      	ldrh	r3, [r3, #4]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	f023 0303 	bic.w	r3, r3, #3
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2320      	movs	r3, #32
 8003d18:	495a      	ldr	r1, [pc, #360]	; (8003e84 <generate_waveforms+0x314>)
 8003d1a:	485b      	ldr	r0, [pc, #364]	; (8003e88 <generate_waveforms+0x318>)
 8003d1c:	f002 f918 	bl	8005f50 <moving_avg>
 8003d20:	ee07 0a90 	vmov	s15, r0
 8003d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d28:	4b44      	ldr	r3, [pc, #272]	; (8003e3c <generate_waveforms+0x2cc>)
 8003d2a:	edc3 7a08 	vstr	s15, [r3, #32]
	mov_avg_index3++;
 8003d2e:	4b54      	ldr	r3, [pc, #336]	; (8003e80 <generate_waveforms+0x310>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3301      	adds	r3, #1
 8003d34:	4a52      	ldr	r2, [pc, #328]	; (8003e80 <generate_waveforms+0x310>)
 8003d36:	6013      	str	r3, [r2, #0]
	if (mov_avg_index3 >= MOV_AVG_LENGTH_BUFFER)
 8003d38:	4b51      	ldr	r3, [pc, #324]	; (8003e80 <generate_waveforms+0x310>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b1f      	cmp	r3, #31
 8003d3e:	d902      	bls.n	8003d46 <generate_waveforms+0x1d6>
	{
		mov_avg_index3 = 0;
 8003d40:	4b4f      	ldr	r3, [pc, #316]	; (8003e80 <generate_waveforms+0x310>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
	}
	osc.lfo_amp_am = osc.lfo_amp*LFO_AMP_AM;
 8003d46:	4b3d      	ldr	r3, [pc, #244]	; (8003e3c <generate_waveforms+0x2cc>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fc fba0 	bl	8000490 <__aeabi_f2d>
 8003d50:	a335      	add	r3, pc, #212	; (adr r3, 8003e28 <generate_waveforms+0x2b8>)
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	f7fc fbef 	bl	8000538 <__aeabi_dmul>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	4621      	mov	r1, r4
 8003d62:	f7fc fec1 	bl	8000ae8 <__aeabi_d2f>
 8003d66:	4602      	mov	r2, r0
 8003d68:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <generate_waveforms+0x2cc>)
 8003d6a:	625a      	str	r2, [r3, #36]	; 0x24
	osc.lfo_amp_fm = osc.lfo_amp*LFO_AMP_FM;
 8003d6c:	4b33      	ldr	r3, [pc, #204]	; (8003e3c <generate_waveforms+0x2cc>)
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fc fb8d 	bl	8000490 <__aeabi_f2d>
 8003d76:	a32e      	add	r3, pc, #184	; (adr r3, 8003e30 <generate_waveforms+0x2c0>)
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f7fc fbdc 	bl	8000538 <__aeabi_dmul>
 8003d80:	4603      	mov	r3, r0
 8003d82:	460c      	mov	r4, r1
 8003d84:	4618      	mov	r0, r3
 8003d86:	4621      	mov	r1, r4
 8003d88:	f7fc feae 	bl	8000ae8 <__aeabi_d2f>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <generate_waveforms+0x2cc>)
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28

	// A3
	tempf = pseudo_log(ADCBuffer[3] & 0xfffc);
 8003d92:	4b2e      	ldr	r3, [pc, #184]	; (8003e4c <generate_waveforms+0x2dc>)
 8003d94:	88db      	ldrh	r3, [r3, #6]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f023 0303 	bic.w	r3, r3, #3
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f002 f8fa 	bl	8005f98 <pseudo_log>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003daa:	f102 020e 	add.w	r2, r2, #14
 8003dae:	8013      	strh	r3, [r2, #0]
	// osc.lfo_freq = moving_avg(mov_avg2, &mov_avg_sum2, mov_avg_index2, MOV_AVG_LENGTH_BUFFER, (ADCBuffer[3] & 0xfffc));
	osc.lfo_freq = moving_avg(mov_avg2, &mov_avg_sum2, mov_avg_index2, MOV_AVG_LENGTH_BUFFER, tempf);
 8003db0:	4b36      	ldr	r3, [pc, #216]	; (8003e8c <generate_waveforms+0x31c>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003db8:	f103 030e 	add.w	r3, r3, #14
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	2320      	movs	r3, #32
 8003dc2:	4933      	ldr	r1, [pc, #204]	; (8003e90 <generate_waveforms+0x320>)
 8003dc4:	4833      	ldr	r0, [pc, #204]	; (8003e94 <generate_waveforms+0x324>)
 8003dc6:	f002 f8c3 	bl	8005f50 <moving_avg>
 8003dca:	ee07 0a90 	vmov	s15, r0
 8003dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd2:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <generate_waveforms+0x2cc>)
 8003dd4:	edc3 7a03 	vstr	s15, [r3, #12]
	mov_avg_index2++;
 8003dd8:	4b2c      	ldr	r3, [pc, #176]	; (8003e8c <generate_waveforms+0x31c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	4a2b      	ldr	r2, [pc, #172]	; (8003e8c <generate_waveforms+0x31c>)
 8003de0:	6013      	str	r3, [r2, #0]
	if (mov_avg_index2 >= MOV_AVG_LENGTH_BUFFER)
 8003de2:	4b2a      	ldr	r3, [pc, #168]	; (8003e8c <generate_waveforms+0x31c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b1f      	cmp	r3, #31
 8003de8:	d902      	bls.n	8003df0 <generate_waveforms+0x280>
	{
		mov_avg_index2 = 0;
 8003dea:	4b28      	ldr	r3, [pc, #160]	; (8003e8c <generate_waveforms+0x31c>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
	}
	// osc.lfo_freq = pseudo_log(osc.lfo_freq, ???);

	volatile uint32_t i = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003df6:	f102 0208 	add.w	r2, r2, #8
 8003dfa:	6013      	str	r3, [r2, #0]
	// adsr_settings.am_mod = OFF;
	// adsr_settings.fm_mod = OFF;
	// adsr_settings.am_mod = current_menu_state.adsr_mod;
	// adsr_settings.fm_mod = current_menu_state.adsr_mod;
	adsr_settings.am_mod = adsr_mod.am_mod;
 8003dfc:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <generate_waveforms+0x328>)
 8003dfe:	881a      	ldrh	r2, [r3, #0]
 8003e00:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <generate_waveforms+0x32c>)
 8003e02:	801a      	strh	r2, [r3, #0]
	adsr_settings.fm_mod = adsr_mod.fm_mod;
 8003e04:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <generate_waveforms+0x328>)
 8003e06:	885a      	ldrh	r2, [r3, #2]
 8003e08:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <generate_waveforms+0x32c>)
 8003e0a:	805a      	strh	r2, [r3, #2]
	// adsr_settings.mod = DualMode_VCO;
	// adsr_settings.mod = NO_MOD;
	// adsr_settings.mod = VCOfreq;

	//	// Calculate angle amount to increment per sample.
	volatile float32_t rads_per_sample_vco = osc.vco_freq / ONE_SECOND;		// Radians to increment for each iteration.
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <generate_waveforms+0x2cc>)
 8003e0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e12:	eddf 6a23 	vldr	s13, [pc, #140]	; 8003ea0 <generate_waveforms+0x330>
 8003e16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e1a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003e1e:	f103 0304 	add.w	r3, r3, #4
 8003e22:	edc3 7a00 	vstr	s15, [r3]
 8003e26:	e03d      	b.n	8003ea4 <generate_waveforms+0x334>
 8003e28:	eb1c432d 	.word	0xeb1c432d
 8003e2c:	3f1a36e2 	.word	0x3f1a36e2
 8003e30:	47ae147b 	.word	0x47ae147b
 8003e34:	3f847ae1 	.word	0x3f847ae1
 8003e38:	20004a2d 	.word	0x20004a2d
 8003e3c:	20000054 	.word	0x20000054
 8003e40:	20004a2c 	.word	0x20004a2c
 8003e44:	20004a58 	.word	0x20004a58
 8003e48:	2000485c 	.word	0x2000485c
 8003e4c:	20004a34 	.word	0x20004a34
 8003e50:	20004a60 	.word	0x20004a60
 8003e54:	200047dc 	.word	0x200047dc
 8003e58:	2000464c 	.word	0x2000464c
 8003e5c:	40490fdb 	.word	0x40490fdb
 8003e60:	20004a94 	.word	0x20004a94
 8003e64:	200045cc 	.word	0x200045cc
 8003e68:	200048e0 	.word	0x200048e0
 8003e6c:	20004a98 	.word	0x20004a98
 8003e70:	20004860 	.word	0x20004860
 8003e74:	20004964 	.word	0x20004964
 8003e78:	20004aa4 	.word	0x20004aa4
 8003e7c:	200048e4 	.word	0x200048e4
 8003e80:	20004754 	.word	0x20004754
 8003e84:	20004aa0 	.word	0x20004aa0
 8003e88:	200046d4 	.word	0x200046d4
 8003e8c:	200046d0 	.word	0x200046d0
 8003e90:	20004a9c 	.word	0x20004a9c
 8003e94:	20004650 	.word	0x20004650
 8003e98:	20004a30 	.word	0x20004a30
 8003e9c:	20004a64 	.word	0x20004a64
 8003ea0:	47bb8000 	.word	0x47bb8000
	// volatile float32_t rads_per_sample_vco2 = osc.vco_freq / TWO_SECOND;
	volatile float32_t rads_per_sample_vco2 = rads_per_sample_vco + osc.vco2_freqoffset / ONE_SECOND;
 8003ea4:	4bc6      	ldr	r3, [pc, #792]	; (80041c0 <generate_waveforms+0x650>)
 8003ea6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003eaa:	eddf 6ac6 	vldr	s13, [pc, #792]	; 80041c4 <generate_waveforms+0x654>
 8003eae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003eb2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003eb6:	f103 0304 	add.w	r3, r3, #4
 8003eba:	edd3 7a00 	vldr	s15, [r3]
 8003ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ec2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003ec6:	edc3 7a00 	vstr	s15, [r3]
	//volatile float32_t rads_per_sample_vco2 = rads_per_sample_vco/2.0f;		// Radians to increment for each iteration.
	volatile float32_t rads_per_sample_lfo = osc.lfo_freq / ONE_SECOND;		// Radians to increment for each iteration.
 8003eca:	4bbd      	ldr	r3, [pc, #756]	; (80041c0 <generate_waveforms+0x650>)
 8003ecc:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ed0:	eddf 6abc 	vldr	s13, [pc, #752]	; 80041c4 <generate_waveforms+0x654>
 8003ed4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ed8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003edc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8003ee0:	edc3 7a00 	vstr	s15, [r3]

	// Fill adsr buffer.
//	if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
//	{
		adsr(start, end);
 8003ee4:	f107 0310 	add.w	r3, r7, #16
 8003ee8:	3b0c      	subs	r3, #12
 8003eea:	881a      	ldrh	r2, [r3, #0]
 8003eec:	f107 0310 	add.w	r3, r7, #16
 8003ef0:	3b0a      	subs	r3, #10
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 fa82 	bl	8005400 <adsr>
		// adsr_rad(start, end);
//	}

	// No LFO
	if(osc.lfo_wav == nowave)
 8003efc:	4bb0      	ldr	r3, [pc, #704]	; (80041c0 <generate_waveforms+0x650>)
 8003efe:	8a5b      	ldrh	r3, [r3, #18]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d12a      	bne.n	8003f5a <generate_waveforms+0x3ea>
	{
		for(i = start; i < end; i++)
 8003f04:	f107 0310 	add.w	r3, r7, #16
 8003f08:	3b0a      	subs	r3, #10
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003f10:	f102 0208 	add.w	r2, r2, #8
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e015      	b.n	8003f44 <generate_waveforms+0x3d4>
		{
			buffer_lfo_float[i] = 0;
 8003f18:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003f1c:	f103 0308 	add.w	r3, r3, #8
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4aa9      	ldr	r2, [pc, #676]	; (80041c8 <generate_waveforms+0x658>)
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
//	}

	// No LFO
	if(osc.lfo_wav == nowave)
	{
		for(i = start; i < end; i++)
 8003f2e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003f32:	f103 0308 	add.w	r3, r3, #8
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003f3e:	f102 0208 	add.w	r2, r2, #8
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	f107 0310 	add.w	r3, r7, #16
 8003f48:	3b0c      	subs	r3, #12
 8003f4a:	881a      	ldrh	r2, [r3, #0]
 8003f4c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003f50:	f103 0308 	add.w	r3, r3, #8
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d8de      	bhi.n	8003f18 <generate_waveforms+0x3a8>
			buffer_lfo_float[i] = 0;
		}
	}

	// Sine LFO
	if(osc.lfo_wav == sine)
 8003f5a:	4b99      	ldr	r3, [pc, #612]	; (80041c0 <generate_waveforms+0x650>)
 8003f5c:	8a5b      	ldrh	r3, [r3, #18]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d141      	bne.n	8003fe6 <generate_waveforms+0x476>
	{
		for(i = start; i < end; i++)
 8003f62:	f107 0310 	add.w	r3, r7, #16
 8003f66:	3b0a      	subs	r3, #10
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003f6e:	f102 0208 	add.w	r2, r2, #8
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	e02b      	b.n	8003fce <generate_waveforms+0x45e>
		{
			theta_lfo = theta_lfo + rads_per_sample_lfo;
 8003f76:	4b95      	ldr	r3, [pc, #596]	; (80041cc <generate_waveforms+0x65c>)
 8003f78:	ed93 7a00 	vldr	s14, [r3]
 8003f7c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003f80:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8003f84:	edd3 7a00 	vldr	s15, [r3]
 8003f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f8c:	4b8f      	ldr	r3, [pc, #572]	; (80041cc <generate_waveforms+0x65c>)
 8003f8e:	edc3 7a00 	vstr	s15, [r3]
			buffer_lfo_float[i] = arm_sin_f32(theta_lfo);
 8003f92:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003f96:	f103 0308 	add.w	r3, r3, #8
 8003f9a:	681c      	ldr	r4, [r3, #0]
 8003f9c:	4b8b      	ldr	r3, [pc, #556]	; (80041cc <generate_waveforms+0x65c>)
 8003f9e:	edd3 7a00 	vldr	s15, [r3]
 8003fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa6:	f002 fba3 	bl	80066f0 <arm_sin_f32>
 8003faa:	eef0 7a40 	vmov.f32	s15, s0
 8003fae:	4a86      	ldr	r2, [pc, #536]	; (80041c8 <generate_waveforms+0x658>)
 8003fb0:	00a3      	lsls	r3, r4, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	edc3 7a00 	vstr	s15, [r3]
	}

	// Sine LFO
	if(osc.lfo_wav == sine)
	{
		for(i = start; i < end; i++)
 8003fb8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003fbc:	f103 0308 	add.w	r3, r3, #8
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8003fc8:	f102 0208 	add.w	r2, r2, #8
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	f107 0310 	add.w	r3, r7, #16
 8003fd2:	3b0c      	subs	r3, #12
 8003fd4:	881a      	ldrh	r2, [r3, #0]
 8003fd6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8003fda:	f103 0308 	add.w	r3, r3, #8
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d8c8      	bhi.n	8003f76 <generate_waveforms+0x406>
 8003fe4:	e1bc      	b.n	8004360 <generate_waveforms+0x7f0>
			buffer_lfo_float[i] = arm_sin_f32(theta_lfo);
		}
	}

	// Square LFO
	else if(osc.lfo_wav == square)
 8003fe6:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <generate_waveforms+0x650>)
 8003fe8:	8a5b      	ldrh	r3, [r3, #18]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	f040 808d 	bne.w	800410a <generate_waveforms+0x59a>
	{
		// If osc modulation contains am
		if(osc.am_mod == ON)
 8003ff0:	4b73      	ldr	r3, [pc, #460]	; (80041c0 <generate_waveforms+0x650>)
 8003ff2:	8a9b      	ldrh	r3, [r3, #20]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d141      	bne.n	800407c <generate_waveforms+0x50c>
		{
			// AM
			for(i = start; i < end; i++)
 8003ff8:	f107 0310 	add.w	r3, r7, #16
 8003ffc:	3b0a      	subs	r3, #10
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004004:	f102 0208 	add.w	r2, r2, #8
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	e02b      	b.n	8004064 <generate_waveforms+0x4f4>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 800400c:	4b6f      	ldr	r3, [pc, #444]	; (80041cc <generate_waveforms+0x65c>)
 800400e:	ed93 7a00 	vldr	s14, [r3]
 8004012:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004016:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800401a:	edd3 7a00 	vldr	s15, [r3]
 800401e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004022:	4b6a      	ldr	r3, [pc, #424]	; (80041cc <generate_waveforms+0x65c>)
 8004024:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_square_angle(theta_lfo);	// TODO: offset??
 8004028:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800402c:	f103 0308 	add.w	r3, r3, #8
 8004030:	681c      	ldr	r4, [r3, #0]
 8004032:	4b66      	ldr	r3, [pc, #408]	; (80041cc <generate_waveforms+0x65c>)
 8004034:	edd3 7a00 	vldr	s15, [r3]
 8004038:	eeb0 0a67 	vmov.f32	s0, s15
 800403c:	f001 fd8a 	bl	8005b54 <gen_square_angle>
 8004040:	eef0 7a40 	vmov.f32	s15, s0
 8004044:	4a60      	ldr	r2, [pc, #384]	; (80041c8 <generate_waveforms+0x658>)
 8004046:	00a3      	lsls	r3, r4, #2
 8004048:	4413      	add	r3, r2
 800404a:	edc3 7a00 	vstr	s15, [r3]
	{
		// If osc modulation contains am
		if(osc.am_mod == ON)
		{
			// AM
			for(i = start; i < end; i++)
 800404e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004052:	f103 0308 	add.w	r3, r3, #8
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3301      	adds	r3, #1
 800405a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800405e:	f102 0208 	add.w	r2, r2, #8
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	f107 0310 	add.w	r3, r7, #16
 8004068:	3b0c      	subs	r3, #12
 800406a:	881a      	ldrh	r2, [r3, #0]
 800406c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004070:	f103 0308 	add.w	r3, r3, #8
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d8c8      	bhi.n	800400c <generate_waveforms+0x49c>
 800407a:	e171      	b.n	8004360 <generate_waveforms+0x7f0>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
				buffer_lfo_float[i] = gen_square_angle(theta_lfo);	// TODO: offset??
			}
		}
		else if(osc.fm_mod == ON)
 800407c:	4b50      	ldr	r3, [pc, #320]	; (80041c0 <generate_waveforms+0x650>)
 800407e:	8adb      	ldrh	r3, [r3, #22]
 8004080:	2b01      	cmp	r3, #1
 8004082:	f040 816d 	bne.w	8004360 <generate_waveforms+0x7f0>
		{
			// FM
			for(i = start; i < end; i++)
 8004086:	f107 0310 	add.w	r3, r7, #16
 800408a:	3b0a      	subs	r3, #10
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004092:	f102 0208 	add.w	r2, r2, #8
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	e02b      	b.n	80040f2 <generate_waveforms+0x582>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 800409a:	4b4c      	ldr	r3, [pc, #304]	; (80041cc <generate_waveforms+0x65c>)
 800409c:	ed93 7a00 	vldr	s14, [r3]
 80040a0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80040a4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80040a8:	edd3 7a00 	vldr	s15, [r3]
 80040ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b0:	4b46      	ldr	r3, [pc, #280]	; (80041cc <generate_waveforms+0x65c>)
 80040b2:	edc3 7a00 	vstr	s15, [r3]
				// Sawtooth is integral of triangle
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
 80040b6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80040ba:	f103 0308 	add.w	r3, r3, #8
 80040be:	681c      	ldr	r4, [r3, #0]
 80040c0:	4b42      	ldr	r3, [pc, #264]	; (80041cc <generate_waveforms+0x65c>)
 80040c2:	edd3 7a00 	vldr	s15, [r3]
 80040c6:	eeb0 0a67 	vmov.f32	s0, s15
 80040ca:	f001 fe53 	bl	8005d74 <gen_triangle_angle>
 80040ce:	eef0 7a40 	vmov.f32	s15, s0
 80040d2:	4a3d      	ldr	r2, [pc, #244]	; (80041c8 <generate_waveforms+0x658>)
 80040d4:	00a3      	lsls	r3, r4, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		else if(osc.fm_mod == ON)
		{
			// FM
			for(i = start; i < end; i++)
 80040dc:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80040e0:	f103 0308 	add.w	r3, r3, #8
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3301      	adds	r3, #1
 80040e8:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80040ec:	f102 0208 	add.w	r2, r2, #8
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	f107 0310 	add.w	r3, r7, #16
 80040f6:	3b0c      	subs	r3, #12
 80040f8:	881a      	ldrh	r2, [r3, #0]
 80040fa:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80040fe:	f103 0308 	add.w	r3, r3, #8
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d8c8      	bhi.n	800409a <generate_waveforms+0x52a>
 8004108:	e12a      	b.n	8004360 <generate_waveforms+0x7f0>
			}
		}
	}

	// Sawtooth LFO
	else if(osc.lfo_wav == sawtooth)
 800410a:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <generate_waveforms+0x650>)
 800410c:	8a5b      	ldrh	r3, [r3, #18]
 800410e:	2b03      	cmp	r3, #3
 8004110:	f040 8096 	bne.w	8004240 <generate_waveforms+0x6d0>
	{

		if(osc.am_mod == ON)
 8004114:	4b2a      	ldr	r3, [pc, #168]	; (80041c0 <generate_waveforms+0x650>)
 8004116:	8a9b      	ldrh	r3, [r3, #20]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d141      	bne.n	80041a0 <generate_waveforms+0x630>
		{
			for(i = start; i < end; i++)
 800411c:	f107 0310 	add.w	r3, r7, #16
 8004120:	3b0a      	subs	r3, #10
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004128:	f102 0208 	add.w	r2, r2, #8
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e02b      	b.n	8004188 <generate_waveforms+0x618>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8004130:	4b26      	ldr	r3, [pc, #152]	; (80041cc <generate_waveforms+0x65c>)
 8004132:	ed93 7a00 	vldr	s14, [r3]
 8004136:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800413a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800413e:	edd3 7a00 	vldr	s15, [r3]
 8004142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004146:	4b21      	ldr	r3, [pc, #132]	; (80041cc <generate_waveforms+0x65c>)
 8004148:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_sawtooth_angle(theta_lfo);
 800414c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004150:	f103 0308 	add.w	r3, r3, #8
 8004154:	681c      	ldr	r4, [r3, #0]
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <generate_waveforms+0x65c>)
 8004158:	edd3 7a00 	vldr	s15, [r3]
 800415c:	eeb0 0a67 	vmov.f32	s0, s15
 8004160:	f001 fd20 	bl	8005ba4 <gen_sawtooth_angle>
 8004164:	eef0 7a40 	vmov.f32	s15, s0
 8004168:	4a17      	ldr	r2, [pc, #92]	; (80041c8 <generate_waveforms+0x658>)
 800416a:	00a3      	lsls	r3, r4, #2
 800416c:	4413      	add	r3, r2
 800416e:	edc3 7a00 	vstr	s15, [r3]
	else if(osc.lfo_wav == sawtooth)
	{

		if(osc.am_mod == ON)
		{
			for(i = start; i < end; i++)
 8004172:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004176:	f103 0308 	add.w	r3, r3, #8
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3301      	adds	r3, #1
 800417e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004182:	f102 0208 	add.w	r2, r2, #8
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	f107 0310 	add.w	r3, r7, #16
 800418c:	3b0c      	subs	r3, #12
 800418e:	881a      	ldrh	r2, [r3, #0]
 8004190:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004194:	f103 0308 	add.w	r3, r3, #8
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d8c8      	bhi.n	8004130 <generate_waveforms+0x5c0>
 800419e:	e0df      	b.n	8004360 <generate_waveforms+0x7f0>
				buffer_lfo_float[i] = gen_sawtooth_angle(theta_lfo);
			}
		}

		// If FM mod, need integral of modulating signal.  Integral of ramp is right side of parabola.
		else if(osc.fm_mod == ON)
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <generate_waveforms+0x650>)
 80041a2:	8adb      	ldrh	r3, [r3, #22]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	f040 80db 	bne.w	8004360 <generate_waveforms+0x7f0>
		{
			for(i = start; i < end; i++)
 80041aa:	f107 0310 	add.w	r3, r7, #16
 80041ae:	3b0a      	subs	r3, #10
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80041b6:	f102 0208 	add.w	r2, r2, #8
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	e034      	b.n	8004228 <generate_waveforms+0x6b8>
 80041be:	bf00      	nop
 80041c0:	20000054 	.word	0x20000054
 80041c4:	47bb8000 	.word	0x47bb8000
 80041c8:	200015c8 	.word	0x200015c8
 80041cc:	20004974 	.word	0x20004974
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 80041d0:	4b81      	ldr	r3, [pc, #516]	; (80043d8 <generate_waveforms+0x868>)
 80041d2:	ed93 7a00 	vldr	s14, [r3]
 80041d6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80041da:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041e6:	4b7c      	ldr	r3, [pc, #496]	; (80043d8 <generate_waveforms+0x868>)
 80041e8:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_sawtooth_integral_angle(theta_lfo);
 80041ec:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80041f0:	f103 0308 	add.w	r3, r3, #8
 80041f4:	681c      	ldr	r4, [r3, #0]
 80041f6:	4b78      	ldr	r3, [pc, #480]	; (80043d8 <generate_waveforms+0x868>)
 80041f8:	edd3 7a00 	vldr	s15, [r3]
 80041fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004200:	f001 fcfe 	bl	8005c00 <gen_sawtooth_integral_angle>
 8004204:	eef0 7a40 	vmov.f32	s15, s0
 8004208:	4a74      	ldr	r2, [pc, #464]	; (80043dc <generate_waveforms+0x86c>)
 800420a:	00a3      	lsls	r3, r4, #2
 800420c:	4413      	add	r3, r2
 800420e:	edc3 7a00 	vstr	s15, [r3]
		}

		// If FM mod, need integral of modulating signal.  Integral of ramp is right side of parabola.
		else if(osc.fm_mod == ON)
		{
			for(i = start; i < end; i++)
 8004212:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004216:	f103 0308 	add.w	r3, r3, #8
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3301      	adds	r3, #1
 800421e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004222:	f102 0208 	add.w	r2, r2, #8
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	f107 0310 	add.w	r3, r7, #16
 800422c:	3b0c      	subs	r3, #12
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004234:	f103 0308 	add.w	r3, r3, #8
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d8c8      	bhi.n	80041d0 <generate_waveforms+0x660>
 800423e:	e08f      	b.n	8004360 <generate_waveforms+0x7f0>
			}
		}
	}

	// Triangle LFO
	else if(osc.lfo_wav == triangle)
 8004240:	4b67      	ldr	r3, [pc, #412]	; (80043e0 <generate_waveforms+0x870>)
 8004242:	8a5b      	ldrh	r3, [r3, #18]
 8004244:	2b04      	cmp	r3, #4
 8004246:	f040 808b 	bne.w	8004360 <generate_waveforms+0x7f0>
	{
		if(osc.am_mod == ON)
 800424a:	4b65      	ldr	r3, [pc, #404]	; (80043e0 <generate_waveforms+0x870>)
 800424c:	8a9b      	ldrh	r3, [r3, #20]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d141      	bne.n	80042d6 <generate_waveforms+0x766>
		{
			for(i = start; i < end; i++)
 8004252:	f107 0310 	add.w	r3, r7, #16
 8004256:	3b0a      	subs	r3, #10
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800425e:	f102 0208 	add.w	r2, r2, #8
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	e02b      	b.n	80042be <generate_waveforms+0x74e>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 8004266:	4b5c      	ldr	r3, [pc, #368]	; (80043d8 <generate_waveforms+0x868>)
 8004268:	ed93 7a00 	vldr	s14, [r3]
 800426c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004270:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8004274:	edd3 7a00 	vldr	s15, [r3]
 8004278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800427c:	4b56      	ldr	r3, [pc, #344]	; (80043d8 <generate_waveforms+0x868>)
 800427e:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
 8004282:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004286:	f103 0308 	add.w	r3, r3, #8
 800428a:	681c      	ldr	r4, [r3, #0]
 800428c:	4b52      	ldr	r3, [pc, #328]	; (80043d8 <generate_waveforms+0x868>)
 800428e:	edd3 7a00 	vldr	s15, [r3]
 8004292:	eeb0 0a67 	vmov.f32	s0, s15
 8004296:	f001 fd6d 	bl	8005d74 <gen_triangle_angle>
 800429a:	eef0 7a40 	vmov.f32	s15, s0
 800429e:	4a4f      	ldr	r2, [pc, #316]	; (80043dc <generate_waveforms+0x86c>)
 80042a0:	00a3      	lsls	r3, r4, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	edc3 7a00 	vstr	s15, [r3]
	// Triangle LFO
	else if(osc.lfo_wav == triangle)
	{
		if(osc.am_mod == ON)
		{
			for(i = start; i < end; i++)
 80042a8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80042ac:	f103 0308 	add.w	r3, r3, #8
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3301      	adds	r3, #1
 80042b4:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80042b8:	f102 0208 	add.w	r2, r2, #8
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	f107 0310 	add.w	r3, r7, #16
 80042c2:	3b0c      	subs	r3, #12
 80042c4:	881a      	ldrh	r2, [r3, #0]
 80042c6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80042ca:	f103 0308 	add.w	r3, r3, #8
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d8c8      	bhi.n	8004266 <generate_waveforms+0x6f6>
 80042d4:	e044      	b.n	8004360 <generate_waveforms+0x7f0>
				buffer_lfo_float[i] = gen_triangle_angle(theta_lfo);
			}
		}

		// If FM mod, need integral of modulating signal.
		else if(osc.fm_mod == ON)
 80042d6:	4b42      	ldr	r3, [pc, #264]	; (80043e0 <generate_waveforms+0x870>)
 80042d8:	8adb      	ldrh	r3, [r3, #22]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d140      	bne.n	8004360 <generate_waveforms+0x7f0>
		{
			for(i = start; i < end; i++)
 80042de:	f107 0310 	add.w	r3, r7, #16
 80042e2:	3b0a      	subs	r3, #10
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80042ea:	f102 0208 	add.w	r2, r2, #8
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	e02b      	b.n	800434a <generate_waveforms+0x7da>
			{
				theta_lfo = theta_lfo + rads_per_sample_lfo;
 80042f2:	4b39      	ldr	r3, [pc, #228]	; (80043d8 <generate_waveforms+0x868>)
 80042f4:	ed93 7a00 	vldr	s14, [r3]
 80042f8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80042fc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8004300:	edd3 7a00 	vldr	s15, [r3]
 8004304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004308:	4b33      	ldr	r3, [pc, #204]	; (80043d8 <generate_waveforms+0x868>)
 800430a:	edc3 7a00 	vstr	s15, [r3]
				buffer_lfo_float[i] = gen_triangle_integral_angle(theta_lfo);
 800430e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004312:	f103 0308 	add.w	r3, r3, #8
 8004316:	681c      	ldr	r4, [r3, #0]
 8004318:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <generate_waveforms+0x868>)
 800431a:	edd3 7a00 	vldr	s15, [r3]
 800431e:	eeb0 0a67 	vmov.f32	s0, s15
 8004322:	f001 fd6d 	bl	8005e00 <gen_triangle_integral_angle>
 8004326:	eef0 7a40 	vmov.f32	s15, s0
 800432a:	4a2c      	ldr	r2, [pc, #176]	; (80043dc <generate_waveforms+0x86c>)
 800432c:	00a3      	lsls	r3, r4, #2
 800432e:	4413      	add	r3, r2
 8004330:	edc3 7a00 	vstr	s15, [r3]
		}

		// If FM mod, need integral of modulating signal.
		else if(osc.fm_mod == ON)
		{
			for(i = start; i < end; i++)
 8004334:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004338:	f103 0308 	add.w	r3, r3, #8
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004344:	f102 0208 	add.w	r2, r2, #8
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	f107 0310 	add.w	r3, r7, #16
 800434e:	3b0c      	subs	r3, #12
 8004350:	881a      	ldrh	r2, [r3, #0]
 8004352:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004356:	f103 0308 	add.w	r3, r3, #8
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d8c8      	bhi.n	80042f2 <generate_waveforms+0x782>
		}

	}

	// No VCO
	if(osc.vco_wav == nowave)
 8004360:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <generate_waveforms+0x870>)
 8004362:	8a1b      	ldrh	r3, [r3, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d128      	bne.n	80043ba <generate_waveforms+0x84a>
	{
		for(i = start; i < end; i++)
 8004368:	f107 0310 	add.w	r3, r7, #16
 800436c:	3b0a      	subs	r3, #10
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004374:	f102 0208 	add.w	r2, r2, #8
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e013      	b.n	80043a4 <generate_waveforms+0x834>
		{
			buffer_output[i] = 0;
 800437c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004380:	f103 0308 	add.w	r3, r3, #8
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a17      	ldr	r2, [pc, #92]	; (80043e4 <generate_waveforms+0x874>)
 8004388:	2100      	movs	r1, #0
 800438a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// No VCO
	if(osc.vco_wav == nowave)
	{
		for(i = start; i < end; i++)
 800438e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004392:	f103 0308 	add.w	r3, r3, #8
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800439e:	f102 0208 	add.w	r2, r2, #8
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	f107 0310 	add.w	r3, r7, #16
 80043a8:	3b0c      	subs	r3, #12
 80043aa:	881a      	ldrh	r2, [r3, #0]
 80043ac:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80043b0:	f103 0308 	add.w	r3, r3, #8
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d8e0      	bhi.n	800437c <generate_waveforms+0x80c>
			buffer_output[i] = 0;
		}
	}

	// Sine VCO
	if(osc.vco_wav == sine)
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <generate_waveforms+0x870>)
 80043bc:	8a1b      	ldrh	r3, [r3, #16]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	f040 8169 	bne.w	8004696 <generate_waveforms+0xb26>
	{
		for(i = start; i < end; i++)
 80043c4:	f107 0310 	add.w	r3, r7, #16
 80043c8:	3b0a      	subs	r3, #10
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80043d0:	f102 0208 	add.w	r2, r2, #8
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e150      	b.n	800467a <generate_waveforms+0xb0a>
 80043d8:	20004974 	.word	0x20004974
 80043dc:	200015c8 	.word	0x200015c8
 80043e0:	20000054 	.word	0x20000054
 80043e4:	200005c8 	.word	0x200005c8
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 80043e8:	4bb2      	ldr	r3, [pc, #712]	; (80046b4 <generate_waveforms+0xb44>)
 80043ea:	ed93 7a00 	vldr	s14, [r3]
 80043ee:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80043f2:	f103 0304 	add.w	r3, r3, #4
 80043f6:	edd3 7a00 	vldr	s15, [r3]
 80043fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043fe:	4bad      	ldr	r3, [pc, #692]	; (80046b4 <generate_waveforms+0xb44>)
 8004400:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 8004404:	4bac      	ldr	r3, [pc, #688]	; (80046b8 <generate_waveforms+0xb48>)
 8004406:	ed93 7a00 	vldr	s14, [r3]
 800440a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800440e:	edd3 7a00 	vldr	s15, [r3]
 8004412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004416:	4ba8      	ldr	r3, [pc, #672]	; (80046b8 <generate_waveforms+0xb48>)
 8004418:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 800441c:	4ba7      	ldr	r3, [pc, #668]	; (80046bc <generate_waveforms+0xb4c>)
 800441e:	8adb      	ldrh	r3, [r3, #22]
 8004420:	2b01      	cmp	r3, #1
 8004422:	f040 80a1 	bne.w	8004568 <generate_waveforms+0x9f8>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32(theta_vco + osc.lfo_amp_fm * buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8004426:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800442a:	f103 0308 	add.w	r3, r3, #8
 800442e:	681c      	ldr	r4, [r3, #0]
 8004430:	4ba2      	ldr	r3, [pc, #648]	; (80046bc <generate_waveforms+0xb4c>)
 8004432:	ed93 8a06 	vldr	s16, [r3, #24]
 8004436:	4ba1      	ldr	r3, [pc, #644]	; (80046bc <generate_waveforms+0xb4c>)
 8004438:	edd3 8a06 	vldr	s17, [r3, #24]
 800443c:	4b9f      	ldr	r3, [pc, #636]	; (80046bc <generate_waveforms+0xb4c>)
 800443e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004442:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004446:	f103 0308 	add.w	r3, r3, #8
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a9c      	ldr	r2, [pc, #624]	; (80046c0 <generate_waveforms+0xb50>)
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	edd3 7a00 	vldr	s15, [r3]
 8004456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800445a:	4b96      	ldr	r3, [pc, #600]	; (80046b4 <generate_waveforms+0xb44>)
 800445c:	edd3 7a00 	vldr	s15, [r3]
 8004460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004464:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004468:	f103 0308 	add.w	r3, r3, #8
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a95      	ldr	r2, [pc, #596]	; (80046c4 <generate_waveforms+0xb54>)
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	edd3 7a00 	vldr	s15, [r3]
 8004478:	eddf 6a93 	vldr	s13, [pc, #588]	; 80046c8 <generate_waveforms+0xb58>
 800447c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004484:	eeb0 0a67 	vmov.f32	s0, s15
 8004488:	f002 f932 	bl	80066f0 <arm_sin_f32>
 800448c:	eef0 7a40 	vmov.f32	s15, s0
 8004490:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004494:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800449c:	edc7 7a00 	vstr	s15, [r7]
 80044a0:	883b      	ldrh	r3, [r7, #0]
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	4b89      	ldr	r3, [pc, #548]	; (80046cc <generate_waveforms+0xb5c>)
 80044a6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*arm_sin_f32(theta_vco2 + osc.lfo_amp_fm * buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 80044aa:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80044ae:	f103 0308 	add.w	r3, r3, #8
 80044b2:	681c      	ldr	r4, [r3, #0]
 80044b4:	4b81      	ldr	r3, [pc, #516]	; (80046bc <generate_waveforms+0xb4c>)
 80044b6:	ed93 8a07 	vldr	s16, [r3, #28]
 80044ba:	4b80      	ldr	r3, [pc, #512]	; (80046bc <generate_waveforms+0xb4c>)
 80044bc:	edd3 8a07 	vldr	s17, [r3, #28]
 80044c0:	4b7e      	ldr	r3, [pc, #504]	; (80046bc <generate_waveforms+0xb4c>)
 80044c2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80044c6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80044ca:	f103 0308 	add.w	r3, r3, #8
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a7b      	ldr	r2, [pc, #492]	; (80046c0 <generate_waveforms+0xb50>)
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	edd3 7a00 	vldr	s15, [r3]
 80044da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044de:	4b76      	ldr	r3, [pc, #472]	; (80046b8 <generate_waveforms+0xb48>)
 80044e0:	edd3 7a00 	vldr	s15, [r3]
 80044e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044e8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80044ec:	f103 0308 	add.w	r3, r3, #8
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a74      	ldr	r2, [pc, #464]	; (80046c4 <generate_waveforms+0xb54>)
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	edd3 7a00 	vldr	s15, [r3]
 80044fc:	eddf 6a72 	vldr	s13, [pc, #456]	; 80046c8 <generate_waveforms+0xb58>
 8004500:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004508:	eeb0 0a67 	vmov.f32	s0, s15
 800450c:	f002 f8f0 	bl	80066f0 <arm_sin_f32>
 8004510:	eef0 7a40 	vmov.f32	s15, s0
 8004514:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004518:	ee78 7a27 	vadd.f32	s15, s16, s15
 800451c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004520:	edc7 7a00 	vstr	s15, [r7]
 8004524:	883b      	ldrh	r3, [r7, #0]
 8004526:	b29a      	uxth	r2, r3
 8004528:	4b69      	ldr	r3, [pc, #420]	; (80046d0 <generate_waveforms+0xb60>)
 800452a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 800452e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004532:	f103 0308 	add.w	r3, r3, #8
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800453c:	f102 0208 	add.w	r2, r2, #8
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	4962      	ldr	r1, [pc, #392]	; (80046cc <generate_waveforms+0xb5c>)
 8004544:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004548:	b291      	uxth	r1, r2
 800454a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800454e:	f102 0208 	add.w	r2, r2, #8
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	485e      	ldr	r0, [pc, #376]	; (80046d0 <generate_waveforms+0xb60>)
 8004556:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 800455a:	b292      	uxth	r2, r2
 800455c:	440a      	add	r2, r1
 800455e:	b291      	uxth	r1, r2
 8004560:	4a5a      	ldr	r2, [pc, #360]	; (80046cc <generate_waveforms+0xb5c>)
 8004562:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004566:	e07d      	b.n	8004664 <generate_waveforms+0xaf4>
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*arm_sin_f32(theta_vco + 0.3f * buffer_adsr_fm[i]);
 8004568:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800456c:	f103 0308 	add.w	r3, r3, #8
 8004570:	681c      	ldr	r4, [r3, #0]
 8004572:	4b52      	ldr	r3, [pc, #328]	; (80046bc <generate_waveforms+0xb4c>)
 8004574:	ed93 8a06 	vldr	s16, [r3, #24]
 8004578:	4b50      	ldr	r3, [pc, #320]	; (80046bc <generate_waveforms+0xb4c>)
 800457a:	edd3 8a06 	vldr	s17, [r3, #24]
 800457e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004582:	f103 0308 	add.w	r3, r3, #8
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a4e      	ldr	r2, [pc, #312]	; (80046c4 <generate_waveforms+0xb54>)
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	edd3 7a00 	vldr	s15, [r3]
 8004592:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80046c8 <generate_waveforms+0xb58>
 8004596:	ee27 7a87 	vmul.f32	s14, s15, s14
 800459a:	4b46      	ldr	r3, [pc, #280]	; (80046b4 <generate_waveforms+0xb44>)
 800459c:	edd3 7a00 	vldr	s15, [r3]
 80045a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045a4:	eeb0 0a67 	vmov.f32	s0, s15
 80045a8:	f002 f8a2 	bl	80066f0 <arm_sin_f32>
 80045ac:	eef0 7a40 	vmov.f32	s15, s0
 80045b0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80045b4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80045b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045bc:	edc7 7a00 	vstr	s15, [r7]
 80045c0:	883b      	ldrh	r3, [r7, #0]
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	4b41      	ldr	r3, [pc, #260]	; (80046cc <generate_waveforms+0xb5c>)
 80045c6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*arm_sin_f32(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 80045ca:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80045ce:	f103 0308 	add.w	r3, r3, #8
 80045d2:	681c      	ldr	r4, [r3, #0]
 80045d4:	4b39      	ldr	r3, [pc, #228]	; (80046bc <generate_waveforms+0xb4c>)
 80045d6:	ed93 8a07 	vldr	s16, [r3, #28]
 80045da:	4b38      	ldr	r3, [pc, #224]	; (80046bc <generate_waveforms+0xb4c>)
 80045dc:	edd3 8a07 	vldr	s17, [r3, #28]
 80045e0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80045e4:	f103 0308 	add.w	r3, r3, #8
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a36      	ldr	r2, [pc, #216]	; (80046c4 <generate_waveforms+0xb54>)
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	edd3 7a00 	vldr	s15, [r3]
 80045f4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80046c8 <generate_waveforms+0xb58>
 80045f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045fc:	4b2e      	ldr	r3, [pc, #184]	; (80046b8 <generate_waveforms+0xb48>)
 80045fe:	edd3 7a00 	vldr	s15, [r3]
 8004602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004606:	eeb0 0a67 	vmov.f32	s0, s15
 800460a:	f002 f871 	bl	80066f0 <arm_sin_f32>
 800460e:	eef0 7a40 	vmov.f32	s15, s0
 8004612:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004616:	ee78 7a27 	vadd.f32	s15, s16, s15
 800461a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800461e:	edc7 7a00 	vstr	s15, [r7]
 8004622:	883b      	ldrh	r3, [r7, #0]
 8004624:	b29a      	uxth	r2, r3
 8004626:	4b2a      	ldr	r3, [pc, #168]	; (80046d0 <generate_waveforms+0xb60>)
 8004628:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 800462c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004630:	f103 0308 	add.w	r3, r3, #8
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800463a:	f102 0208 	add.w	r2, r2, #8
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	4922      	ldr	r1, [pc, #136]	; (80046cc <generate_waveforms+0xb5c>)
 8004642:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004646:	b291      	uxth	r1, r2
 8004648:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800464c:	f102 0208 	add.w	r2, r2, #8
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	481f      	ldr	r0, [pc, #124]	; (80046d0 <generate_waveforms+0xb60>)
 8004654:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8004658:	b292      	uxth	r2, r2
 800465a:	440a      	add	r2, r1
 800465c:	b291      	uxth	r1, r2
 800465e:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <generate_waveforms+0xb5c>)
 8004660:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Sine VCO
	if(osc.vco_wav == sine)
	{
		for(i = start; i < end; i++)
 8004664:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004668:	f103 0308 	add.w	r3, r3, #8
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	3301      	adds	r3, #1
 8004670:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004674:	f102 0208 	add.w	r2, r2, #8
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	f107 0310 	add.w	r3, r7, #16
 800467e:	3b0c      	subs	r3, #12
 8004680:	881a      	ldrh	r2, [r3, #0]
 8004682:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004686:	f103 0308 	add.w	r3, r3, #8
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	f63f aeab 	bhi.w	80043e8 <generate_waveforms+0x878>
 8004692:	f000 bcee 	b.w	8005072 <generate_waveforms+0x1502>
			}
		}
	}

	// Square VCO
	else if(osc.vco_wav == square)
 8004696:	4b09      	ldr	r3, [pc, #36]	; (80046bc <generate_waveforms+0xb4c>)
 8004698:	8a1b      	ldrh	r3, [r3, #16]
 800469a:	2b02      	cmp	r3, #2
 800469c:	f040 8170 	bne.w	8004980 <generate_waveforms+0xe10>
	{
		for(i = start; i < end; i++)
 80046a0:	f107 0310 	add.w	r3, r7, #16
 80046a4:	3b0a      	subs	r3, #10
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80046ac:	f102 0208 	add.w	r2, r2, #8
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e158      	b.n	8004966 <generate_waveforms+0xdf6>
 80046b4:	2000496c 	.word	0x2000496c
 80046b8:	20004970 	.word	0x20004970
 80046bc:	20000054 	.word	0x20000054
 80046c0:	200015c8 	.word	0x200015c8
 80046c4:	200035c8 	.word	0x200035c8
 80046c8:	3e99999a 	.word	0x3e99999a
 80046cc:	200005c8 	.word	0x200005c8
 80046d0:	20000dc8 	.word	0x20000dc8
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 80046d4:	4bb2      	ldr	r3, [pc, #712]	; (80049a0 <generate_waveforms+0xe30>)
 80046d6:	ed93 7a00 	vldr	s14, [r3]
 80046da:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80046de:	f103 0304 	add.w	r3, r3, #4
 80046e2:	edd3 7a00 	vldr	s15, [r3]
 80046e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ea:	4bad      	ldr	r3, [pc, #692]	; (80049a0 <generate_waveforms+0xe30>)
 80046ec:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 80046f0:	4bac      	ldr	r3, [pc, #688]	; (80049a4 <generate_waveforms+0xe34>)
 80046f2:	ed93 7a00 	vldr	s14, [r3]
 80046f6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80046fa:	edd3 7a00 	vldr	s15, [r3]
 80046fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004702:	4ba8      	ldr	r3, [pc, #672]	; (80049a4 <generate_waveforms+0xe34>)
 8004704:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 8004708:	4ba7      	ldr	r3, [pc, #668]	; (80049a8 <generate_waveforms+0xe38>)
 800470a:	8adb      	ldrh	r3, [r3, #22]
 800470c:	2b01      	cmp	r3, #1
 800470e:	f040 80a1 	bne.w	8004854 <generate_waveforms+0xce4>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_square_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8004712:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004716:	f103 0308 	add.w	r3, r3, #8
 800471a:	681c      	ldr	r4, [r3, #0]
 800471c:	4ba2      	ldr	r3, [pc, #648]	; (80049a8 <generate_waveforms+0xe38>)
 800471e:	ed93 8a06 	vldr	s16, [r3, #24]
 8004722:	4ba1      	ldr	r3, [pc, #644]	; (80049a8 <generate_waveforms+0xe38>)
 8004724:	edd3 8a06 	vldr	s17, [r3, #24]
 8004728:	4b9f      	ldr	r3, [pc, #636]	; (80049a8 <generate_waveforms+0xe38>)
 800472a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800472e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004732:	f103 0308 	add.w	r3, r3, #8
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a9c      	ldr	r2, [pc, #624]	; (80049ac <generate_waveforms+0xe3c>)
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	edd3 7a00 	vldr	s15, [r3]
 8004742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004746:	4b96      	ldr	r3, [pc, #600]	; (80049a0 <generate_waveforms+0xe30>)
 8004748:	edd3 7a00 	vldr	s15, [r3]
 800474c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004750:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004754:	f103 0308 	add.w	r3, r3, #8
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a95      	ldr	r2, [pc, #596]	; (80049b0 <generate_waveforms+0xe40>)
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	edd3 7a00 	vldr	s15, [r3]
 8004764:	eddf 6a93 	vldr	s13, [pc, #588]	; 80049b4 <generate_waveforms+0xe44>
 8004768:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800476c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004770:	eeb0 0a67 	vmov.f32	s0, s15
 8004774:	f001 f9ee 	bl	8005b54 <gen_square_angle>
 8004778:	eef0 7a40 	vmov.f32	s15, s0
 800477c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004780:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004788:	edc7 7a00 	vstr	s15, [r7]
 800478c:	883b      	ldrh	r3, [r7, #0]
 800478e:	b29a      	uxth	r2, r3
 8004790:	4b89      	ldr	r3, [pc, #548]	; (80049b8 <generate_waveforms+0xe48>)
 8004792:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_square_angle(theta_vco2 + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8004796:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800479a:	f103 0308 	add.w	r3, r3, #8
 800479e:	681c      	ldr	r4, [r3, #0]
 80047a0:	4b81      	ldr	r3, [pc, #516]	; (80049a8 <generate_waveforms+0xe38>)
 80047a2:	ed93 8a07 	vldr	s16, [r3, #28]
 80047a6:	4b80      	ldr	r3, [pc, #512]	; (80049a8 <generate_waveforms+0xe38>)
 80047a8:	edd3 8a07 	vldr	s17, [r3, #28]
 80047ac:	4b7e      	ldr	r3, [pc, #504]	; (80049a8 <generate_waveforms+0xe38>)
 80047ae:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80047b2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80047b6:	f103 0308 	add.w	r3, r3, #8
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a7b      	ldr	r2, [pc, #492]	; (80049ac <generate_waveforms+0xe3c>)
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	edd3 7a00 	vldr	s15, [r3]
 80047c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047ca:	4b76      	ldr	r3, [pc, #472]	; (80049a4 <generate_waveforms+0xe34>)
 80047cc:	edd3 7a00 	vldr	s15, [r3]
 80047d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047d4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80047d8:	f103 0308 	add.w	r3, r3, #8
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a74      	ldr	r2, [pc, #464]	; (80049b0 <generate_waveforms+0xe40>)
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	edd3 7a00 	vldr	s15, [r3]
 80047e8:	eddf 6a72 	vldr	s13, [pc, #456]	; 80049b4 <generate_waveforms+0xe44>
 80047ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80047f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047f4:	eeb0 0a67 	vmov.f32	s0, s15
 80047f8:	f001 f9ac 	bl	8005b54 <gen_square_angle>
 80047fc:	eef0 7a40 	vmov.f32	s15, s0
 8004800:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004804:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800480c:	edc7 7a00 	vstr	s15, [r7]
 8004810:	883b      	ldrh	r3, [r7, #0]
 8004812:	b29a      	uxth	r2, r3
 8004814:	4b69      	ldr	r3, [pc, #420]	; (80049bc <generate_waveforms+0xe4c>)
 8004816:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 800481a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800481e:	f103 0308 	add.w	r3, r3, #8
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004828:	f102 0208 	add.w	r2, r2, #8
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	4962      	ldr	r1, [pc, #392]	; (80049b8 <generate_waveforms+0xe48>)
 8004830:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004834:	b291      	uxth	r1, r2
 8004836:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800483a:	f102 0208 	add.w	r2, r2, #8
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	485e      	ldr	r0, [pc, #376]	; (80049bc <generate_waveforms+0xe4c>)
 8004842:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8004846:	b292      	uxth	r2, r2
 8004848:	440a      	add	r2, r1
 800484a:	b291      	uxth	r1, r2
 800484c:	4a5a      	ldr	r2, [pc, #360]	; (80049b8 <generate_waveforms+0xe48>)
 800484e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004852:	e07d      	b.n	8004950 <generate_waveforms+0xde0>
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_square_angle(theta_vco + 0.3f * buffer_adsr_fm[i]);
 8004854:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004858:	f103 0308 	add.w	r3, r3, #8
 800485c:	681c      	ldr	r4, [r3, #0]
 800485e:	4b52      	ldr	r3, [pc, #328]	; (80049a8 <generate_waveforms+0xe38>)
 8004860:	ed93 8a06 	vldr	s16, [r3, #24]
 8004864:	4b50      	ldr	r3, [pc, #320]	; (80049a8 <generate_waveforms+0xe38>)
 8004866:	edd3 8a06 	vldr	s17, [r3, #24]
 800486a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800486e:	f103 0308 	add.w	r3, r3, #8
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a4e      	ldr	r2, [pc, #312]	; (80049b0 <generate_waveforms+0xe40>)
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	edd3 7a00 	vldr	s15, [r3]
 800487e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80049b4 <generate_waveforms+0xe44>
 8004882:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004886:	4b46      	ldr	r3, [pc, #280]	; (80049a0 <generate_waveforms+0xe30>)
 8004888:	edd3 7a00 	vldr	s15, [r3]
 800488c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004890:	eeb0 0a67 	vmov.f32	s0, s15
 8004894:	f001 f95e 	bl	8005b54 <gen_square_angle>
 8004898:	eef0 7a40 	vmov.f32	s15, s0
 800489c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80048a0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80048a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a8:	edc7 7a00 	vstr	s15, [r7]
 80048ac:	883b      	ldrh	r3, [r7, #0]
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	4b41      	ldr	r3, [pc, #260]	; (80049b8 <generate_waveforms+0xe48>)
 80048b2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_square_angle(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 80048b6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80048ba:	f103 0308 	add.w	r3, r3, #8
 80048be:	681c      	ldr	r4, [r3, #0]
 80048c0:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <generate_waveforms+0xe38>)
 80048c2:	ed93 8a07 	vldr	s16, [r3, #28]
 80048c6:	4b38      	ldr	r3, [pc, #224]	; (80049a8 <generate_waveforms+0xe38>)
 80048c8:	edd3 8a07 	vldr	s17, [r3, #28]
 80048cc:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80048d0:	f103 0308 	add.w	r3, r3, #8
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a36      	ldr	r2, [pc, #216]	; (80049b0 <generate_waveforms+0xe40>)
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	edd3 7a00 	vldr	s15, [r3]
 80048e0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80049b4 <generate_waveforms+0xe44>
 80048e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80048e8:	4b2e      	ldr	r3, [pc, #184]	; (80049a4 <generate_waveforms+0xe34>)
 80048ea:	edd3 7a00 	vldr	s15, [r3]
 80048ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048f2:	eeb0 0a67 	vmov.f32	s0, s15
 80048f6:	f001 f92d 	bl	8005b54 <gen_square_angle>
 80048fa:	eef0 7a40 	vmov.f32	s15, s0
 80048fe:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004902:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800490a:	edc7 7a00 	vstr	s15, [r7]
 800490e:	883b      	ldrh	r3, [r7, #0]
 8004910:	b29a      	uxth	r2, r3
 8004912:	4b2a      	ldr	r3, [pc, #168]	; (80049bc <generate_waveforms+0xe4c>)
 8004914:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8004918:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800491c:	f103 0308 	add.w	r3, r3, #8
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004926:	f102 0208 	add.w	r2, r2, #8
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	4922      	ldr	r1, [pc, #136]	; (80049b8 <generate_waveforms+0xe48>)
 800492e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004932:	b291      	uxth	r1, r2
 8004934:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004938:	f102 0208 	add.w	r2, r2, #8
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	481f      	ldr	r0, [pc, #124]	; (80049bc <generate_waveforms+0xe4c>)
 8004940:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8004944:	b292      	uxth	r2, r2
 8004946:	440a      	add	r2, r1
 8004948:	b291      	uxth	r1, r2
 800494a:	4a1b      	ldr	r2, [pc, #108]	; (80049b8 <generate_waveforms+0xe48>)
 800494c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Square VCO
	else if(osc.vco_wav == square)
	{
		for(i = start; i < end; i++)
 8004950:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004954:	f103 0308 	add.w	r3, r3, #8
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3301      	adds	r3, #1
 800495c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004960:	f102 0208 	add.w	r2, r2, #8
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	f107 0310 	add.w	r3, r7, #16
 800496a:	3b0c      	subs	r3, #12
 800496c:	881a      	ldrh	r2, [r3, #0]
 800496e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004972:	f103 0308 	add.w	r3, r3, #8
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	f63f aeab 	bhi.w	80046d4 <generate_waveforms+0xb64>
 800497e:	e378      	b.n	8005072 <generate_waveforms+0x1502>
			}
		}
	}

	// Sawtooth VCO
	else if(osc.vco_wav == sawtooth)
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <generate_waveforms+0xe38>)
 8004982:	8a1b      	ldrh	r3, [r3, #16]
 8004984:	2b03      	cmp	r3, #3
 8004986:	f040 8171 	bne.w	8004c6c <generate_waveforms+0x10fc>
	{
		for(i = start; i < end; i++)
 800498a:	f107 0310 	add.w	r3, r7, #16
 800498e:	3b0a      	subs	r3, #10
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004996:	f102 0208 	add.w	r2, r2, #8
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	e159      	b.n	8004c52 <generate_waveforms+0x10e2>
 800499e:	bf00      	nop
 80049a0:	2000496c 	.word	0x2000496c
 80049a4:	20004970 	.word	0x20004970
 80049a8:	20000054 	.word	0x20000054
 80049ac:	200015c8 	.word	0x200015c8
 80049b0:	200035c8 	.word	0x200035c8
 80049b4:	3e99999a 	.word	0x3e99999a
 80049b8:	200005c8 	.word	0x200005c8
 80049bc:	20000dc8 	.word	0x20000dc8
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 80049c0:	4bb2      	ldr	r3, [pc, #712]	; (8004c8c <generate_waveforms+0x111c>)
 80049c2:	ed93 7a00 	vldr	s14, [r3]
 80049c6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80049ca:	f103 0304 	add.w	r3, r3, #4
 80049ce:	edd3 7a00 	vldr	s15, [r3]
 80049d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d6:	4bad      	ldr	r3, [pc, #692]	; (8004c8c <generate_waveforms+0x111c>)
 80049d8:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 80049dc:	4bac      	ldr	r3, [pc, #688]	; (8004c90 <generate_waveforms+0x1120>)
 80049de:	ed93 7a00 	vldr	s14, [r3]
 80049e2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80049e6:	edd3 7a00 	vldr	s15, [r3]
 80049ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049ee:	4ba8      	ldr	r3, [pc, #672]	; (8004c90 <generate_waveforms+0x1120>)
 80049f0:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 80049f4:	4ba7      	ldr	r3, [pc, #668]	; (8004c94 <generate_waveforms+0x1124>)
 80049f6:	8adb      	ldrh	r3, [r3, #22]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	f040 80a1 	bne.w	8004b40 <generate_waveforms+0xfd0>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_sawtooth_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 80049fe:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004a02:	f103 0308 	add.w	r3, r3, #8
 8004a06:	681c      	ldr	r4, [r3, #0]
 8004a08:	4ba2      	ldr	r3, [pc, #648]	; (8004c94 <generate_waveforms+0x1124>)
 8004a0a:	ed93 8a06 	vldr	s16, [r3, #24]
 8004a0e:	4ba1      	ldr	r3, [pc, #644]	; (8004c94 <generate_waveforms+0x1124>)
 8004a10:	edd3 8a06 	vldr	s17, [r3, #24]
 8004a14:	4b9f      	ldr	r3, [pc, #636]	; (8004c94 <generate_waveforms+0x1124>)
 8004a16:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004a1a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004a1e:	f103 0308 	add.w	r3, r3, #8
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a9c      	ldr	r2, [pc, #624]	; (8004c98 <generate_waveforms+0x1128>)
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	edd3 7a00 	vldr	s15, [r3]
 8004a2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a32:	4b96      	ldr	r3, [pc, #600]	; (8004c8c <generate_waveforms+0x111c>)
 8004a34:	edd3 7a00 	vldr	s15, [r3]
 8004a38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a3c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004a40:	f103 0308 	add.w	r3, r3, #8
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a95      	ldr	r2, [pc, #596]	; (8004c9c <generate_waveforms+0x112c>)
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	edd3 7a00 	vldr	s15, [r3]
 8004a50:	eddf 6a93 	vldr	s13, [pc, #588]	; 8004ca0 <generate_waveforms+0x1130>
 8004a54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8004a60:	f001 f8a0 	bl	8005ba4 <gen_sawtooth_angle>
 8004a64:	eef0 7a40 	vmov.f32	s15, s0
 8004a68:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004a6c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a74:	edc7 7a00 	vstr	s15, [r7]
 8004a78:	883b      	ldrh	r3, [r7, #0]
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	4b89      	ldr	r3, [pc, #548]	; (8004ca4 <generate_waveforms+0x1134>)
 8004a7e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_sawtooth_angle(theta_vco2 + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8004a82:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004a86:	f103 0308 	add.w	r3, r3, #8
 8004a8a:	681c      	ldr	r4, [r3, #0]
 8004a8c:	4b81      	ldr	r3, [pc, #516]	; (8004c94 <generate_waveforms+0x1124>)
 8004a8e:	ed93 8a07 	vldr	s16, [r3, #28]
 8004a92:	4b80      	ldr	r3, [pc, #512]	; (8004c94 <generate_waveforms+0x1124>)
 8004a94:	edd3 8a07 	vldr	s17, [r3, #28]
 8004a98:	4b7e      	ldr	r3, [pc, #504]	; (8004c94 <generate_waveforms+0x1124>)
 8004a9a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004a9e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004aa2:	f103 0308 	add.w	r3, r3, #8
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a7b      	ldr	r2, [pc, #492]	; (8004c98 <generate_waveforms+0x1128>)
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	edd3 7a00 	vldr	s15, [r3]
 8004ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ab6:	4b76      	ldr	r3, [pc, #472]	; (8004c90 <generate_waveforms+0x1120>)
 8004ab8:	edd3 7a00 	vldr	s15, [r3]
 8004abc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ac0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004ac4:	f103 0308 	add.w	r3, r3, #8
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a74      	ldr	r2, [pc, #464]	; (8004c9c <generate_waveforms+0x112c>)
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	edd3 7a00 	vldr	s15, [r3]
 8004ad4:	eddf 6a72 	vldr	s13, [pc, #456]	; 8004ca0 <generate_waveforms+0x1130>
 8004ad8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ae4:	f001 f85e 	bl	8005ba4 <gen_sawtooth_angle>
 8004ae8:	eef0 7a40 	vmov.f32	s15, s0
 8004aec:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004af0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004af8:	edc7 7a00 	vstr	s15, [r7]
 8004afc:	883b      	ldrh	r3, [r7, #0]
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	4b69      	ldr	r3, [pc, #420]	; (8004ca8 <generate_waveforms+0x1138>)
 8004b02:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8004b06:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004b0a:	f103 0308 	add.w	r3, r3, #8
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004b14:	f102 0208 	add.w	r2, r2, #8
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	4962      	ldr	r1, [pc, #392]	; (8004ca4 <generate_waveforms+0x1134>)
 8004b1c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004b20:	b291      	uxth	r1, r2
 8004b22:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004b26:	f102 0208 	add.w	r2, r2, #8
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	485e      	ldr	r0, [pc, #376]	; (8004ca8 <generate_waveforms+0x1138>)
 8004b2e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8004b32:	b292      	uxth	r2, r2
 8004b34:	440a      	add	r2, r1
 8004b36:	b291      	uxth	r1, r2
 8004b38:	4a5a      	ldr	r2, [pc, #360]	; (8004ca4 <generate_waveforms+0x1134>)
 8004b3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004b3e:	e07d      	b.n	8004c3c <generate_waveforms+0x10cc>

			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_sawtooth_angle(theta_vco + 0.3f * buffer_adsr_fm[i]);
 8004b40:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004b44:	f103 0308 	add.w	r3, r3, #8
 8004b48:	681c      	ldr	r4, [r3, #0]
 8004b4a:	4b52      	ldr	r3, [pc, #328]	; (8004c94 <generate_waveforms+0x1124>)
 8004b4c:	ed93 8a06 	vldr	s16, [r3, #24]
 8004b50:	4b50      	ldr	r3, [pc, #320]	; (8004c94 <generate_waveforms+0x1124>)
 8004b52:	edd3 8a06 	vldr	s17, [r3, #24]
 8004b56:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004b5a:	f103 0308 	add.w	r3, r3, #8
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a4e      	ldr	r2, [pc, #312]	; (8004c9c <generate_waveforms+0x112c>)
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	edd3 7a00 	vldr	s15, [r3]
 8004b6a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004ca0 <generate_waveforms+0x1130>
 8004b6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b72:	4b46      	ldr	r3, [pc, #280]	; (8004c8c <generate_waveforms+0x111c>)
 8004b74:	edd3 7a00 	vldr	s15, [r3]
 8004b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8004b80:	f001 f810 	bl	8005ba4 <gen_sawtooth_angle>
 8004b84:	eef0 7a40 	vmov.f32	s15, s0
 8004b88:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004b8c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b94:	edc7 7a00 	vstr	s15, [r7]
 8004b98:	883b      	ldrh	r3, [r7, #0]
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	4b41      	ldr	r3, [pc, #260]	; (8004ca4 <generate_waveforms+0x1134>)
 8004b9e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_sawtooth_angle(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 8004ba2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004ba6:	f103 0308 	add.w	r3, r3, #8
 8004baa:	681c      	ldr	r4, [r3, #0]
 8004bac:	4b39      	ldr	r3, [pc, #228]	; (8004c94 <generate_waveforms+0x1124>)
 8004bae:	ed93 8a07 	vldr	s16, [r3, #28]
 8004bb2:	4b38      	ldr	r3, [pc, #224]	; (8004c94 <generate_waveforms+0x1124>)
 8004bb4:	edd3 8a07 	vldr	s17, [r3, #28]
 8004bb8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004bbc:	f103 0308 	add.w	r3, r3, #8
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a36      	ldr	r2, [pc, #216]	; (8004c9c <generate_waveforms+0x112c>)
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	edd3 7a00 	vldr	s15, [r3]
 8004bcc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004ca0 <generate_waveforms+0x1130>
 8004bd0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004bd4:	4b2e      	ldr	r3, [pc, #184]	; (8004c90 <generate_waveforms+0x1120>)
 8004bd6:	edd3 7a00 	vldr	s15, [r3]
 8004bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bde:	eeb0 0a67 	vmov.f32	s0, s15
 8004be2:	f000 ffdf 	bl	8005ba4 <gen_sawtooth_angle>
 8004be6:	eef0 7a40 	vmov.f32	s15, s0
 8004bea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004bee:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf6:	edc7 7a00 	vstr	s15, [r7]
 8004bfa:	883b      	ldrh	r3, [r7, #0]
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	4b2a      	ldr	r3, [pc, #168]	; (8004ca8 <generate_waveforms+0x1138>)
 8004c00:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8004c04:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004c08:	f103 0308 	add.w	r3, r3, #8
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004c12:	f102 0208 	add.w	r2, r2, #8
 8004c16:	6812      	ldr	r2, [r2, #0]
 8004c18:	4922      	ldr	r1, [pc, #136]	; (8004ca4 <generate_waveforms+0x1134>)
 8004c1a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004c1e:	b291      	uxth	r1, r2
 8004c20:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004c24:	f102 0208 	add.w	r2, r2, #8
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	481f      	ldr	r0, [pc, #124]	; (8004ca8 <generate_waveforms+0x1138>)
 8004c2c:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8004c30:	b292      	uxth	r2, r2
 8004c32:	440a      	add	r2, r1
 8004c34:	b291      	uxth	r1, r2
 8004c36:	4a1b      	ldr	r2, [pc, #108]	; (8004ca4 <generate_waveforms+0x1134>)
 8004c38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Sawtooth VCO
	else if(osc.vco_wav == sawtooth)
	{
		for(i = start; i < end; i++)
 8004c3c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004c40:	f103 0308 	add.w	r3, r3, #8
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3301      	adds	r3, #1
 8004c48:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004c4c:	f102 0208 	add.w	r2, r2, #8
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	f107 0310 	add.w	r3, r7, #16
 8004c56:	3b0c      	subs	r3, #12
 8004c58:	881a      	ldrh	r2, [r3, #0]
 8004c5a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004c5e:	f103 0308 	add.w	r3, r3, #8
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	f63f aeab 	bhi.w	80049c0 <generate_waveforms+0xe50>
 8004c6a:	e202      	b.n	8005072 <generate_waveforms+0x1502>
			}
		}
	}

	// Triangle VCO
	else if(osc.vco_wav == triangle)
 8004c6c:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <generate_waveforms+0x1124>)
 8004c6e:	8a1b      	ldrh	r3, [r3, #16]
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	f040 8171 	bne.w	8004f58 <generate_waveforms+0x13e8>
	{
		for(i = start; i < end; i++)
 8004c76:	f107 0310 	add.w	r3, r7, #16
 8004c7a:	3b0a      	subs	r3, #10
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004c82:	f102 0208 	add.w	r2, r2, #8
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	e159      	b.n	8004f3e <generate_waveforms+0x13ce>
 8004c8a:	bf00      	nop
 8004c8c:	2000496c 	.word	0x2000496c
 8004c90:	20004970 	.word	0x20004970
 8004c94:	20000054 	.word	0x20000054
 8004c98:	200015c8 	.word	0x200015c8
 8004c9c:	200035c8 	.word	0x200035c8
 8004ca0:	3e99999a 	.word	0x3e99999a
 8004ca4:	200005c8 	.word	0x200005c8
 8004ca8:	20000dc8 	.word	0x20000dc8
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8004cac:	4bb2      	ldr	r3, [pc, #712]	; (8004f78 <generate_waveforms+0x1408>)
 8004cae:	ed93 7a00 	vldr	s14, [r3]
 8004cb2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004cb6:	f103 0304 	add.w	r3, r3, #4
 8004cba:	edd3 7a00 	vldr	s15, [r3]
 8004cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cc2:	4bad      	ldr	r3, [pc, #692]	; (8004f78 <generate_waveforms+0x1408>)
 8004cc4:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 8004cc8:	4bac      	ldr	r3, [pc, #688]	; (8004f7c <generate_waveforms+0x140c>)
 8004cca:	ed93 7a00 	vldr	s14, [r3]
 8004cce:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004cd2:	edd3 7a00 	vldr	s15, [r3]
 8004cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cda:	4ba8      	ldr	r3, [pc, #672]	; (8004f7c <generate_waveforms+0x140c>)
 8004cdc:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 8004ce0:	4ba7      	ldr	r3, [pc, #668]	; (8004f80 <generate_waveforms+0x1410>)
 8004ce2:	8adb      	ldrh	r3, [r3, #22]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	f040 80a1 	bne.w	8004e2c <generate_waveforms+0x12bc>
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_triangle_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8004cea:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004cee:	f103 0308 	add.w	r3, r3, #8
 8004cf2:	681c      	ldr	r4, [r3, #0]
 8004cf4:	4ba2      	ldr	r3, [pc, #648]	; (8004f80 <generate_waveforms+0x1410>)
 8004cf6:	ed93 8a06 	vldr	s16, [r3, #24]
 8004cfa:	4ba1      	ldr	r3, [pc, #644]	; (8004f80 <generate_waveforms+0x1410>)
 8004cfc:	edd3 8a06 	vldr	s17, [r3, #24]
 8004d00:	4b9f      	ldr	r3, [pc, #636]	; (8004f80 <generate_waveforms+0x1410>)
 8004d02:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004d06:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004d0a:	f103 0308 	add.w	r3, r3, #8
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a9c      	ldr	r2, [pc, #624]	; (8004f84 <generate_waveforms+0x1414>)
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	edd3 7a00 	vldr	s15, [r3]
 8004d1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d1e:	4b96      	ldr	r3, [pc, #600]	; (8004f78 <generate_waveforms+0x1408>)
 8004d20:	edd3 7a00 	vldr	s15, [r3]
 8004d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d28:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004d2c:	f103 0308 	add.w	r3, r3, #8
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a95      	ldr	r2, [pc, #596]	; (8004f88 <generate_waveforms+0x1418>)
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	edd3 7a00 	vldr	s15, [r3]
 8004d3c:	eddf 6a93 	vldr	s13, [pc, #588]	; 8004f8c <generate_waveforms+0x141c>
 8004d40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d48:	eeb0 0a67 	vmov.f32	s0, s15
 8004d4c:	f001 f812 	bl	8005d74 <gen_triangle_angle>
 8004d50:	eef0 7a40 	vmov.f32	s15, s0
 8004d54:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004d58:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d60:	edc7 7a00 	vstr	s15, [r7]
 8004d64:	883b      	ldrh	r3, [r7, #0]
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	4b89      	ldr	r3, [pc, #548]	; (8004f90 <generate_waveforms+0x1420>)
 8004d6a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_triangle_angle(theta_vco2 + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
 8004d6e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004d72:	f103 0308 	add.w	r3, r3, #8
 8004d76:	681c      	ldr	r4, [r3, #0]
 8004d78:	4b81      	ldr	r3, [pc, #516]	; (8004f80 <generate_waveforms+0x1410>)
 8004d7a:	ed93 8a07 	vldr	s16, [r3, #28]
 8004d7e:	4b80      	ldr	r3, [pc, #512]	; (8004f80 <generate_waveforms+0x1410>)
 8004d80:	edd3 8a07 	vldr	s17, [r3, #28]
 8004d84:	4b7e      	ldr	r3, [pc, #504]	; (8004f80 <generate_waveforms+0x1410>)
 8004d86:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004d8a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004d8e:	f103 0308 	add.w	r3, r3, #8
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a7b      	ldr	r2, [pc, #492]	; (8004f84 <generate_waveforms+0x1414>)
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	edd3 7a00 	vldr	s15, [r3]
 8004d9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004da2:	4b76      	ldr	r3, [pc, #472]	; (8004f7c <generate_waveforms+0x140c>)
 8004da4:	edd3 7a00 	vldr	s15, [r3]
 8004da8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004dac:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004db0:	f103 0308 	add.w	r3, r3, #8
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a74      	ldr	r2, [pc, #464]	; (8004f88 <generate_waveforms+0x1418>)
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	edd3 7a00 	vldr	s15, [r3]
 8004dc0:	eddf 6a72 	vldr	s13, [pc, #456]	; 8004f8c <generate_waveforms+0x141c>
 8004dc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8004dd0:	f000 ffd0 	bl	8005d74 <gen_triangle_angle>
 8004dd4:	eef0 7a40 	vmov.f32	s15, s0
 8004dd8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004ddc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de4:	edc7 7a00 	vstr	s15, [r7]
 8004de8:	883b      	ldrh	r3, [r7, #0]
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	4b69      	ldr	r3, [pc, #420]	; (8004f94 <generate_waveforms+0x1424>)
 8004dee:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8004df2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004df6:	f103 0308 	add.w	r3, r3, #8
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004e00:	f102 0208 	add.w	r2, r2, #8
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	4962      	ldr	r1, [pc, #392]	; (8004f90 <generate_waveforms+0x1420>)
 8004e08:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004e0c:	b291      	uxth	r1, r2
 8004e0e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004e12:	f102 0208 	add.w	r2, r2, #8
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	485e      	ldr	r0, [pc, #376]	; (8004f94 <generate_waveforms+0x1424>)
 8004e1a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8004e1e:	b292      	uxth	r2, r2
 8004e20:	440a      	add	r2, r1
 8004e22:	b291      	uxth	r1, r2
 8004e24:	4a5a      	ldr	r2, [pc, #360]	; (8004f90 <generate_waveforms+0x1420>)
 8004e26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004e2a:	e07d      	b.n	8004f28 <generate_waveforms+0x13b8>
			}
			else
			{
				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_triangle_angle(theta_vco + 0.3f * buffer_adsr_fm[i]);
 8004e2c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004e30:	f103 0308 	add.w	r3, r3, #8
 8004e34:	681c      	ldr	r4, [r3, #0]
 8004e36:	4b52      	ldr	r3, [pc, #328]	; (8004f80 <generate_waveforms+0x1410>)
 8004e38:	ed93 8a06 	vldr	s16, [r3, #24]
 8004e3c:	4b50      	ldr	r3, [pc, #320]	; (8004f80 <generate_waveforms+0x1410>)
 8004e3e:	edd3 8a06 	vldr	s17, [r3, #24]
 8004e42:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004e46:	f103 0308 	add.w	r3, r3, #8
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a4e      	ldr	r2, [pc, #312]	; (8004f88 <generate_waveforms+0x1418>)
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	edd3 7a00 	vldr	s15, [r3]
 8004e56:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004f8c <generate_waveforms+0x141c>
 8004e5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e5e:	4b46      	ldr	r3, [pc, #280]	; (8004f78 <generate_waveforms+0x1408>)
 8004e60:	edd3 7a00 	vldr	s15, [r3]
 8004e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e68:	eeb0 0a67 	vmov.f32	s0, s15
 8004e6c:	f000 ff82 	bl	8005d74 <gen_triangle_angle>
 8004e70:	eef0 7a40 	vmov.f32	s15, s0
 8004e74:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004e78:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e80:	edc7 7a00 	vstr	s15, [r7]
 8004e84:	883b      	ldrh	r3, [r7, #0]
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	4b41      	ldr	r3, [pc, #260]	; (8004f90 <generate_waveforms+0x1420>)
 8004e8a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_triangle_angle(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
 8004e8e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004e92:	f103 0308 	add.w	r3, r3, #8
 8004e96:	681c      	ldr	r4, [r3, #0]
 8004e98:	4b39      	ldr	r3, [pc, #228]	; (8004f80 <generate_waveforms+0x1410>)
 8004e9a:	ed93 8a07 	vldr	s16, [r3, #28]
 8004e9e:	4b38      	ldr	r3, [pc, #224]	; (8004f80 <generate_waveforms+0x1410>)
 8004ea0:	edd3 8a07 	vldr	s17, [r3, #28]
 8004ea4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004ea8:	f103 0308 	add.w	r3, r3, #8
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a36      	ldr	r2, [pc, #216]	; (8004f88 <generate_waveforms+0x1418>)
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	edd3 7a00 	vldr	s15, [r3]
 8004eb8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004f8c <generate_waveforms+0x141c>
 8004ebc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ec0:	4b2e      	ldr	r3, [pc, #184]	; (8004f7c <generate_waveforms+0x140c>)
 8004ec2:	edd3 7a00 	vldr	s15, [r3]
 8004ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eca:	eeb0 0a67 	vmov.f32	s0, s15
 8004ece:	f000 ff51 	bl	8005d74 <gen_triangle_angle>
 8004ed2:	eef0 7a40 	vmov.f32	s15, s0
 8004ed6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004eda:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ee2:	edc7 7a00 	vstr	s15, [r7]
 8004ee6:	883b      	ldrh	r3, [r7, #0]
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	4b2a      	ldr	r3, [pc, #168]	; (8004f94 <generate_waveforms+0x1424>)
 8004eec:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				buffer_output[i] = buffer_output[i] + buffer_output2[i];
 8004ef0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004ef4:	f103 0308 	add.w	r3, r3, #8
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004efe:	f102 0208 	add.w	r2, r2, #8
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	4922      	ldr	r1, [pc, #136]	; (8004f90 <generate_waveforms+0x1420>)
 8004f06:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004f0a:	b291      	uxth	r1, r2
 8004f0c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004f10:	f102 0208 	add.w	r2, r2, #8
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	481f      	ldr	r0, [pc, #124]	; (8004f94 <generate_waveforms+0x1424>)
 8004f18:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 8004f1c:	b292      	uxth	r2, r2
 8004f1e:	440a      	add	r2, r1
 8004f20:	b291      	uxth	r1, r2
 8004f22:	4a1b      	ldr	r2, [pc, #108]	; (8004f90 <generate_waveforms+0x1420>)
 8004f24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// Triangle VCO
	else if(osc.vco_wav == triangle)
	{
		for(i = start; i < end; i++)
 8004f28:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004f2c:	f103 0308 	add.w	r3, r3, #8
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3301      	adds	r3, #1
 8004f34:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004f38:	f102 0208 	add.w	r2, r2, #8
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	f107 0310 	add.w	r3, r7, #16
 8004f42:	3b0c      	subs	r3, #12
 8004f44:	881a      	ldrh	r2, [r3, #0]
 8004f46:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004f4a:	f103 0308 	add.w	r3, r3, #8
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	f63f aeab 	bhi.w	8004cac <generate_waveforms+0x113c>
 8004f56:	e08c      	b.n	8005072 <generate_waveforms+0x1502>
			}
		}
	}

	// Noise VCO
	else if(osc.vco_wav == noise)
 8004f58:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <generate_waveforms+0x1410>)
 8004f5a:	8a1b      	ldrh	r3, [r3, #16]
 8004f5c:	2b05      	cmp	r3, #5
 8004f5e:	f040 8088 	bne.w	8005072 <generate_waveforms+0x1502>
	{
		for(i = start; i < end; i++)
 8004f62:	f107 0310 	add.w	r3, r7, #16
 8004f66:	3b0a      	subs	r3, #10
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8004f6e:	f102 0208 	add.w	r2, r2, #8
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	e072      	b.n	800505c <generate_waveforms+0x14ec>
 8004f76:	bf00      	nop
 8004f78:	2000496c 	.word	0x2000496c
 8004f7c:	20004970 	.word	0x20004970
 8004f80:	20000054 	.word	0x20000054
 8004f84:	200015c8 	.word	0x200015c8
 8004f88:	200035c8 	.word	0x200035c8
 8004f8c:	3e99999a 	.word	0x3e99999a
 8004f90:	200005c8 	.word	0x200005c8
 8004f94:	20000dc8 	.word	0x20000dc8
		{
			theta_vco = theta_vco + rads_per_sample_vco;
 8004f98:	4bca      	ldr	r3, [pc, #808]	; (80052c4 <generate_waveforms+0x1754>)
 8004f9a:	ed93 7a00 	vldr	s14, [r3]
 8004f9e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004fa2:	f103 0304 	add.w	r3, r3, #4
 8004fa6:	edd3 7a00 	vldr	s15, [r3]
 8004faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fae:	4bc5      	ldr	r3, [pc, #788]	; (80052c4 <generate_waveforms+0x1754>)
 8004fb0:	edc3 7a00 	vstr	s15, [r3]
			theta_vco2 = theta_vco2 + rads_per_sample_vco2;
 8004fb4:	4bc4      	ldr	r3, [pc, #784]	; (80052c8 <generate_waveforms+0x1758>)
 8004fb6:	ed93 7a00 	vldr	s14, [r3]
 8004fba:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004fbe:	edd3 7a00 	vldr	s15, [r3]
 8004fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fc6:	4bc0      	ldr	r3, [pc, #768]	; (80052c8 <generate_waveforms+0x1758>)
 8004fc8:	edc3 7a00 	vstr	s15, [r3]
			if(osc.fm_mod == ON)
 8004fcc:	4bbf      	ldr	r3, [pc, #764]	; (80052cc <generate_waveforms+0x175c>)
 8004fce:	8adb      	ldrh	r3, [r3, #22]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d11c      	bne.n	800500e <generate_waveforms+0x149e>
			{
				// buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_triangle_angle(theta_vco + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
				// buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_triangle_angle(theta_vco2 + osc.lfo_amp_fm*buffer_lfo_float[i] + 0.3f * buffer_adsr_fm[i]);
				// buffer_output[i] = buffer_output[i] + buffer_output2[i];

				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_AWGN();
 8004fd4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8004fd8:	f103 0308 	add.w	r3, r3, #8
 8004fdc:	681c      	ldr	r4, [r3, #0]
 8004fde:	4bbb      	ldr	r3, [pc, #748]	; (80052cc <generate_waveforms+0x175c>)
 8004fe0:	ed93 8a06 	vldr	s16, [r3, #24]
 8004fe4:	4bb9      	ldr	r3, [pc, #740]	; (80052cc <generate_waveforms+0x175c>)
 8004fe6:	edd3 8a06 	vldr	s17, [r3, #24]
 8004fea:	f001 f85d 	bl	80060a8 <gen_AWGN>
 8004fee:	eef0 7a40 	vmov.f32	s15, s0
 8004ff2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8004ff6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ffe:	edc7 7a00 	vstr	s15, [r7]
 8005002:	883b      	ldrh	r3, [r7, #0]
 8005004:	b29a      	uxth	r2, r3
 8005006:	4bb2      	ldr	r3, [pc, #712]	; (80052d0 <generate_waveforms+0x1760>)
 8005008:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 800500c:	e01b      	b.n	8005046 <generate_waveforms+0x14d6>
			{
				// buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_triangle_angle(theta_vco + 0.3f * buffer_adsr_fm[i]);
				// buffer_output2[i] = osc.vco2_amp + osc.vco2_amp*gen_triangle_angle(theta_vco2 + 0.3f * buffer_adsr_fm[i]);
				// buffer_output[i] = buffer_output[i] + buffer_output2[i];

				buffer_output[i] = osc.vco_amp + osc.vco_amp*gen_AWGN();
 800500e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8005012:	f103 0308 	add.w	r3, r3, #8
 8005016:	681c      	ldr	r4, [r3, #0]
 8005018:	4bac      	ldr	r3, [pc, #688]	; (80052cc <generate_waveforms+0x175c>)
 800501a:	ed93 8a06 	vldr	s16, [r3, #24]
 800501e:	4bab      	ldr	r3, [pc, #684]	; (80052cc <generate_waveforms+0x175c>)
 8005020:	edd3 8a06 	vldr	s17, [r3, #24]
 8005024:	f001 f840 	bl	80060a8 <gen_AWGN>
 8005028:	eef0 7a40 	vmov.f32	s15, s0
 800502c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005030:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005038:	edc7 7a00 	vstr	s15, [r7]
 800503c:	883b      	ldrh	r3, [r7, #0]
 800503e:	b29a      	uxth	r2, r3
 8005040:	4ba3      	ldr	r3, [pc, #652]	; (80052d0 <generate_waveforms+0x1760>)
 8005042:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	}

	// Noise VCO
	else if(osc.vco_wav == noise)
	{
		for(i = start; i < end; i++)
 8005046:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800504a:	f103 0308 	add.w	r3, r3, #8
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3301      	adds	r3, #1
 8005052:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8005056:	f102 0208 	add.w	r2, r2, #8
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	f107 0310 	add.w	r3, r7, #16
 8005060:	3b0c      	subs	r3, #12
 8005062:	881a      	ldrh	r2, [r3, #0]
 8005064:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8005068:	f103 0308 	add.w	r3, r3, #8
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d892      	bhi.n	8004f98 <generate_waveforms+0x1428>
		}
	}


	// AM Modulate VCO with LFO
	if(osc.am_mod == ON)
 8005072:	4b96      	ldr	r3, [pc, #600]	; (80052cc <generate_waveforms+0x175c>)
 8005074:	8a9b      	ldrh	r3, [r3, #20]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d150      	bne.n	800511c <generate_waveforms+0x15ac>
	{
		for(i = start; i < end; i++)
 800507a:	f107 0310 	add.w	r3, r7, #16
 800507e:	3b0a      	subs	r3, #10
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8005086:	f102 0208 	add.w	r2, r2, #8
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	e03b      	b.n	8005106 <generate_waveforms+0x1596>
		{
			buffer_output[i] = buffer_output[i]*(osc.lfo_amp_am + osc.lfo_amp_am*buffer_lfo_float[i]);
 800508e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8005092:	f103 0308 	add.w	r3, r3, #8
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800509c:	f102 0208 	add.w	r2, r2, #8
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	498b      	ldr	r1, [pc, #556]	; (80052d0 <generate_waveforms+0x1760>)
 80050a4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80050a8:	b292      	uxth	r2, r2
 80050aa:	ee07 2a90 	vmov	s15, r2
 80050ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050b2:	4a86      	ldr	r2, [pc, #536]	; (80052cc <generate_waveforms+0x175c>)
 80050b4:	edd2 6a09 	vldr	s13, [r2, #36]	; 0x24
 80050b8:	4a84      	ldr	r2, [pc, #528]	; (80052cc <generate_waveforms+0x175c>)
 80050ba:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 80050be:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80050c2:	f102 0208 	add.w	r2, r2, #8
 80050c6:	6812      	ldr	r2, [r2, #0]
 80050c8:	4982      	ldr	r1, [pc, #520]	; (80052d4 <generate_waveforms+0x1764>)
 80050ca:	0092      	lsls	r2, r2, #2
 80050cc:	440a      	add	r2, r1
 80050ce:	edd2 7a00 	vldr	s15, [r2]
 80050d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80050d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e2:	edc7 7a00 	vstr	s15, [r7]
 80050e6:	883a      	ldrh	r2, [r7, #0]
 80050e8:	b291      	uxth	r1, r2
 80050ea:	4a79      	ldr	r2, [pc, #484]	; (80052d0 <generate_waveforms+0x1760>)
 80050ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]


	// AM Modulate VCO with LFO
	if(osc.am_mod == ON)
	{
		for(i = start; i < end; i++)
 80050f0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80050f4:	f103 0308 	add.w	r3, r3, #8
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3301      	adds	r3, #1
 80050fc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8005100:	f102 0208 	add.w	r2, r2, #8
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	f107 0310 	add.w	r3, r7, #16
 800510a:	3b0c      	subs	r3, #12
 800510c:	881a      	ldrh	r2, [r3, #0]
 800510e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8005112:	f103 0308 	add.w	r3, r3, #8
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d8b8      	bhi.n	800508e <generate_waveforms+0x151e>
			buffer_output[i] = buffer_output[i]*(osc.lfo_amp_am + osc.lfo_amp_am*buffer_lfo_float[i]);
		}
	}

	// AM Modulate VCO with ADSR
	if(adsr_settings.am_mod == ON)
 800511c:	4b6e      	ldr	r3, [pc, #440]	; (80052d8 <generate_waveforms+0x1768>)
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	b29b      	uxth	r3, r3
 8005122:	2b01      	cmp	r3, #1
 8005124:	d146      	bne.n	80051b4 <generate_waveforms+0x1644>
	{
		for(i = start; i < end; i++)
 8005126:	f107 0310 	add.w	r3, r7, #16
 800512a:	3b0a      	subs	r3, #10
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8005132:	f102 0208 	add.w	r2, r2, #8
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	e031      	b.n	800519e <generate_waveforms+0x162e>
		{
			buffer_output[i] = buffer_output[i]*buffer_adsr_am[i];
 800513a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800513e:	f103 0308 	add.w	r3, r3, #8
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8005148:	f102 0208 	add.w	r2, r2, #8
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	4960      	ldr	r1, [pc, #384]	; (80052d0 <generate_waveforms+0x1760>)
 8005150:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8005154:	b292      	uxth	r2, r2
 8005156:	ee07 2a90 	vmov	s15, r2
 800515a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800515e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8005162:	f102 0208 	add.w	r2, r2, #8
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	495c      	ldr	r1, [pc, #368]	; (80052dc <generate_waveforms+0x176c>)
 800516a:	0092      	lsls	r2, r2, #2
 800516c:	440a      	add	r2, r1
 800516e:	edd2 7a00 	vldr	s15, [r2]
 8005172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800517a:	edc7 7a00 	vstr	s15, [r7]
 800517e:	883a      	ldrh	r2, [r7, #0]
 8005180:	b291      	uxth	r1, r2
 8005182:	4a53      	ldr	r2, [pc, #332]	; (80052d0 <generate_waveforms+0x1760>)
 8005184:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	// AM Modulate VCO with ADSR
	if(adsr_settings.am_mod == ON)
	{
		for(i = start; i < end; i++)
 8005188:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800518c:	f103 0308 	add.w	r3, r3, #8
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3301      	adds	r3, #1
 8005194:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8005198:	f102 0208 	add.w	r2, r2, #8
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	f107 0310 	add.w	r3, r7, #16
 80051a2:	3b0c      	subs	r3, #12
 80051a4:	881a      	ldrh	r2, [r3, #0]
 80051a6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80051aa:	f103 0308 	add.w	r3, r3, #8
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d8c2      	bhi.n	800513a <generate_waveforms+0x15ca>
	}

	// --------------------------------------------
	// Try to filter with biquad.
	sf_biquad_state_st lowpass;
	sf_lowpass(&lowpass, SAMPLERATE, 400.0f, 1.0f);
 80051b4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80051b8:	f103 0308 	add.w	r3, r3, #8
 80051bc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80051c0:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80052e0 <generate_waveforms+0x1770>
 80051c4:	f64b 3180 	movw	r1, #48000	; 0xbb80
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fe f95f 	bl	800348c <sf_lowpass>
	// Need input and output buffers of type sf_sample_st.
	sf_sample_st input[BUFF_LEN_HALF];
	sf_sample_st output[BUFF_LEN_HALF];

	// Convert buffer_output[i] into input (floats).
	for(i = start/2; i < (end/2) ; i++)
 80051ce:	f107 0310 	add.w	r3, r7, #16
 80051d2:	3b0a      	subs	r3, #10
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80051de:	f102 0208 	add.w	r2, r2, #8
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	e044      	b.n	8005270 <generate_waveforms+0x1700>
	{
		input[i].L = (float32_t) buffer_output[2*i];
 80051e6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80051ea:	f103 0308 	add.w	r3, r3, #8
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80051f4:	f103 0308 	add.w	r3, r3, #8
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	4934      	ldr	r1, [pc, #208]	; (80052d0 <generate_waveforms+0x1760>)
 80051fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005202:	b29b      	uxth	r3, r3
 8005204:	ee07 3a90 	vmov	s15, r3
 8005208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8005210:	f103 0310 	add.w	r3, r3, #16
 8005214:	3b08      	subs	r3, #8
 8005216:	00d2      	lsls	r2, r2, #3
 8005218:	4413      	add	r3, r2
 800521a:	edc3 7a00 	vstr	s15, [r3]
		input[i].R = (float32_t) buffer_output[2*i+1];
 800521e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8005222:	f103 0308 	add.w	r3, r3, #8
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800522c:	f103 0308 	add.w	r3, r3, #8
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	3301      	adds	r3, #1
 8005236:	4926      	ldr	r1, [pc, #152]	; (80052d0 <generate_waveforms+0x1760>)
 8005238:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800523c:	b29b      	uxth	r3, r3
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800524a:	f103 0310 	add.w	r3, r3, #16
 800524e:	3b08      	subs	r3, #8
 8005250:	00d2      	lsls	r2, r2, #3
 8005252:	4413      	add	r3, r2
 8005254:	3304      	adds	r3, #4
 8005256:	edc3 7a00 	vstr	s15, [r3]
	// Need input and output buffers of type sf_sample_st.
	sf_sample_st input[BUFF_LEN_HALF];
	sf_sample_st output[BUFF_LEN_HALF];

	// Convert buffer_output[i] into input (floats).
	for(i = start/2; i < (end/2) ; i++)
 800525a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800525e:	f103 0308 	add.w	r3, r3, #8
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3301      	adds	r3, #1
 8005266:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800526a:	f102 0208 	add.w	r2, r2, #8
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	f107 0310 	add.w	r3, r7, #16
 8005274:	3b0c      	subs	r3, #12
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	085b      	lsrs	r3, r3, #1
 800527a:	b29b      	uxth	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8005282:	f103 0308 	add.w	r3, r3, #8
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d8ac      	bhi.n	80051e6 <generate_waveforms+0x1676>
		input[i].L = (float32_t) buffer_output[2*i];
		input[i].R = (float32_t) buffer_output[2*i+1];
	}

	// This introduces glitches. (But it seems to be filtering.)
	sf_biquad_process(&lowpass, BUFF_LEN_HALF, input, output);
 800528c:	f107 0310 	add.w	r3, r7, #16
 8005290:	3b08      	subs	r3, #8
 8005292:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8005296:	f102 0210 	add.w	r2, r2, #16
 800529a:	3a08      	subs	r2, #8
 800529c:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 80052a0:	f100 0008 	add.w	r0, r0, #8
 80052a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052a8:	f7fd ff9c 	bl	80031e4 <sf_biquad_process>

	// Convert output back into buffer_output[i] (ints).
	for(i = start/2; i < (end/2) ; i++)
 80052ac:	f107 0310 	add.w	r3, r7, #16
 80052b0:	3b0a      	subs	r3, #10
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80052bc:	f102 0208 	add.w	r2, r2, #8
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	e052      	b.n	800536a <generate_waveforms+0x17fa>
 80052c4:	2000496c 	.word	0x2000496c
 80052c8:	20004970 	.word	0x20004970
 80052cc:	20000054 	.word	0x20000054
 80052d0:	200005c8 	.word	0x200005c8
 80052d4:	200015c8 	.word	0x200015c8
 80052d8:	20004a64 	.word	0x20004a64
 80052dc:	200025c8 	.word	0x200025c8
 80052e0:	43c80000 	.word	0x43c80000
	{
		buffer_output[2*i] = (uint16_t) output[i].L;
 80052e4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80052e8:	f103 0308 	add.w	r3, r3, #8
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	005a      	lsls	r2, r3, #1
 80052f0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80052f4:	f103 0308 	add.w	r3, r3, #8
 80052f8:	6819      	ldr	r1, [r3, #0]
 80052fa:	f107 0310 	add.w	r3, r7, #16
 80052fe:	3b08      	subs	r3, #8
 8005300:	00c9      	lsls	r1, r1, #3
 8005302:	440b      	add	r3, r1
 8005304:	edd3 7a00 	vldr	s15, [r3]
 8005308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800530c:	edc7 7a00 	vstr	s15, [r7]
 8005310:	883b      	ldrh	r3, [r7, #0]
 8005312:	b299      	uxth	r1, r3
 8005314:	4b35      	ldr	r3, [pc, #212]	; (80053ec <generate_waveforms+0x187c>)
 8005316:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		buffer_output[2*i+1] = (uint16_t) output[i].R;
 800531a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800531e:	f103 0308 	add.w	r3, r3, #8
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800532c:	f103 0308 	add.w	r3, r3, #8
 8005330:	6819      	ldr	r1, [r3, #0]
 8005332:	f107 0310 	add.w	r3, r7, #16
 8005336:	3b08      	subs	r3, #8
 8005338:	00c9      	lsls	r1, r1, #3
 800533a:	440b      	add	r3, r1
 800533c:	3304      	adds	r3, #4
 800533e:	edd3 7a00 	vldr	s15, [r3]
 8005342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005346:	edc7 7a00 	vstr	s15, [r7]
 800534a:	883b      	ldrh	r3, [r7, #0]
 800534c:	b299      	uxth	r1, r3
 800534e:	4b27      	ldr	r3, [pc, #156]	; (80053ec <generate_waveforms+0x187c>)
 8005350:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	// This introduces glitches. (But it seems to be filtering.)
	sf_biquad_process(&lowpass, BUFF_LEN_HALF, input, output);

	// Convert output back into buffer_output[i] (ints).
	for(i = start/2; i < (end/2) ; i++)
 8005354:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8005358:	f103 0308 	add.w	r3, r3, #8
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3301      	adds	r3, #1
 8005360:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8005364:	f102 0208 	add.w	r2, r2, #8
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	f107 0310 	add.w	r3, r7, #16
 800536e:	3b0c      	subs	r3, #12
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	b29b      	uxth	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800537c:	f103 0308 	add.w	r3, r3, #8
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d8ae      	bhi.n	80052e4 <generate_waveforms+0x1774>
		buffer_output[2*i+1] = (uint16_t) output[i].R;
	}
	// --------------------------------------------


	theta_vco = fast_fmod(theta_vco, TWO_PI);
 8005386:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <generate_waveforms+0x1880>)
 8005388:	edd3 7a00 	vldr	s15, [r3]
 800538c:	eddf 0a19 	vldr	s1, [pc, #100]	; 80053f4 <generate_waveforms+0x1884>
 8005390:	eeb0 0a67 	vmov.f32	s0, s15
 8005394:	f000 fdb8 	bl	8005f08 <fast_fmod>
 8005398:	eef0 7a40 	vmov.f32	s15, s0
 800539c:	4b14      	ldr	r3, [pc, #80]	; (80053f0 <generate_waveforms+0x1880>)
 800539e:	edc3 7a00 	vstr	s15, [r3]
	theta_vco2 = fast_fmod(theta_vco2, TWO_PI);
 80053a2:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <generate_waveforms+0x1888>)
 80053a4:	edd3 7a00 	vldr	s15, [r3]
 80053a8:	eddf 0a12 	vldr	s1, [pc, #72]	; 80053f4 <generate_waveforms+0x1884>
 80053ac:	eeb0 0a67 	vmov.f32	s0, s15
 80053b0:	f000 fdaa 	bl	8005f08 <fast_fmod>
 80053b4:	eef0 7a40 	vmov.f32	s15, s0
 80053b8:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <generate_waveforms+0x1888>)
 80053ba:	edc3 7a00 	vstr	s15, [r3]
	theta_lfo = fast_fmod(theta_lfo, TWO_PI);
 80053be:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <generate_waveforms+0x188c>)
 80053c0:	edd3 7a00 	vldr	s15, [r3]
 80053c4:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80053f4 <generate_waveforms+0x1884>
 80053c8:	eeb0 0a67 	vmov.f32	s0, s15
 80053cc:	f000 fd9c 	bl	8005f08 <fast_fmod>
 80053d0:	eef0 7a40 	vmov.f32	s15, s0
 80053d4:	4b09      	ldr	r3, [pc, #36]	; (80053fc <generate_waveforms+0x188c>)
 80053d6:	edc3 7a00 	vstr	s15, [r3]
	// theta_adsr = fast_fmod(theta_adsr, TWO_PI);

	return;
 80053da:	bf00      	nop
}
 80053dc:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	ecbd 8b02 	vpop	{d8}
 80053e8:	bd90      	pop	{r4, r7, pc}
 80053ea:	bf00      	nop
 80053ec:	200005c8 	.word	0x200005c8
 80053f0:	2000496c 	.word	0x2000496c
 80053f4:	40c90fdb 	.word	0x40c90fdb
 80053f8:	20004970 	.word	0x20004970
 80053fc:	20004974 	.word	0x20004974

08005400 <adsr>:


void adsr(uint16_t start, uint16_t end)
{
 8005400:	b590      	push	{r4, r7, lr}
 8005402:	ed2d 8b02 	vpush	{d8}
 8005406:	b08f      	sub	sp, #60	; 0x3c
 8005408:	af02      	add	r7, sp, #8
 800540a:	4603      	mov	r3, r0
 800540c:	460a      	mov	r2, r1
 800540e:	80fb      	strh	r3, [r7, #6]
 8005410:	4613      	mov	r3, r2
 8005412:	80bb      	strh	r3, [r7, #4]
	uint16_t i = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	85fb      	strh	r3, [r7, #46]	; 0x2e
	// adsr_settings = adsr_03;
	adsr_settings.attack_len =  (ADCBuffer[4] & 0xfffc)*20;		// A5
 8005418:	4b95      	ldr	r3, [pc, #596]	; (8005670 <adsr+0x270>)
 800541a:	891b      	ldrh	r3, [r3, #8]
 800541c:	b29b      	uxth	r3, r3
 800541e:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8005422:	401a      	ands	r2, r3
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	461a      	mov	r2, r3
 800542e:	4b91      	ldr	r3, [pc, #580]	; (8005674 <adsr+0x274>)
 8005430:	609a      	str	r2, [r3, #8]
	adsr_settings.decay_len =   (ADCBuffer[9] & 0xfffc)*20;	// C1
 8005432:	4b8f      	ldr	r3, [pc, #572]	; (8005670 <adsr+0x270>)
 8005434:	8a5b      	ldrh	r3, [r3, #18]
 8005436:	b29b      	uxth	r3, r3
 8005438:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800543c:	401a      	ands	r2, r3
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	461a      	mov	r2, r3
 8005448:	4b8a      	ldr	r3, [pc, #552]	; (8005674 <adsr+0x274>)
 800544a:	60da      	str	r2, [r3, #12]
	adsr_settings.sustain_len = (ADCBuffer[5] & 0xfffc)*20;	// A7
 800544c:	4b88      	ldr	r3, [pc, #544]	; (8005670 <adsr+0x270>)
 800544e:	895b      	ldrh	r3, [r3, #10]
 8005450:	b29b      	uxth	r3, r3
 8005452:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8005456:	401a      	ands	r2, r3
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	461a      	mov	r2, r3
 8005462:	4b84      	ldr	r3, [pc, #528]	; (8005674 <adsr+0x274>)
 8005464:	611a      	str	r2, [r3, #16]
	adsr_settings.release_len = (ADCBuffer[6] & 0xfffc)*20;	// B0
 8005466:	4b82      	ldr	r3, [pc, #520]	; (8005670 <adsr+0x270>)
 8005468:	899b      	ldrh	r3, [r3, #12]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8005470:	401a      	ands	r2, r3
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	461a      	mov	r2, r3
 800547c:	4b7d      	ldr	r3, [pc, #500]	; (8005674 <adsr+0x274>)
 800547e:	615a      	str	r2, [r3, #20]
	adsr_settings.blank_len =   (ADCBuffer[8] & 0xfffc)*20;		// C0
 8005480:	4b7b      	ldr	r3, [pc, #492]	; (8005670 <adsr+0x270>)
 8005482:	8a1b      	ldrh	r3, [r3, #16]
 8005484:	b29b      	uxth	r3, r3
 8005486:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800548a:	401a      	ands	r2, r3
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	461a      	mov	r2, r3
 8005496:	4b77      	ldr	r3, [pc, #476]	; (8005674 <adsr+0x274>)
 8005498:	619a      	str	r2, [r3, #24]
	volatile uint32_t samples_cycle_adsr = adsr_settings.attack_len + adsr_settings.decay_len + adsr_settings.sustain_len + adsr_settings.release_len + adsr_settings.blank_len;
 800549a:	4b76      	ldr	r3, [pc, #472]	; (8005674 <adsr+0x274>)
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	4b75      	ldr	r3, [pc, #468]	; (8005674 <adsr+0x274>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	441a      	add	r2, r3
 80054a4:	4b73      	ldr	r3, [pc, #460]	; (8005674 <adsr+0x274>)
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	441a      	add	r2, r3
 80054aa:	4b72      	ldr	r3, [pc, #456]	; (8005674 <adsr+0x274>)
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	441a      	add	r2, r3
 80054b0:	4b70      	ldr	r3, [pc, #448]	; (8005674 <adsr+0x274>)
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	4413      	add	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]

	// C4
	uint16_t tempf = pseudo_log(ADCBuffer[11] & 0xfffc);
 80054b8:	4b6d      	ldr	r3, [pc, #436]	; (8005670 <adsr+0x270>)
 80054ba:	8adb      	ldrh	r3, [r3, #22]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f023 0303 	bic.w	r3, r3, #3
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fd67 	bl	8005f98 <pseudo_log>
 80054ca:	4603      	mov	r3, r0
 80054cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
	adsr_settings.sustain_amp = moving_avg(mov_avg4, &mov_avg_sum4, mov_avg_index4, MOV_AVG_LENGTH_BUFFER, tempf);
 80054ce:	4b6a      	ldr	r3, [pc, #424]	; (8005678 <adsr+0x278>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	2320      	movs	r3, #32
 80054d8:	4968      	ldr	r1, [pc, #416]	; (800567c <adsr+0x27c>)
 80054da:	4869      	ldr	r0, [pc, #420]	; (8005680 <adsr+0x280>)
 80054dc:	f000 fd38 	bl	8005f50 <moving_avg>
 80054e0:	ee07 0a90 	vmov	s15, r0
 80054e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e8:	4b62      	ldr	r3, [pc, #392]	; (8005674 <adsr+0x274>)
 80054ea:	edc3 7a01 	vstr	s15, [r3, #4]
	mov_avg_index4++;
 80054ee:	4b62      	ldr	r3, [pc, #392]	; (8005678 <adsr+0x278>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3301      	adds	r3, #1
 80054f4:	4a60      	ldr	r2, [pc, #384]	; (8005678 <adsr+0x278>)
 80054f6:	6013      	str	r3, [r2, #0]
	if (mov_avg_index4 >= MOV_AVG_LENGTH_BUFFER)
 80054f8:	4b5f      	ldr	r3, [pc, #380]	; (8005678 <adsr+0x278>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b1f      	cmp	r3, #31
 80054fe:	d902      	bls.n	8005506 <adsr+0x106>
	{
		mov_avg_index4 = 0;
 8005500:	4b5d      	ldr	r3, [pc, #372]	; (8005678 <adsr+0x278>)
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
	}

	adsr_settings.sustain_amp = adsr_settings.sustain_amp/8000.0f;
 8005506:	4b5b      	ldr	r3, [pc, #364]	; (8005674 <adsr+0x274>)
 8005508:	ed93 7a01 	vldr	s14, [r3, #4]
 800550c:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8005684 <adsr+0x284>
 8005510:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005514:	4b57      	ldr	r3, [pc, #348]	; (8005674 <adsr+0x274>)
 8005516:	edc3 7a01 	vstr	s15, [r3, #4]
	// adsr_settings.sustain_amp = pseudo_log(adsr_settings.sustain_amp, ???);

	// Calculate ADSR boundaries.
	uint32_t decay_start = adsr_settings.attack_len;
 800551a:	4b56      	ldr	r3, [pc, #344]	; (8005674 <adsr+0x274>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t sustain_start = decay_start + adsr_settings.decay_len;
 8005520:	4b54      	ldr	r3, [pc, #336]	; (8005674 <adsr+0x274>)
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	4413      	add	r3, r2
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t release_start = sustain_start + adsr_settings.sustain_len;
 800552a:	4b52      	ldr	r3, [pc, #328]	; (8005674 <adsr+0x274>)
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	4413      	add	r3, r2
 8005532:	623b      	str	r3, [r7, #32]
	uint32_t blank_start = release_start + adsr_settings.release_len;
 8005534:	4b4f      	ldr	r3, [pc, #316]	; (8005674 <adsr+0x274>)
 8005536:	695a      	ldr	r2, [r3, #20]
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	4413      	add	r3, r2
 800553c:	61fb      	str	r3, [r7, #28]
	uint32_t blank_end = blank_start + adsr_settings.blank_len;
 800553e:	4b4d      	ldr	r3, [pc, #308]	; (8005674 <adsr+0x274>)
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]


	volatile float32_t angle_attack = PI/adsr_settings.attack_len;
 8005548:	4b4a      	ldr	r3, [pc, #296]	; (8005674 <adsr+0x274>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	ee07 3a90 	vmov	s15, r3
 8005550:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005554:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8005688 <adsr+0x288>
 8005558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800555c:	edc7 7a04 	vstr	s15, [r7, #16]
	volatile float32_t angle_decay = PI/adsr_settings.decay_len;
 8005560:	4b44      	ldr	r3, [pc, #272]	; (8005674 <adsr+0x274>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	ee07 3a90 	vmov	s15, r3
 8005568:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800556c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8005688 <adsr+0x288>
 8005570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005574:	edc7 7a03 	vstr	s15, [r7, #12]
	volatile float32_t angle_release = PI/adsr_settings.release_len;
 8005578:	4b3e      	ldr	r3, [pc, #248]	; (8005674 <adsr+0x274>)
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	ee07 3a90 	vmov	s15, r3
 8005580:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005584:	eddf 6a40 	vldr	s13, [pc, #256]	; 8005688 <adsr+0x288>
 8005588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800558c:	edc7 7a02 	vstr	s15, [r7, #8]

	// Clear out adsr buffers if we're not using them.  Otherwise, they might still get used.
	if(adsr_settings.am_mod == OFF)
 8005590:	4b38      	ldr	r3, [pc, #224]	; (8005674 <adsr+0x274>)
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d110      	bne.n	80055bc <adsr+0x1bc>
	{
		for(i = start; i < end; i++)
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800559e:	e009      	b.n	80055b4 <adsr+0x1b4>
		{
			buffer_adsr_am[i] = 0.0f;
 80055a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055a2:	4a3a      	ldr	r2, [pc, #232]	; (800568c <adsr+0x28c>)
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
	volatile float32_t angle_release = PI/adsr_settings.release_len;

	// Clear out adsr buffers if we're not using them.  Otherwise, they might still get used.
	if(adsr_settings.am_mod == OFF)
	{
		for(i = start; i < end; i++)
 80055ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055b0:	3301      	adds	r3, #1
 80055b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80055b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80055b6:	88bb      	ldrh	r3, [r7, #4]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d3f1      	bcc.n	80055a0 <adsr+0x1a0>
		{
			buffer_adsr_am[i] = 0.0f;
		}
	}

	if(adsr_settings.fm_mod == OFF)
 80055bc:	4b2d      	ldr	r3, [pc, #180]	; (8005674 <adsr+0x274>)
 80055be:	885b      	ldrh	r3, [r3, #2]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d110      	bne.n	80055e8 <adsr+0x1e8>
	{
		for(i = start; i < end; i++)
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80055ca:	e009      	b.n	80055e0 <adsr+0x1e0>
		{
			buffer_adsr_fm[i] = 0.0f;
 80055cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055ce:	4a30      	ldr	r2, [pc, #192]	; (8005690 <adsr+0x290>)
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
		}
	}

	if(adsr_settings.fm_mod == OFF)
	{
		for(i = start; i < end; i++)
 80055da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055dc:	3301      	adds	r3, #1
 80055de:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80055e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80055e2:	88bb      	ldrh	r3, [r7, #4]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d3f1      	bcc.n	80055cc <adsr+0x1cc>
	}

	// Generic ADSR envelope.  Always generate this envelope, even if no AM mod of ADSR.
	// The waveform contains 5 segments (asdr + a blank space)
	// if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
	if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
 80055e8:	4b22      	ldr	r3, [pc, #136]	; (8005674 <adsr+0x274>)
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d005      	beq.n	80055fe <adsr+0x1fe>
 80055f2:	4b20      	ldr	r3, [pc, #128]	; (8005674 <adsr+0x274>)
 80055f4:	885b      	ldrh	r3, [r3, #2]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	f040 80f8 	bne.w	80057ee <adsr+0x3ee>
	{
		for(i = start; i < end; i++)
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005602:	e0ef      	b.n	80057e4 <adsr+0x3e4>
		{
			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			if( (sample_count_adsr+(i-start))%samples_cycle_adsr < decay_start)
 8005604:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	461a      	mov	r2, r3
 800560c:	4b21      	ldr	r3, [pc, #132]	; (8005694 <adsr+0x294>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4413      	add	r3, r2
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	fbb3 f1f2 	udiv	r1, r3, r2
 8005618:	fb02 f201 	mul.w	r2, r2, r1
 800561c:	1a9a      	subs	r2, r3, r2
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	429a      	cmp	r2, r3
 8005622:	d239      	bcs.n	8005698 <adsr+0x298>
			{
				// Attack
				// Sine, FM --> Try 1.0
				// Square, FM --> Use 0.4
				// Triangle, FM ---> Try 2.0
				buffer_adsr_am[i] = 1.0f + 1.0f * gen_sawtooth_angle( (sample_count_adsr+(i-start)) % samples_cycle_adsr * angle_attack);
 8005624:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8005626:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005628:	88fb      	ldrh	r3, [r7, #6]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	461a      	mov	r2, r3
 800562e:	4b19      	ldr	r3, [pc, #100]	; (8005694 <adsr+0x294>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4413      	add	r3, r2
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	fbb3 f1f2 	udiv	r1, r3, r2
 800563a:	fb02 f201 	mul.w	r2, r2, r1
 800563e:	1a9b      	subs	r3, r3, r2
 8005640:	ee07 3a90 	vmov	s15, r3
 8005644:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005648:	edd7 7a04 	vldr	s15, [r7, #16]
 800564c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005650:	eeb0 0a67 	vmov.f32	s0, s15
 8005654:	f000 faa6 	bl	8005ba4 <gen_sawtooth_angle>
 8005658:	eeb0 7a40 	vmov.f32	s14, s0
 800565c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005664:	4a09      	ldr	r2, [pc, #36]	; (800568c <adsr+0x28c>)
 8005666:	00a3      	lsls	r3, r4, #2
 8005668:	4413      	add	r3, r2
 800566a:	edc3 7a00 	vstr	s15, [r3]
 800566e:	e0b6      	b.n	80057de <adsr+0x3de>
 8005670:	20004a34 	.word	0x20004a34
 8005674:	20004a64 	.word	0x20004a64
 8005678:	200047d8 	.word	0x200047d8
 800567c:	20004a5c 	.word	0x20004a5c
 8005680:	20004758 	.word	0x20004758
 8005684:	45fa0000 	.word	0x45fa0000
 8005688:	40490fdb 	.word	0x40490fdb
 800568c:	200025c8 	.word	0x200025c8
 8005690:	200035c8 	.word	0x200035c8
 8005694:	200045c8 	.word	0x200045c8
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < sustain_start)
 8005698:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	4b9e      	ldr	r3, [pc, #632]	; (800591c <adsr+0x51c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4413      	add	r3, r2
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80056ac:	fb02 f201 	mul.w	r2, r2, r1
 80056b0:	1a9a      	subs	r2, r3, r2
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d22a      	bcs.n	800570e <adsr+0x30e>
			{
				// Decay
				buffer_adsr_am[i] = 1.0f * gen_rampdown_angle2( (sample_count_adsr+(i-start-decay_start)) % samples_cycle_adsr * angle_decay, adsr_settings.sustain_amp, 1.0);
 80056b8:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 80056ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80056bc:	88fb      	ldrh	r3, [r7, #6]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	461a      	mov	r2, r3
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	1ad2      	subs	r2, r2, r3
 80056c6:	4b95      	ldr	r3, [pc, #596]	; (800591c <adsr+0x51c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4413      	add	r3, r2
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80056d2:	fb02 f201 	mul.w	r2, r2, r1
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	ee07 3a90 	vmov	s15, r3
 80056dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80056e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e8:	4b8d      	ldr	r3, [pc, #564]	; (8005920 <adsr+0x520>)
 80056ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80056ee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80056f2:	eef0 0a47 	vmov.f32	s1, s14
 80056f6:	eeb0 0a67 	vmov.f32	s0, s15
 80056fa:	f000 faf1 	bl	8005ce0 <gen_rampdown_angle2>
 80056fe:	eef0 7a40 	vmov.f32	s15, s0
 8005702:	4a88      	ldr	r2, [pc, #544]	; (8005924 <adsr+0x524>)
 8005704:	00a3      	lsls	r3, r4, #2
 8005706:	4413      	add	r3, r2
 8005708:	edc3 7a00 	vstr	s15, [r3]
 800570c:	e067      	b.n	80057de <adsr+0x3de>
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < release_start)
 800570e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005710:	88fb      	ldrh	r3, [r7, #6]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	461a      	mov	r2, r3
 8005716:	4b81      	ldr	r3, [pc, #516]	; (800591c <adsr+0x51c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4413      	add	r3, r2
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005722:	fb02 f201 	mul.w	r2, r2, r1
 8005726:	1a9a      	subs	r2, r3, r2
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	429a      	cmp	r2, r3
 800572c:	d207      	bcs.n	800573e <adsr+0x33e>
			{
				// Sustain
				buffer_adsr_am[i] = adsr_settings.sustain_amp;
 800572e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005730:	4a7b      	ldr	r2, [pc, #492]	; (8005920 <adsr+0x520>)
 8005732:	6852      	ldr	r2, [r2, #4]
 8005734:	497b      	ldr	r1, [pc, #492]	; (8005924 <adsr+0x524>)
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	e04f      	b.n	80057de <adsr+0x3de>
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_start)
 800573e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005740:	88fb      	ldrh	r3, [r7, #6]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	461a      	mov	r2, r3
 8005746:	4b75      	ldr	r3, [pc, #468]	; (800591c <adsr+0x51c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4413      	add	r3, r2
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005752:	fb02 f201 	mul.w	r2, r2, r1
 8005756:	1a9a      	subs	r2, r3, r2
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	429a      	cmp	r2, r3
 800575c:	d228      	bcs.n	80057b0 <adsr+0x3b0>
			{
				// Release
				buffer_adsr_am[i] = adsr_settings.sustain_amp * gen_rampdown_angle( (sample_count_adsr+(i-start-release_start)) % samples_cycle_adsr * angle_release);
 800575e:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8005760:	4b6f      	ldr	r3, [pc, #444]	; (8005920 <adsr+0x520>)
 8005762:	ed93 8a01 	vldr	s16, [r3, #4]
 8005766:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	461a      	mov	r2, r3
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	1ad2      	subs	r2, r2, r3
 8005772:	4b6a      	ldr	r3, [pc, #424]	; (800591c <adsr+0x51c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4413      	add	r3, r2
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	fbb3 f1f2 	udiv	r1, r3, r2
 800577e:	fb02 f201 	mul.w	r2, r2, r1
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	ee07 3a90 	vmov	s15, r3
 8005788:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800578c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005794:	eeb0 0a67 	vmov.f32	s0, s15
 8005798:	f000 fa72 	bl	8005c80 <gen_rampdown_angle>
 800579c:	eef0 7a40 	vmov.f32	s15, s0
 80057a0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80057a4:	4a5f      	ldr	r2, [pc, #380]	; (8005924 <adsr+0x524>)
 80057a6:	00a3      	lsls	r3, r4, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	edc3 7a00 	vstr	s15, [r3]
 80057ae:	e016      	b.n	80057de <adsr+0x3de>

			}
			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_end)
 80057b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	4b58      	ldr	r3, [pc, #352]	; (800591c <adsr+0x51c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4413      	add	r3, r2
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80057c4:	fb02 f201 	mul.w	r2, r2, r1
 80057c8:	1a9a      	subs	r2, r3, r2
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d206      	bcs.n	80057de <adsr+0x3de>
			{
				// Blank
				buffer_adsr_am[i] = 0;
 80057d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057d2:	4a54      	ldr	r2, [pc, #336]	; (8005924 <adsr+0x524>)
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
	// Generic ADSR envelope.  Always generate this envelope, even if no AM mod of ADSR.
	// The waveform contains 5 segments (asdr + a blank space)
	// if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
	if(adsr_settings.am_mod == ON || adsr_settings.fm_mod == ON)
	{
		for(i = start; i < end; i++)
 80057de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057e0:	3301      	adds	r3, #1
 80057e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80057e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80057e6:	88bb      	ldrh	r3, [r7, #4]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	f4ff af0b 	bcc.w	8005604 <adsr+0x204>

	/*
	 * ADSR frequency envelope.
	 * Uses the ADSR amplitude envelope and integrates each of the shapes.
	 */
	if(adsr_settings.fm_mod == ON)
 80057ee:	4b4c      	ldr	r3, [pc, #304]	; (8005920 <adsr+0x520>)
 80057f0:	885b      	ldrh	r3, [r3, #2]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	f040 818c 	bne.w	8005b12 <adsr+0x712>
	{
		for(i = start; i < end; i++)
 80057fa:	88fb      	ldrh	r3, [r7, #6]
 80057fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80057fe:	e183      	b.n	8005b08 <adsr+0x708>
		{
			// First part tells us sample number into the adsr cycle: (sample_count+(i-start))%sample_cycle_adsr
			if( (sample_count_adsr+(i-start))%samples_cycle_adsr < decay_start)
 8005800:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	461a      	mov	r2, r3
 8005808:	4b44      	ldr	r3, [pc, #272]	; (800591c <adsr+0x51c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4413      	add	r3, r2
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	fbb3 f1f2 	udiv	r1, r3, r2
 8005814:	fb02 f201 	mul.w	r2, r2, r1
 8005818:	1a9a      	subs	r2, r3, r2
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	429a      	cmp	r2, r3
 800581e:	d236      	bcs.n	800588e <adsr+0x48e>
			{
				// Attack
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8005820:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005822:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005824:	493f      	ldr	r1, [pc, #252]	; (8005924 <adsr+0x524>)
 8005826:	0092      	lsls	r2, r2, #2
 8005828:	440a      	add	r2, r1
 800582a:	6812      	ldr	r2, [r2, #0]
 800582c:	493e      	ldr	r1, [pc, #248]	; (8005928 <adsr+0x528>)
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	601a      	str	r2, [r3, #0]
				if(i > 0)
 8005834:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005836:	2b00      	cmp	r3, #0
 8005838:	d015      	beq.n	8005866 <adsr+0x466>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 800583a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800583c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800583e:	493a      	ldr	r1, [pc, #232]	; (8005928 <adsr+0x528>)
 8005840:	0092      	lsls	r2, r2, #2
 8005842:	440a      	add	r2, r1
 8005844:	ed92 7a00 	vldr	s14, [r2]
 8005848:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800584a:	3a01      	subs	r2, #1
 800584c:	4936      	ldr	r1, [pc, #216]	; (8005928 <adsr+0x528>)
 800584e:	0092      	lsls	r2, r2, #2
 8005850:	440a      	add	r2, r1
 8005852:	edd2 7a00 	vldr	s15, [r2]
 8005856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800585a:	4a33      	ldr	r2, [pc, #204]	; (8005928 <adsr+0x528>)
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	edc3 7a00 	vstr	s15, [r3]
 8005864:	e14d      	b.n	8005b02 <adsr+0x702>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 8005866:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005868:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800586a:	492f      	ldr	r1, [pc, #188]	; (8005928 <adsr+0x528>)
 800586c:	0092      	lsls	r2, r2, #2
 800586e:	440a      	add	r2, r1
 8005870:	ed92 7a00 	vldr	s14, [r2]
 8005874:	4a2c      	ldr	r2, [pc, #176]	; (8005928 <adsr+0x528>)
 8005876:	f602 72fc 	addw	r2, r2, #4092	; 0xffc
 800587a:	edd2 7a00 	vldr	s15, [r2]
 800587e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005882:	4a29      	ldr	r2, [pc, #164]	; (8005928 <adsr+0x528>)
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	edc3 7a00 	vstr	s15, [r3]
 800588c:	e139      	b.n	8005b02 <adsr+0x702>
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < sustain_start)
 800588e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	461a      	mov	r2, r3
 8005896:	4b21      	ldr	r3, [pc, #132]	; (800591c <adsr+0x51c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4413      	add	r3, r2
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	fbb3 f1f2 	udiv	r1, r3, r2
 80058a2:	fb02 f201 	mul.w	r2, r2, r1
 80058a6:	1a9a      	subs	r2, r3, r2
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d23e      	bcs.n	800592c <adsr+0x52c>
			{
				// Decay
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 80058ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058b2:	491c      	ldr	r1, [pc, #112]	; (8005924 <adsr+0x524>)
 80058b4:	0092      	lsls	r2, r2, #2
 80058b6:	440a      	add	r2, r1
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	491b      	ldr	r1, [pc, #108]	; (8005928 <adsr+0x528>)
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	440b      	add	r3, r1
 80058c0:	601a      	str	r2, [r3, #0]
				if(i > 0)
 80058c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d015      	beq.n	80058f4 <adsr+0x4f4>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 80058c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058cc:	4916      	ldr	r1, [pc, #88]	; (8005928 <adsr+0x528>)
 80058ce:	0092      	lsls	r2, r2, #2
 80058d0:	440a      	add	r2, r1
 80058d2:	ed92 7a00 	vldr	s14, [r2]
 80058d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058d8:	3a01      	subs	r2, #1
 80058da:	4913      	ldr	r1, [pc, #76]	; (8005928 <adsr+0x528>)
 80058dc:	0092      	lsls	r2, r2, #2
 80058de:	440a      	add	r2, r1
 80058e0:	edd2 7a00 	vldr	s15, [r2]
 80058e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058e8:	4a0f      	ldr	r2, [pc, #60]	; (8005928 <adsr+0x528>)
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	edc3 7a00 	vstr	s15, [r3]
 80058f2:	e106      	b.n	8005b02 <adsr+0x702>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 80058f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058f8:	490b      	ldr	r1, [pc, #44]	; (8005928 <adsr+0x528>)
 80058fa:	0092      	lsls	r2, r2, #2
 80058fc:	440a      	add	r2, r1
 80058fe:	ed92 7a00 	vldr	s14, [r2]
 8005902:	4a09      	ldr	r2, [pc, #36]	; (8005928 <adsr+0x528>)
 8005904:	f602 72fc 	addw	r2, r2, #4092	; 0xffc
 8005908:	edd2 7a00 	vldr	s15, [r2]
 800590c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005910:	4a05      	ldr	r2, [pc, #20]	; (8005928 <adsr+0x528>)
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	edc3 7a00 	vstr	s15, [r3]
 800591a:	e0f2      	b.n	8005b02 <adsr+0x702>
 800591c:	200045c8 	.word	0x200045c8
 8005920:	20004a64 	.word	0x20004a64
 8005924:	200025c8 	.word	0x200025c8
 8005928:	200035c8 	.word	0x200035c8
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < release_start)
 800592c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	461a      	mov	r2, r3
 8005934:	4b83      	ldr	r3, [pc, #524]	; (8005b44 <adsr+0x744>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4413      	add	r3, r2
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005940:	fb02 f201 	mul.w	r2, r2, r1
 8005944:	1a9a      	subs	r2, r3, r2
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	429a      	cmp	r2, r3
 800594a:	d27c      	bcs.n	8005a46 <adsr+0x646>
			{
				// Sustain
				// DO this only once--get last delta from previous section.
				if( (sample_count_adsr+(i-start))%samples_cycle_adsr == sustain_start)
 800594c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	461a      	mov	r2, r3
 8005954:	4b7b      	ldr	r3, [pc, #492]	; (8005b44 <adsr+0x744>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4413      	add	r3, r2
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005960:	fb02 f201 	mul.w	r2, r2, r1
 8005964:	1a9a      	subs	r2, r3, r2
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	429a      	cmp	r2, r3
 800596a:	d145      	bne.n	80059f8 <adsr+0x5f8>
				{
					if(i > 1)
 800596c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800596e:	2b01      	cmp	r3, #1
 8005970:	d913      	bls.n	800599a <adsr+0x59a>
					{
						delta = buffer_adsr_fm[i-1] - buffer_adsr_fm[i-2];
 8005972:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005974:	3b01      	subs	r3, #1
 8005976:	4a74      	ldr	r2, [pc, #464]	; (8005b48 <adsr+0x748>)
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	ed93 7a00 	vldr	s14, [r3]
 8005980:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005982:	3b02      	subs	r3, #2
 8005984:	4a70      	ldr	r2, [pc, #448]	; (8005b48 <adsr+0x748>)
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	edd3 7a00 	vldr	s15, [r3]
 800598e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005992:	4b6e      	ldr	r3, [pc, #440]	; (8005b4c <adsr+0x74c>)
 8005994:	edc3 7a00 	vstr	s15, [r3]
 8005998:	e026      	b.n	80059e8 <adsr+0x5e8>
					}
					else if(i == 0)
 800599a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10f      	bne.n	80059c0 <adsr+0x5c0>
					{
						delta = buffer_adsr_fm[LENGTH_BUFFER-1] - buffer_adsr_fm[LENGTH_BUFFER-2];
 80059a0:	4b69      	ldr	r3, [pc, #420]	; (8005b48 <adsr+0x748>)
 80059a2:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 80059a6:	ed93 7a00 	vldr	s14, [r3]
 80059aa:	4b67      	ldr	r3, [pc, #412]	; (8005b48 <adsr+0x748>)
 80059ac:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 80059b0:	edd3 7a00 	vldr	s15, [r3]
 80059b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059b8:	4b64      	ldr	r3, [pc, #400]	; (8005b4c <adsr+0x74c>)
 80059ba:	edc3 7a00 	vstr	s15, [r3]
 80059be:	e013      	b.n	80059e8 <adsr+0x5e8>
					}
					else if(i == 1)
 80059c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d110      	bne.n	80059e8 <adsr+0x5e8>
					{
						delta = buffer_adsr_fm[i-1] - buffer_adsr_fm[LENGTH_BUFFER-1];
 80059c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059c8:	3b01      	subs	r3, #1
 80059ca:	4a5f      	ldr	r2, [pc, #380]	; (8005b48 <adsr+0x748>)
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	ed93 7a00 	vldr	s14, [r3]
 80059d4:	4b5c      	ldr	r3, [pc, #368]	; (8005b48 <adsr+0x748>)
 80059d6:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 80059da:	edd3 7a00 	vldr	s15, [r3]
 80059de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059e2:	4b5a      	ldr	r3, [pc, #360]	; (8005b4c <adsr+0x74c>)
 80059e4:	edc3 7a00 	vstr	s15, [r3]
					}
					buffer_adsr_fm[i] = 0.0f;
 80059e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059ea:	4a57      	ldr	r2, [pc, #348]	; (8005b48 <adsr+0x748>)
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	e084      	b.n	8005b02 <adsr+0x702>
				}
				else
				{
					if(i > 0)
 80059f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d012      	beq.n	8005a24 <adsr+0x624>
					{
						buffer_adsr_fm[i] = buffer_adsr_fm[i-1] + delta;
 80059fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a02:	3a01      	subs	r2, #1
 8005a04:	4950      	ldr	r1, [pc, #320]	; (8005b48 <adsr+0x748>)
 8005a06:	0092      	lsls	r2, r2, #2
 8005a08:	440a      	add	r2, r1
 8005a0a:	ed92 7a00 	vldr	s14, [r2]
 8005a0e:	4a4f      	ldr	r2, [pc, #316]	; (8005b4c <adsr+0x74c>)
 8005a10:	edd2 7a00 	vldr	s15, [r2]
 8005a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a18:	4a4b      	ldr	r2, [pc, #300]	; (8005b48 <adsr+0x748>)
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	edc3 7a00 	vstr	s15, [r3]
 8005a22:	e06e      	b.n	8005b02 <adsr+0x702>
					}
					else
					{
						buffer_adsr_fm[i] = buffer_adsr_fm[LENGTH_BUFFER-1] + delta;
 8005a24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a26:	4a48      	ldr	r2, [pc, #288]	; (8005b48 <adsr+0x748>)
 8005a28:	f602 72fc 	addw	r2, r2, #4092	; 0xffc
 8005a2c:	ed92 7a00 	vldr	s14, [r2]
 8005a30:	4a46      	ldr	r2, [pc, #280]	; (8005b4c <adsr+0x74c>)
 8005a32:	edd2 7a00 	vldr	s15, [r2]
 8005a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a3a:	4a43      	ldr	r2, [pc, #268]	; (8005b48 <adsr+0x748>)
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	edc3 7a00 	vstr	s15, [r3]
 8005a44:	e05d      	b.n	8005b02 <adsr+0x702>
					}
				}
			}

			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_start)
 8005a46:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a48:	88fb      	ldrh	r3, [r7, #6]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4b3d      	ldr	r3, [pc, #244]	; (8005b44 <adsr+0x744>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4413      	add	r3, r2
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a5a:	fb02 f201 	mul.w	r2, r2, r1
 8005a5e:	1a9a      	subs	r2, r3, r2
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d236      	bcs.n	8005ad4 <adsr+0x6d4>
			{
				// Release
				buffer_adsr_fm[i] = buffer_adsr_am[i];
 8005a66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a6a:	4939      	ldr	r1, [pc, #228]	; (8005b50 <adsr+0x750>)
 8005a6c:	0092      	lsls	r2, r2, #2
 8005a6e:	440a      	add	r2, r1
 8005a70:	6812      	ldr	r2, [r2, #0]
 8005a72:	4935      	ldr	r1, [pc, #212]	; (8005b48 <adsr+0x748>)
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	601a      	str	r2, [r3, #0]
				if(i > 0)
 8005a7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d015      	beq.n	8005aac <adsr+0x6ac>
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[i-1];
 8005a80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a84:	4930      	ldr	r1, [pc, #192]	; (8005b48 <adsr+0x748>)
 8005a86:	0092      	lsls	r2, r2, #2
 8005a88:	440a      	add	r2, r1
 8005a8a:	ed92 7a00 	vldr	s14, [r2]
 8005a8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a90:	3a01      	subs	r2, #1
 8005a92:	492d      	ldr	r1, [pc, #180]	; (8005b48 <adsr+0x748>)
 8005a94:	0092      	lsls	r2, r2, #2
 8005a96:	440a      	add	r2, r1
 8005a98:	edd2 7a00 	vldr	s15, [r2]
 8005a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aa0:	4a29      	ldr	r2, [pc, #164]	; (8005b48 <adsr+0x748>)
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	edc3 7a00 	vstr	s15, [r3]
 8005aaa:	e02a      	b.n	8005b02 <adsr+0x702>
				}
				else
				{
					buffer_adsr_fm[i] = buffer_adsr_fm[i] + buffer_adsr_fm[LENGTH_BUFFER-1];
 8005aac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005aae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005ab0:	4925      	ldr	r1, [pc, #148]	; (8005b48 <adsr+0x748>)
 8005ab2:	0092      	lsls	r2, r2, #2
 8005ab4:	440a      	add	r2, r1
 8005ab6:	ed92 7a00 	vldr	s14, [r2]
 8005aba:	4a23      	ldr	r2, [pc, #140]	; (8005b48 <adsr+0x748>)
 8005abc:	f602 72fc 	addw	r2, r2, #4092	; 0xffc
 8005ac0:	edd2 7a00 	vldr	s15, [r2]
 8005ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ac8:	4a1f      	ldr	r2, [pc, #124]	; (8005b48 <adsr+0x748>)
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	edc3 7a00 	vstr	s15, [r3]
 8005ad2:	e016      	b.n	8005b02 <adsr+0x702>
				}
			}
			else if( (sample_count_adsr+(i-start))%samples_cycle_adsr < blank_end)
 8005ad4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	4b19      	ldr	r3, [pc, #100]	; (8005b44 <adsr+0x744>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ae8:	fb02 f201 	mul.w	r2, r2, r1
 8005aec:	1a9a      	subs	r2, r3, r2
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d206      	bcs.n	8005b02 <adsr+0x702>
			{
				// Blank
				buffer_adsr_fm[i] = 0.0f;
 8005af4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005af6:	4a14      	ldr	r2, [pc, #80]	; (8005b48 <adsr+0x748>)
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
	 * ADSR frequency envelope.
	 * Uses the ADSR amplitude envelope and integrates each of the shapes.
	 */
	if(adsr_settings.fm_mod == ON)
	{
		for(i = start; i < end; i++)
 8005b02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b04:	3301      	adds	r3, #1
 8005b06:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005b08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005b0a:	88bb      	ldrh	r3, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	f4ff ae77 	bcc.w	8005800 <adsr+0x400>
				// Blank
				buffer_adsr_fm[i] = 0.0f;
			}
		}
	}
	sample_count_adsr = sample_count_adsr + (i - start);
 8005b12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005b14:	88fb      	ldrh	r3, [r7, #6]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <adsr+0x744>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4413      	add	r3, r2
 8005b20:	4a08      	ldr	r2, [pc, #32]	; (8005b44 <adsr+0x744>)
 8005b22:	6013      	str	r3, [r2, #0]
	sample_count_adsr = sample_count_adsr % samples_cycle_adsr;
 8005b24:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <adsr+0x744>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b2e:	fb02 f201 	mul.w	r2, r2, r1
 8005b32:	1a9b      	subs	r3, r3, r2
 8005b34:	4a03      	ldr	r2, [pc, #12]	; (8005b44 <adsr+0x744>)
 8005b36:	6013      	str	r3, [r2, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	3734      	adds	r7, #52	; 0x34
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	ecbd 8b02 	vpop	{d8}
 8005b42:	bd90      	pop	{r4, r7, pc}
 8005b44:	200045c8 	.word	0x200045c8
 8005b48:	200035c8 	.word	0x200035c8
 8005b4c:	20004968 	.word	0x20004968
 8005b50:	200025c8 	.word	0x200025c8

08005b54 <gen_square_angle>:

/* Parameters:
 * 	angle: normalized angle between 0 and 2*PI.  Similar to sine function.
 */
float32_t gen_square_angle(float32_t angle)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	ed87 0a01 	vstr	s0, [r7, #4]
	angle = fast_fmod(angle, 2*PI);
 8005b5e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8005b98 <gen_square_angle+0x44>
 8005b62:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b66:	f000 f9cf 	bl	8005f08 <fast_fmod>
 8005b6a:	ed87 0a01 	vstr	s0, [r7, #4]
	if (angle < PI)
 8005b6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b72:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005b9c <gen_square_angle+0x48>
 8005b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b7e:	d501      	bpl.n	8005b84 <gen_square_angle+0x30>
	{
		return -1.0f;
 8005b80:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <gen_square_angle+0x4c>)
 8005b82:	e001      	b.n	8005b88 <gen_square_angle+0x34>
	}
	return 1.0f;
 8005b84:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005b88:	ee07 3a90 	vmov	s15, r3
}
 8005b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	40c90fdb 	.word	0x40c90fdb
 8005b9c:	40490fdb 	.word	0x40490fdb
 8005ba0:	bf800000 	.word	0xbf800000

08005ba4 <gen_sawtooth_angle>:


float32_t gen_sawtooth_angle(float32_t angle)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0f;
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]
	float32_t val = 0.0f;
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8005bba:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8005bf8 <gen_sawtooth_angle+0x54>
 8005bbe:	ed97 0a01 	vldr	s0, [r7, #4]
 8005bc2:	f000 f9a1 	bl	8005f08 <fast_fmod>
 8005bc6:	ed87 0a01 	vstr	s0, [r7, #4]

	// y = mx + b
	m = ONE_DIV_PI;
 8005bca:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <gen_sawtooth_angle+0x58>)
 8005bcc:	60fb      	str	r3, [r7, #12]
	val = -1.0f + angle * m;
 8005bce:	ed97 7a01 	vldr	s14, [r7, #4]
 8005bd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005be2:	edc7 7a02 	vstr	s15, [r7, #8]
	return val;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	ee07 3a90 	vmov	s15, r3
}
 8005bec:	eeb0 0a67 	vmov.f32	s0, s15
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40c90fdb 	.word	0x40c90fdb
 8005bfc:	3ea2f983 	.word	0x3ea2f983

08005c00 <gen_sawtooth_integral_angle>:


float32_t gen_sawtooth_integral_angle(float32_t angle)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0f;
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0f;
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8005c16:	eddf 0a18 	vldr	s1, [pc, #96]	; 8005c78 <gen_sawtooth_integral_angle+0x78>
 8005c1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c1e:	f000 f973 	bl	8005f08 <fast_fmod>
 8005c22:	ed87 0a01 	vstr	s0, [r7, #4]
	m = ONE_DIV_2_PI;
 8005c26:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <gen_sawtooth_integral_angle+0x7c>)
 8005c28:	60bb      	str	r3, [r7, #8]
	val = m*angle;			// Generate linear value between 0 and 1
 8005c2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8005c2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c36:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*val;			// Square it.  Produces parabola y: 0 to 1
 8005c3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8005c3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c46:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*2.0f;			// Double it.
 8005c4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c52:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val - 1.0f;			// Shift it down
 8005c56:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c62:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	ee07 3a90 	vmov	s15, r3
}
 8005c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40c90fdb 	.word	0x40c90fdb
 8005c7c:	3e22f983 	.word	0x3e22f983

08005c80 <gen_rampdown_angle>:
/*
 * Generate ramp value from +1 down to 0 based on angle.
 * Parameter angle is a radian.
 */
float32_t gen_rampdown_angle(float32_t angle)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t m = 0.0f;
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]
	float32_t val = 0.0f;
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, TWO_PI);
 8005c96:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8005cd4 <gen_rampdown_angle+0x54>
 8005c9a:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c9e:	f000 f933 	bl	8005f08 <fast_fmod>
 8005ca2:	ed87 0a01 	vstr	s0, [r7, #4]

	// y = mx + b
	m = -ONE_DIV_PI;
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <gen_rampdown_angle+0x58>)
 8005ca8:	60fb      	str	r3, [r7, #12]
	val = 1.0f + angle*m;
 8005caa:	ed97 7a01 	vldr	s14, [r7, #4]
 8005cae:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cbe:	edc7 7a02 	vstr	s15, [r7, #8]
	return val;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	ee07 3a90 	vmov	s15, r3
}
 8005cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	40c90fdb 	.word	0x40c90fdb
 8005cd8:	bea2f983 	.word	0xbea2f983
 8005cdc:	00000000 	.word	0x00000000

08005ce0 <gen_rampdown_angle2>:


float32_t gen_rampdown_angle2( float32_t angle, float32_t min, float32_t max)
{
 8005ce0:	b590      	push	{r4, r7, lr}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	ed87 0a03 	vstr	s0, [r7, #12]
 8005cea:	edc7 0a02 	vstr	s1, [r7, #8]
 8005cee:	ed87 1a01 	vstr	s2, [r7, #4]
	float32_t m = 0.0f;
 8005cf2:	f04f 0300 	mov.w	r3, #0
 8005cf6:	617b      	str	r3, [r7, #20]
	float32_t val = 0.0f;
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	613b      	str	r3, [r7, #16]

	angle = fast_fmod(angle, TWO_PI);
 8005cfe:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8005d70 <gen_rampdown_angle2+0x90>
 8005d02:	ed97 0a03 	vldr	s0, [r7, #12]
 8005d06:	f000 f8ff 	bl	8005f08 <fast_fmod>
 8005d0a:	ed87 0a03 	vstr	s0, [r7, #12]

	// y = mx + b
	m = (min - max) * ONE_DIV_PI;
 8005d0e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d1a:	ee17 0a90 	vmov	r0, s15
 8005d1e:	f7fa fbb7 	bl	8000490 <__aeabi_f2d>
 8005d22:	a311      	add	r3, pc, #68	; (adr r3, 8005d68 <gen_rampdown_angle2+0x88>)
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f7fa fc06 	bl	8000538 <__aeabi_dmul>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	4618      	mov	r0, r3
 8005d32:	4621      	mov	r1, r4
 8005d34:	f7fa fed8 	bl	8000ae8 <__aeabi_d2f>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	617b      	str	r3, [r7, #20]
	val = 1.0f + angle*m;
 8005d3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005d40:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d50:	edc7 7a04 	vstr	s15, [r7, #16]


	return val;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	ee07 3a90 	vmov	s15, r3
}
 8005d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd90      	pop	{r4, r7, pc}
 8005d64:	f3af 8000 	nop.w
 8005d68:	6dc8bdc4 	.word	0x6dc8bdc4
 8005d6c:	3fd45f30 	.word	0x3fd45f30
 8005d70:	40c90fdb 	.word	0x40c90fdb

08005d74 <gen_triangle_angle>:


float32_t gen_triangle_angle(float32_t angle)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0f;
 8005d7e:	f04f 0300 	mov.w	r3, #0
 8005d82:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0f;
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	60bb      	str	r3, [r7, #8]

	// Increase from a negative value to its opposite value. Eg. -1 to 1 over 1/2 the wave's period
	// Then decrease from 1 to -1 over 1/2 the wave's period

	angle = fast_fmod(angle, 2*PI);
 8005d8a:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8005df4 <gen_triangle_angle+0x80>
 8005d8e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005d92:	f000 f8b9 	bl	8005f08 <fast_fmod>
 8005d96:	ed87 0a01 	vstr	s0, [r7, #4]
	m = TWO_DIV_PI;
 8005d9a:	4b17      	ldr	r3, [pc, #92]	; (8005df8 <gen_triangle_angle+0x84>)
 8005d9c:	60bb      	str	r3, [r7, #8]
	if (angle < PI)
 8005d9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005da2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005dfc <gen_triangle_angle+0x88>
 8005da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dae:	d50d      	bpl.n	8005dcc <gen_triangle_angle+0x58>
	{
		val = -1.0f + m*angle;
 8005db0:	ed97 7a02 	vldr	s14, [r7, #8]
 8005db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dc4:	edc7 7a03 	vstr	s15, [r7, #12]
		return val;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	e00c      	b.n	8005de6 <gen_triangle_angle+0x72>
	}
	// Make sure difference can be negative.
	// return amp + (m * (int32_t)(samples_half_cycle - current_sample));
	val =  3.0f - m*angle;
 8005dcc:	ed97 7a02 	vldr	s14, [r7, #8]
 8005dd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005de0:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	ee07 3a90 	vmov	s15, r3
}
 8005dea:	eeb0 0a67 	vmov.f32	s0, s15
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40c90fdb 	.word	0x40c90fdb
 8005df8:	3f22f983 	.word	0x3f22f983
 8005dfc:	40490fdb 	.word	0x40490fdb

08005e00 <gen_triangle_integral_angle>:

// Integral of triangle wave is convex parabola going up and then concave parabola going down.
float32_t gen_triangle_integral_angle(float32_t angle)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t val = 0.0f;
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
	float32_t m = 0.0f;
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	60bb      	str	r3, [r7, #8]

	angle = fast_fmod(angle, 2*PI);		// TODO: pull this out into generate_waveforms().
 8005e16:	eddf 0a39 	vldr	s1, [pc, #228]	; 8005efc <gen_triangle_integral_angle+0xfc>
 8005e1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e1e:	f000 f873 	bl	8005f08 <fast_fmod>
 8005e22:	ed87 0a01 	vstr	s0, [r7, #4]
	m = ONE_DIV_PI;
 8005e26:	4b36      	ldr	r3, [pc, #216]	; (8005f00 <gen_triangle_integral_angle+0x100>)
 8005e28:	60bb      	str	r3, [r7, #8]
	if (angle < PI)
 8005e2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e2e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005f04 <gen_triangle_integral_angle+0x104>
 8005e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3a:	d528      	bpl.n	8005e8e <gen_triangle_integral_angle+0x8e>

	if(angle < PI)
 8005e3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e40:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005f04 <gen_triangle_integral_angle+0x104>
 8005e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4c:	d51f      	bpl.n	8005e8e <gen_triangle_integral_angle+0x8e>
	{
		val = m*angle;			// Generate linear value between 0 and 1
 8005e4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005e52:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5a:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val*val;			// Square it.  Produces parabola y: 0 to 1
 8005e5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005e62:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6a:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val*2.0f;			// Double it.
 8005e6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e76:	edc7 7a03 	vstr	s15, [r7, #12]
		val = val - 1.0f;			// Shift it down
 8005e7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e86:	edc7 7a03 	vstr	s15, [r7, #12]
		return val;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	e02e      	b.n	8005eec <gen_triangle_integral_angle+0xec>
	}

	angle = angle - PI;
 8005e8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e92:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005f04 <gen_triangle_integral_angle+0x104>
 8005e96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e9a:	edc7 7a01 	vstr	s15, [r7, #4]
	val = m*angle;			// Generate linear value between 0 and 1
 8005e9e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005ea2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eaa:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*val;			// Square it.  Produces parabola y: 0 to 1
 8005eae:	ed97 7a03 	vldr	s14, [r7, #12]
 8005eb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eba:	edc7 7a03 	vstr	s15, [r7, #12]
	val = 1.0f - val;			// Turn it upside down
 8005ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ec2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eca:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val*2.0f;			// Double it
 8005ece:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ed2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ed6:	edc7 7a03 	vstr	s15, [r7, #12]
	val = val - 1.0f;			// Shift it down
 8005eda:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ee2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ee6:	edc7 7a03 	vstr	s15, [r7, #12]
	return val;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	ee07 3a90 	vmov	s15, r3
}
 8005ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	40c90fdb 	.word	0x40c90fdb
 8005f00:	3ea2f983 	.word	0x3ea2f983
 8005f04:	40490fdb 	.word	0x40490fdb

08005f08 <fast_fmod>:
 * Modified it to work with float32_t.
 * NOTE: Possible alternative found here: https://stackoverflow.com/questions/26342823/implementation-of-fmod-function
 * 	return (a - b * floor(a / b));
 */
float32_t fast_fmod(float32_t x,float32_t y)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005f12:	edc7 0a00 	vstr	s1, [r7]
	float32_t a;
	return ( (a = x/y ) - (uint32_t)a ) * y;
 8005f16:	edd7 6a01 	vldr	s13, [r7, #4]
 8005f1a:	ed97 7a00 	vldr	s14, [r7]
 8005f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f22:	edc7 7a03 	vstr	s15, [r7, #12]
 8005f26:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	ed97 7a03 	vldr	s14, [r7, #12]
 8005f36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f3a:	edd7 7a00 	vldr	s15, [r7]
 8005f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8005f42:	eeb0 0a67 	vmov.f32	s0, s15
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <moving_avg>:

/*
 * Found here: https://gist.github.com/bmccormack/d12f4bf0c96423d03f82
 */
uint32_t moving_avg(uint32_t *ptrArrNumbers, uint32_t *ptrSum, uint32_t pos, uint32_t len, uint16_t nextNum)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  //Subtract the oldest number from the prev sum, add the new number
  *ptrSum = *ptrSum - ptrArrNumbers[pos] + nextNum;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	68f9      	ldr	r1, [r7, #12]
 8005f68:	440b      	add	r3, r1
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	1ad2      	subs	r2, r2, r3
 8005f6e:	8b3b      	ldrh	r3, [r7, #24]
 8005f70:	441a      	add	r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	601a      	str	r2, [r3, #0]
  //Assign the nextNum to the position in the array
  ptrArrNumbers[pos] = nextNum;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	8b3a      	ldrh	r2, [r7, #24]
 8005f80:	601a      	str	r2, [r3, #0]
  //return the average
  return (uint32_t) *ptrSum / len;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <pseudo_log>:
/*
 * Make adc values seems as though they came from a log-taper potentiometer.
 */
// TODO: Try three line segments instead of two.  With two, the sudden increase is obvious.
uint16_t pseudo_log(uint16_t x)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b089      	sub	sp, #36	; 0x24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	80fb      	strh	r3, [r7, #6]
	float32_t y1 = 0.0f;
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	61fb      	str	r3, [r7, #28]
	float32_t y2 = 0.0f;
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	61bb      	str	r3, [r7, #24]
	const uint16_t max = 4095;
 8005fae:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005fb2:	82fb      	strh	r3, [r7, #22]
	const uint16_t xe = 3500;
 8005fb4:	f640 53ac 	movw	r3, #3500	; 0xdac
 8005fb8:	82bb      	strh	r3, [r7, #20]
	const float32_t m1 = 0.1f;
 8005fba:	4b3a      	ldr	r3, [pc, #232]	; (80060a4 <pseudo_log+0x10c>)
 8005fbc:	613b      	str	r3, [r7, #16]
	uint16_t ye = m1*xe;
 8005fbe:	8abb      	ldrh	r3, [r7, #20]
 8005fc0:	ee07 3a90 	vmov	s15, r3
 8005fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd4:	edc7 7a00 	vstr	s15, [r7]
 8005fd8:	883b      	ldrh	r3, [r7, #0]
 8005fda:	81fb      	strh	r3, [r7, #14]
	uint16_t m2 = (float32_t) (max - ye)/(max - xe);
 8005fdc:	8afa      	ldrh	r2, [r7, #22]
 8005fde:	89fb      	ldrh	r3, [r7, #14]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005fea:	8afa      	ldrh	r2, [r7, #22]
 8005fec:	8abb      	ldrh	r3, [r7, #20]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006000:	edc7 7a00 	vstr	s15, [r7]
 8006004:	883b      	ldrh	r3, [r7, #0]
 8006006:	81bb      	strh	r3, [r7, #12]

	float32_t b = 0.0f;
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	60bb      	str	r3, [r7, #8]

	y1 = (uint16_t) ((float32_t) m1 * x);
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	ee07 3a90 	vmov	s15, r3
 8006014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006018:	edd7 7a04 	vldr	s15, [r7, #16]
 800601c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006024:	edc7 7a00 	vstr	s15, [r7]
 8006028:	883b      	ldrh	r3, [r7, #0]
 800602a:	b29b      	uxth	r3, r3
 800602c:	ee07 3a90 	vmov	s15, r3
 8006030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006034:	edc7 7a07 	vstr	s15, [r7, #28]

	// Gradual taper.
	if(x < xe)
 8006038:	88fa      	ldrh	r2, [r7, #6]
 800603a:	8abb      	ldrh	r3, [r7, #20]
 800603c:	429a      	cmp	r2, r3
 800603e:	d208      	bcs.n	8006052 <pseudo_log+0xba>
	{
		return (uint16_t) y1;
 8006040:	edd7 7a07 	vldr	s15, [r7, #28]
 8006044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006048:	edc7 7a00 	vstr	s15, [r7]
 800604c:	883b      	ldrh	r3, [r7, #0]
 800604e:	b29b      	uxth	r3, r3
 8006050:	e021      	b.n	8006096 <pseudo_log+0xfe>
	}

	// Fast taper.
	b = ye - m2*xe;
 8006052:	89fa      	ldrh	r2, [r7, #14]
 8006054:	89bb      	ldrh	r3, [r7, #12]
 8006056:	8ab9      	ldrh	r1, [r7, #20]
 8006058:	fb01 f303 	mul.w	r3, r1, r3
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006066:	edc7 7a02 	vstr	s15, [r7, #8]
	y2 = m2*x + b;		// y = mx+b
 800606a:	89bb      	ldrh	r3, [r7, #12]
 800606c:	88fa      	ldrh	r2, [r7, #6]
 800606e:	fb02 f303 	mul.w	r3, r2, r3
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800607a:	edd7 7a02 	vldr	s15, [r7, #8]
 800607e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006082:	edc7 7a06 	vstr	s15, [r7, #24]

	return (uint16_t) y2;
 8006086:	edd7 7a06 	vldr	s15, [r7, #24]
 800608a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608e:	edc7 7a00 	vstr	s15, [r7]
 8006092:	883b      	ldrh	r3, [r7, #0]
 8006094:	b29b      	uxth	r3, r3
}
 8006096:	4618      	mov	r0, r3
 8006098:	3724      	adds	r7, #36	; 0x24
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	3dcccccd 	.word	0x3dcccccd

080060a8 <gen_AWGN>:
/*
 *  Found here: https://www.embeddedrelated.com/showcode/311.php
 *  Generates additive white Gaussian Noise samples with zero mean and a standard deviation of 1.
 */
float32_t gen_AWGN()
{
 80060a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
	float32_t temp1;
	float32_t temp2;
	float32_t result;
	int16_t p;

	p = 1;
 80060ae:	2301      	movs	r3, #1
 80060b0:	817b      	strh	r3, [r7, #10]

	while( p > 0 )
 80060b2:	e01f      	b.n	80060f4 <gen_AWGN+0x4c>
	{
		// rand() function generates an integer between 0 and
		// RAND_MAX, which is defined in stdlib.h.
		temp2 = ( rand() / ( (double)RAND_MAX ) );
 80060b4:	f000 fda8 	bl	8006c08 <rand>
 80060b8:	4603      	mov	r3, r0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fa f9d6 	bl	800046c <__aeabi_i2d>
 80060c0:	a33d      	add	r3, pc, #244	; (adr r3, 80061b8 <gen_AWGN+0x110>)
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	f7fa fb61 	bl	800078c <__aeabi_ddiv>
 80060ca:	4603      	mov	r3, r0
 80060cc:	460c      	mov	r4, r1
 80060ce:	4618      	mov	r0, r3
 80060d0:	4621      	mov	r1, r4
 80060d2:	f7fa fd09 	bl	8000ae8 <__aeabi_d2f>
 80060d6:	4603      	mov	r3, r0
 80060d8:	60fb      	str	r3, [r7, #12]

		// If temp2 is >= (RAND_MAX / 2)
		if ( temp2 == 0.0f )
 80060da:	edd7 7a03 	vldr	s15, [r7, #12]
 80060de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80060e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e6:	d102      	bne.n	80060ee <gen_AWGN+0x46>
		{
			p = 1;
 80060e8:	2301      	movs	r3, #1
 80060ea:	817b      	strh	r3, [r7, #10]
 80060ec:	e002      	b.n	80060f4 <gen_AWGN+0x4c>
		}

		// Else if temp2 is < (RAND_MAX / 2)
		else
		{
			p = -1;
 80060ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060f2:	817b      	strh	r3, [r7, #10]
	float32_t result;
	int16_t p;

	p = 1;

	while( p > 0 )
 80060f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	dcdb      	bgt.n	80060b4 <gen_AWGN+0xc>
			p = -1;
		}
	}

	// TODO: Use fast cos: arm_cos_f32 ???
	temp1 = cos( ( 2.0f * (float32_t)PI ) * rand() / ( (float32_t)RAND_MAX ) );
 80060fc:	f000 fd84 	bl	8006c08 <rand>
 8006100:	ee07 0a90 	vmov	s15, r0
 8006104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006108:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80061b0 <gen_AWGN+0x108>
 800610c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006110:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80061b4 <gen_AWGN+0x10c>
 8006114:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006118:	ee16 0a90 	vmov	r0, s13
 800611c:	f7fa f9b8 	bl	8000490 <__aeabi_f2d>
 8006120:	4603      	mov	r3, r0
 8006122:	460c      	mov	r4, r1
 8006124:	ec44 3b10 	vmov	d0, r3, r4
 8006128:	f000 fece 	bl	8006ec8 <cos>
 800612c:	ec54 3b10 	vmov	r3, r4, d0
 8006130:	4618      	mov	r0, r3
 8006132:	4621      	mov	r1, r4
 8006134:	f7fa fcd8 	bl	8000ae8 <__aeabi_d2f>
 8006138:	4603      	mov	r3, r0
 800613a:	607b      	str	r3, [r7, #4]
	result = sqrt( -2.0f * log( temp2 ) ) * temp1;
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7fa f9a7 	bl	8000490 <__aeabi_f2d>
 8006142:	4603      	mov	r3, r0
 8006144:	460c      	mov	r4, r1
 8006146:	ec44 3b10 	vmov	d0, r3, r4
 800614a:	f000 ff83 	bl	8007054 <log>
 800614e:	ec51 0b10 	vmov	r0, r1, d0
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800615a:	f7fa f9ed 	bl	8000538 <__aeabi_dmul>
 800615e:	4603      	mov	r3, r0
 8006160:	460c      	mov	r4, r1
 8006162:	ec44 3b17 	vmov	d7, r3, r4
 8006166:	eeb0 0a47 	vmov.f32	s0, s14
 800616a:	eef0 0a67 	vmov.f32	s1, s15
 800616e:	f000 ffef 	bl	8007150 <sqrt>
 8006172:	ec56 5b10 	vmov	r5, r6, d0
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fa f98a 	bl	8000490 <__aeabi_f2d>
 800617c:	4603      	mov	r3, r0
 800617e:	460c      	mov	r4, r1
 8006180:	461a      	mov	r2, r3
 8006182:	4623      	mov	r3, r4
 8006184:	4628      	mov	r0, r5
 8006186:	4631      	mov	r1, r6
 8006188:	f7fa f9d6 	bl	8000538 <__aeabi_dmul>
 800618c:	4603      	mov	r3, r0
 800618e:	460c      	mov	r4, r1
 8006190:	4618      	mov	r0, r3
 8006192:	4621      	mov	r1, r4
 8006194:	f7fa fca8 	bl	8000ae8 <__aeabi_d2f>
 8006198:	4603      	mov	r3, r0
 800619a:	603b      	str	r3, [r7, #0]

  return result;	// return the generated random sample to the caller
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	ee07 3a90 	vmov	s15, r3

}// end AWGN_generator()
 80061a2:	eeb0 0a67 	vmov.f32	s0, s15
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ac:	f3af 8000 	nop.w
 80061b0:	40c90fdb 	.word	0x40c90fdb
 80061b4:	4f000000 	.word	0x4f000000
 80061b8:	ffc00000 	.word	0xffc00000
 80061bc:	41dfffff 	.word	0x41dfffff

080061c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80061c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80061f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80061c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80061c6:	e003      	b.n	80061d0 <LoopCopyDataInit>

080061c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80061c8:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80061ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80061cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80061ce:	3104      	adds	r1, #4

080061d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80061d0:	480b      	ldr	r0, [pc, #44]	; (8006200 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80061d2:	4b0c      	ldr	r3, [pc, #48]	; (8006204 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80061d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80061d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80061d8:	d3f6      	bcc.n	80061c8 <CopyDataInit>
  ldr  r2, =_sbss
 80061da:	4a0b      	ldr	r2, [pc, #44]	; (8006208 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80061dc:	e002      	b.n	80061e4 <LoopFillZerobss>

080061de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80061de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80061e0:	f842 3b04 	str.w	r3, [r2], #4

080061e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80061e4:	4b09      	ldr	r3, [pc, #36]	; (800620c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80061e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80061e8:	d3f9      	bcc.n	80061de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80061ea:	f000 f929 	bl	8006440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061ee:	f000 fabb 	bl	8006768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80061f2:	f7fd fc65 	bl	8003ac0 <main>
  bx  lr    
 80061f6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80061f8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80061fc:	0800a990 	.word	0x0800a990
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006200:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006204:	200005a4 	.word	0x200005a4
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8006208:	200005a4 	.word	0x200005a4
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800620c:	20004aac 	.word	0x20004aac

08006210 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006210:	e7fe      	b.n	8006210 <CAN1_RX0_IRQHandler>
	...

08006214 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8006214:	b480      	push	{r7}
 8006216:	af00      	add	r7, sp, #0
}
 8006218:	bf00      	nop
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop

08006224 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8006228:	e7fe      	b.n	8006228 <HardFault_Handler+0x4>
 800622a:	bf00      	nop

0800622c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8006230:	e7fe      	b.n	8006230 <MemManage_Handler+0x4>
 8006232:	bf00      	nop

08006234 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8006238:	e7fe      	b.n	8006238 <BusFault_Handler+0x4>
 800623a:	bf00      	nop

0800623c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8006240:	e7fe      	b.n	8006240 <UsageFault_Handler+0x4>
 8006242:	bf00      	nop

08006244 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
}
 8006248:	bf00      	nop
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop

08006254 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
}
 8006258:	bf00      	nop
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop

08006264 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8006264:	b480      	push	{r7}
 8006266:	af00      	add	r7, sp, #0
}
 8006268:	bf00      	nop
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop

08006274 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8006278:	bf00      	nop
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop

08006284 <EXTI0_IRQHandler>:


/*
 * interrupt handler for vco waveform button
 */
void EXTI0_IRQHandler(void){
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line0);
 8006288:	2001      	movs	r0, #1
 800628a:	f7fb f9e1 	bl	8001650 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 800628e:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <EXTI0_IRQHandler+0x2c>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d109      	bne.n	80062aa <EXTI0_IRQHandler+0x26>
		the_button.button = vco_wave_button;
 8006296:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <EXTI0_IRQHandler+0x2c>)
 8006298:	2200      	movs	r2, #0
 800629a:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 800629c:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <EXTI0_IRQHandler+0x2c>)
 800629e:	2201      	movs	r2, #1
 80062a0:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 80062a2:	2101      	movs	r1, #1
 80062a4:	4803      	ldr	r0, [pc, #12]	; (80062b4 <EXTI0_IRQHandler+0x30>)
 80062a6:	f7fc f91d 	bl	80024e4 <TIM_Cmd>
	}
}
 80062aa:	bf00      	nop
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20004a50 	.word	0x20004a50
 80062b4:	40000400 	.word	0x40000400

080062b8 <EXTI1_IRQHandler>:


/*
 * interrupt handler for lfo waveform button
 */
void EXTI1_IRQHandler(void){
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line1);
 80062bc:	2002      	movs	r0, #2
 80062be:	f7fb f9c7 	bl	8001650 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 80062c2:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <EXTI1_IRQHandler+0x2c>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d109      	bne.n	80062de <EXTI1_IRQHandler+0x26>
		the_button.button = lfo_wave_button;
 80062ca:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <EXTI1_IRQHandler+0x2c>)
 80062cc:	2201      	movs	r2, #1
 80062ce:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <EXTI1_IRQHandler+0x2c>)
 80062d2:	2201      	movs	r2, #1
 80062d4:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 80062d6:	2101      	movs	r1, #1
 80062d8:	4803      	ldr	r0, [pc, #12]	; (80062e8 <EXTI1_IRQHandler+0x30>)
 80062da:	f7fc f903 	bl	80024e4 <TIM_Cmd>
	}
}
 80062de:	bf00      	nop
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20004a50 	.word	0x20004a50
 80062e8:	40000400 	.word	0x40000400

080062ec <EXTI2_IRQHandler>:


/*
 * interrupt handler for lfo modulation type button
 */
void EXTI2_IRQHandler(void){
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line2);
 80062f0:	2004      	movs	r0, #4
 80062f2:	f7fb f9ad 	bl	8001650 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 80062f6:	4b08      	ldr	r3, [pc, #32]	; (8006318 <EXTI2_IRQHandler+0x2c>)
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <EXTI2_IRQHandler+0x26>
		the_button.button = lfo_mod_button;
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <EXTI2_IRQHandler+0x2c>)
 8006300:	2202      	movs	r2, #2
 8006302:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 8006304:	4b04      	ldr	r3, [pc, #16]	; (8006318 <EXTI2_IRQHandler+0x2c>)
 8006306:	2201      	movs	r2, #1
 8006308:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 800630a:	2101      	movs	r1, #1
 800630c:	4803      	ldr	r0, [pc, #12]	; (800631c <EXTI2_IRQHandler+0x30>)
 800630e:	f7fc f8e9 	bl	80024e4 <TIM_Cmd>
	}

}
 8006312:	bf00      	nop
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	20004a50 	.word	0x20004a50
 800631c:	40000400 	.word	0x40000400

08006320 <EXTI3_IRQHandler>:


/*
 * interrupt handler for adsr modulation type button
 */
void EXTI3_IRQHandler(void){
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line3);
 8006324:	2008      	movs	r0, #8
 8006326:	f7fb f993 	bl	8001650 <EXTI_ClearITPendingBit>

	if(the_button.button_state == NOT_ACTIVE){
 800632a:	4b08      	ldr	r3, [pc, #32]	; (800634c <EXTI3_IRQHandler+0x2c>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d109      	bne.n	8006346 <EXTI3_IRQHandler+0x26>
		the_button.button = adsr_mod_button;
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <EXTI3_IRQHandler+0x2c>)
 8006334:	2203      	movs	r2, #3
 8006336:	701a      	strb	r2, [r3, #0]
		the_button.button_state = ACTIVE;
 8006338:	4b04      	ldr	r3, [pc, #16]	; (800634c <EXTI3_IRQHandler+0x2c>)
 800633a:	2201      	movs	r2, #1
 800633c:	605a      	str	r2, [r3, #4]
		TIM_Cmd(TIM3, ENABLE);
 800633e:	2101      	movs	r1, #1
 8006340:	4803      	ldr	r0, [pc, #12]	; (8006350 <EXTI3_IRQHandler+0x30>)
 8006342:	f7fc f8cf 	bl	80024e4 <TIM_Cmd>
	}
}
 8006346:	bf00      	nop
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20004a50 	.word	0x20004a50
 8006350:	40000400 	.word	0x40000400

08006354 <EXTI9_5_IRQHandler>:

//EXTI9_5_IRQn used for selector
void EXTI9_5_IRQHandler(void){
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
	// TODO: Is this a mistake?  Looks like EXTI_Line6 is twice.  Maybe should be EXTI_Line5.
	// EXTI_ClearITPendingBit(EXTI_Line6 | EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9);
	EXTI_ClearITPendingBit(EXTI_Line5 | EXTI_Line6 | EXTI_Line7 | EXTI_Line8 | EXTI_Line9);
 8006358:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 800635c:	f7fb f978 	bl	8001650 <EXTI_ClearITPendingBit>
	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){			//is debounce timer off
 8006360:	4b06      	ldr	r3, [pc, #24]	; (800637c <EXTI9_5_IRQHandler+0x28>)
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	b29b      	uxth	r3, r3
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <EXTI9_5_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);								//turn on debounce timer
 800636e:	2101      	movs	r1, #1
 8006370:	4802      	ldr	r0, [pc, #8]	; (800637c <EXTI9_5_IRQHandler+0x28>)
 8006372:	f7fc f8b7 	bl	80024e4 <TIM_Cmd>
	}
	// update_state();
}
 8006376:	bf00      	nop
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	40000800 	.word	0x40000800

08006380 <EXTI15_10_IRQHandler>:

//EXTI15_10_IRQn used for selector
void EXTI15_10_IRQHandler(void){
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line10 | EXTI_Line11 | EXTI_Line12 | EXTI_Line13 | EXTI_Line14 | EXTI_Line15);
 8006384:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8006388:	f7fb f962 	bl	8001650 <EXTI_ClearITPendingBit>

	if(!((TIM4->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)){		//is debounce timer off
 800638c:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <EXTI15_10_IRQHandler+0x28>)
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d103      	bne.n	80063a2 <EXTI15_10_IRQHandler+0x22>
			TIM_Cmd(TIM4, ENABLE);							//turn on debounce timer
 800639a:	2101      	movs	r1, #1
 800639c:	4802      	ldr	r0, [pc, #8]	; (80063a8 <EXTI15_10_IRQHandler+0x28>)
 800639e:	f7fc f8a1 	bl	80024e4 <TIM_Cmd>
	}
}
 80063a2:	bf00      	nop
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	40000800 	.word	0x40000800

080063ac <TIM3_IRQHandler>:

// Timer for limiting button pushes 100ms
void TIM3_IRQHandler()
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
	// Note: the_button.button is set to vco_wave or whatever by
	// EXTI0_IRQHandler() or whatever.
	// That routine is called first and then this one.
	// It enables the TIM3 timer.  Then this function disables it.

	TIM_Cmd(TIM3, DISABLE);				//stop timer
 80063b2:	2100      	movs	r1, #0
 80063b4:	4813      	ldr	r0, [pc, #76]	; (8006404 <TIM3_IRQHandler+0x58>)
 80063b6:	f7fc f895 	bl	80024e4 <TIM_Cmd>
	int temp = the_button.button;
 80063ba:	4b13      	ldr	r3, [pc, #76]	; (8006408 <TIM3_IRQHandler+0x5c>)
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	607b      	str	r3, [r7, #4]

	TIM_ClearITPendingBit(TIM3, TIM_IT_Update);			//clear interrupt
 80063c0:	2101      	movs	r1, #1
 80063c2:	4810      	ldr	r0, [pc, #64]	; (8006404 <TIM3_IRQHandler+0x58>)
 80063c4:	f7fc f8d2 	bl	800256c <TIM_ClearITPendingBit>
	the_button.button_state = NOT_ACTIVE;
 80063c8:	4b0f      	ldr	r3, [pc, #60]	; (8006408 <TIM3_IRQHandler+0x5c>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	605a      	str	r2, [r3, #4]
	if(temp == vco_wave_button)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d102      	bne.n	80063da <TIM3_IRQHandler+0x2e>
	{
		// handle_enter();			// TODO
		update_vco_wave();
 80063d4:	f000 f8fe 	bl	80065d4 <update_vco_wave>
	else if(temp == adsr_mod_button)
	{
		// handle_down();			// TODO
		update_adsr_mod();
	}
}
 80063d8:	e010      	b.n	80063fc <TIM3_IRQHandler+0x50>
	{
		// handle_enter();			// TODO
		update_vco_wave();

	}
	else if(temp == lfo_wave_button)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d102      	bne.n	80063e6 <TIM3_IRQHandler+0x3a>
	{
		// handle_back();			// TODO
		update_lfo_wave();
 80063e0:	f000 f90e 	bl	8006600 <update_lfo_wave>
	else if(temp == adsr_mod_button)
	{
		// handle_down();			// TODO
		update_adsr_mod();
	}
}
 80063e4:	e00a      	b.n	80063fc <TIM3_IRQHandler+0x50>
	else if(temp == lfo_wave_button)
	{
		// handle_back();			// TODO
		update_lfo_wave();
	}
	else if(temp == lfo_mod_button)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d102      	bne.n	80063f2 <TIM3_IRQHandler+0x46>
	{
		// handle_up();			// TODO
		update_lfo_mod();
 80063ec:	f000 f91e 	bl	800662c <update_lfo_mod>
	else if(temp == adsr_mod_button)
	{
		// handle_down();			// TODO
		update_adsr_mod();
	}
}
 80063f0:	e004      	b.n	80063fc <TIM3_IRQHandler+0x50>
	else if(temp == lfo_mod_button)
	{
		// handle_up();			// TODO
		update_lfo_mod();
	}
	else if(temp == adsr_mod_button)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d101      	bne.n	80063fc <TIM3_IRQHandler+0x50>
	{
		// handle_down();			// TODO
		update_adsr_mod();
 80063f8:	f000 f938 	bl	800666c <update_adsr_mod>
	}
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	40000400 	.word	0x40000400
 8006408:	20004a50 	.word	0x20004a50

0800640c <TIM4_IRQHandler>:

// Timer for debouncing selectors 50ms
void TIM4_IRQHandler()
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
	TIM_Cmd(TIM4, DISABLE);								//stop timer
 8006410:	2100      	movs	r1, #0
 8006412:	4804      	ldr	r0, [pc, #16]	; (8006424 <TIM4_IRQHandler+0x18>)
 8006414:	f7fc f866 	bl	80024e4 <TIM_Cmd>
	TIM_ClearITPendingBit(TIM4, TIM_IT_Update);			//clear interrupt
 8006418:	2101      	movs	r1, #1
 800641a:	4802      	ldr	r0, [pc, #8]	; (8006424 <TIM4_IRQHandler+0x18>)
 800641c:	f7fc f8a6 	bl	800256c <TIM_ClearITPendingBit>

	// update_selector_state();							//update state
	// update_state();
}
 8006420:	bf00      	nop
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40000800 	.word	0x40000800

08006428 <ADC_IRQHandler>:

// not set up yet but might to see if the adc is working
void ADC_IRQHandler() {
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
	/* acknowledge interrupt */
	ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 800642c:	f240 2105 	movw	r1, #517	; 0x205
 8006430:	4802      	ldr	r0, [pc, #8]	; (800643c <ADC_IRQHandler+0x14>)
 8006432:	f7fa fdeb 	bl	800100c <ADC_ClearITPendingBit>
}
 8006436:	bf00      	nop
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	40012000 	.word	0x40012000

08006440 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  // Mike Beard
  // #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006444:	4a16      	ldr	r2, [pc, #88]	; (80064a0 <SystemInit+0x60>)
 8006446:	4b16      	ldr	r3, [pc, #88]	; (80064a0 <SystemInit+0x60>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  // #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006454:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <SystemInit+0x64>)
 8006456:	4b13      	ldr	r3, [pc, #76]	; (80064a4 <SystemInit+0x64>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f043 0301 	orr.w	r3, r3, #1
 800645e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006460:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <SystemInit+0x64>)
 8006462:	2200      	movs	r2, #0
 8006464:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006466:	4a0f      	ldr	r2, [pc, #60]	; (80064a4 <SystemInit+0x64>)
 8006468:	4b0e      	ldr	r3, [pc, #56]	; (80064a4 <SystemInit+0x64>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006474:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <SystemInit+0x64>)
 8006478:	4a0b      	ldr	r2, [pc, #44]	; (80064a8 <SystemInit+0x68>)
 800647a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800647c:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <SystemInit+0x64>)
 800647e:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <SystemInit+0x64>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006486:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006488:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <SystemInit+0x64>)
 800648a:	2200      	movs	r2, #0
 800648c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800648e:	f000 f80d 	bl	80064ac <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006492:	4b03      	ldr	r3, [pc, #12]	; (80064a0 <SystemInit+0x60>)
 8006494:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006498:	609a      	str	r2, [r3, #8]
#endif
}
 800649a:	bf00      	nop
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	e000ed00 	.word	0xe000ed00
 80064a4:	40023800 	.word	0x40023800
 80064a8:	24003010 	.word	0x24003010

080064ac <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80064b2:	2300      	movs	r3, #0
 80064b4:	607b      	str	r3, [r7, #4]
 80064b6:	2300      	movs	r3, #0
 80064b8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80064ba:	4a41      	ldr	r2, [pc, #260]	; (80065c0 <SetSysClock+0x114>)
 80064bc:	4b40      	ldr	r3, [pc, #256]	; (80065c0 <SetSysClock+0x114>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80064c6:	4b3e      	ldr	r3, [pc, #248]	; (80065c0 <SetSysClock+0x114>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ce:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3301      	adds	r3, #1
 80064d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d103      	bne.n	80064e4 <SetSysClock+0x38>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80064e2:	d1f0      	bne.n	80064c6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80064e4:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <SetSysClock+0x114>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80064f0:	2301      	movs	r3, #1
 80064f2:	603b      	str	r3, [r7, #0]
 80064f4:	e001      	b.n	80064fa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80064f6:	2300      	movs	r3, #0
 80064f8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d142      	bne.n	8006586 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8006500:	4a2f      	ldr	r2, [pc, #188]	; (80065c0 <SetSysClock+0x114>)
 8006502:	4b2f      	ldr	r3, [pc, #188]	; (80065c0 <SetSysClock+0x114>)
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800650a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800650c:	4a2d      	ldr	r2, [pc, #180]	; (80065c4 <SetSysClock+0x118>)
 800650e:	4b2d      	ldr	r3, [pc, #180]	; (80065c4 <SetSysClock+0x118>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006516:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8006518:	4a29      	ldr	r2, [pc, #164]	; (80065c0 <SetSysClock+0x114>)
 800651a:	4b29      	ldr	r3, [pc, #164]	; (80065c0 <SetSysClock+0x114>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8006520:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <SetSysClock+0x114>)
 8006522:	4b27      	ldr	r3, [pc, #156]	; (80065c0 <SetSysClock+0x114>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800652a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800652c:	4a24      	ldr	r2, [pc, #144]	; (80065c0 <SetSysClock+0x114>)
 800652e:	4b24      	ldr	r3, [pc, #144]	; (80065c0 <SetSysClock+0x114>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8006536:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8006538:	4b21      	ldr	r3, [pc, #132]	; (80065c0 <SetSysClock+0x114>)
 800653a:	4a23      	ldr	r2, [pc, #140]	; (80065c8 <SetSysClock+0x11c>)
 800653c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800653e:	4a20      	ldr	r2, [pc, #128]	; (80065c0 <SetSysClock+0x114>)
 8006540:	4b1f      	ldr	r3, [pc, #124]	; (80065c0 <SetSysClock+0x114>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006548:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800654a:	bf00      	nop
 800654c:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <SetSysClock+0x114>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0f9      	beq.n	800654c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8006558:	4b1c      	ldr	r3, [pc, #112]	; (80065cc <SetSysClock+0x120>)
 800655a:	f240 6205 	movw	r2, #1541	; 0x605
 800655e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8006560:	4a17      	ldr	r2, [pc, #92]	; (80065c0 <SetSysClock+0x114>)
 8006562:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <SetSysClock+0x114>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f023 0303 	bic.w	r3, r3, #3
 800656a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800656c:	4a14      	ldr	r2, [pc, #80]	; (80065c0 <SetSysClock+0x114>)
 800656e:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <SetSysClock+0x114>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f043 0302 	orr.w	r3, r3, #2
 8006576:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8006578:	bf00      	nop
 800657a:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <SetSysClock+0x114>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 030c 	and.w	r3, r3, #12
 8006582:	2b08      	cmp	r3, #8
 8006584:	d1f9      	bne.n	800657a <SetSysClock+0xce>
// Re-added by Mike Beard
/******************************************************************************/
/*                          I2S clock configuration                           */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8006586:	4a0e      	ldr	r2, [pc, #56]	; (80065c0 <SetSysClock+0x114>)
 8006588:	4b0d      	ldr	r3, [pc, #52]	; (80065c0 <SetSysClock+0x114>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006590:	6093      	str	r3, [r2, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8006592:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <SetSysClock+0x114>)
 8006594:	4a0e      	ldr	r2, [pc, #56]	; (80065d0 <SetSysClock+0x124>)
 8006596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 800659a:	4a09      	ldr	r2, [pc, #36]	; (80065c0 <SetSysClock+0x114>)
 800659c:	4b08      	ldr	r3, [pc, #32]	; (80065c0 <SetSysClock+0x114>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065a4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 80065a6:	bf00      	nop
 80065a8:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <SetSysClock+0x114>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0f9      	beq.n	80065a8 <SetSysClock+0xfc>
  {
  }
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	40023800 	.word	0x40023800
 80065c4:	40007000 	.word	0x40007000
 80065c8:	07405408 	.word	0x07405408
 80065cc:	40023c00 	.word	0x40023c00
 80065d0:	30004080 	.word	0x30004080

080065d4 <update_vco_wave>:
// #include "lcd.h"
#include "main.h"


void update_vco_wave()
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
	vco_wave++;
 80065d8:	4b08      	ldr	r3, [pc, #32]	; (80065fc <update_vco_wave+0x28>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	3301      	adds	r3, #1
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	4b06      	ldr	r3, [pc, #24]	; (80065fc <update_vco_wave+0x28>)
 80065e2:	701a      	strb	r2, [r3, #0]
	if(vco_wave >= lastwave)
 80065e4:	4b05      	ldr	r3, [pc, #20]	; (80065fc <update_vco_wave+0x28>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b05      	cmp	r3, #5
 80065ea:	d902      	bls.n	80065f2 <update_vco_wave+0x1e>
	{
		vco_wave = 0;
 80065ec:	4b03      	ldr	r3, [pc, #12]	; (80065fc <update_vco_wave+0x28>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	701a      	strb	r2, [r3, #0]
	}
}
 80065f2:	bf00      	nop
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	20004a2d 	.word	0x20004a2d

08006600 <update_lfo_wave>:

void update_lfo_wave()
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
	lfo_wave++;
 8006604:	4b08      	ldr	r3, [pc, #32]	; (8006628 <update_lfo_wave+0x28>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	b2da      	uxtb	r2, r3
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <update_lfo_wave+0x28>)
 800660e:	701a      	strb	r2, [r3, #0]
	if(lfo_wave >= lastwave)
 8006610:	4b05      	ldr	r3, [pc, #20]	; (8006628 <update_lfo_wave+0x28>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b05      	cmp	r3, #5
 8006616:	d902      	bls.n	800661e <update_lfo_wave+0x1e>
	{
		lfo_wave = 0;
 8006618:	4b03      	ldr	r3, [pc, #12]	; (8006628 <update_lfo_wave+0x28>)
 800661a:	2200      	movs	r2, #0
 800661c:	701a      	strb	r2, [r3, #0]
	}
}
 800661e:	bf00      	nop
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	20004a2c 	.word	0x20004a2c

0800662c <update_lfo_mod>:

void update_lfo_mod()
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
	if(lfo_mod.fm_mod == OFF)
 8006630:	4b0d      	ldr	r3, [pc, #52]	; (8006668 <update_lfo_mod+0x3c>)
 8006632:	885b      	ldrh	r3, [r3, #2]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d103      	bne.n	8006640 <update_lfo_mod+0x14>
	{
		lfo_mod.fm_mod = ON;
 8006638:	4b0b      	ldr	r3, [pc, #44]	; (8006668 <update_lfo_mod+0x3c>)
 800663a:	2201      	movs	r2, #1
 800663c:	805a      	strh	r2, [r3, #2]
		else
		{
			lfo_mod.am_mod = OFF;
		}
	}
}
 800663e:	e00d      	b.n	800665c <update_lfo_mod+0x30>

		// Note: leave adsr_mod.am_mod as-is.
	}
	else
	{
		lfo_mod.fm_mod = OFF;
 8006640:	4b09      	ldr	r3, [pc, #36]	; (8006668 <update_lfo_mod+0x3c>)
 8006642:	2200      	movs	r2, #0
 8006644:	805a      	strh	r2, [r3, #2]

		// Toggle adsr_mod.am_mod.
		if(lfo_mod.am_mod == OFF)
 8006646:	4b08      	ldr	r3, [pc, #32]	; (8006668 <update_lfo_mod+0x3c>)
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d103      	bne.n	8006656 <update_lfo_mod+0x2a>
		{
			lfo_mod.am_mod = ON;
 800664e:	4b06      	ldr	r3, [pc, #24]	; (8006668 <update_lfo_mod+0x3c>)
 8006650:	2201      	movs	r2, #1
 8006652:	801a      	strh	r2, [r3, #0]
		else
		{
			lfo_mod.am_mod = OFF;
		}
	}
}
 8006654:	e002      	b.n	800665c <update_lfo_mod+0x30>
		{
			lfo_mod.am_mod = ON;
		}
		else
		{
			lfo_mod.am_mod = OFF;
 8006656:	4b04      	ldr	r3, [pc, #16]	; (8006668 <update_lfo_mod+0x3c>)
 8006658:	2200      	movs	r2, #0
 800665a:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800665c:	bf00      	nop
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	20004a58 	.word	0x20004a58

0800666c <update_adsr_mod>:

void update_adsr_mod()
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
	if(adsr_mod.fm_mod == OFF)
 8006670:	4b0d      	ldr	r3, [pc, #52]	; (80066a8 <update_adsr_mod+0x3c>)
 8006672:	885b      	ldrh	r3, [r3, #2]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d103      	bne.n	8006680 <update_adsr_mod+0x14>
	{
		adsr_mod.fm_mod = ON;
 8006678:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <update_adsr_mod+0x3c>)
 800667a:	2201      	movs	r2, #1
 800667c:	805a      	strh	r2, [r3, #2]
		else
		{
			adsr_mod.am_mod = OFF;
		}
	}
}
 800667e:	e00d      	b.n	800669c <update_adsr_mod+0x30>

		// Note: leave adsr_mod.am_mod as-is.
	}
	else
	{
		adsr_mod.fm_mod = OFF;
 8006680:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <update_adsr_mod+0x3c>)
 8006682:	2200      	movs	r2, #0
 8006684:	805a      	strh	r2, [r3, #2]

		// Toggle adsr_mod.am_mod.
		if(adsr_mod.am_mod == OFF)
 8006686:	4b08      	ldr	r3, [pc, #32]	; (80066a8 <update_adsr_mod+0x3c>)
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d103      	bne.n	8006696 <update_adsr_mod+0x2a>
		{
			adsr_mod.am_mod = ON;
 800668e:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <update_adsr_mod+0x3c>)
 8006690:	2201      	movs	r2, #1
 8006692:	801a      	strh	r2, [r3, #0]
		else
		{
			adsr_mod.am_mod = OFF;
		}
	}
}
 8006694:	e002      	b.n	800669c <update_adsr_mod+0x30>
		{
			adsr_mod.am_mod = ON;
		}
		else
		{
			adsr_mod.am_mod = OFF;
 8006696:	4b04      	ldr	r3, [pc, #16]	; (80066a8 <update_adsr_mod+0x3c>)
 8006698:	2200      	movs	r2, #0
 800669a:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800669c:	bf00      	nop
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	20004a30 	.word	0x20004a30

080066ac <init_state>:
//	}else if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_6) == 1){
//		lfo_state = other2;
//	}
//}

void init_state(){
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
//	current_menu_state.lfo_mod = NO_MOD;
//	current_menu_state.filterst8 = no_filter;
//	current_menu_state.secondary_vco = 0;
//	display_new_menu();

	vco_wave = sine;
 80066b0:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <init_state+0x34>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	701a      	strb	r2, [r3, #0]
	lfo_wave = sine;
 80066b6:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <init_state+0x38>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	701a      	strb	r2, [r3, #0]

	lfo_mod.am_mod = OFF;
 80066bc:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <init_state+0x3c>)
 80066be:	2200      	movs	r2, #0
 80066c0:	801a      	strh	r2, [r3, #0]
	lfo_mod.fm_mod = OFF;
 80066c2:	4b09      	ldr	r3, [pc, #36]	; (80066e8 <init_state+0x3c>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	805a      	strh	r2, [r3, #2]

	adsr_mod.am_mod = OFF;
 80066c8:	4b08      	ldr	r3, [pc, #32]	; (80066ec <init_state+0x40>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	801a      	strh	r2, [r3, #0]
	adsr_mod.fm_mod = OFF;
 80066ce:	4b07      	ldr	r3, [pc, #28]	; (80066ec <init_state+0x40>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	805a      	strh	r2, [r3, #2]

}
 80066d4:	bf00      	nop
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20004a2d 	.word	0x20004a2d
 80066e4:	20004a2c 	.word	0x20004a2c
 80066e8:	20004a58 	.word	0x20004a58
 80066ec:	20004a30 	.word	0x20004a30

080066f0 <arm_sin_f32>:
 80066f0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800675c <arm_sin_f32+0x6c>
 80066f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80066f8:	ee20 7a07 	vmul.f32	s14, s0, s14
 80066fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006700:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8006704:	d504      	bpl.n	8006710 <arm_sin_f32+0x20>
 8006706:	ee17 3a90 	vmov	r3, s15
 800670a:	3b01      	subs	r3, #1
 800670c:	ee07 3a90 	vmov	s15, r3
 8006710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006714:	eddf 6a12 	vldr	s13, [pc, #72]	; 8006760 <arm_sin_f32+0x70>
 8006718:	4a12      	ldr	r2, [pc, #72]	; (8006764 <arm_sin_f32+0x74>)
 800671a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800671e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006722:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006726:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800672a:	ee16 3a90 	vmov	r3, s13
 800672e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006732:	ee06 3a90 	vmov	s13, r3
 8006736:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 800673a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800673e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006742:	edd1 6a00 	vldr	s13, [r1]
 8006746:	ed91 7a01 	vldr	s14, [r1, #4]
 800674a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800674e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006752:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006756:	ee30 0a27 	vadd.f32	s0, s0, s15
 800675a:	4770      	bx	lr
 800675c:	3e22f983 	.word	0x3e22f983
 8006760:	44000000 	.word	0x44000000
 8006764:	08009ba0 	.word	0x08009ba0

08006768 <__libc_init_array>:
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	4b0e      	ldr	r3, [pc, #56]	; (80067a4 <__libc_init_array+0x3c>)
 800676c:	4c0e      	ldr	r4, [pc, #56]	; (80067a8 <__libc_init_array+0x40>)
 800676e:	1ae4      	subs	r4, r4, r3
 8006770:	10a4      	asrs	r4, r4, #2
 8006772:	2500      	movs	r5, #0
 8006774:	461e      	mov	r6, r3
 8006776:	42a5      	cmp	r5, r4
 8006778:	d004      	beq.n	8006784 <__libc_init_array+0x1c>
 800677a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800677e:	4798      	blx	r3
 8006780:	3501      	adds	r5, #1
 8006782:	e7f8      	b.n	8006776 <__libc_init_array+0xe>
 8006784:	f003 f9fc 	bl	8009b80 <_init>
 8006788:	4c08      	ldr	r4, [pc, #32]	; (80067ac <__libc_init_array+0x44>)
 800678a:	4b09      	ldr	r3, [pc, #36]	; (80067b0 <__libc_init_array+0x48>)
 800678c:	1ae4      	subs	r4, r4, r3
 800678e:	10a4      	asrs	r4, r4, #2
 8006790:	2500      	movs	r5, #0
 8006792:	461e      	mov	r6, r3
 8006794:	42a5      	cmp	r5, r4
 8006796:	d004      	beq.n	80067a2 <__libc_init_array+0x3a>
 8006798:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800679c:	4798      	blx	r3
 800679e:	3501      	adds	r5, #1
 80067a0:	e7f8      	b.n	8006794 <__libc_init_array+0x2c>
 80067a2:	bd70      	pop	{r4, r5, r6, pc}
 80067a4:	0800a988 	.word	0x0800a988
 80067a8:	0800a988 	.word	0x0800a988
 80067ac:	0800a98c 	.word	0x0800a98c
 80067b0:	0800a988 	.word	0x0800a988

080067b4 <malloc>:
 80067b4:	4b02      	ldr	r3, [pc, #8]	; (80067c0 <malloc+0xc>)
 80067b6:	4601      	mov	r1, r0
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	f000 b803 	b.w	80067c4 <_malloc_r>
 80067be:	bf00      	nop
 80067c0:	2000059c 	.word	0x2000059c

080067c4 <_malloc_r>:
 80067c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c8:	f101 040b 	add.w	r4, r1, #11
 80067cc:	2c16      	cmp	r4, #22
 80067ce:	b085      	sub	sp, #20
 80067d0:	4681      	mov	r9, r0
 80067d2:	d903      	bls.n	80067dc <_malloc_r+0x18>
 80067d4:	f034 0407 	bics.w	r4, r4, #7
 80067d8:	d501      	bpl.n	80067de <_malloc_r+0x1a>
 80067da:	e002      	b.n	80067e2 <_malloc_r+0x1e>
 80067dc:	2410      	movs	r4, #16
 80067de:	428c      	cmp	r4, r1
 80067e0:	d203      	bcs.n	80067ea <_malloc_r+0x26>
 80067e2:	230c      	movs	r3, #12
 80067e4:	f8c9 3000 	str.w	r3, [r9]
 80067e8:	e1ea      	b.n	8006bc0 <_malloc_r+0x3fc>
 80067ea:	4648      	mov	r0, r9
 80067ec:	f000 fa0a 	bl	8006c04 <__malloc_lock>
 80067f0:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80067f4:	4d9e      	ldr	r5, [pc, #632]	; (8006a70 <_malloc_r+0x2ac>)
 80067f6:	d217      	bcs.n	8006828 <_malloc_r+0x64>
 80067f8:	f104 0208 	add.w	r2, r4, #8
 80067fc:	442a      	add	r2, r5
 80067fe:	f1a2 0108 	sub.w	r1, r2, #8
 8006802:	6856      	ldr	r6, [r2, #4]
 8006804:	428e      	cmp	r6, r1
 8006806:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800680a:	d102      	bne.n	8006812 <_malloc_r+0x4e>
 800680c:	68d6      	ldr	r6, [r2, #12]
 800680e:	42b2      	cmp	r2, r6
 8006810:	d008      	beq.n	8006824 <_malloc_r+0x60>
 8006812:	6873      	ldr	r3, [r6, #4]
 8006814:	68f2      	ldr	r2, [r6, #12]
 8006816:	68b1      	ldr	r1, [r6, #8]
 8006818:	f023 0303 	bic.w	r3, r3, #3
 800681c:	60ca      	str	r2, [r1, #12]
 800681e:	4433      	add	r3, r6
 8006820:	6091      	str	r1, [r2, #8]
 8006822:	e02f      	b.n	8006884 <_malloc_r+0xc0>
 8006824:	3302      	adds	r3, #2
 8006826:	e03d      	b.n	80068a4 <_malloc_r+0xe0>
 8006828:	0a63      	lsrs	r3, r4, #9
 800682a:	d01a      	beq.n	8006862 <_malloc_r+0x9e>
 800682c:	2b04      	cmp	r3, #4
 800682e:	d802      	bhi.n	8006836 <_malloc_r+0x72>
 8006830:	09a3      	lsrs	r3, r4, #6
 8006832:	3338      	adds	r3, #56	; 0x38
 8006834:	e018      	b.n	8006868 <_malloc_r+0xa4>
 8006836:	2b14      	cmp	r3, #20
 8006838:	d801      	bhi.n	800683e <_malloc_r+0x7a>
 800683a:	335b      	adds	r3, #91	; 0x5b
 800683c:	e014      	b.n	8006868 <_malloc_r+0xa4>
 800683e:	2b54      	cmp	r3, #84	; 0x54
 8006840:	d802      	bhi.n	8006848 <_malloc_r+0x84>
 8006842:	0b23      	lsrs	r3, r4, #12
 8006844:	336e      	adds	r3, #110	; 0x6e
 8006846:	e00f      	b.n	8006868 <_malloc_r+0xa4>
 8006848:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800684c:	d802      	bhi.n	8006854 <_malloc_r+0x90>
 800684e:	0be3      	lsrs	r3, r4, #15
 8006850:	3377      	adds	r3, #119	; 0x77
 8006852:	e009      	b.n	8006868 <_malloc_r+0xa4>
 8006854:	f240 5254 	movw	r2, #1364	; 0x554
 8006858:	4293      	cmp	r3, r2
 800685a:	d804      	bhi.n	8006866 <_malloc_r+0xa2>
 800685c:	0ca3      	lsrs	r3, r4, #18
 800685e:	337c      	adds	r3, #124	; 0x7c
 8006860:	e002      	b.n	8006868 <_malloc_r+0xa4>
 8006862:	233f      	movs	r3, #63	; 0x3f
 8006864:	e000      	b.n	8006868 <_malloc_r+0xa4>
 8006866:	237e      	movs	r3, #126	; 0x7e
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800686e:	f1a2 0008 	sub.w	r0, r2, #8
 8006872:	6856      	ldr	r6, [r2, #4]
 8006874:	e00c      	b.n	8006890 <_malloc_r+0xcc>
 8006876:	2900      	cmp	r1, #0
 8006878:	68f1      	ldr	r1, [r6, #12]
 800687a:	db08      	blt.n	800688e <_malloc_r+0xca>
 800687c:	68b3      	ldr	r3, [r6, #8]
 800687e:	60d9      	str	r1, [r3, #12]
 8006880:	608b      	str	r3, [r1, #8]
 8006882:	18b3      	adds	r3, r6, r2
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	605a      	str	r2, [r3, #4]
 800688c:	e1a3      	b.n	8006bd6 <_malloc_r+0x412>
 800688e:	460e      	mov	r6, r1
 8006890:	4286      	cmp	r6, r0
 8006892:	d006      	beq.n	80068a2 <_malloc_r+0xde>
 8006894:	6872      	ldr	r2, [r6, #4]
 8006896:	f022 0203 	bic.w	r2, r2, #3
 800689a:	1b11      	subs	r1, r2, r4
 800689c:	290f      	cmp	r1, #15
 800689e:	ddea      	ble.n	8006876 <_malloc_r+0xb2>
 80068a0:	3b01      	subs	r3, #1
 80068a2:	3301      	adds	r3, #1
 80068a4:	4a72      	ldr	r2, [pc, #456]	; (8006a70 <_malloc_r+0x2ac>)
 80068a6:	692e      	ldr	r6, [r5, #16]
 80068a8:	f102 0708 	add.w	r7, r2, #8
 80068ac:	42be      	cmp	r6, r7
 80068ae:	4639      	mov	r1, r7
 80068b0:	d079      	beq.n	80069a6 <_malloc_r+0x1e2>
 80068b2:	6870      	ldr	r0, [r6, #4]
 80068b4:	f020 0003 	bic.w	r0, r0, #3
 80068b8:	ebc4 0e00 	rsb	lr, r4, r0
 80068bc:	f1be 0f0f 	cmp.w	lr, #15
 80068c0:	dd0d      	ble.n	80068de <_malloc_r+0x11a>
 80068c2:	1933      	adds	r3, r6, r4
 80068c4:	f044 0401 	orr.w	r4, r4, #1
 80068c8:	6074      	str	r4, [r6, #4]
 80068ca:	6153      	str	r3, [r2, #20]
 80068cc:	6113      	str	r3, [r2, #16]
 80068ce:	f04e 0201 	orr.w	r2, lr, #1
 80068d2:	60df      	str	r7, [r3, #12]
 80068d4:	609f      	str	r7, [r3, #8]
 80068d6:	605a      	str	r2, [r3, #4]
 80068d8:	f843 e00e 	str.w	lr, [r3, lr]
 80068dc:	e17b      	b.n	8006bd6 <_malloc_r+0x412>
 80068de:	f1be 0f00 	cmp.w	lr, #0
 80068e2:	6157      	str	r7, [r2, #20]
 80068e4:	6117      	str	r7, [r2, #16]
 80068e6:	db05      	blt.n	80068f4 <_malloc_r+0x130>
 80068e8:	4430      	add	r0, r6
 80068ea:	6843      	ldr	r3, [r0, #4]
 80068ec:	f043 0301 	orr.w	r3, r3, #1
 80068f0:	6043      	str	r3, [r0, #4]
 80068f2:	e170      	b.n	8006bd6 <_malloc_r+0x412>
 80068f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80068f8:	d215      	bcs.n	8006926 <_malloc_r+0x162>
 80068fa:	08c0      	lsrs	r0, r0, #3
 80068fc:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8006900:	2701      	movs	r7, #1
 8006902:	fa07 fe0e 	lsl.w	lr, r7, lr
 8006906:	6857      	ldr	r7, [r2, #4]
 8006908:	3001      	adds	r0, #1
 800690a:	ea4e 0707 	orr.w	r7, lr, r7
 800690e:	6057      	str	r7, [r2, #4]
 8006910:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8006914:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8006918:	f8c6 e008 	str.w	lr, [r6, #8]
 800691c:	3f08      	subs	r7, #8
 800691e:	60f7      	str	r7, [r6, #12]
 8006920:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8006924:	e03d      	b.n	80069a2 <_malloc_r+0x1de>
 8006926:	0a42      	lsrs	r2, r0, #9
 8006928:	2a04      	cmp	r2, #4
 800692a:	d802      	bhi.n	8006932 <_malloc_r+0x16e>
 800692c:	0982      	lsrs	r2, r0, #6
 800692e:	3238      	adds	r2, #56	; 0x38
 8006930:	e015      	b.n	800695e <_malloc_r+0x19a>
 8006932:	2a14      	cmp	r2, #20
 8006934:	d801      	bhi.n	800693a <_malloc_r+0x176>
 8006936:	325b      	adds	r2, #91	; 0x5b
 8006938:	e011      	b.n	800695e <_malloc_r+0x19a>
 800693a:	2a54      	cmp	r2, #84	; 0x54
 800693c:	d802      	bhi.n	8006944 <_malloc_r+0x180>
 800693e:	0b02      	lsrs	r2, r0, #12
 8006940:	326e      	adds	r2, #110	; 0x6e
 8006942:	e00c      	b.n	800695e <_malloc_r+0x19a>
 8006944:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006948:	d802      	bhi.n	8006950 <_malloc_r+0x18c>
 800694a:	0bc2      	lsrs	r2, r0, #15
 800694c:	3277      	adds	r2, #119	; 0x77
 800694e:	e006      	b.n	800695e <_malloc_r+0x19a>
 8006950:	f240 5754 	movw	r7, #1364	; 0x554
 8006954:	42ba      	cmp	r2, r7
 8006956:	bf9a      	itte	ls
 8006958:	0c82      	lsrls	r2, r0, #18
 800695a:	327c      	addls	r2, #124	; 0x7c
 800695c:	227e      	movhi	r2, #126	; 0x7e
 800695e:	1c57      	adds	r7, r2, #1
 8006960:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8006964:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8006968:	f8df c104 	ldr.w	ip, [pc, #260]	; 8006a70 <_malloc_r+0x2ac>
 800696c:	45be      	cmp	lr, r7
 800696e:	d10d      	bne.n	800698c <_malloc_r+0x1c8>
 8006970:	2001      	movs	r0, #1
 8006972:	1092      	asrs	r2, r2, #2
 8006974:	fa00 f202 	lsl.w	r2, r0, r2
 8006978:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800697c:	4310      	orrs	r0, r2
 800697e:	f8cc 0004 	str.w	r0, [ip, #4]
 8006982:	4672      	mov	r2, lr
 8006984:	e009      	b.n	800699a <_malloc_r+0x1d6>
 8006986:	68bf      	ldr	r7, [r7, #8]
 8006988:	45be      	cmp	lr, r7
 800698a:	d004      	beq.n	8006996 <_malloc_r+0x1d2>
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	f022 0203 	bic.w	r2, r2, #3
 8006992:	4290      	cmp	r0, r2
 8006994:	d3f7      	bcc.n	8006986 <_malloc_r+0x1c2>
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	46be      	mov	lr, r7
 800699a:	60f2      	str	r2, [r6, #12]
 800699c:	f8c6 e008 	str.w	lr, [r6, #8]
 80069a0:	6096      	str	r6, [r2, #8]
 80069a2:	f8ce 600c 	str.w	r6, [lr, #12]
 80069a6:	2001      	movs	r0, #1
 80069a8:	109a      	asrs	r2, r3, #2
 80069aa:	fa00 f202 	lsl.w	r2, r0, r2
 80069ae:	6868      	ldr	r0, [r5, #4]
 80069b0:	4282      	cmp	r2, r0
 80069b2:	d85f      	bhi.n	8006a74 <_malloc_r+0x2b0>
 80069b4:	4202      	tst	r2, r0
 80069b6:	d106      	bne.n	80069c6 <_malloc_r+0x202>
 80069b8:	f023 0303 	bic.w	r3, r3, #3
 80069bc:	0052      	lsls	r2, r2, #1
 80069be:	4202      	tst	r2, r0
 80069c0:	f103 0304 	add.w	r3, r3, #4
 80069c4:	d0fa      	beq.n	80069bc <_malloc_r+0x1f8>
 80069c6:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80069ca:	46c2      	mov	sl, r8
 80069cc:	469c      	mov	ip, r3
 80069ce:	f8da 600c 	ldr.w	r6, [sl, #12]
 80069d2:	4556      	cmp	r6, sl
 80069d4:	d02c      	beq.n	8006a30 <_malloc_r+0x26c>
 80069d6:	6870      	ldr	r0, [r6, #4]
 80069d8:	68f7      	ldr	r7, [r6, #12]
 80069da:	f020 0003 	bic.w	r0, r0, #3
 80069de:	ebc4 0e00 	rsb	lr, r4, r0
 80069e2:	f1be 0f0f 	cmp.w	lr, #15
 80069e6:	dd11      	ble.n	8006a0c <_malloc_r+0x248>
 80069e8:	1933      	adds	r3, r6, r4
 80069ea:	f044 0401 	orr.w	r4, r4, #1
 80069ee:	6074      	str	r4, [r6, #4]
 80069f0:	f856 2f08 	ldr.w	r2, [r6, #8]!
 80069f4:	60d7      	str	r7, [r2, #12]
 80069f6:	60ba      	str	r2, [r7, #8]
 80069f8:	f04e 0201 	orr.w	r2, lr, #1
 80069fc:	616b      	str	r3, [r5, #20]
 80069fe:	612b      	str	r3, [r5, #16]
 8006a00:	60d9      	str	r1, [r3, #12]
 8006a02:	6099      	str	r1, [r3, #8]
 8006a04:	605a      	str	r2, [r3, #4]
 8006a06:	f843 e00e 	str.w	lr, [r3, lr]
 8006a0a:	e00b      	b.n	8006a24 <_malloc_r+0x260>
 8006a0c:	f1be 0f00 	cmp.w	lr, #0
 8006a10:	db0c      	blt.n	8006a2c <_malloc_r+0x268>
 8006a12:	1833      	adds	r3, r6, r0
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	f042 0201 	orr.w	r2, r2, #1
 8006a1a:	605a      	str	r2, [r3, #4]
 8006a1c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8006a20:	60df      	str	r7, [r3, #12]
 8006a22:	60bb      	str	r3, [r7, #8]
 8006a24:	4648      	mov	r0, r9
 8006a26:	f000 f8ee 	bl	8006c06 <__malloc_unlock>
 8006a2a:	e0d8      	b.n	8006bde <_malloc_r+0x41a>
 8006a2c:	463e      	mov	r6, r7
 8006a2e:	e7d0      	b.n	80069d2 <_malloc_r+0x20e>
 8006a30:	f10c 0c01 	add.w	ip, ip, #1
 8006a34:	f01c 0f03 	tst.w	ip, #3
 8006a38:	f10a 0a08 	add.w	sl, sl, #8
 8006a3c:	d1c7      	bne.n	80069ce <_malloc_r+0x20a>
 8006a3e:	0798      	lsls	r0, r3, #30
 8006a40:	d104      	bne.n	8006a4c <_malloc_r+0x288>
 8006a42:	686b      	ldr	r3, [r5, #4]
 8006a44:	ea23 0302 	bic.w	r3, r3, r2
 8006a48:	606b      	str	r3, [r5, #4]
 8006a4a:	e005      	b.n	8006a58 <_malloc_r+0x294>
 8006a4c:	f858 0908 	ldr.w	r0, [r8], #-8
 8006a50:	4580      	cmp	r8, r0
 8006a52:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a56:	d0f2      	beq.n	8006a3e <_malloc_r+0x27a>
 8006a58:	6868      	ldr	r0, [r5, #4]
 8006a5a:	0052      	lsls	r2, r2, #1
 8006a5c:	4282      	cmp	r2, r0
 8006a5e:	d809      	bhi.n	8006a74 <_malloc_r+0x2b0>
 8006a60:	b142      	cbz	r2, 8006a74 <_malloc_r+0x2b0>
 8006a62:	4663      	mov	r3, ip
 8006a64:	4202      	tst	r2, r0
 8006a66:	d1ae      	bne.n	80069c6 <_malloc_r+0x202>
 8006a68:	3304      	adds	r3, #4
 8006a6a:	0052      	lsls	r2, r2, #1
 8006a6c:	e7fa      	b.n	8006a64 <_malloc_r+0x2a0>
 8006a6e:	bf00      	nop
 8006a70:	2000009c 	.word	0x2000009c
 8006a74:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8006a78:	f8db 6004 	ldr.w	r6, [fp, #4]
 8006a7c:	f026 0603 	bic.w	r6, r6, #3
 8006a80:	42b4      	cmp	r4, r6
 8006a82:	d803      	bhi.n	8006a8c <_malloc_r+0x2c8>
 8006a84:	1b33      	subs	r3, r6, r4
 8006a86:	2b0f      	cmp	r3, #15
 8006a88:	f300 809c 	bgt.w	8006bc4 <_malloc_r+0x400>
 8006a8c:	4a56      	ldr	r2, [pc, #344]	; (8006be8 <_malloc_r+0x424>)
 8006a8e:	4957      	ldr	r1, [pc, #348]	; (8006bec <_malloc_r+0x428>)
 8006a90:	6812      	ldr	r2, [r2, #0]
 8006a92:	6808      	ldr	r0, [r1, #0]
 8006a94:	9101      	str	r1, [sp, #4]
 8006a96:	f102 0810 	add.w	r8, r2, #16
 8006a9a:	4a55      	ldr	r2, [pc, #340]	; (8006bf0 <_malloc_r+0x42c>)
 8006a9c:	9203      	str	r2, [sp, #12]
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	bf18      	it	ne
 8006aa2:	f102 31ff 	addne.w	r1, r2, #4294967295
 8006aa6:	44a0      	add	r8, r4
 8006aa8:	bf1e      	ittt	ne
 8006aaa:	4488      	addne	r8, r1
 8006aac:	4251      	negne	r1, r2
 8006aae:	ea01 0808 	andne.w	r8, r1, r8
 8006ab2:	eb0b 0306 	add.w	r3, fp, r6
 8006ab6:	4641      	mov	r1, r8
 8006ab8:	4648      	mov	r0, r9
 8006aba:	9302      	str	r3, [sp, #8]
 8006abc:	f000 f8de 	bl	8006c7c <_sbrk_r>
 8006ac0:	1c42      	adds	r2, r0, #1
 8006ac2:	4607      	mov	r7, r0
 8006ac4:	d06f      	beq.n	8006ba6 <_malloc_r+0x3e2>
 8006ac6:	9b02      	ldr	r3, [sp, #8]
 8006ac8:	9a03      	ldr	r2, [sp, #12]
 8006aca:	4283      	cmp	r3, r0
 8006acc:	d901      	bls.n	8006ad2 <_malloc_r+0x30e>
 8006ace:	45ab      	cmp	fp, r5
 8006ad0:	d169      	bne.n	8006ba6 <_malloc_r+0x3e2>
 8006ad2:	f8df a128 	ldr.w	sl, [pc, #296]	; 8006bfc <_malloc_r+0x438>
 8006ad6:	f8df c128 	ldr.w	ip, [pc, #296]	; 8006c00 <_malloc_r+0x43c>
 8006ada:	f8da 0000 	ldr.w	r0, [sl]
 8006ade:	42bb      	cmp	r3, r7
 8006ae0:	4440      	add	r0, r8
 8006ae2:	f8ca 0000 	str.w	r0, [sl]
 8006ae6:	d108      	bne.n	8006afa <_malloc_r+0x336>
 8006ae8:	ea13 0f0c 	tst.w	r3, ip
 8006aec:	d105      	bne.n	8006afa <_malloc_r+0x336>
 8006aee:	68ab      	ldr	r3, [r5, #8]
 8006af0:	4446      	add	r6, r8
 8006af2:	f046 0601 	orr.w	r6, r6, #1
 8006af6:	605e      	str	r6, [r3, #4]
 8006af8:	e049      	b.n	8006b8e <_malloc_r+0x3ca>
 8006afa:	9901      	ldr	r1, [sp, #4]
 8006afc:	f8d1 e000 	ldr.w	lr, [r1]
 8006b00:	f1be 3fff 	cmp.w	lr, #4294967295
 8006b04:	bf15      	itete	ne
 8006b06:	1afb      	subne	r3, r7, r3
 8006b08:	4b38      	ldreq	r3, [pc, #224]	; (8006bec <_malloc_r+0x428>)
 8006b0a:	181b      	addne	r3, r3, r0
 8006b0c:	601f      	streq	r7, [r3, #0]
 8006b0e:	bf18      	it	ne
 8006b10:	f8ca 3000 	strne.w	r3, [sl]
 8006b14:	f017 0307 	ands.w	r3, r7, #7
 8006b18:	bf1c      	itt	ne
 8006b1a:	f1c3 0308 	rsbne	r3, r3, #8
 8006b1e:	18ff      	addne	r7, r7, r3
 8006b20:	44b8      	add	r8, r7
 8006b22:	441a      	add	r2, r3
 8006b24:	ea08 080c 	and.w	r8, r8, ip
 8006b28:	ebc8 0802 	rsb	r8, r8, r2
 8006b2c:	4641      	mov	r1, r8
 8006b2e:	4648      	mov	r0, r9
 8006b30:	f000 f8a4 	bl	8006c7c <_sbrk_r>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	bf04      	itt	eq
 8006b38:	4638      	moveq	r0, r7
 8006b3a:	f04f 0800 	moveq.w	r8, #0
 8006b3e:	f8da 3000 	ldr.w	r3, [sl]
 8006b42:	60af      	str	r7, [r5, #8]
 8006b44:	1bc2      	subs	r2, r0, r7
 8006b46:	4442      	add	r2, r8
 8006b48:	4443      	add	r3, r8
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	45ab      	cmp	fp, r5
 8006b50:	f8ca 3000 	str.w	r3, [sl]
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	d01a      	beq.n	8006b8e <_malloc_r+0x3ca>
 8006b58:	2e0f      	cmp	r6, #15
 8006b5a:	d802      	bhi.n	8006b62 <_malloc_r+0x39e>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	607b      	str	r3, [r7, #4]
 8006b60:	e021      	b.n	8006ba6 <_malloc_r+0x3e2>
 8006b62:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006b66:	3e0c      	subs	r6, #12
 8006b68:	f026 0607 	bic.w	r6, r6, #7
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	4333      	orrs	r3, r6
 8006b72:	f8cb 3004 	str.w	r3, [fp, #4]
 8006b76:	eb0b 0306 	add.w	r3, fp, r6
 8006b7a:	2205      	movs	r2, #5
 8006b7c:	2e0f      	cmp	r6, #15
 8006b7e:	605a      	str	r2, [r3, #4]
 8006b80:	609a      	str	r2, [r3, #8]
 8006b82:	d904      	bls.n	8006b8e <_malloc_r+0x3ca>
 8006b84:	f10b 0108 	add.w	r1, fp, #8
 8006b88:	4648      	mov	r0, r9
 8006b8a:	f000 f8dd 	bl	8006d48 <_free_r>
 8006b8e:	4a19      	ldr	r2, [pc, #100]	; (8006bf4 <_malloc_r+0x430>)
 8006b90:	f8da 3000 	ldr.w	r3, [sl]
 8006b94:	6811      	ldr	r1, [r2, #0]
 8006b96:	428b      	cmp	r3, r1
 8006b98:	bf88      	it	hi
 8006b9a:	6013      	strhi	r3, [r2, #0]
 8006b9c:	4a16      	ldr	r2, [pc, #88]	; (8006bf8 <_malloc_r+0x434>)
 8006b9e:	6811      	ldr	r1, [r2, #0]
 8006ba0:	428b      	cmp	r3, r1
 8006ba2:	bf88      	it	hi
 8006ba4:	6013      	strhi	r3, [r2, #0]
 8006ba6:	68ab      	ldr	r3, [r5, #8]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	f022 0203 	bic.w	r2, r2, #3
 8006bae:	4294      	cmp	r4, r2
 8006bb0:	eba2 0304 	sub.w	r3, r2, r4
 8006bb4:	d801      	bhi.n	8006bba <_malloc_r+0x3f6>
 8006bb6:	2b0f      	cmp	r3, #15
 8006bb8:	dc04      	bgt.n	8006bc4 <_malloc_r+0x400>
 8006bba:	4648      	mov	r0, r9
 8006bbc:	f000 f823 	bl	8006c06 <__malloc_unlock>
 8006bc0:	2600      	movs	r6, #0
 8006bc2:	e00c      	b.n	8006bde <_malloc_r+0x41a>
 8006bc4:	68ae      	ldr	r6, [r5, #8]
 8006bc6:	f044 0201 	orr.w	r2, r4, #1
 8006bca:	4434      	add	r4, r6
 8006bcc:	f043 0301 	orr.w	r3, r3, #1
 8006bd0:	6072      	str	r2, [r6, #4]
 8006bd2:	60ac      	str	r4, [r5, #8]
 8006bd4:	6063      	str	r3, [r4, #4]
 8006bd6:	4648      	mov	r0, r9
 8006bd8:	f000 f815 	bl	8006c06 <__malloc_unlock>
 8006bdc:	3608      	adds	r6, #8
 8006bde:	4630      	mov	r0, r6
 8006be0:	b005      	add	sp, #20
 8006be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be6:	bf00      	nop
 8006be8:	20004980 	.word	0x20004980
 8006bec:	200004a8 	.word	0x200004a8
 8006bf0:	00000080 	.word	0x00000080
 8006bf4:	2000497c 	.word	0x2000497c
 8006bf8:	20004978 	.word	0x20004978
 8006bfc:	20004984 	.word	0x20004984
 8006c00:	0000007f 	.word	0x0000007f

08006c04 <__malloc_lock>:
 8006c04:	4770      	bx	lr

08006c06 <__malloc_unlock>:
 8006c06:	4770      	bx	lr

08006c08 <rand>:
 8006c08:	4b19      	ldr	r3, [pc, #100]	; (8006c70 <rand+0x68>)
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	681c      	ldr	r4, [r3, #0]
 8006c0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c10:	b9d3      	cbnz	r3, 8006c48 <rand+0x40>
 8006c12:	2018      	movs	r0, #24
 8006c14:	f7ff fdce 	bl	80067b4 <malloc>
 8006c18:	f243 330e 	movw	r3, #13070	; 0x330e
 8006c1c:	63a0      	str	r0, [r4, #56]	; 0x38
 8006c1e:	8003      	strh	r3, [r0, #0]
 8006c20:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8006c24:	8043      	strh	r3, [r0, #2]
 8006c26:	f241 2334 	movw	r3, #4660	; 0x1234
 8006c2a:	8083      	strh	r3, [r0, #4]
 8006c2c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8006c30:	80c3      	strh	r3, [r0, #6]
 8006c32:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8006c36:	8103      	strh	r3, [r0, #8]
 8006c38:	2305      	movs	r3, #5
 8006c3a:	8143      	strh	r3, [r0, #10]
 8006c3c:	230b      	movs	r3, #11
 8006c3e:	8183      	strh	r3, [r0, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	2300      	movs	r3, #0
 8006c44:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006c48:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c4a:	4c0a      	ldr	r4, [pc, #40]	; (8006c74 <rand+0x6c>)
 8006c4c:	690b      	ldr	r3, [r1, #16]
 8006c4e:	6948      	ldr	r0, [r1, #20]
 8006c50:	4a09      	ldr	r2, [pc, #36]	; (8006c78 <rand+0x70>)
 8006c52:	435c      	muls	r4, r3
 8006c54:	fb02 4000 	mla	r0, r2, r0, r4
 8006c58:	fba3 2302 	umull	r2, r3, r3, r2
 8006c5c:	3201      	adds	r2, #1
 8006c5e:	4403      	add	r3, r0
 8006c60:	f143 0300 	adc.w	r3, r3, #0
 8006c64:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8006c68:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8006c6c:	bd10      	pop	{r4, pc}
 8006c6e:	bf00      	nop
 8006c70:	2000059c 	.word	0x2000059c
 8006c74:	5851f42d 	.word	0x5851f42d
 8006c78:	4c957f2d 	.word	0x4c957f2d

08006c7c <_sbrk_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4c06      	ldr	r4, [pc, #24]	; (8006c98 <_sbrk_r+0x1c>)
 8006c80:	2300      	movs	r3, #0
 8006c82:	4605      	mov	r5, r0
 8006c84:	4608      	mov	r0, r1
 8006c86:	6023      	str	r3, [r4, #0]
 8006c88:	f002 ff6c 	bl	8009b64 <_sbrk>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	d102      	bne.n	8006c96 <_sbrk_r+0x1a>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	b103      	cbz	r3, 8006c96 <_sbrk_r+0x1a>
 8006c94:	602b      	str	r3, [r5, #0]
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	20004aa8 	.word	0x20004aa8

08006c9c <_malloc_trim_r>:
 8006c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca0:	4f25      	ldr	r7, [pc, #148]	; (8006d38 <_malloc_trim_r+0x9c>)
 8006ca2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006d44 <_malloc_trim_r+0xa8>
 8006ca6:	4689      	mov	r9, r1
 8006ca8:	4606      	mov	r6, r0
 8006caa:	f7ff ffab 	bl	8006c04 <__malloc_lock>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	685d      	ldr	r5, [r3, #4]
 8006cb2:	f1a8 0411 	sub.w	r4, r8, #17
 8006cb6:	f025 0503 	bic.w	r5, r5, #3
 8006cba:	442c      	add	r4, r5
 8006cbc:	ebc9 0404 	rsb	r4, r9, r4
 8006cc0:	fbb4 f4f8 	udiv	r4, r4, r8
 8006cc4:	3c01      	subs	r4, #1
 8006cc6:	fb08 f404 	mul.w	r4, r8, r4
 8006cca:	4544      	cmp	r4, r8
 8006ccc:	da05      	bge.n	8006cda <_malloc_trim_r+0x3e>
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f7ff ff99 	bl	8006c06 <__malloc_unlock>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cda:	2100      	movs	r1, #0
 8006cdc:	4630      	mov	r0, r6
 8006cde:	f7ff ffcd 	bl	8006c7c <_sbrk_r>
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	442b      	add	r3, r5
 8006ce6:	4298      	cmp	r0, r3
 8006ce8:	d1f1      	bne.n	8006cce <_malloc_trim_r+0x32>
 8006cea:	4261      	negs	r1, r4
 8006cec:	4630      	mov	r0, r6
 8006cee:	f7ff ffc5 	bl	8006c7c <_sbrk_r>
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	d110      	bne.n	8006d18 <_malloc_trim_r+0x7c>
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f7ff ffbf 	bl	8006c7c <_sbrk_r>
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	1a83      	subs	r3, r0, r2
 8006d02:	2b0f      	cmp	r3, #15
 8006d04:	dde3      	ble.n	8006cce <_malloc_trim_r+0x32>
 8006d06:	490d      	ldr	r1, [pc, #52]	; (8006d3c <_malloc_trim_r+0xa0>)
 8006d08:	6809      	ldr	r1, [r1, #0]
 8006d0a:	1a40      	subs	r0, r0, r1
 8006d0c:	490c      	ldr	r1, [pc, #48]	; (8006d40 <_malloc_trim_r+0xa4>)
 8006d0e:	f043 0301 	orr.w	r3, r3, #1
 8006d12:	6008      	str	r0, [r1, #0]
 8006d14:	6053      	str	r3, [r2, #4]
 8006d16:	e7da      	b.n	8006cce <_malloc_trim_r+0x32>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4a09      	ldr	r2, [pc, #36]	; (8006d40 <_malloc_trim_r+0xa4>)
 8006d1c:	1b2d      	subs	r5, r5, r4
 8006d1e:	f045 0501 	orr.w	r5, r5, #1
 8006d22:	605d      	str	r5, [r3, #4]
 8006d24:	6813      	ldr	r3, [r2, #0]
 8006d26:	4630      	mov	r0, r6
 8006d28:	1b1c      	subs	r4, r3, r4
 8006d2a:	6014      	str	r4, [r2, #0]
 8006d2c:	f7ff ff6b 	bl	8006c06 <__malloc_unlock>
 8006d30:	2001      	movs	r0, #1
 8006d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d36:	bf00      	nop
 8006d38:	2000009c 	.word	0x2000009c
 8006d3c:	200004a8 	.word	0x200004a8
 8006d40:	20004984 	.word	0x20004984
 8006d44:	00000080 	.word	0x00000080

08006d48 <_free_r>:
 8006d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	4688      	mov	r8, r1
 8006d50:	2900      	cmp	r1, #0
 8006d52:	f000 80ad 	beq.w	8006eb0 <_free_r+0x168>
 8006d56:	f7ff ff55 	bl	8006c04 <__malloc_lock>
 8006d5a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006d5e:	4d55      	ldr	r5, [pc, #340]	; (8006eb4 <_free_r+0x16c>)
 8006d60:	f022 0001 	bic.w	r0, r2, #1
 8006d64:	f1a8 0308 	sub.w	r3, r8, #8
 8006d68:	181f      	adds	r7, r3, r0
 8006d6a:	68a9      	ldr	r1, [r5, #8]
 8006d6c:	687e      	ldr	r6, [r7, #4]
 8006d6e:	428f      	cmp	r7, r1
 8006d70:	f026 0603 	bic.w	r6, r6, #3
 8006d74:	f002 0201 	and.w	r2, r2, #1
 8006d78:	d11b      	bne.n	8006db2 <_free_r+0x6a>
 8006d7a:	4430      	add	r0, r6
 8006d7c:	b93a      	cbnz	r2, 8006d8e <_free_r+0x46>
 8006d7e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	4410      	add	r0, r2
 8006d86:	6899      	ldr	r1, [r3, #8]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	60ca      	str	r2, [r1, #12]
 8006d8c:	6091      	str	r1, [r2, #8]
 8006d8e:	f040 0201 	orr.w	r2, r0, #1
 8006d92:	605a      	str	r2, [r3, #4]
 8006d94:	60ab      	str	r3, [r5, #8]
 8006d96:	4b48      	ldr	r3, [pc, #288]	; (8006eb8 <_free_r+0x170>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4298      	cmp	r0, r3
 8006d9c:	d304      	bcc.n	8006da8 <_free_r+0x60>
 8006d9e:	4b47      	ldr	r3, [pc, #284]	; (8006ebc <_free_r+0x174>)
 8006da0:	4620      	mov	r0, r4
 8006da2:	6819      	ldr	r1, [r3, #0]
 8006da4:	f7ff ff7a 	bl	8006c9c <_malloc_trim_r>
 8006da8:	4620      	mov	r0, r4
 8006daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dae:	f7ff bf2a 	b.w	8006c06 <__malloc_unlock>
 8006db2:	607e      	str	r6, [r7, #4]
 8006db4:	b97a      	cbnz	r2, 8006dd6 <_free_r+0x8e>
 8006db6:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8006dba:	1a5b      	subs	r3, r3, r1
 8006dbc:	4408      	add	r0, r1
 8006dbe:	6899      	ldr	r1, [r3, #8]
 8006dc0:	f105 0e08 	add.w	lr, r5, #8
 8006dc4:	4571      	cmp	r1, lr
 8006dc6:	d008      	beq.n	8006dda <_free_r+0x92>
 8006dc8:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8006dcc:	f8c1 e00c 	str.w	lr, [r1, #12]
 8006dd0:	f8ce 1008 	str.w	r1, [lr, #8]
 8006dd4:	e002      	b.n	8006ddc <_free_r+0x94>
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	e000      	b.n	8006ddc <_free_r+0x94>
 8006dda:	2201      	movs	r2, #1
 8006ddc:	19b9      	adds	r1, r7, r6
 8006dde:	6849      	ldr	r1, [r1, #4]
 8006de0:	07c9      	lsls	r1, r1, #31
 8006de2:	d40e      	bmi.n	8006e02 <_free_r+0xba>
 8006de4:	4430      	add	r0, r6
 8006de6:	68b9      	ldr	r1, [r7, #8]
 8006de8:	b942      	cbnz	r2, 8006dfc <_free_r+0xb4>
 8006dea:	4e35      	ldr	r6, [pc, #212]	; (8006ec0 <_free_r+0x178>)
 8006dec:	42b1      	cmp	r1, r6
 8006dee:	d105      	bne.n	8006dfc <_free_r+0xb4>
 8006df0:	616b      	str	r3, [r5, #20]
 8006df2:	612b      	str	r3, [r5, #16]
 8006df4:	2201      	movs	r2, #1
 8006df6:	60d9      	str	r1, [r3, #12]
 8006df8:	6099      	str	r1, [r3, #8]
 8006dfa:	e002      	b.n	8006e02 <_free_r+0xba>
 8006dfc:	68fe      	ldr	r6, [r7, #12]
 8006dfe:	60ce      	str	r6, [r1, #12]
 8006e00:	60b1      	str	r1, [r6, #8]
 8006e02:	f040 0101 	orr.w	r1, r0, #1
 8006e06:	6059      	str	r1, [r3, #4]
 8006e08:	5018      	str	r0, [r3, r0]
 8006e0a:	2a00      	cmp	r2, #0
 8006e0c:	d1cc      	bne.n	8006da8 <_free_r+0x60>
 8006e0e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006e12:	d212      	bcs.n	8006e3a <_free_r+0xf2>
 8006e14:	08c0      	lsrs	r0, r0, #3
 8006e16:	1081      	asrs	r1, r0, #2
 8006e18:	2201      	movs	r2, #1
 8006e1a:	fa02 f101 	lsl.w	r1, r2, r1
 8006e1e:	686a      	ldr	r2, [r5, #4]
 8006e20:	3001      	adds	r0, #1
 8006e22:	430a      	orrs	r2, r1
 8006e24:	606a      	str	r2, [r5, #4]
 8006e26:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8006e2a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8006e2e:	6099      	str	r1, [r3, #8]
 8006e30:	3a08      	subs	r2, #8
 8006e32:	60da      	str	r2, [r3, #12]
 8006e34:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8006e38:	e038      	b.n	8006eac <_free_r+0x164>
 8006e3a:	0a42      	lsrs	r2, r0, #9
 8006e3c:	2a04      	cmp	r2, #4
 8006e3e:	d802      	bhi.n	8006e46 <_free_r+0xfe>
 8006e40:	0982      	lsrs	r2, r0, #6
 8006e42:	3238      	adds	r2, #56	; 0x38
 8006e44:	e015      	b.n	8006e72 <_free_r+0x12a>
 8006e46:	2a14      	cmp	r2, #20
 8006e48:	d801      	bhi.n	8006e4e <_free_r+0x106>
 8006e4a:	325b      	adds	r2, #91	; 0x5b
 8006e4c:	e011      	b.n	8006e72 <_free_r+0x12a>
 8006e4e:	2a54      	cmp	r2, #84	; 0x54
 8006e50:	d802      	bhi.n	8006e58 <_free_r+0x110>
 8006e52:	0b02      	lsrs	r2, r0, #12
 8006e54:	326e      	adds	r2, #110	; 0x6e
 8006e56:	e00c      	b.n	8006e72 <_free_r+0x12a>
 8006e58:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006e5c:	d802      	bhi.n	8006e64 <_free_r+0x11c>
 8006e5e:	0bc2      	lsrs	r2, r0, #15
 8006e60:	3277      	adds	r2, #119	; 0x77
 8006e62:	e006      	b.n	8006e72 <_free_r+0x12a>
 8006e64:	f240 5154 	movw	r1, #1364	; 0x554
 8006e68:	428a      	cmp	r2, r1
 8006e6a:	bf9a      	itte	ls
 8006e6c:	0c82      	lsrls	r2, r0, #18
 8006e6e:	327c      	addls	r2, #124	; 0x7c
 8006e70:	227e      	movhi	r2, #126	; 0x7e
 8006e72:	1c51      	adds	r1, r2, #1
 8006e74:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8006e78:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8006e7c:	4f0d      	ldr	r7, [pc, #52]	; (8006eb4 <_free_r+0x16c>)
 8006e7e:	428e      	cmp	r6, r1
 8006e80:	d10b      	bne.n	8006e9a <_free_r+0x152>
 8006e82:	2101      	movs	r1, #1
 8006e84:	1092      	asrs	r2, r2, #2
 8006e86:	fa01 f202 	lsl.w	r2, r1, r2
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	4311      	orrs	r1, r2
 8006e8e:	6079      	str	r1, [r7, #4]
 8006e90:	4631      	mov	r1, r6
 8006e92:	e008      	b.n	8006ea6 <_free_r+0x15e>
 8006e94:	6889      	ldr	r1, [r1, #8]
 8006e96:	428e      	cmp	r6, r1
 8006e98:	d004      	beq.n	8006ea4 <_free_r+0x15c>
 8006e9a:	684a      	ldr	r2, [r1, #4]
 8006e9c:	f022 0203 	bic.w	r2, r2, #3
 8006ea0:	4290      	cmp	r0, r2
 8006ea2:	d3f7      	bcc.n	8006e94 <_free_r+0x14c>
 8006ea4:	68ce      	ldr	r6, [r1, #12]
 8006ea6:	60de      	str	r6, [r3, #12]
 8006ea8:	6099      	str	r1, [r3, #8]
 8006eaa:	60b3      	str	r3, [r6, #8]
 8006eac:	60cb      	str	r3, [r1, #12]
 8006eae:	e77b      	b.n	8006da8 <_free_r+0x60>
 8006eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eb4:	2000009c 	.word	0x2000009c
 8006eb8:	200004a4 	.word	0x200004a4
 8006ebc:	20004980 	.word	0x20004980
 8006ec0:	200000a4 	.word	0x200000a4
 8006ec4:	00000000 	.word	0x00000000

08006ec8 <cos>:
 8006ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eca:	ec51 0b10 	vmov	r0, r1, d0
 8006ece:	4a1e      	ldr	r2, [pc, #120]	; (8006f48 <cos+0x80>)
 8006ed0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	dc02      	bgt.n	8006ede <cos+0x16>
 8006ed8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006f40 <cos+0x78>
 8006edc:	e016      	b.n	8006f0c <cos+0x44>
 8006ede:	4a1b      	ldr	r2, [pc, #108]	; (8006f4c <cos+0x84>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	dd05      	ble.n	8006ef0 <cos+0x28>
 8006ee4:	ee10 2a10 	vmov	r2, s0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	f7f9 f971 	bl	80001d0 <__aeabi_dsub>
 8006eee:	e021      	b.n	8006f34 <cos+0x6c>
 8006ef0:	4668      	mov	r0, sp
 8006ef2:	f000 fcd5 	bl	80078a0 <__ieee754_rem_pio2>
 8006ef6:	f000 0003 	and.w	r0, r0, #3
 8006efa:	2801      	cmp	r0, #1
 8006efc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f00:	ed9d 0b00 	vldr	d0, [sp]
 8006f04:	d005      	beq.n	8006f12 <cos+0x4a>
 8006f06:	2802      	cmp	r0, #2
 8006f08:	d006      	beq.n	8006f18 <cos+0x50>
 8006f0a:	b970      	cbnz	r0, 8006f2a <cos+0x62>
 8006f0c:	f001 fbb4 	bl	8008678 <__kernel_cos>
 8006f10:	e00e      	b.n	8006f30 <cos+0x68>
 8006f12:	f001 ffe9 	bl	8008ee8 <__kernel_sin>
 8006f16:	e001      	b.n	8006f1c <cos+0x54>
 8006f18:	f001 fbae 	bl	8008678 <__kernel_cos>
 8006f1c:	ec53 2b10 	vmov	r2, r3, d0
 8006f20:	ee10 0a10 	vmov	r0, s0
 8006f24:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006f28:	e004      	b.n	8006f34 <cos+0x6c>
 8006f2a:	2001      	movs	r0, #1
 8006f2c:	f001 ffdc 	bl	8008ee8 <__kernel_sin>
 8006f30:	ec51 0b10 	vmov	r0, r1, d0
 8006f34:	ec41 0b10 	vmov	d0, r0, r1
 8006f38:	b005      	add	sp, #20
 8006f3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f3e:	bf00      	nop
	...
 8006f48:	3fe921fb 	.word	0x3fe921fb
 8006f4c:	7fefffff 	.word	0x7fefffff

08006f50 <cosf>:
 8006f50:	ee10 3a10 	vmov	r3, s0
 8006f54:	b507      	push	{r0, r1, r2, lr}
 8006f56:	4a1c      	ldr	r2, [pc, #112]	; (8006fc8 <cosf+0x78>)
 8006f58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	dc02      	bgt.n	8006f66 <cosf+0x16>
 8006f60:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8006fcc <cosf+0x7c>
 8006f64:	e013      	b.n	8006f8e <cosf+0x3e>
 8006f66:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006f6a:	db02      	blt.n	8006f72 <cosf+0x22>
 8006f6c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006f70:	e027      	b.n	8006fc2 <cosf+0x72>
 8006f72:	4668      	mov	r0, sp
 8006f74:	f001 fa0c 	bl	8008390 <__ieee754_rem_pio2f>
 8006f78:	f000 0003 	and.w	r0, r0, #3
 8006f7c:	2801      	cmp	r0, #1
 8006f7e:	d009      	beq.n	8006f94 <cosf+0x44>
 8006f80:	2802      	cmp	r0, #2
 8006f82:	d00e      	beq.n	8006fa2 <cosf+0x52>
 8006f84:	b9b0      	cbnz	r0, 8006fb4 <cosf+0x64>
 8006f86:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f8a:	ed9d 0a00 	vldr	s0, [sp]
 8006f8e:	f002 f865 	bl	800905c <__kernel_cosf>
 8006f92:	e016      	b.n	8006fc2 <cosf+0x72>
 8006f94:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f98:	ed9d 0a00 	vldr	s0, [sp]
 8006f9c:	f002 fb22 	bl	80095e4 <__kernel_sinf>
 8006fa0:	e005      	b.n	8006fae <cosf+0x5e>
 8006fa2:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fa6:	ed9d 0a00 	vldr	s0, [sp]
 8006faa:	f002 f857 	bl	800905c <__kernel_cosf>
 8006fae:	eeb1 0a40 	vneg.f32	s0, s0
 8006fb2:	e006      	b.n	8006fc2 <cosf+0x72>
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fba:	ed9d 0a00 	vldr	s0, [sp]
 8006fbe:	f002 fb11 	bl	80095e4 <__kernel_sinf>
 8006fc2:	b003      	add	sp, #12
 8006fc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fc8:	3f490fd8 	.word	0x3f490fd8
 8006fcc:	00000000 	.word	0x00000000

08006fd0 <sinf>:
 8006fd0:	ee10 3a10 	vmov	r3, s0
 8006fd4:	b507      	push	{r0, r1, r2, lr}
 8006fd6:	4a1d      	ldr	r2, [pc, #116]	; (800704c <sinf+0x7c>)
 8006fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	dc03      	bgt.n	8006fe8 <sinf+0x18>
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007050 <sinf+0x80>
 8006fe6:	e014      	b.n	8007012 <sinf+0x42>
 8006fe8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006fec:	db02      	blt.n	8006ff4 <sinf+0x24>
 8006fee:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006ff2:	e028      	b.n	8007046 <sinf+0x76>
 8006ff4:	4668      	mov	r0, sp
 8006ff6:	f001 f9cb 	bl	8008390 <__ieee754_rem_pio2f>
 8006ffa:	f000 0003 	and.w	r0, r0, #3
 8006ffe:	2801      	cmp	r0, #1
 8007000:	d00a      	beq.n	8007018 <sinf+0x48>
 8007002:	2802      	cmp	r0, #2
 8007004:	d00f      	beq.n	8007026 <sinf+0x56>
 8007006:	b9b0      	cbnz	r0, 8007036 <sinf+0x66>
 8007008:	eddd 0a01 	vldr	s1, [sp, #4]
 800700c:	ed9d 0a00 	vldr	s0, [sp]
 8007010:	2001      	movs	r0, #1
 8007012:	f002 fae7 	bl	80095e4 <__kernel_sinf>
 8007016:	e016      	b.n	8007046 <sinf+0x76>
 8007018:	eddd 0a01 	vldr	s1, [sp, #4]
 800701c:	ed9d 0a00 	vldr	s0, [sp]
 8007020:	f002 f81c 	bl	800905c <__kernel_cosf>
 8007024:	e00f      	b.n	8007046 <sinf+0x76>
 8007026:	2001      	movs	r0, #1
 8007028:	eddd 0a01 	vldr	s1, [sp, #4]
 800702c:	ed9d 0a00 	vldr	s0, [sp]
 8007030:	f002 fad8 	bl	80095e4 <__kernel_sinf>
 8007034:	e005      	b.n	8007042 <sinf+0x72>
 8007036:	eddd 0a01 	vldr	s1, [sp, #4]
 800703a:	ed9d 0a00 	vldr	s0, [sp]
 800703e:	f002 f80d 	bl	800905c <__kernel_cosf>
 8007042:	eeb1 0a40 	vneg.f32	s0, s0
 8007046:	b003      	add	sp, #12
 8007048:	f85d fb04 	ldr.w	pc, [sp], #4
 800704c:	3f490fd8 	.word	0x3f490fd8
 8007050:	00000000 	.word	0x00000000

08007054 <log>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	ed2d 8b02 	vpush	{d8}
 800705a:	b08a      	sub	sp, #40	; 0x28
 800705c:	ec55 4b10 	vmov	r4, r5, d0
 8007060:	f000 fa4e 	bl	8007500 <__ieee754_log>
 8007064:	4b35      	ldr	r3, [pc, #212]	; (800713c <log+0xe8>)
 8007066:	eeb0 8a40 	vmov.f32	s16, s0
 800706a:	eef0 8a60 	vmov.f32	s17, s1
 800706e:	f993 6000 	ldrsb.w	r6, [r3]
 8007072:	1c73      	adds	r3, r6, #1
 8007074:	d059      	beq.n	800712a <log+0xd6>
 8007076:	4622      	mov	r2, r4
 8007078:	462b      	mov	r3, r5
 800707a:	4620      	mov	r0, r4
 800707c:	4629      	mov	r1, r5
 800707e:	f7f9 fcf5 	bl	8000a6c <__aeabi_dcmpun>
 8007082:	2800      	cmp	r0, #0
 8007084:	d151      	bne.n	800712a <log+0xd6>
 8007086:	2200      	movs	r2, #0
 8007088:	2300      	movs	r3, #0
 800708a:	4620      	mov	r0, r4
 800708c:	4629      	mov	r1, r5
 800708e:	f7f9 fce3 	bl	8000a58 <__aeabi_dcmpgt>
 8007092:	2800      	cmp	r0, #0
 8007094:	d149      	bne.n	800712a <log+0xd6>
 8007096:	4b2a      	ldr	r3, [pc, #168]	; (8007140 <log+0xec>)
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	9008      	str	r0, [sp, #32]
 800709c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80070a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80070a4:	b966      	cbnz	r6, 80070c0 <log+0x6c>
 80070a6:	4b27      	ldr	r3, [pc, #156]	; (8007144 <log+0xf0>)
 80070a8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80070ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070b0:	4620      	mov	r0, r4
 80070b2:	2200      	movs	r2, #0
 80070b4:	2300      	movs	r3, #0
 80070b6:	4629      	mov	r1, r5
 80070b8:	f7f9 fca6 	bl	8000a08 <__aeabi_dcmpeq>
 80070bc:	b980      	cbnz	r0, 80070e0 <log+0x8c>
 80070be:	e01a      	b.n	80070f6 <log+0xa2>
 80070c0:	4b21      	ldr	r3, [pc, #132]	; (8007148 <log+0xf4>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070c8:	4620      	mov	r0, r4
 80070ca:	2200      	movs	r2, #0
 80070cc:	2300      	movs	r3, #0
 80070ce:	4629      	mov	r1, r5
 80070d0:	f7f9 fc9a 	bl	8000a08 <__aeabi_dcmpeq>
 80070d4:	b178      	cbz	r0, 80070f6 <log+0xa2>
 80070d6:	2302      	movs	r3, #2
 80070d8:	429e      	cmp	r6, r3
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	d006      	beq.n	80070ec <log+0x98>
 80070de:	e001      	b.n	80070e4 <log+0x90>
 80070e0:	2302      	movs	r3, #2
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	4668      	mov	r0, sp
 80070e6:	f002 fb53 	bl	8009790 <matherr>
 80070ea:	b9a8      	cbnz	r0, 8007118 <log+0xc4>
 80070ec:	f002 fd34 	bl	8009b58 <__errno>
 80070f0:	2322      	movs	r3, #34	; 0x22
 80070f2:	6003      	str	r3, [r0, #0]
 80070f4:	e010      	b.n	8007118 <log+0xc4>
 80070f6:	2301      	movs	r3, #1
 80070f8:	2e02      	cmp	r6, #2
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	d003      	beq.n	8007106 <log+0xb2>
 80070fe:	4668      	mov	r0, sp
 8007100:	f002 fb46 	bl	8009790 <matherr>
 8007104:	b918      	cbnz	r0, 800710e <log+0xba>
 8007106:	f002 fd27 	bl	8009b58 <__errno>
 800710a:	2321      	movs	r3, #33	; 0x21
 800710c:	6003      	str	r3, [r0, #0]
 800710e:	480f      	ldr	r0, [pc, #60]	; (800714c <log+0xf8>)
 8007110:	f002 fb42 	bl	8009798 <nan>
 8007114:	ed8d 0b06 	vstr	d0, [sp, #24]
 8007118:	9b08      	ldr	r3, [sp, #32]
 800711a:	b11b      	cbz	r3, 8007124 <log+0xd0>
 800711c:	f002 fd1c 	bl	8009b58 <__errno>
 8007120:	9b08      	ldr	r3, [sp, #32]
 8007122:	6003      	str	r3, [r0, #0]
 8007124:	ed9d 0b06 	vldr	d0, [sp, #24]
 8007128:	e003      	b.n	8007132 <log+0xde>
 800712a:	eeb0 0a48 	vmov.f32	s0, s16
 800712e:	eef0 0a68 	vmov.f32	s1, s17
 8007132:	b00a      	add	sp, #40	; 0x28
 8007134:	ecbd 8b02 	vpop	{d8}
 8007138:	bd70      	pop	{r4, r5, r6, pc}
 800713a:	bf00      	nop
 800713c:	200005a0 	.word	0x200005a0
 8007140:	0800a3a6 	.word	0x0800a3a6
 8007144:	c7efffff 	.word	0xc7efffff
 8007148:	fff00000 	.word	0xfff00000
 800714c:	0800a3a5 	.word	0x0800a3a5

08007150 <sqrt>:
 8007150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007154:	ed2d 8b02 	vpush	{d8}
 8007158:	b08b      	sub	sp, #44	; 0x2c
 800715a:	ec55 4b10 	vmov	r4, r5, d0
 800715e:	f000 fd9d 	bl	8007c9c <__ieee754_sqrt>
 8007162:	4b27      	ldr	r3, [pc, #156]	; (8007200 <sqrt+0xb0>)
 8007164:	eeb0 8a40 	vmov.f32	s16, s0
 8007168:	eef0 8a60 	vmov.f32	s17, s1
 800716c:	f993 6000 	ldrsb.w	r6, [r3]
 8007170:	1c73      	adds	r3, r6, #1
 8007172:	d03b      	beq.n	80071ec <sqrt+0x9c>
 8007174:	4622      	mov	r2, r4
 8007176:	462b      	mov	r3, r5
 8007178:	4620      	mov	r0, r4
 800717a:	4629      	mov	r1, r5
 800717c:	f7f9 fc76 	bl	8000a6c <__aeabi_dcmpun>
 8007180:	4607      	mov	r7, r0
 8007182:	2800      	cmp	r0, #0
 8007184:	d132      	bne.n	80071ec <sqrt+0x9c>
 8007186:	f04f 0800 	mov.w	r8, #0
 800718a:	f04f 0900 	mov.w	r9, #0
 800718e:	4642      	mov	r2, r8
 8007190:	464b      	mov	r3, r9
 8007192:	4620      	mov	r0, r4
 8007194:	4629      	mov	r1, r5
 8007196:	f7f9 fc41 	bl	8000a1c <__aeabi_dcmplt>
 800719a:	b338      	cbz	r0, 80071ec <sqrt+0x9c>
 800719c:	2301      	movs	r3, #1
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	4b18      	ldr	r3, [pc, #96]	; (8007204 <sqrt+0xb4>)
 80071a2:	9301      	str	r3, [sp, #4]
 80071a4:	9708      	str	r7, [sp, #32]
 80071a6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80071aa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80071ae:	b916      	cbnz	r6, 80071b6 <sqrt+0x66>
 80071b0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80071b4:	e009      	b.n	80071ca <sqrt+0x7a>
 80071b6:	4642      	mov	r2, r8
 80071b8:	464b      	mov	r3, r9
 80071ba:	4640      	mov	r0, r8
 80071bc:	4649      	mov	r1, r9
 80071be:	f7f9 fae5 	bl	800078c <__aeabi_ddiv>
 80071c2:	2e02      	cmp	r6, #2
 80071c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80071c8:	d003      	beq.n	80071d2 <sqrt+0x82>
 80071ca:	4668      	mov	r0, sp
 80071cc:	f002 fae0 	bl	8009790 <matherr>
 80071d0:	b918      	cbnz	r0, 80071da <sqrt+0x8a>
 80071d2:	f002 fcc1 	bl	8009b58 <__errno>
 80071d6:	2321      	movs	r3, #33	; 0x21
 80071d8:	6003      	str	r3, [r0, #0]
 80071da:	9b08      	ldr	r3, [sp, #32]
 80071dc:	b11b      	cbz	r3, 80071e6 <sqrt+0x96>
 80071de:	f002 fcbb 	bl	8009b58 <__errno>
 80071e2:	9b08      	ldr	r3, [sp, #32]
 80071e4:	6003      	str	r3, [r0, #0]
 80071e6:	ed9d 0b06 	vldr	d0, [sp, #24]
 80071ea:	e003      	b.n	80071f4 <sqrt+0xa4>
 80071ec:	eeb0 0a48 	vmov.f32	s0, s16
 80071f0:	eef0 0a68 	vmov.f32	s1, s17
 80071f4:	b00b      	add	sp, #44	; 0x2c
 80071f6:	ecbd 8b02 	vpop	{d8}
 80071fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071fe:	bf00      	nop
 8007200:	200005a0 	.word	0x200005a0
 8007204:	0800a3aa 	.word	0x0800a3aa

08007208 <powf>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	ed2d 8b04 	vpush	{d8-d9}
 800720e:	4cb5      	ldr	r4, [pc, #724]	; (80074e4 <powf+0x2dc>)
 8007210:	b08a      	sub	sp, #40	; 0x28
 8007212:	eeb0 9a40 	vmov.f32	s18, s0
 8007216:	eef0 8a60 	vmov.f32	s17, s1
 800721a:	f000 fdf3 	bl	8007e04 <__ieee754_powf>
 800721e:	f994 5000 	ldrsb.w	r5, [r4]
 8007222:	1c6b      	adds	r3, r5, #1
 8007224:	eeb0 8a40 	vmov.f32	s16, s0
 8007228:	4626      	mov	r6, r4
 800722a:	f000 8153 	beq.w	80074d4 <powf+0x2cc>
 800722e:	eef4 8a68 	vcmp.f32	s17, s17
 8007232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007236:	f180 814d 	bvs.w	80074d4 <powf+0x2cc>
 800723a:	eeb4 9a49 	vcmp.f32	s18, s18
 800723e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007242:	d71f      	bvc.n	8007284 <powf+0x7c>
 8007244:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800724c:	f040 8142 	bne.w	80074d4 <powf+0x2cc>
 8007250:	2301      	movs	r3, #1
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	4ba4      	ldr	r3, [pc, #656]	; (80074e8 <powf+0x2e0>)
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	ee19 0a10 	vmov	r0, s18
 800725c:	2300      	movs	r3, #0
 800725e:	9308      	str	r3, [sp, #32]
 8007260:	f7f9 f916 	bl	8000490 <__aeabi_f2d>
 8007264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007268:	ee18 0a90 	vmov	r0, s17
 800726c:	f7f9 f910 	bl	8000490 <__aeabi_f2d>
 8007270:	4b9e      	ldr	r3, [pc, #632]	; (80074ec <powf+0x2e4>)
 8007272:	2200      	movs	r2, #0
 8007274:	2d02      	cmp	r5, #2
 8007276:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800727a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800727e:	f040 808d 	bne.w	800739c <powf+0x194>
 8007282:	e122      	b.n	80074ca <powf+0x2c2>
 8007284:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728c:	d14c      	bne.n	8007328 <powf+0x120>
 800728e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007296:	d11c      	bne.n	80072d2 <powf+0xca>
 8007298:	2301      	movs	r3, #1
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	4b92      	ldr	r3, [pc, #584]	; (80074e8 <powf+0x2e0>)
 800729e:	9301      	str	r3, [sp, #4]
 80072a0:	ee19 0a10 	vmov	r0, s18
 80072a4:	2300      	movs	r3, #0
 80072a6:	9308      	str	r3, [sp, #32]
 80072a8:	f7f9 f8f2 	bl	8000490 <__aeabi_f2d>
 80072ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072b0:	ee18 0a90 	vmov	r0, s17
 80072b4:	f7f9 f8ec 	bl	8000490 <__aeabi_f2d>
 80072b8:	2200      	movs	r2, #0
 80072ba:	2300      	movs	r3, #0
 80072bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072c4:	2d00      	cmp	r5, #0
 80072c6:	d069      	beq.n	800739c <powf+0x194>
 80072c8:	4b88      	ldr	r3, [pc, #544]	; (80074ec <powf+0x2e4>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072d0:	e0f5      	b.n	80074be <powf+0x2b6>
 80072d2:	eeb0 0a68 	vmov.f32	s0, s17
 80072d6:	f002 fb74 	bl	80099c2 <finitef>
 80072da:	2800      	cmp	r0, #0
 80072dc:	f000 80fa 	beq.w	80074d4 <powf+0x2cc>
 80072e0:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80072e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e8:	f140 80f4 	bpl.w	80074d4 <powf+0x2cc>
 80072ec:	2301      	movs	r3, #1
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	4b7d      	ldr	r3, [pc, #500]	; (80074e8 <powf+0x2e0>)
 80072f2:	9301      	str	r3, [sp, #4]
 80072f4:	ee19 0a10 	vmov	r0, s18
 80072f8:	2300      	movs	r3, #0
 80072fa:	9308      	str	r3, [sp, #32]
 80072fc:	f7f9 f8c8 	bl	8000490 <__aeabi_f2d>
 8007300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007304:	ee18 0a90 	vmov	r0, s17
 8007308:	f7f9 f8c2 	bl	8000490 <__aeabi_f2d>
 800730c:	f994 3000 	ldrsb.w	r3, [r4]
 8007310:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007314:	b913      	cbnz	r3, 800731c <powf+0x114>
 8007316:	2200      	movs	r2, #0
 8007318:	2300      	movs	r3, #0
 800731a:	e034      	b.n	8007386 <powf+0x17e>
 800731c:	4974      	ldr	r1, [pc, #464]	; (80074f0 <powf+0x2e8>)
 800731e:	2000      	movs	r0, #0
 8007320:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007324:	2b02      	cmp	r3, #2
 8007326:	e038      	b.n	800739a <powf+0x192>
 8007328:	f002 fb4b 	bl	80099c2 <finitef>
 800732c:	4605      	mov	r5, r0
 800732e:	2800      	cmp	r0, #0
 8007330:	f040 8099 	bne.w	8007466 <powf+0x25e>
 8007334:	eeb0 0a49 	vmov.f32	s0, s18
 8007338:	f002 fb43 	bl	80099c2 <finitef>
 800733c:	2800      	cmp	r0, #0
 800733e:	f000 8092 	beq.w	8007466 <powf+0x25e>
 8007342:	eeb0 0a68 	vmov.f32	s0, s17
 8007346:	f002 fb3c 	bl	80099c2 <finitef>
 800734a:	2800      	cmp	r0, #0
 800734c:	f000 808b 	beq.w	8007466 <powf+0x25e>
 8007350:	eeb4 8a48 	vcmp.f32	s16, s16
 8007354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007358:	f994 4000 	ldrsb.w	r4, [r4]
 800735c:	4b62      	ldr	r3, [pc, #392]	; (80074e8 <powf+0x2e0>)
 800735e:	d727      	bvc.n	80073b0 <powf+0x1a8>
 8007360:	2201      	movs	r2, #1
 8007362:	ee19 0a10 	vmov	r0, s18
 8007366:	e88d 000c 	stmia.w	sp, {r2, r3}
 800736a:	9508      	str	r5, [sp, #32]
 800736c:	f7f9 f890 	bl	8000490 <__aeabi_f2d>
 8007370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007374:	ee18 0a90 	vmov	r0, s17
 8007378:	f7f9 f88a 	bl	8000490 <__aeabi_f2d>
 800737c:	2200      	movs	r2, #0
 800737e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007382:	2300      	movs	r3, #0
 8007384:	b914      	cbnz	r4, 800738c <powf+0x184>
 8007386:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800738a:	e007      	b.n	800739c <powf+0x194>
 800738c:	4610      	mov	r0, r2
 800738e:	4619      	mov	r1, r3
 8007390:	f7f9 f9fc 	bl	800078c <__aeabi_ddiv>
 8007394:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007398:	2c02      	cmp	r4, #2
 800739a:	d005      	beq.n	80073a8 <powf+0x1a0>
 800739c:	4668      	mov	r0, sp
 800739e:	f002 f9f7 	bl	8009790 <matherr>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	f040 808b 	bne.w	80074be <powf+0x2b6>
 80073a8:	f002 fbd6 	bl	8009b58 <__errno>
 80073ac:	2321      	movs	r3, #33	; 0x21
 80073ae:	e085      	b.n	80074bc <powf+0x2b4>
 80073b0:	2203      	movs	r2, #3
 80073b2:	ee19 0a10 	vmov	r0, s18
 80073b6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80073ba:	9508      	str	r5, [sp, #32]
 80073bc:	f7f9 f868 	bl	8000490 <__aeabi_f2d>
 80073c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073c4:	ee18 0a90 	vmov	r0, s17
 80073c8:	f7f9 f862 	bl	8000490 <__aeabi_f2d>
 80073cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073d0:	bb14      	cbnz	r4, 8007418 <powf+0x210>
 80073d2:	4b48      	ldr	r3, [pc, #288]	; (80074f4 <powf+0x2ec>)
 80073d4:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80073d8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80073dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80073e4:	d563      	bpl.n	80074ae <powf+0x2a6>
 80073e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80073ea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80073ee:	ee17 0a90 	vmov	r0, s15
 80073f2:	f7f9 f84d 	bl	8000490 <__aeabi_f2d>
 80073f6:	4604      	mov	r4, r0
 80073f8:	460d      	mov	r5, r1
 80073fa:	ec45 4b10 	vmov	d0, r4, r5
 80073fe:	f002 f9d3 	bl	80097a8 <rint>
 8007402:	4620      	mov	r0, r4
 8007404:	ec53 2b10 	vmov	r2, r3, d0
 8007408:	4629      	mov	r1, r5
 800740a:	f7f9 fafd 	bl	8000a08 <__aeabi_dcmpeq>
 800740e:	bb28      	cbnz	r0, 800745c <powf+0x254>
 8007410:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007414:	4b38      	ldr	r3, [pc, #224]	; (80074f8 <powf+0x2f0>)
 8007416:	e01f      	b.n	8007458 <powf+0x250>
 8007418:	4b38      	ldr	r3, [pc, #224]	; (80074fc <powf+0x2f4>)
 800741a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800741e:	2200      	movs	r2, #0
 8007420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007424:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007428:	d518      	bpl.n	800745c <powf+0x254>
 800742a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800742e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007432:	ee17 0a90 	vmov	r0, s15
 8007436:	f7f9 f82b 	bl	8000490 <__aeabi_f2d>
 800743a:	4604      	mov	r4, r0
 800743c:	460d      	mov	r5, r1
 800743e:	ec45 4b10 	vmov	d0, r4, r5
 8007442:	f002 f9b1 	bl	80097a8 <rint>
 8007446:	4620      	mov	r0, r4
 8007448:	ec53 2b10 	vmov	r2, r3, d0
 800744c:	4629      	mov	r1, r5
 800744e:	f7f9 fadb 	bl	8000a08 <__aeabi_dcmpeq>
 8007452:	b918      	cbnz	r0, 800745c <powf+0x254>
 8007454:	4b26      	ldr	r3, [pc, #152]	; (80074f0 <powf+0x2e8>)
 8007456:	2200      	movs	r2, #0
 8007458:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800745c:	f996 3000 	ldrsb.w	r3, [r6]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d124      	bne.n	80074ae <powf+0x2a6>
 8007464:	e027      	b.n	80074b6 <powf+0x2ae>
 8007466:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800746a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800746e:	d131      	bne.n	80074d4 <powf+0x2cc>
 8007470:	eeb0 0a49 	vmov.f32	s0, s18
 8007474:	f002 faa5 	bl	80099c2 <finitef>
 8007478:	b360      	cbz	r0, 80074d4 <powf+0x2cc>
 800747a:	eeb0 0a68 	vmov.f32	s0, s17
 800747e:	f002 faa0 	bl	80099c2 <finitef>
 8007482:	b338      	cbz	r0, 80074d4 <powf+0x2cc>
 8007484:	2304      	movs	r3, #4
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	4b17      	ldr	r3, [pc, #92]	; (80074e8 <powf+0x2e0>)
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	ee19 0a10 	vmov	r0, s18
 8007490:	2300      	movs	r3, #0
 8007492:	9308      	str	r3, [sp, #32]
 8007494:	f7f8 fffc 	bl	8000490 <__aeabi_f2d>
 8007498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800749c:	ee18 0a90 	vmov	r0, s17
 80074a0:	f7f8 fff6 	bl	8000490 <__aeabi_f2d>
 80074a4:	2200      	movs	r2, #0
 80074a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074aa:	2300      	movs	r3, #0
 80074ac:	e7d4      	b.n	8007458 <powf+0x250>
 80074ae:	4668      	mov	r0, sp
 80074b0:	f002 f96e 	bl	8009790 <matherr>
 80074b4:	b918      	cbnz	r0, 80074be <powf+0x2b6>
 80074b6:	f002 fb4f 	bl	8009b58 <__errno>
 80074ba:	2322      	movs	r3, #34	; 0x22
 80074bc:	6003      	str	r3, [r0, #0]
 80074be:	9b08      	ldr	r3, [sp, #32]
 80074c0:	b11b      	cbz	r3, 80074ca <powf+0x2c2>
 80074c2:	f002 fb49 	bl	8009b58 <__errno>
 80074c6:	9b08      	ldr	r3, [sp, #32]
 80074c8:	6003      	str	r3, [r0, #0]
 80074ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074ce:	f7f9 fb0b 	bl	8000ae8 <__aeabi_d2f>
 80074d2:	e001      	b.n	80074d8 <powf+0x2d0>
 80074d4:	ee18 0a10 	vmov	r0, s16
 80074d8:	ee00 0a10 	vmov	s0, r0
 80074dc:	b00a      	add	sp, #40	; 0x28
 80074de:	ecbd 8b04 	vpop	{d8-d9}
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	200005a0 	.word	0x200005a0
 80074e8:	0800a3af 	.word	0x0800a3af
 80074ec:	3ff00000 	.word	0x3ff00000
 80074f0:	fff00000 	.word	0xfff00000
 80074f4:	47efffff 	.word	0x47efffff
 80074f8:	c7efffff 	.word	0xc7efffff
 80074fc:	7ff00000 	.word	0x7ff00000

08007500 <__ieee754_log>:
 8007500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007504:	ec51 0b10 	vmov	r0, r1, d0
 8007508:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800750c:	b087      	sub	sp, #28
 800750e:	ee10 3a10 	vmov	r3, s0
 8007512:	460d      	mov	r5, r1
 8007514:	da1c      	bge.n	8007550 <__ieee754_log+0x50>
 8007516:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800751a:	4313      	orrs	r3, r2
 800751c:	d104      	bne.n	8007528 <__ieee754_log+0x28>
 800751e:	2200      	movs	r2, #0
 8007520:	2300      	movs	r3, #0
 8007522:	2000      	movs	r0, #0
 8007524:	49d4      	ldr	r1, [pc, #848]	; (8007878 <__ieee754_log+0x378>)
 8007526:	e008      	b.n	800753a <__ieee754_log+0x3a>
 8007528:	2900      	cmp	r1, #0
 800752a:	da09      	bge.n	8007540 <__ieee754_log+0x40>
 800752c:	ee10 2a10 	vmov	r2, s0
 8007530:	460b      	mov	r3, r1
 8007532:	f7f8 fe4d 	bl	80001d0 <__aeabi_dsub>
 8007536:	2200      	movs	r2, #0
 8007538:	2300      	movs	r3, #0
 800753a:	f7f9 f927 	bl	800078c <__aeabi_ddiv>
 800753e:	e1a7      	b.n	8007890 <__ieee754_log+0x390>
 8007540:	4bce      	ldr	r3, [pc, #824]	; (800787c <__ieee754_log+0x37c>)
 8007542:	2200      	movs	r2, #0
 8007544:	f7f8 fff8 	bl	8000538 <__aeabi_dmul>
 8007548:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800754c:	460d      	mov	r5, r1
 800754e:	e000      	b.n	8007552 <__ieee754_log+0x52>
 8007550:	2300      	movs	r3, #0
 8007552:	4acb      	ldr	r2, [pc, #812]	; (8007880 <__ieee754_log+0x380>)
 8007554:	4295      	cmp	r5, r2
 8007556:	dd02      	ble.n	800755e <__ieee754_log+0x5e>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	e03e      	b.n	80075dc <__ieee754_log+0xdc>
 800755e:	152c      	asrs	r4, r5, #20
 8007560:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007564:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007568:	441c      	add	r4, r3
 800756a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800756e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007576:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800757a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800757e:	ea42 0105 	orr.w	r1, r2, r5
 8007582:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007586:	2200      	movs	r2, #0
 8007588:	4bbe      	ldr	r3, [pc, #760]	; (8007884 <__ieee754_log+0x384>)
 800758a:	f7f8 fe21 	bl	80001d0 <__aeabi_dsub>
 800758e:	1cab      	adds	r3, r5, #2
 8007590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007594:	2b02      	cmp	r3, #2
 8007596:	4682      	mov	sl, r0
 8007598:	468b      	mov	fp, r1
 800759a:	f04f 0200 	mov.w	r2, #0
 800759e:	dc53      	bgt.n	8007648 <__ieee754_log+0x148>
 80075a0:	2300      	movs	r3, #0
 80075a2:	f7f9 fa31 	bl	8000a08 <__aeabi_dcmpeq>
 80075a6:	b1e0      	cbz	r0, 80075e2 <__ieee754_log+0xe2>
 80075a8:	2c00      	cmp	r4, #0
 80075aa:	f000 816f 	beq.w	800788c <__ieee754_log+0x38c>
 80075ae:	4620      	mov	r0, r4
 80075b0:	f7f8 ff5c 	bl	800046c <__aeabi_i2d>
 80075b4:	a39c      	add	r3, pc, #624	; (adr r3, 8007828 <__ieee754_log+0x328>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	4606      	mov	r6, r0
 80075bc:	460f      	mov	r7, r1
 80075be:	f7f8 ffbb 	bl	8000538 <__aeabi_dmul>
 80075c2:	a39b      	add	r3, pc, #620	; (adr r3, 8007830 <__ieee754_log+0x330>)
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	4604      	mov	r4, r0
 80075ca:	460d      	mov	r5, r1
 80075cc:	4630      	mov	r0, r6
 80075ce:	4639      	mov	r1, r7
 80075d0:	f7f8 ffb2 	bl	8000538 <__aeabi_dmul>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4620      	mov	r0, r4
 80075da:	4629      	mov	r1, r5
 80075dc:	f7f8 fdfa 	bl	80001d4 <__adddf3>
 80075e0:	e156      	b.n	8007890 <__ieee754_log+0x390>
 80075e2:	a395      	add	r3, pc, #596	; (adr r3, 8007838 <__ieee754_log+0x338>)
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	4650      	mov	r0, sl
 80075ea:	4659      	mov	r1, fp
 80075ec:	f7f8 ffa4 	bl	8000538 <__aeabi_dmul>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	2000      	movs	r0, #0
 80075f6:	49a4      	ldr	r1, [pc, #656]	; (8007888 <__ieee754_log+0x388>)
 80075f8:	f7f8 fdea 	bl	80001d0 <__aeabi_dsub>
 80075fc:	4652      	mov	r2, sl
 80075fe:	4606      	mov	r6, r0
 8007600:	460f      	mov	r7, r1
 8007602:	465b      	mov	r3, fp
 8007604:	4650      	mov	r0, sl
 8007606:	4659      	mov	r1, fp
 8007608:	f7f8 ff96 	bl	8000538 <__aeabi_dmul>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4630      	mov	r0, r6
 8007612:	4639      	mov	r1, r7
 8007614:	f7f8 ff90 	bl	8000538 <__aeabi_dmul>
 8007618:	4606      	mov	r6, r0
 800761a:	460f      	mov	r7, r1
 800761c:	b914      	cbnz	r4, 8007624 <__ieee754_log+0x124>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	e0d0      	b.n	80077c6 <__ieee754_log+0x2c6>
 8007624:	4620      	mov	r0, r4
 8007626:	f7f8 ff21 	bl	800046c <__aeabi_i2d>
 800762a:	a37f      	add	r3, pc, #508	; (adr r3, 8007828 <__ieee754_log+0x328>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	4680      	mov	r8, r0
 8007632:	4689      	mov	r9, r1
 8007634:	f7f8 ff80 	bl	8000538 <__aeabi_dmul>
 8007638:	a37d      	add	r3, pc, #500	; (adr r3, 8007830 <__ieee754_log+0x330>)
 800763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763e:	4604      	mov	r4, r0
 8007640:	460d      	mov	r5, r1
 8007642:	4640      	mov	r0, r8
 8007644:	4649      	mov	r1, r9
 8007646:	e0db      	b.n	8007800 <__ieee754_log+0x300>
 8007648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800764c:	f7f8 fdc2 	bl	80001d4 <__adddf3>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	4650      	mov	r0, sl
 8007656:	4659      	mov	r1, fp
 8007658:	f7f9 f898 	bl	800078c <__aeabi_ddiv>
 800765c:	e9cd 0100 	strd	r0, r1, [sp]
 8007660:	4620      	mov	r0, r4
 8007662:	f7f8 ff03 	bl	800046c <__aeabi_i2d>
 8007666:	e9dd 2300 	ldrd	r2, r3, [sp]
 800766a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800766e:	4610      	mov	r0, r2
 8007670:	4619      	mov	r1, r3
 8007672:	f7f8 ff61 	bl	8000538 <__aeabi_dmul>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800767e:	f7f8 ff5b 	bl	8000538 <__aeabi_dmul>
 8007682:	a36f      	add	r3, pc, #444	; (adr r3, 8007840 <__ieee754_log+0x340>)
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	4606      	mov	r6, r0
 800768a:	460f      	mov	r7, r1
 800768c:	f7f8 ff54 	bl	8000538 <__aeabi_dmul>
 8007690:	a36d      	add	r3, pc, #436	; (adr r3, 8007848 <__ieee754_log+0x348>)
 8007692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007696:	f7f8 fd9d 	bl	80001d4 <__adddf3>
 800769a:	4632      	mov	r2, r6
 800769c:	463b      	mov	r3, r7
 800769e:	f7f8 ff4b 	bl	8000538 <__aeabi_dmul>
 80076a2:	a36b      	add	r3, pc, #428	; (adr r3, 8007850 <__ieee754_log+0x350>)
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f7f8 fd94 	bl	80001d4 <__adddf3>
 80076ac:	4632      	mov	r2, r6
 80076ae:	463b      	mov	r3, r7
 80076b0:	f7f8 ff42 	bl	8000538 <__aeabi_dmul>
 80076b4:	a368      	add	r3, pc, #416	; (adr r3, 8007858 <__ieee754_log+0x358>)
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f7f8 fd8b 	bl	80001d4 <__adddf3>
 80076be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076c2:	f7f8 ff39 	bl	8000538 <__aeabi_dmul>
 80076c6:	a366      	add	r3, pc, #408	; (adr r3, 8007860 <__ieee754_log+0x360>)
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076d0:	4630      	mov	r0, r6
 80076d2:	4639      	mov	r1, r7
 80076d4:	f7f8 ff30 	bl	8000538 <__aeabi_dmul>
 80076d8:	a363      	add	r3, pc, #396	; (adr r3, 8007868 <__ieee754_log+0x368>)
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	f7f8 fd79 	bl	80001d4 <__adddf3>
 80076e2:	4632      	mov	r2, r6
 80076e4:	463b      	mov	r3, r7
 80076e6:	f7f8 ff27 	bl	8000538 <__aeabi_dmul>
 80076ea:	a361      	add	r3, pc, #388	; (adr r3, 8007870 <__ieee754_log+0x370>)
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	f7f8 fd70 	bl	80001d4 <__adddf3>
 80076f4:	4632      	mov	r2, r6
 80076f6:	463b      	mov	r3, r7
 80076f8:	f7f8 ff1e 	bl	8000538 <__aeabi_dmul>
 80076fc:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800770c:	f7f8 fd62 	bl	80001d4 <__adddf3>
 8007710:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 8007714:	3551      	adds	r5, #81	; 0x51
 8007716:	ea45 0508 	orr.w	r5, r5, r8
 800771a:	2d00      	cmp	r5, #0
 800771c:	4606      	mov	r6, r0
 800771e:	460f      	mov	r7, r1
 8007720:	dd44      	ble.n	80077ac <__ieee754_log+0x2ac>
 8007722:	2200      	movs	r2, #0
 8007724:	4b58      	ldr	r3, [pc, #352]	; (8007888 <__ieee754_log+0x388>)
 8007726:	4650      	mov	r0, sl
 8007728:	4659      	mov	r1, fp
 800772a:	f7f8 ff05 	bl	8000538 <__aeabi_dmul>
 800772e:	4652      	mov	r2, sl
 8007730:	465b      	mov	r3, fp
 8007732:	f7f8 ff01 	bl	8000538 <__aeabi_dmul>
 8007736:	4680      	mov	r8, r0
 8007738:	4689      	mov	r9, r1
 800773a:	b984      	cbnz	r4, 800775e <__ieee754_log+0x25e>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	4630      	mov	r0, r6
 8007742:	4639      	mov	r1, r7
 8007744:	f7f8 fd46 	bl	80001d4 <__adddf3>
 8007748:	e9dd 2300 	ldrd	r2, r3, [sp]
 800774c:	f7f8 fef4 	bl	8000538 <__aeabi_dmul>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4640      	mov	r0, r8
 8007756:	4649      	mov	r1, r9
 8007758:	f7f8 fd3a 	bl	80001d0 <__aeabi_dsub>
 800775c:	e031      	b.n	80077c2 <__ieee754_log+0x2c2>
 800775e:	a332      	add	r3, pc, #200	; (adr r3, 8007828 <__ieee754_log+0x328>)
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007768:	f7f8 fee6 	bl	8000538 <__aeabi_dmul>
 800776c:	4642      	mov	r2, r8
 800776e:	464b      	mov	r3, r9
 8007770:	4604      	mov	r4, r0
 8007772:	460d      	mov	r5, r1
 8007774:	4630      	mov	r0, r6
 8007776:	4639      	mov	r1, r7
 8007778:	f7f8 fd2c 	bl	80001d4 <__adddf3>
 800777c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007780:	f7f8 feda 	bl	8000538 <__aeabi_dmul>
 8007784:	a32a      	add	r3, pc, #168	; (adr r3, 8007830 <__ieee754_log+0x330>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	4606      	mov	r6, r0
 800778c:	460f      	mov	r7, r1
 800778e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007792:	f7f8 fed1 	bl	8000538 <__aeabi_dmul>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4630      	mov	r0, r6
 800779c:	4639      	mov	r1, r7
 800779e:	f7f8 fd19 	bl	80001d4 <__adddf3>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4640      	mov	r0, r8
 80077a8:	4649      	mov	r1, r9
 80077aa:	e02f      	b.n	800780c <__ieee754_log+0x30c>
 80077ac:	b974      	cbnz	r4, 80077cc <__ieee754_log+0x2cc>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4650      	mov	r0, sl
 80077b4:	4659      	mov	r1, fp
 80077b6:	f7f8 fd0b 	bl	80001d0 <__aeabi_dsub>
 80077ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077be:	f7f8 febb 	bl	8000538 <__aeabi_dmul>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	4650      	mov	r0, sl
 80077c8:	4659      	mov	r1, fp
 80077ca:	e029      	b.n	8007820 <__ieee754_log+0x320>
 80077cc:	a316      	add	r3, pc, #88	; (adr r3, 8007828 <__ieee754_log+0x328>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d6:	f7f8 feaf 	bl	8000538 <__aeabi_dmul>
 80077da:	4632      	mov	r2, r6
 80077dc:	463b      	mov	r3, r7
 80077de:	4604      	mov	r4, r0
 80077e0:	460d      	mov	r5, r1
 80077e2:	4650      	mov	r0, sl
 80077e4:	4659      	mov	r1, fp
 80077e6:	f7f8 fcf3 	bl	80001d0 <__aeabi_dsub>
 80077ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077ee:	f7f8 fea3 	bl	8000538 <__aeabi_dmul>
 80077f2:	a30f      	add	r3, pc, #60	; (adr r3, 8007830 <__ieee754_log+0x330>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	4606      	mov	r6, r0
 80077fa:	460f      	mov	r7, r1
 80077fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007800:	f7f8 fe9a 	bl	8000538 <__aeabi_dmul>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	4630      	mov	r0, r6
 800780a:	4639      	mov	r1, r7
 800780c:	f7f8 fce0 	bl	80001d0 <__aeabi_dsub>
 8007810:	4652      	mov	r2, sl
 8007812:	465b      	mov	r3, fp
 8007814:	f7f8 fcdc 	bl	80001d0 <__aeabi_dsub>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	4620      	mov	r0, r4
 800781e:	4629      	mov	r1, r5
 8007820:	f7f8 fcd6 	bl	80001d0 <__aeabi_dsub>
 8007824:	e034      	b.n	8007890 <__ieee754_log+0x390>
 8007826:	bf00      	nop
 8007828:	fee00000 	.word	0xfee00000
 800782c:	3fe62e42 	.word	0x3fe62e42
 8007830:	35793c76 	.word	0x35793c76
 8007834:	3dea39ef 	.word	0x3dea39ef
 8007838:	55555555 	.word	0x55555555
 800783c:	3fd55555 	.word	0x3fd55555
 8007840:	df3e5244 	.word	0xdf3e5244
 8007844:	3fc2f112 	.word	0x3fc2f112
 8007848:	96cb03de 	.word	0x96cb03de
 800784c:	3fc74664 	.word	0x3fc74664
 8007850:	94229359 	.word	0x94229359
 8007854:	3fd24924 	.word	0x3fd24924
 8007858:	55555593 	.word	0x55555593
 800785c:	3fe55555 	.word	0x3fe55555
 8007860:	d078c69f 	.word	0xd078c69f
 8007864:	3fc39a09 	.word	0x3fc39a09
 8007868:	1d8e78af 	.word	0x1d8e78af
 800786c:	3fcc71c5 	.word	0x3fcc71c5
 8007870:	9997fa04 	.word	0x9997fa04
 8007874:	3fd99999 	.word	0x3fd99999
 8007878:	c3500000 	.word	0xc3500000
 800787c:	43500000 	.word	0x43500000
 8007880:	7fefffff 	.word	0x7fefffff
 8007884:	3ff00000 	.word	0x3ff00000
 8007888:	3fe00000 	.word	0x3fe00000
 800788c:	2000      	movs	r0, #0
 800788e:	2100      	movs	r1, #0
 8007890:	ec41 0b10 	vmov	d0, r0, r1
 8007894:	b007      	add	sp, #28
 8007896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800789a:	bf00      	nop
 800789c:	0000      	movs	r0, r0
	...

080078a0 <__ieee754_rem_pio2>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	ec55 4b10 	vmov	r4, r5, d0
 80078a8:	4bc7      	ldr	r3, [pc, #796]	; (8007bc8 <__ieee754_rem_pio2+0x328>)
 80078aa:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80078ae:	4598      	cmp	r8, r3
 80078b0:	b08d      	sub	sp, #52	; 0x34
 80078b2:	4682      	mov	sl, r0
 80078b4:	46ab      	mov	fp, r5
 80078b6:	dc06      	bgt.n	80078c6 <__ieee754_rem_pio2+0x26>
 80078b8:	2200      	movs	r2, #0
 80078ba:	2300      	movs	r3, #0
 80078bc:	ed8a 0b00 	vstr	d0, [sl]
 80078c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80078c4:	e160      	b.n	8007b88 <__ieee754_rem_pio2+0x2e8>
 80078c6:	4bc1      	ldr	r3, [pc, #772]	; (8007bcc <__ieee754_rem_pio2+0x32c>)
 80078c8:	4598      	cmp	r8, r3
 80078ca:	dc71      	bgt.n	80079b0 <__ieee754_rem_pio2+0x110>
 80078cc:	2d00      	cmp	r5, #0
 80078ce:	a3b0      	add	r3, pc, #704	; (adr r3, 8007b90 <__ieee754_rem_pio2+0x2f0>)
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	ee10 0a10 	vmov	r0, s0
 80078d8:	4629      	mov	r1, r5
 80078da:	4ebd      	ldr	r6, [pc, #756]	; (8007bd0 <__ieee754_rem_pio2+0x330>)
 80078dc:	dd33      	ble.n	8007946 <__ieee754_rem_pio2+0xa6>
 80078de:	f7f8 fc77 	bl	80001d0 <__aeabi_dsub>
 80078e2:	45b0      	cmp	r8, r6
 80078e4:	4604      	mov	r4, r0
 80078e6:	460d      	mov	r5, r1
 80078e8:	d010      	beq.n	800790c <__ieee754_rem_pio2+0x6c>
 80078ea:	a3ab      	add	r3, pc, #684	; (adr r3, 8007b98 <__ieee754_rem_pio2+0x2f8>)
 80078ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f0:	f7f8 fc6e 	bl	80001d0 <__aeabi_dsub>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	e9ca 2300 	strd	r2, r3, [sl]
 80078fc:	4620      	mov	r0, r4
 80078fe:	4629      	mov	r1, r5
 8007900:	f7f8 fc66 	bl	80001d0 <__aeabi_dsub>
 8007904:	a3a4      	add	r3, pc, #656	; (adr r3, 8007b98 <__ieee754_rem_pio2+0x2f8>)
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	e016      	b.n	800793a <__ieee754_rem_pio2+0x9a>
 800790c:	a3a4      	add	r3, pc, #656	; (adr r3, 8007ba0 <__ieee754_rem_pio2+0x300>)
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	f7f8 fc5d 	bl	80001d0 <__aeabi_dsub>
 8007916:	a3a4      	add	r3, pc, #656	; (adr r3, 8007ba8 <__ieee754_rem_pio2+0x308>)
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	4604      	mov	r4, r0
 800791e:	460d      	mov	r5, r1
 8007920:	f7f8 fc56 	bl	80001d0 <__aeabi_dsub>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	e9ca 2300 	strd	r2, r3, [sl]
 800792c:	4620      	mov	r0, r4
 800792e:	4629      	mov	r1, r5
 8007930:	f7f8 fc4e 	bl	80001d0 <__aeabi_dsub>
 8007934:	a39c      	add	r3, pc, #624	; (adr r3, 8007ba8 <__ieee754_rem_pio2+0x308>)
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	f7f8 fc49 	bl	80001d0 <__aeabi_dsub>
 800793e:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007942:	2001      	movs	r0, #1
 8007944:	e1a2      	b.n	8007c8c <__ieee754_rem_pio2+0x3ec>
 8007946:	f7f8 fc45 	bl	80001d4 <__adddf3>
 800794a:	45b0      	cmp	r8, r6
 800794c:	4604      	mov	r4, r0
 800794e:	460d      	mov	r5, r1
 8007950:	d010      	beq.n	8007974 <__ieee754_rem_pio2+0xd4>
 8007952:	a391      	add	r3, pc, #580	; (adr r3, 8007b98 <__ieee754_rem_pio2+0x2f8>)
 8007954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007958:	f7f8 fc3c 	bl	80001d4 <__adddf3>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	e9ca 2300 	strd	r2, r3, [sl]
 8007964:	4620      	mov	r0, r4
 8007966:	4629      	mov	r1, r5
 8007968:	f7f8 fc32 	bl	80001d0 <__aeabi_dsub>
 800796c:	a38a      	add	r3, pc, #552	; (adr r3, 8007b98 <__ieee754_rem_pio2+0x2f8>)
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	e016      	b.n	80079a2 <__ieee754_rem_pio2+0x102>
 8007974:	a38a      	add	r3, pc, #552	; (adr r3, 8007ba0 <__ieee754_rem_pio2+0x300>)
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f7f8 fc2b 	bl	80001d4 <__adddf3>
 800797e:	a38a      	add	r3, pc, #552	; (adr r3, 8007ba8 <__ieee754_rem_pio2+0x308>)
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	4604      	mov	r4, r0
 8007986:	460d      	mov	r5, r1
 8007988:	f7f8 fc24 	bl	80001d4 <__adddf3>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	e9ca 2300 	strd	r2, r3, [sl]
 8007994:	4620      	mov	r0, r4
 8007996:	4629      	mov	r1, r5
 8007998:	f7f8 fc1a 	bl	80001d0 <__aeabi_dsub>
 800799c:	a382      	add	r3, pc, #520	; (adr r3, 8007ba8 <__ieee754_rem_pio2+0x308>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	f7f8 fc17 	bl	80001d4 <__adddf3>
 80079a6:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80079aa:	f04f 30ff 	mov.w	r0, #4294967295
 80079ae:	e16d      	b.n	8007c8c <__ieee754_rem_pio2+0x3ec>
 80079b0:	4b88      	ldr	r3, [pc, #544]	; (8007bd4 <__ieee754_rem_pio2+0x334>)
 80079b2:	4598      	cmp	r8, r3
 80079b4:	f300 80da 	bgt.w	8007b6c <__ieee754_rem_pio2+0x2cc>
 80079b8:	f001 fe5c 	bl	8009674 <fabs>
 80079bc:	ec55 4b10 	vmov	r4, r5, d0
 80079c0:	ee10 0a10 	vmov	r0, s0
 80079c4:	a37a      	add	r3, pc, #488	; (adr r3, 8007bb0 <__ieee754_rem_pio2+0x310>)
 80079c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ca:	4629      	mov	r1, r5
 80079cc:	f7f8 fdb4 	bl	8000538 <__aeabi_dmul>
 80079d0:	2200      	movs	r2, #0
 80079d2:	4b81      	ldr	r3, [pc, #516]	; (8007bd8 <__ieee754_rem_pio2+0x338>)
 80079d4:	f7f8 fbfe 	bl	80001d4 <__adddf3>
 80079d8:	f7f9 f85e 	bl	8000a98 <__aeabi_d2iz>
 80079dc:	4681      	mov	r9, r0
 80079de:	f7f8 fd45 	bl	800046c <__aeabi_i2d>
 80079e2:	a36b      	add	r3, pc, #428	; (adr r3, 8007b90 <__ieee754_rem_pio2+0x2f0>)
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079ec:	f7f8 fda4 	bl	8000538 <__aeabi_dmul>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4620      	mov	r0, r4
 80079f6:	4629      	mov	r1, r5
 80079f8:	f7f8 fbea 	bl	80001d0 <__aeabi_dsub>
 80079fc:	a366      	add	r3, pc, #408	; (adr r3, 8007b98 <__ieee754_rem_pio2+0x2f8>)
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	4604      	mov	r4, r0
 8007a04:	460d      	mov	r5, r1
 8007a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a0a:	f7f8 fd95 	bl	8000538 <__aeabi_dmul>
 8007a0e:	f1b9 0f1f 	cmp.w	r9, #31
 8007a12:	4606      	mov	r6, r0
 8007a14:	460f      	mov	r7, r1
 8007a16:	dc06      	bgt.n	8007a26 <__ieee754_rem_pio2+0x186>
 8007a18:	f109 32ff 	add.w	r2, r9, #4294967295
 8007a1c:	4b6f      	ldr	r3, [pc, #444]	; (8007bdc <__ieee754_rem_pio2+0x33c>)
 8007a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a22:	4598      	cmp	r8, r3
 8007a24:	d172      	bne.n	8007b0c <__ieee754_rem_pio2+0x26c>
 8007a26:	463b      	mov	r3, r7
 8007a28:	4632      	mov	r2, r6
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	f7f8 fbcf 	bl	80001d0 <__aeabi_dsub>
 8007a32:	ea4f 5828 	mov.w	r8, r8, asr #20
 8007a36:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007a3a:	ebc3 0308 	rsb	r3, r3, r8
 8007a3e:	2b10      	cmp	r3, #16
 8007a40:	e9ca 0100 	strd	r0, r1, [sl]
 8007a44:	dd6d      	ble.n	8007b22 <__ieee754_rem_pio2+0x282>
 8007a46:	a356      	add	r3, pc, #344	; (adr r3, 8007ba0 <__ieee754_rem_pio2+0x300>)
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a50:	f7f8 fd72 	bl	8000538 <__aeabi_dmul>
 8007a54:	4606      	mov	r6, r0
 8007a56:	460f      	mov	r7, r1
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	4629      	mov	r1, r5
 8007a60:	f7f8 fbb6 	bl	80001d0 <__aeabi_dsub>
 8007a64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	4629      	mov	r1, r5
 8007a70:	f7f8 fbae 	bl	80001d0 <__aeabi_dsub>
 8007a74:	4632      	mov	r2, r6
 8007a76:	463b      	mov	r3, r7
 8007a78:	f7f8 fbaa 	bl	80001d0 <__aeabi_dsub>
 8007a7c:	a34a      	add	r3, pc, #296	; (adr r3, 8007ba8 <__ieee754_rem_pio2+0x308>)
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	4604      	mov	r4, r0
 8007a84:	460d      	mov	r5, r1
 8007a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a8a:	f7f8 fd55 	bl	8000538 <__aeabi_dmul>
 8007a8e:	4622      	mov	r2, r4
 8007a90:	462b      	mov	r3, r5
 8007a92:	f7f8 fb9d 	bl	80001d0 <__aeabi_dsub>
 8007a96:	460b      	mov	r3, r1
 8007a98:	4602      	mov	r2, r0
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	460f      	mov	r7, r1
 8007a9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007aa2:	f7f8 fb95 	bl	80001d0 <__aeabi_dsub>
 8007aa6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007aaa:	ebc3 0808 	rsb	r8, r3, r8
 8007aae:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 8007ab2:	e9ca 0100 	strd	r0, r1, [sl]
 8007ab6:	dd32      	ble.n	8007b1e <__ieee754_rem_pio2+0x27e>
 8007ab8:	a33f      	add	r3, pc, #252	; (adr r3, 8007bb8 <__ieee754_rem_pio2+0x318>)
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ac2:	f7f8 fd39 	bl	8000538 <__aeabi_dmul>
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	460f      	mov	r7, r1
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ad2:	f7f8 fb7d 	bl	80001d0 <__aeabi_dsub>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4604      	mov	r4, r0
 8007adc:	460d      	mov	r5, r1
 8007ade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ae2:	f7f8 fb75 	bl	80001d0 <__aeabi_dsub>
 8007ae6:	4632      	mov	r2, r6
 8007ae8:	463b      	mov	r3, r7
 8007aea:	f7f8 fb71 	bl	80001d0 <__aeabi_dsub>
 8007aee:	a334      	add	r3, pc, #208	; (adr r3, 8007bc0 <__ieee754_rem_pio2+0x320>)
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	4606      	mov	r6, r0
 8007af6:	460f      	mov	r7, r1
 8007af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007afc:	f7f8 fd1c 	bl	8000538 <__aeabi_dmul>
 8007b00:	4632      	mov	r2, r6
 8007b02:	463b      	mov	r3, r7
 8007b04:	f7f8 fb64 	bl	80001d0 <__aeabi_dsub>
 8007b08:	4606      	mov	r6, r0
 8007b0a:	460f      	mov	r7, r1
 8007b0c:	4632      	mov	r2, r6
 8007b0e:	463b      	mov	r3, r7
 8007b10:	4620      	mov	r0, r4
 8007b12:	4629      	mov	r1, r5
 8007b14:	f7f8 fb5c 	bl	80001d0 <__aeabi_dsub>
 8007b18:	e9ca 0100 	strd	r0, r1, [sl]
 8007b1c:	e001      	b.n	8007b22 <__ieee754_rem_pio2+0x282>
 8007b1e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007b22:	ed9a 7b00 	vldr	d7, [sl]
 8007b26:	4620      	mov	r0, r4
 8007b28:	ec53 2b17 	vmov	r2, r3, d7
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b32:	f7f8 fb4d 	bl	80001d0 <__aeabi_dsub>
 8007b36:	4632      	mov	r2, r6
 8007b38:	463b      	mov	r3, r7
 8007b3a:	f7f8 fb49 	bl	80001d0 <__aeabi_dsub>
 8007b3e:	f1bb 0f00 	cmp.w	fp, #0
 8007b42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007b46:	f280 80a0 	bge.w	8007c8a <__ieee754_rem_pio2+0x3ea>
 8007b4a:	9b02      	ldr	r3, [sp, #8]
 8007b4c:	f8ca 3000 	str.w	r3, [sl]
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	f8ca 0008 	str.w	r0, [sl, #8]
 8007b56:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b5a:	f8ca 3004 	str.w	r3, [sl, #4]
 8007b5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b62:	f8ca 300c 	str.w	r3, [sl, #12]
 8007b66:	f1c9 0000 	rsb	r0, r9, #0
 8007b6a:	e08f      	b.n	8007c8c <__ieee754_rem_pio2+0x3ec>
 8007b6c:	4b1c      	ldr	r3, [pc, #112]	; (8007be0 <__ieee754_rem_pio2+0x340>)
 8007b6e:	4598      	cmp	r8, r3
 8007b70:	dd38      	ble.n	8007be4 <__ieee754_rem_pio2+0x344>
 8007b72:	ee10 2a10 	vmov	r2, s0
 8007b76:	462b      	mov	r3, r5
 8007b78:	4620      	mov	r0, r4
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	f7f8 fb28 	bl	80001d0 <__aeabi_dsub>
 8007b80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007b84:	e9ca 0100 	strd	r0, r1, [sl]
 8007b88:	2000      	movs	r0, #0
 8007b8a:	e07f      	b.n	8007c8c <__ieee754_rem_pio2+0x3ec>
 8007b8c:	f3af 8000 	nop.w
 8007b90:	54400000 	.word	0x54400000
 8007b94:	3ff921fb 	.word	0x3ff921fb
 8007b98:	1a626331 	.word	0x1a626331
 8007b9c:	3dd0b461 	.word	0x3dd0b461
 8007ba0:	1a600000 	.word	0x1a600000
 8007ba4:	3dd0b461 	.word	0x3dd0b461
 8007ba8:	2e037073 	.word	0x2e037073
 8007bac:	3ba3198a 	.word	0x3ba3198a
 8007bb0:	6dc9c883 	.word	0x6dc9c883
 8007bb4:	3fe45f30 	.word	0x3fe45f30
 8007bb8:	2e000000 	.word	0x2e000000
 8007bbc:	3ba3198a 	.word	0x3ba3198a
 8007bc0:	252049c1 	.word	0x252049c1
 8007bc4:	397b839a 	.word	0x397b839a
 8007bc8:	3fe921fb 	.word	0x3fe921fb
 8007bcc:	4002d97b 	.word	0x4002d97b
 8007bd0:	3ff921fb 	.word	0x3ff921fb
 8007bd4:	413921fb 	.word	0x413921fb
 8007bd8:	3fe00000 	.word	0x3fe00000
 8007bdc:	0800a3b4 	.word	0x0800a3b4
 8007be0:	7fefffff 	.word	0x7fefffff
 8007be4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007be8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8007bec:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	460d      	mov	r5, r1
 8007bf4:	f7f8 ff50 	bl	8000a98 <__aeabi_d2iz>
 8007bf8:	f7f8 fc38 	bl	800046c <__aeabi_i2d>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4620      	mov	r0, r4
 8007c02:	4629      	mov	r1, r5
 8007c04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c08:	f7f8 fae2 	bl	80001d0 <__aeabi_dsub>
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4b21      	ldr	r3, [pc, #132]	; (8007c94 <__ieee754_rem_pio2+0x3f4>)
 8007c10:	f7f8 fc92 	bl	8000538 <__aeabi_dmul>
 8007c14:	460d      	mov	r5, r1
 8007c16:	4604      	mov	r4, r0
 8007c18:	f7f8 ff3e 	bl	8000a98 <__aeabi_d2iz>
 8007c1c:	f7f8 fc26 	bl	800046c <__aeabi_i2d>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c2c:	f7f8 fad0 	bl	80001d0 <__aeabi_dsub>
 8007c30:	2200      	movs	r2, #0
 8007c32:	4b18      	ldr	r3, [pc, #96]	; (8007c94 <__ieee754_rem_pio2+0x3f4>)
 8007c34:	f7f8 fc80 	bl	8000538 <__aeabi_dmul>
 8007c38:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007c3c:	ad0c      	add	r5, sp, #48	; 0x30
 8007c3e:	2403      	movs	r4, #3
 8007c40:	2200      	movs	r2, #0
 8007c42:	2300      	movs	r3, #0
 8007c44:	e975 0102 	ldrd	r0, r1, [r5, #-8]!
 8007c48:	1e67      	subs	r7, r4, #1
 8007c4a:	f7f8 fedd 	bl	8000a08 <__aeabi_dcmpeq>
 8007c4e:	b108      	cbz	r0, 8007c54 <__ieee754_rem_pio2+0x3b4>
 8007c50:	463c      	mov	r4, r7
 8007c52:	e7f5      	b.n	8007c40 <__ieee754_rem_pio2+0x3a0>
 8007c54:	4b10      	ldr	r3, [pc, #64]	; (8007c98 <__ieee754_rem_pio2+0x3f8>)
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	2302      	movs	r3, #2
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	4632      	mov	r2, r6
 8007c5e:	4623      	mov	r3, r4
 8007c60:	4651      	mov	r1, sl
 8007c62:	a806      	add	r0, sp, #24
 8007c64:	f000 fdf0 	bl	8008848 <__kernel_rem_pio2>
 8007c68:	f1bb 0f00 	cmp.w	fp, #0
 8007c6c:	da0e      	bge.n	8007c8c <__ieee754_rem_pio2+0x3ec>
 8007c6e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007c72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007c76:	f8ca 3004 	str.w	r3, [sl, #4]
 8007c7a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007c7e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007c82:	f8ca 300c 	str.w	r3, [sl, #12]
 8007c86:	4240      	negs	r0, r0
 8007c88:	e000      	b.n	8007c8c <__ieee754_rem_pio2+0x3ec>
 8007c8a:	4648      	mov	r0, r9
 8007c8c:	b00d      	add	sp, #52	; 0x34
 8007c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c92:	bf00      	nop
 8007c94:	41700000 	.word	0x41700000
 8007c98:	0800a434 	.word	0x0800a434

08007c9c <__ieee754_sqrt>:
 8007c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca0:	4957      	ldr	r1, [pc, #348]	; (8007e00 <__ieee754_sqrt+0x164>)
 8007ca2:	4f57      	ldr	r7, [pc, #348]	; (8007e00 <__ieee754_sqrt+0x164>)
 8007ca4:	ec55 4b10 	vmov	r4, r5, d0
 8007ca8:	4029      	ands	r1, r5
 8007caa:	42b9      	cmp	r1, r7
 8007cac:	462a      	mov	r2, r5
 8007cae:	462b      	mov	r3, r5
 8007cb0:	4626      	mov	r6, r4
 8007cb2:	d10c      	bne.n	8007cce <__ieee754_sqrt+0x32>
 8007cb4:	ee10 2a10 	vmov	r2, s0
 8007cb8:	462b      	mov	r3, r5
 8007cba:	ee10 0a10 	vmov	r0, s0
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	f7f8 fc3a 	bl	8000538 <__aeabi_dmul>
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	462b      	mov	r3, r5
 8007cc8:	f7f8 fa84 	bl	80001d4 <__adddf3>
 8007ccc:	e094      	b.n	8007df8 <__ieee754_sqrt+0x15c>
 8007cce:	2d00      	cmp	r5, #0
 8007cd0:	dc11      	bgt.n	8007cf6 <__ieee754_sqrt+0x5a>
 8007cd2:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8007cd6:	4321      	orrs	r1, r4
 8007cd8:	f000 808b 	beq.w	8007df2 <__ieee754_sqrt+0x156>
 8007cdc:	b15d      	cbz	r5, 8007cf6 <__ieee754_sqrt+0x5a>
 8007cde:	ee10 2a10 	vmov	r2, s0
 8007ce2:	462b      	mov	r3, r5
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	f7f8 fa72 	bl	80001d0 <__aeabi_dsub>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	f7f8 fd4c 	bl	800078c <__aeabi_ddiv>
 8007cf4:	e080      	b.n	8007df8 <__ieee754_sqrt+0x15c>
 8007cf6:	1512      	asrs	r2, r2, #20
 8007cf8:	d112      	bne.n	8007d20 <__ieee754_sqrt+0x84>
 8007cfa:	b91b      	cbnz	r3, 8007d04 <__ieee754_sqrt+0x68>
 8007cfc:	0af3      	lsrs	r3, r6, #11
 8007cfe:	3a15      	subs	r2, #21
 8007d00:	0576      	lsls	r6, r6, #21
 8007d02:	e7fa      	b.n	8007cfa <__ieee754_sqrt+0x5e>
 8007d04:	2100      	movs	r1, #0
 8007d06:	02d8      	lsls	r0, r3, #11
 8007d08:	d402      	bmi.n	8007d10 <__ieee754_sqrt+0x74>
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	3101      	adds	r1, #1
 8007d0e:	e7fa      	b.n	8007d06 <__ieee754_sqrt+0x6a>
 8007d10:	1e48      	subs	r0, r1, #1
 8007d12:	1a12      	subs	r2, r2, r0
 8007d14:	f1c1 0020 	rsb	r0, r1, #32
 8007d18:	fa26 f000 	lsr.w	r0, r6, r0
 8007d1c:	4303      	orrs	r3, r0
 8007d1e:	408e      	lsls	r6, r1
 8007d20:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d28:	07d1      	lsls	r1, r2, #31
 8007d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d2e:	bf42      	ittt	mi
 8007d30:	005b      	lslmi	r3, r3, #1
 8007d32:	eb03 73d6 	addmi.w	r3, r3, r6, lsr #31
 8007d36:	0076      	lslmi	r6, r6, #1
 8007d38:	1055      	asrs	r5, r2, #1
 8007d3a:	f04f 0e00 	mov.w	lr, #0
 8007d3e:	eb03 72d6 	add.w	r2, r3, r6, lsr #31
 8007d42:	4413      	add	r3, r2
 8007d44:	0076      	lsls	r6, r6, #1
 8007d46:	2216      	movs	r2, #22
 8007d48:	4677      	mov	r7, lr
 8007d4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d4e:	1878      	adds	r0, r7, r1
 8007d50:	4298      	cmp	r0, r3
 8007d52:	bfde      	ittt	le
 8007d54:	1a1b      	suble	r3, r3, r0
 8007d56:	1847      	addle	r7, r0, r1
 8007d58:	448e      	addle	lr, r1
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	3a01      	subs	r2, #1
 8007d5e:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
 8007d62:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007d66:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8007d6a:	d1f0      	bne.n	8007d4e <__ieee754_sqrt+0xb2>
 8007d6c:	2420      	movs	r4, #32
 8007d6e:	4694      	mov	ip, r2
 8007d70:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007d74:	429f      	cmp	r7, r3
 8007d76:	eb01 000c 	add.w	r0, r1, ip
 8007d7a:	db02      	blt.n	8007d82 <__ieee754_sqrt+0xe6>
 8007d7c:	d116      	bne.n	8007dac <__ieee754_sqrt+0x110>
 8007d7e:	42b0      	cmp	r0, r6
 8007d80:	d813      	bhi.n	8007daa <__ieee754_sqrt+0x10e>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	eb00 0c01 	add.w	ip, r0, r1
 8007d88:	da05      	bge.n	8007d96 <__ieee754_sqrt+0xfa>
 8007d8a:	f1bc 0f00 	cmp.w	ip, #0
 8007d8e:	db02      	blt.n	8007d96 <__ieee754_sqrt+0xfa>
 8007d90:	f107 0801 	add.w	r8, r7, #1
 8007d94:	e000      	b.n	8007d98 <__ieee754_sqrt+0xfc>
 8007d96:	46b8      	mov	r8, r7
 8007d98:	1bdb      	subs	r3, r3, r7
 8007d9a:	42b0      	cmp	r0, r6
 8007d9c:	bf88      	it	hi
 8007d9e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007da2:	1a36      	subs	r6, r6, r0
 8007da4:	440a      	add	r2, r1
 8007da6:	4647      	mov	r7, r8
 8007da8:	e000      	b.n	8007dac <__ieee754_sqrt+0x110>
 8007daa:	463b      	mov	r3, r7
 8007dac:	eb03 70d6 	add.w	r0, r3, r6, lsr #31
 8007db0:	3c01      	subs	r4, #1
 8007db2:	4403      	add	r3, r0
 8007db4:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8007db8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007dbc:	d1da      	bne.n	8007d74 <__ieee754_sqrt+0xd8>
 8007dbe:	4333      	orrs	r3, r6
 8007dc0:	d007      	beq.n	8007dd2 <__ieee754_sqrt+0x136>
 8007dc2:	1c53      	adds	r3, r2, #1
 8007dc4:	bf13      	iteet	ne
 8007dc6:	f002 0301 	andne.w	r3, r2, #1
 8007dca:	f10e 0e01 	addeq.w	lr, lr, #1
 8007dce:	4622      	moveq	r2, r4
 8007dd0:	18d2      	addne	r2, r2, r3
 8007dd2:	ea4f 046e 	mov.w	r4, lr, asr #1
 8007dd6:	0853      	lsrs	r3, r2, #1
 8007dd8:	f104 547f 	add.w	r4, r4, #1069547520	; 0x3fc00000
 8007ddc:	f01e 0f01 	tst.w	lr, #1
 8007de0:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
 8007de4:	bf18      	it	ne
 8007de6:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
 8007dea:	eb04 5105 	add.w	r1, r4, r5, lsl #20
 8007dee:	4618      	mov	r0, r3
 8007df0:	e002      	b.n	8007df8 <__ieee754_sqrt+0x15c>
 8007df2:	ee10 0a10 	vmov	r0, s0
 8007df6:	4629      	mov	r1, r5
 8007df8:	ec41 0b10 	vmov	d0, r0, r1
 8007dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e00:	7ff00000 	.word	0x7ff00000

08007e04 <__ieee754_powf>:
 8007e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e08:	ee10 5a90 	vmov	r5, s1
 8007e0c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007e10:	ed2d 8b02 	vpush	{d8}
 8007e14:	eeb0 8a40 	vmov.f32	s16, s0
 8007e18:	eef0 8a60 	vmov.f32	s17, s1
 8007e1c:	f000 8298 	beq.w	8008350 <__ieee754_powf+0x54c>
 8007e20:	ee10 8a10 	vmov	r8, s0
 8007e24:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007e28:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007e2c:	dc06      	bgt.n	8007e3c <__ieee754_powf+0x38>
 8007e2e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007e32:	dd0a      	ble.n	8007e4a <__ieee754_powf+0x46>
 8007e34:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007e38:	f000 828a 	beq.w	8008350 <__ieee754_powf+0x54c>
 8007e3c:	ecbd 8b02 	vpop	{d8}
 8007e40:	48e2      	ldr	r0, [pc, #904]	; (80081cc <__ieee754_powf+0x3c8>)
 8007e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e46:	f001 be09 	b.w	8009a5c <nanf>
 8007e4a:	f1b8 0f00 	cmp.w	r8, #0
 8007e4e:	da13      	bge.n	8007e78 <__ieee754_powf+0x74>
 8007e50:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007e54:	da12      	bge.n	8007e7c <__ieee754_powf+0x78>
 8007e56:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007e5a:	db23      	blt.n	8007ea4 <__ieee754_powf+0xa0>
 8007e5c:	15fb      	asrs	r3, r7, #23
 8007e5e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007e62:	fa47 f603 	asr.w	r6, r7, r3
 8007e66:	fa06 f303 	lsl.w	r3, r6, r3
 8007e6a:	429f      	cmp	r7, r3
 8007e6c:	d11a      	bne.n	8007ea4 <__ieee754_powf+0xa0>
 8007e6e:	f006 0601 	and.w	r6, r6, #1
 8007e72:	f1c6 0602 	rsb	r6, r6, #2
 8007e76:	e016      	b.n	8007ea6 <__ieee754_powf+0xa2>
 8007e78:	2600      	movs	r6, #0
 8007e7a:	e000      	b.n	8007e7e <__ieee754_powf+0x7a>
 8007e7c:	2602      	movs	r6, #2
 8007e7e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007e82:	d110      	bne.n	8007ea6 <__ieee754_powf+0xa2>
 8007e84:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007e88:	f000 8262 	beq.w	8008350 <__ieee754_powf+0x54c>
 8007e8c:	dd05      	ble.n	8007e9a <__ieee754_powf+0x96>
 8007e8e:	2d00      	cmp	r5, #0
 8007e90:	f280 8261 	bge.w	8008356 <__ieee754_powf+0x552>
 8007e94:	ed9f 0ace 	vldr	s0, [pc, #824]	; 80081d0 <__ieee754_powf+0x3cc>
 8007e98:	e262      	b.n	8008360 <__ieee754_powf+0x55c>
 8007e9a:	2d00      	cmp	r5, #0
 8007e9c:	dafa      	bge.n	8007e94 <__ieee754_powf+0x90>
 8007e9e:	eeb1 0a68 	vneg.f32	s0, s17
 8007ea2:	e25d      	b.n	8008360 <__ieee754_powf+0x55c>
 8007ea4:	2600      	movs	r6, #0
 8007ea6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007eaa:	d107      	bne.n	8007ebc <__ieee754_powf+0xb8>
 8007eac:	2d00      	cmp	r5, #0
 8007eae:	f280 8255 	bge.w	800835c <__ieee754_powf+0x558>
 8007eb2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007eb6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007eba:	e251      	b.n	8008360 <__ieee754_powf+0x55c>
 8007ebc:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8007ec0:	d102      	bne.n	8007ec8 <__ieee754_powf+0xc4>
 8007ec2:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007ec6:	e24b      	b.n	8008360 <__ieee754_powf+0x55c>
 8007ec8:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007ecc:	eeb0 0a48 	vmov.f32	s0, s16
 8007ed0:	d108      	bne.n	8007ee4 <__ieee754_powf+0xe0>
 8007ed2:	f1b8 0f00 	cmp.w	r8, #0
 8007ed6:	db05      	blt.n	8007ee4 <__ieee754_powf+0xe0>
 8007ed8:	ecbd 8b02 	vpop	{d8}
 8007edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee0:	f000 bb80 	b.w	80085e4 <__ieee754_sqrtf>
 8007ee4:	f001 fd66 	bl	80099b4 <fabsf>
 8007ee8:	b124      	cbz	r4, 8007ef4 <__ieee754_powf+0xf0>
 8007eea:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007eee:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007ef2:	d119      	bne.n	8007f28 <__ieee754_powf+0x124>
 8007ef4:	2d00      	cmp	r5, #0
 8007ef6:	bfbc      	itt	lt
 8007ef8:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007efc:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007f00:	f1b8 0f00 	cmp.w	r8, #0
 8007f04:	f280 822c 	bge.w	8008360 <__ieee754_powf+0x55c>
 8007f08:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007f0c:	ea54 0306 	orrs.w	r3, r4, r6
 8007f10:	d104      	bne.n	8007f1c <__ieee754_powf+0x118>
 8007f12:	ee70 0a40 	vsub.f32	s1, s0, s0
 8007f16:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8007f1a:	e221      	b.n	8008360 <__ieee754_powf+0x55c>
 8007f1c:	2e01      	cmp	r6, #1
 8007f1e:	f040 821f 	bne.w	8008360 <__ieee754_powf+0x55c>
 8007f22:	eeb1 0a40 	vneg.f32	s0, s0
 8007f26:	e21b      	b.n	8008360 <__ieee754_powf+0x55c>
 8007f28:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8007f2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f30:	ea56 0308 	orrs.w	r3, r6, r8
 8007f34:	d104      	bne.n	8007f40 <__ieee754_powf+0x13c>
 8007f36:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007f3a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007f3e:	e20f      	b.n	8008360 <__ieee754_powf+0x55c>
 8007f40:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007f44:	dd3e      	ble.n	8007fc4 <__ieee754_powf+0x1c0>
 8007f46:	4ba3      	ldr	r3, [pc, #652]	; (80081d4 <__ieee754_powf+0x3d0>)
 8007f48:	429c      	cmp	r4, r3
 8007f4a:	dc06      	bgt.n	8007f5a <__ieee754_powf+0x156>
 8007f4c:	2d00      	cmp	r5, #0
 8007f4e:	daa1      	bge.n	8007e94 <__ieee754_powf+0x90>
 8007f50:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 80081d8 <__ieee754_powf+0x3d4>
 8007f54:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007f58:	e202      	b.n	8008360 <__ieee754_powf+0x55c>
 8007f5a:	4ba0      	ldr	r3, [pc, #640]	; (80081dc <__ieee754_powf+0x3d8>)
 8007f5c:	429c      	cmp	r4, r3
 8007f5e:	dd02      	ble.n	8007f66 <__ieee754_powf+0x162>
 8007f60:	2d00      	cmp	r5, #0
 8007f62:	dcf5      	bgt.n	8007f50 <__ieee754_powf+0x14c>
 8007f64:	e796      	b.n	8007e94 <__ieee754_powf+0x90>
 8007f66:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007f6a:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007f6e:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80081e0 <__ieee754_powf+0x3dc>
 8007f72:	eef1 6a40 	vneg.f32	s13, s0
 8007f76:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007f7a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f7e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007f82:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007f86:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007f8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007f8e:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80081e4 <__ieee754_powf+0x3e0>
 8007f92:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007f96:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80081e8 <__ieee754_powf+0x3e4>
 8007f9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007f9e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80081ec <__ieee754_powf+0x3e8>
 8007fa2:	eeb0 6a67 	vmov.f32	s12, s15
 8007fa6:	eea0 6a07 	vfma.f32	s12, s0, s14
 8007faa:	ee16 3a10 	vmov	r3, s12
 8007fae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007fb2:	f023 030f 	bic.w	r3, r3, #15
 8007fb6:	ee06 3a10 	vmov	s12, r3
 8007fba:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007fbe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007fc2:	e0cb      	b.n	800815c <__ieee754_powf+0x358>
 8007fc4:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8007fc8:	bfb8      	it	lt
 8007fca:	eddf 7a89 	vldrlt	s15, [pc, #548]	; 80081f0 <__ieee754_powf+0x3ec>
 8007fce:	4989      	ldr	r1, [pc, #548]	; (80081f4 <__ieee754_powf+0x3f0>)
 8007fd0:	bfbe      	ittt	lt
 8007fd2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007fd6:	f06f 0217 	mvnlt.w	r2, #23
 8007fda:	ee17 4a90 	vmovlt	r4, s15
 8007fde:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007fe2:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007fe6:	bfa8      	it	ge
 8007fe8:	2200      	movge	r2, #0
 8007fea:	3b7f      	subs	r3, #127	; 0x7f
 8007fec:	428c      	cmp	r4, r1
 8007fee:	4413      	add	r3, r2
 8007ff0:	f044 527e 	orr.w	r2, r4, #1065353216	; 0x3f800000
 8007ff4:	dd05      	ble.n	8008002 <__ieee754_powf+0x1fe>
 8007ff6:	4980      	ldr	r1, [pc, #512]	; (80081f8 <__ieee754_powf+0x3f4>)
 8007ff8:	428c      	cmp	r4, r1
 8007ffa:	dd04      	ble.n	8008006 <__ieee754_powf+0x202>
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
 8008002:	2000      	movs	r0, #0
 8008004:	e000      	b.n	8008008 <__ieee754_powf+0x204>
 8008006:	2001      	movs	r0, #1
 8008008:	4c7c      	ldr	r4, [pc, #496]	; (80081fc <__ieee754_powf+0x3f8>)
 800800a:	0081      	lsls	r1, r0, #2
 800800c:	440c      	add	r4, r1
 800800e:	ee07 2a10 	vmov	s14, r2
 8008012:	ed94 4a00 	vldr	s8, [r4]
 8008016:	ee77 7a04 	vadd.f32	s15, s14, s8
 800801a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800801e:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8008022:	1052      	asrs	r2, r2, #1
 8008024:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008028:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
 800802c:	eb02 5240 	add.w	r2, r2, r0, lsl #21
 8008030:	ee77 5a44 	vsub.f32	s11, s14, s8
 8008034:	ee06 2a90 	vmov	s13, r2
 8008038:	ee65 7a86 	vmul.f32	s15, s11, s12
 800803c:	ee17 4a90 	vmov	r4, s15
 8008040:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8008044:	f024 040f 	bic.w	r4, r4, #15
 8008048:	ee05 4a10 	vmov	s10, r4
 800804c:	eef1 4a45 	vneg.f32	s9, s10
 8008050:	eee4 5aa6 	vfma.f32	s11, s9, s13
 8008054:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8008058:	ed9f 4a69 	vldr	s8, [pc, #420]	; 8008200 <__ieee754_powf+0x3fc>
 800805c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8008060:	ee37 7a85 	vadd.f32	s14, s15, s10
 8008064:	eee4 5aa6 	vfma.f32	s11, s9, s13
 8008068:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800806c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8008070:	eddf 5a64 	vldr	s11, [pc, #400]	; 8008204 <__ieee754_powf+0x400>
 8008074:	eee6 5a84 	vfma.f32	s11, s13, s8
 8008078:	ed9f 4a63 	vldr	s8, [pc, #396]	; 8008208 <__ieee754_powf+0x404>
 800807c:	eea6 4aa5 	vfma.f32	s8, s13, s11
 8008080:	eddf 5a57 	vldr	s11, [pc, #348]	; 80081e0 <__ieee754_powf+0x3dc>
 8008084:	eee6 5a84 	vfma.f32	s11, s13, s8
 8008088:	ed9f 4a60 	vldr	s8, [pc, #384]	; 800820c <__ieee754_powf+0x408>
 800808c:	eea6 4aa5 	vfma.f32	s8, s13, s11
 8008090:	eddf 5a5f 	vldr	s11, [pc, #380]	; 8008210 <__ieee754_powf+0x40c>
 8008094:	eee6 5a84 	vfma.f32	s11, s13, s8
 8008098:	ee66 3aa6 	vmul.f32	s7, s13, s13
 800809c:	ee27 7a06 	vmul.f32	s14, s14, s12
 80080a0:	eea3 7aa5 	vfma.f32	s14, s7, s11
 80080a4:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80080a8:	eef0 6a65 	vmov.f32	s13, s11
 80080ac:	eee5 6a05 	vfma.f32	s13, s10, s10
 80080b0:	ee76 6a87 	vadd.f32	s13, s13, s14
 80080b4:	ee16 2a90 	vmov	r2, s13
 80080b8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80080bc:	f022 020f 	bic.w	r2, r2, #15
 80080c0:	ee06 2a90 	vmov	s13, r2
 80080c4:	ee76 5ae5 	vsub.f32	s11, s13, s11
 80080c8:	eee4 5a85 	vfma.f32	s11, s9, s10
 80080cc:	ee37 7a65 	vsub.f32	s14, s14, s11
 80080d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80080d8:	eef0 5a67 	vmov.f32	s11, s15
 80080dc:	eee5 5a26 	vfma.f32	s11, s10, s13
 80080e0:	ed9f 5a4c 	vldr	s10, [pc, #304]	; 8008214 <__ieee754_powf+0x410>
 80080e4:	ee15 2a90 	vmov	r2, s11
 80080e8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80080ec:	f022 020f 	bic.w	r2, r2, #15
 80080f0:	ee07 2a10 	vmov	s14, r2
 80080f4:	eea4 7aa6 	vfma.f32	s14, s9, s13
 80080f8:	ee05 2a90 	vmov	s11, r2
 80080fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008100:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8008218 <__ieee754_powf+0x414>
 8008104:	4a45      	ldr	r2, [pc, #276]	; (800821c <__ieee754_powf+0x418>)
 8008106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800810a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8008220 <__ieee754_powf+0x41c>
 800810e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8008112:	440a      	add	r2, r1
 8008114:	ed92 7a00 	vldr	s14, [r2]
 8008118:	ee37 7a87 	vadd.f32	s14, s15, s14
 800811c:	ee07 3a90 	vmov	s15, r3
 8008120:	eef0 6a47 	vmov.f32	s13, s14
 8008124:	4b3f      	ldr	r3, [pc, #252]	; (8008224 <__ieee754_powf+0x420>)
 8008126:	eee5 6a85 	vfma.f32	s13, s11, s10
 800812a:	4419      	add	r1, r3
 800812c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008130:	edd1 7a00 	vldr	s15, [r1]
 8008134:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008138:	ee76 6a86 	vadd.f32	s13, s13, s12
 800813c:	ee16 3a90 	vmov	r3, s13
 8008140:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008144:	f023 030f 	bic.w	r3, r3, #15
 8008148:	ee06 3a90 	vmov	s13, r3
 800814c:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8008150:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008154:	eee5 7ac5 	vfms.f32	s15, s11, s10
 8008158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800815c:	3e01      	subs	r6, #1
 800815e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8008162:	ea56 0208 	orrs.w	r2, r6, r8
 8008166:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800816a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800816e:	f025 050f 	bic.w	r5, r5, #15
 8008172:	bf0c      	ite	eq
 8008174:	eeb0 8a47 	vmoveq.f32	s16, s14
 8008178:	eeb0 8a40 	vmovne.f32	s16, s0
 800817c:	ee07 5a10 	vmov	s14, r5
 8008180:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8008184:	ee38 0ac7 	vsub.f32	s0, s17, s14
 8008188:	ee07 3a10 	vmov	s14, r3
 800818c:	ee06 5a90 	vmov	s13, r5
 8008190:	eee7 7a00 	vfma.f32	s15, s14, s0
 8008194:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008198:	ee77 6a87 	vadd.f32	s13, s15, s14
 800819c:	ee16 1a90 	vmov	r1, s13
 80081a0:	2900      	cmp	r1, #0
 80081a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081a6:	dd41      	ble.n	800822c <__ieee754_powf+0x428>
 80081a8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80081ac:	dc0b      	bgt.n	80081c6 <__ieee754_powf+0x3c2>
 80081ae:	d150      	bne.n	8008252 <__ieee754_powf+0x44e>
 80081b0:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8008228 <__ieee754_powf+0x424>
 80081b4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80081b8:	ee37 6a86 	vadd.f32	s12, s15, s12
 80081bc:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80081c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081c4:	dd48      	ble.n	8008258 <__ieee754_powf+0x454>
 80081c6:	eddf 0a04 	vldr	s1, [pc, #16]	; 80081d8 <__ieee754_powf+0x3d4>
 80081ca:	e034      	b.n	8008236 <__ieee754_powf+0x432>
 80081cc:	0800a3a5 	.word	0x0800a3a5
 80081d0:	00000000 	.word	0x00000000
 80081d4:	3f7ffff7 	.word	0x3f7ffff7
 80081d8:	7149f2ca 	.word	0x7149f2ca
 80081dc:	3f800007 	.word	0x3f800007
 80081e0:	3eaaaaab 	.word	0x3eaaaaab
 80081e4:	3fb8aa3b 	.word	0x3fb8aa3b
 80081e8:	36eca570 	.word	0x36eca570
 80081ec:	3fb8aa00 	.word	0x3fb8aa00
 80081f0:	4b800000 	.word	0x4b800000
 80081f4:	001cc471 	.word	0x001cc471
 80081f8:	005db3d6 	.word	0x005db3d6
 80081fc:	0800a54c 	.word	0x0800a54c
 8008200:	3e53f142 	.word	0x3e53f142
 8008204:	3e6c3255 	.word	0x3e6c3255
 8008208:	3e8ba305 	.word	0x3e8ba305
 800820c:	3edb6db7 	.word	0x3edb6db7
 8008210:	3f19999a 	.word	0x3f19999a
 8008214:	3f763800 	.word	0x3f763800
 8008218:	3f76384f 	.word	0x3f76384f
 800821c:	0800a544 	.word	0x0800a544
 8008220:	369dc3a0 	.word	0x369dc3a0
 8008224:	0800a53c 	.word	0x0800a53c
 8008228:	3338aa3c 	.word	0x3338aa3c
 800822c:	4a4e      	ldr	r2, [pc, #312]	; (8008368 <__ieee754_powf+0x564>)
 800822e:	4293      	cmp	r3, r2
 8008230:	dd06      	ble.n	8008240 <__ieee754_powf+0x43c>
 8008232:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800836c <__ieee754_powf+0x568>
 8008236:	ee28 0a20 	vmul.f32	s0, s16, s1
 800823a:	ee20 0a20 	vmul.f32	s0, s0, s1
 800823e:	e08f      	b.n	8008360 <__ieee754_powf+0x55c>
 8008240:	d107      	bne.n	8008252 <__ieee754_powf+0x44e>
 8008242:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8008246:	eef4 7ae6 	vcmpe.f32	s15, s13
 800824a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800824e:	d803      	bhi.n	8008258 <__ieee754_powf+0x454>
 8008250:	e7ef      	b.n	8008232 <__ieee754_powf+0x42e>
 8008252:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8008256:	dd1d      	ble.n	8008294 <__ieee754_powf+0x490>
 8008258:	15db      	asrs	r3, r3, #23
 800825a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800825e:	3b7e      	subs	r3, #126	; 0x7e
 8008260:	fa42 f303 	asr.w	r3, r2, r3
 8008264:	440b      	add	r3, r1
 8008266:	f3c3 50c7 	ubfx	r0, r3, #23, #8
 800826a:	387f      	subs	r0, #127	; 0x7f
 800826c:	3a01      	subs	r2, #1
 800826e:	4102      	asrs	r2, r0
 8008270:	ea23 0202 	bic.w	r2, r3, r2
 8008274:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008278:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800827c:	f1c0 0017 	rsb	r0, r0, #23
 8008280:	ee06 2a90 	vmov	s13, r2
 8008284:	fa43 f000 	asr.w	r0, r3, r0
 8008288:	2900      	cmp	r1, #0
 800828a:	bfb8      	it	lt
 800828c:	4240      	neglt	r0, r0
 800828e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008292:	e000      	b.n	8008296 <__ieee754_powf+0x492>
 8008294:	2000      	movs	r0, #0
 8008296:	ee77 6a27 	vadd.f32	s13, s14, s15
 800829a:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8008370 <__ieee754_powf+0x56c>
 800829e:	ee16 3a90 	vmov	r3, s13
 80082a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80082a6:	f023 030f 	bic.w	r3, r3, #15
 80082aa:	ee06 3a90 	vmov	s13, r3
 80082ae:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80082b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082b6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008374 <__ieee754_powf+0x570>
 80082ba:	ee26 7a87 	vmul.f32	s14, s13, s14
 80082be:	eea7 7a86 	vfma.f32	s14, s15, s12
 80082c2:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8008378 <__ieee754_powf+0x574>
 80082c6:	eef0 7a47 	vmov.f32	s15, s14
 80082ca:	eea6 7a86 	vfma.f32	s14, s13, s12
 80082ce:	eef0 5a47 	vmov.f32	s11, s14
 80082d2:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80082d6:	ee67 6a07 	vmul.f32	s13, s14, s14
 80082da:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80082de:	ed9f 6a27 	vldr	s12, [pc, #156]	; 800837c <__ieee754_powf+0x578>
 80082e2:	eddf 5a27 	vldr	s11, [pc, #156]	; 8008380 <__ieee754_powf+0x57c>
 80082e6:	eee6 5a86 	vfma.f32	s11, s13, s12
 80082ea:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8008384 <__ieee754_powf+0x580>
 80082ee:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80082f2:	eddf 5a25 	vldr	s11, [pc, #148]	; 8008388 <__ieee754_powf+0x584>
 80082f6:	eee6 5a86 	vfma.f32	s11, s13, s12
 80082fa:	ed9f 6a24 	vldr	s12, [pc, #144]	; 800838c <__ieee754_powf+0x588>
 80082fe:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8008302:	eef0 5a47 	vmov.f32	s11, s14
 8008306:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800830a:	eee7 7a27 	vfma.f32	s15, s14, s15
 800830e:	ee27 6a25 	vmul.f32	s12, s14, s11
 8008312:	eef0 6a65 	vmov.f32	s13, s11
 8008316:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800831a:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800831e:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8008322:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008326:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800832a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800832e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008332:	ee10 3a10 	vmov	r3, s0
 8008336:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800833a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800833e:	da02      	bge.n	8008346 <__ieee754_powf+0x542>
 8008340:	f001 fb92 	bl	8009a68 <scalbnf>
 8008344:	e001      	b.n	800834a <__ieee754_powf+0x546>
 8008346:	ee00 3a10 	vmov	s0, r3
 800834a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800834e:	e007      	b.n	8008360 <__ieee754_powf+0x55c>
 8008350:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008354:	e004      	b.n	8008360 <__ieee754_powf+0x55c>
 8008356:	eeb0 0a68 	vmov.f32	s0, s17
 800835a:	e001      	b.n	8008360 <__ieee754_powf+0x55c>
 800835c:	eeb0 0a48 	vmov.f32	s0, s16
 8008360:	ecbd 8b02 	vpop	{d8}
 8008364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008368:	43160000 	.word	0x43160000
 800836c:	0da24260 	.word	0x0da24260
 8008370:	3f317218 	.word	0x3f317218
 8008374:	35bfbe8c 	.word	0x35bfbe8c
 8008378:	3f317200 	.word	0x3f317200
 800837c:	3331bb4c 	.word	0x3331bb4c
 8008380:	b5ddea0e 	.word	0xb5ddea0e
 8008384:	388ab355 	.word	0x388ab355
 8008388:	bb360b61 	.word	0xbb360b61
 800838c:	3e2aaaab 	.word	0x3e2aaaab

08008390 <__ieee754_rem_pio2f>:
 8008390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008392:	ee10 6a10 	vmov	r6, s0
 8008396:	4b85      	ldr	r3, [pc, #532]	; (80085ac <__ieee754_rem_pio2f+0x21c>)
 8008398:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800839c:	429c      	cmp	r4, r3
 800839e:	b087      	sub	sp, #28
 80083a0:	4605      	mov	r5, r0
 80083a2:	dc04      	bgt.n	80083ae <__ieee754_rem_pio2f+0x1e>
 80083a4:	2300      	movs	r3, #0
 80083a6:	ed85 0a00 	vstr	s0, [r5]
 80083aa:	6043      	str	r3, [r0, #4]
 80083ac:	e0b7      	b.n	800851e <__ieee754_rem_pio2f+0x18e>
 80083ae:	4b80      	ldr	r3, [pc, #512]	; (80085b0 <__ieee754_rem_pio2f+0x220>)
 80083b0:	429c      	cmp	r4, r3
 80083b2:	dc37      	bgt.n	8008424 <__ieee754_rem_pio2f+0x94>
 80083b4:	2e00      	cmp	r6, #0
 80083b6:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80085b4 <__ieee754_rem_pio2f+0x224>
 80083ba:	4b7f      	ldr	r3, [pc, #508]	; (80085b8 <__ieee754_rem_pio2f+0x228>)
 80083bc:	f024 040f 	bic.w	r4, r4, #15
 80083c0:	dd17      	ble.n	80083f2 <__ieee754_rem_pio2f+0x62>
 80083c2:	429c      	cmp	r4, r3
 80083c4:	ee70 7a47 	vsub.f32	s15, s0, s14
 80083c8:	bf09      	itett	eq
 80083ca:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80085bc <__ieee754_rem_pio2f+0x22c>
 80083ce:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80085c0 <__ieee754_rem_pio2f+0x230>
 80083d2:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80083d6:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80085c4 <__ieee754_rem_pio2f+0x234>
 80083da:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80083de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80083e2:	edc0 6a00 	vstr	s13, [r0]
 80083e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083ea:	edc0 7a01 	vstr	s15, [r0, #4]
 80083ee:	2001      	movs	r0, #1
 80083f0:	e0da      	b.n	80085a8 <__ieee754_rem_pio2f+0x218>
 80083f2:	429c      	cmp	r4, r3
 80083f4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80083f8:	bf09      	itett	eq
 80083fa:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80085bc <__ieee754_rem_pio2f+0x22c>
 80083fe:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80085c0 <__ieee754_rem_pio2f+0x230>
 8008402:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008406:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80085c4 <__ieee754_rem_pio2f+0x234>
 800840a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800840e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008412:	edc0 6a00 	vstr	s13, [r0]
 8008416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800841a:	edc0 7a01 	vstr	s15, [r0, #4]
 800841e:	f04f 30ff 	mov.w	r0, #4294967295
 8008422:	e0c1      	b.n	80085a8 <__ieee754_rem_pio2f+0x218>
 8008424:	4b68      	ldr	r3, [pc, #416]	; (80085c8 <__ieee754_rem_pio2f+0x238>)
 8008426:	429c      	cmp	r4, r3
 8008428:	dc70      	bgt.n	800850c <__ieee754_rem_pio2f+0x17c>
 800842a:	f001 fac3 	bl	80099b4 <fabsf>
 800842e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80085cc <__ieee754_rem_pio2f+0x23c>
 8008432:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008436:	eee0 7a07 	vfma.f32	s15, s0, s14
 800843a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80085b4 <__ieee754_rem_pio2f+0x224>
 800843e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008442:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008446:	ee17 0a90 	vmov	r0, s15
 800844a:	eef1 7a46 	vneg.f32	s15, s12
 800844e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8008452:	281f      	cmp	r0, #31
 8008454:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80085c0 <__ieee754_rem_pio2f+0x230>
 8008458:	ee26 7a07 	vmul.f32	s14, s12, s14
 800845c:	ee70 6a47 	vsub.f32	s13, s0, s14
 8008460:	ee16 3a90 	vmov	r3, s13
 8008464:	dc07      	bgt.n	8008476 <__ieee754_rem_pio2f+0xe6>
 8008466:	1e47      	subs	r7, r0, #1
 8008468:	4959      	ldr	r1, [pc, #356]	; (80085d0 <__ieee754_rem_pio2f+0x240>)
 800846a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800846e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8008472:	428a      	cmp	r2, r1
 8008474:	d105      	bne.n	8008482 <__ieee754_rem_pio2f+0xf2>
 8008476:	15e4      	asrs	r4, r4, #23
 8008478:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800847c:	1aa2      	subs	r2, r4, r2
 800847e:	2a08      	cmp	r2, #8
 8008480:	dc01      	bgt.n	8008486 <__ieee754_rem_pio2f+0xf6>
 8008482:	602b      	str	r3, [r5, #0]
 8008484:	e02f      	b.n	80084e6 <__ieee754_rem_pio2f+0x156>
 8008486:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80085bc <__ieee754_rem_pio2f+0x22c>
 800848a:	eef0 6a40 	vmov.f32	s13, s0
 800848e:	eee7 6a87 	vfma.f32	s13, s15, s14
 8008492:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008496:	eea7 0a87 	vfma.f32	s0, s15, s14
 800849a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80085c4 <__ieee754_rem_pio2f+0x234>
 800849e:	ee96 0a07 	vfnms.f32	s0, s12, s14
 80084a2:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80084a6:	eeb0 7a40 	vmov.f32	s14, s0
 80084aa:	ee15 3a90 	vmov	r3, s11
 80084ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80084b2:	1aa4      	subs	r4, r4, r2
 80084b4:	2c19      	cmp	r4, #25
 80084b6:	dc04      	bgt.n	80084c2 <__ieee754_rem_pio2f+0x132>
 80084b8:	edc5 5a00 	vstr	s11, [r5]
 80084bc:	eeb0 0a66 	vmov.f32	s0, s13
 80084c0:	e011      	b.n	80084e6 <__ieee754_rem_pio2f+0x156>
 80084c2:	eddf 5a44 	vldr	s11, [pc, #272]	; 80085d4 <__ieee754_rem_pio2f+0x244>
 80084c6:	eeb0 0a66 	vmov.f32	s0, s13
 80084ca:	eea7 0aa5 	vfma.f32	s0, s15, s11
 80084ce:	ee36 7ac0 	vsub.f32	s14, s13, s0
 80084d2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80084d6:	eddf 7a40 	vldr	s15, [pc, #256]	; 80085d8 <__ieee754_rem_pio2f+0x248>
 80084da:	ee96 7a27 	vfnms.f32	s14, s12, s15
 80084de:	ee70 7a47 	vsub.f32	s15, s0, s14
 80084e2:	edc5 7a00 	vstr	s15, [r5]
 80084e6:	edd5 6a00 	vldr	s13, [r5]
 80084ea:	ee70 7a66 	vsub.f32	s15, s0, s13
 80084ee:	2e00      	cmp	r6, #0
 80084f0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80084f4:	ed85 0a01 	vstr	s0, [r5, #4]
 80084f8:	da56      	bge.n	80085a8 <__ieee754_rem_pio2f+0x218>
 80084fa:	eef1 6a66 	vneg.f32	s13, s13
 80084fe:	eeb1 0a40 	vneg.f32	s0, s0
 8008502:	edc5 6a00 	vstr	s13, [r5]
 8008506:	ed85 0a01 	vstr	s0, [r5, #4]
 800850a:	e04c      	b.n	80085a6 <__ieee754_rem_pio2f+0x216>
 800850c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008510:	db07      	blt.n	8008522 <__ieee754_rem_pio2f+0x192>
 8008512:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008516:	edc0 7a01 	vstr	s15, [r0, #4]
 800851a:	edc0 7a00 	vstr	s15, [r0]
 800851e:	2000      	movs	r0, #0
 8008520:	e042      	b.n	80085a8 <__ieee754_rem_pio2f+0x218>
 8008522:	15e2      	asrs	r2, r4, #23
 8008524:	3a86      	subs	r2, #134	; 0x86
 8008526:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800852a:	ee06 3a90 	vmov	s13, r3
 800852e:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 8008532:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80085dc <__ieee754_rem_pio2f+0x24c>
 8008536:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800853a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800853e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008546:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 800854a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800854e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008552:	edcd 6a04 	vstr	s13, [sp, #16]
 8008556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800855a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800855e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008562:	edcd 7a05 	vstr	s15, [sp, #20]
 8008566:	d107      	bne.n	8008578 <__ieee754_rem_pio2f+0x1e8>
 8008568:	eef5 6a40 	vcmp.f32	s13, #0.0
 800856c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008570:	bf14      	ite	ne
 8008572:	2302      	movne	r3, #2
 8008574:	2301      	moveq	r3, #1
 8008576:	e000      	b.n	800857a <__ieee754_rem_pio2f+0x1ea>
 8008578:	2303      	movs	r3, #3
 800857a:	4919      	ldr	r1, [pc, #100]	; (80085e0 <__ieee754_rem_pio2f+0x250>)
 800857c:	9101      	str	r1, [sp, #4]
 800857e:	2102      	movs	r1, #2
 8008580:	9100      	str	r1, [sp, #0]
 8008582:	a803      	add	r0, sp, #12
 8008584:	4629      	mov	r1, r5
 8008586:	f000 fdc7 	bl	8009118 <__kernel_rem_pio2f>
 800858a:	2e00      	cmp	r6, #0
 800858c:	da0c      	bge.n	80085a8 <__ieee754_rem_pio2f+0x218>
 800858e:	edd5 7a00 	vldr	s15, [r5]
 8008592:	eef1 7a67 	vneg.f32	s15, s15
 8008596:	edc5 7a00 	vstr	s15, [r5]
 800859a:	edd5 7a01 	vldr	s15, [r5, #4]
 800859e:	eef1 7a67 	vneg.f32	s15, s15
 80085a2:	edc5 7a01 	vstr	s15, [r5, #4]
 80085a6:	4240      	negs	r0, r0
 80085a8:	b007      	add	sp, #28
 80085aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ac:	3f490fd8 	.word	0x3f490fd8
 80085b0:	4016cbe3 	.word	0x4016cbe3
 80085b4:	3fc90f80 	.word	0x3fc90f80
 80085b8:	3fc90fd0 	.word	0x3fc90fd0
 80085bc:	37354400 	.word	0x37354400
 80085c0:	37354443 	.word	0x37354443
 80085c4:	2e85a308 	.word	0x2e85a308
 80085c8:	43490f80 	.word	0x43490f80
 80085cc:	3f22f984 	.word	0x3f22f984
 80085d0:	0800a554 	.word	0x0800a554
 80085d4:	2e85a300 	.word	0x2e85a300
 80085d8:	248d3132 	.word	0x248d3132
 80085dc:	43800000 	.word	0x43800000
 80085e0:	0800a5d4 	.word	0x0800a5d4

080085e4 <__ieee754_sqrtf>:
 80085e4:	ee10 2a10 	vmov	r2, s0
 80085e8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80085ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	d302      	bcc.n	80085fa <__ieee754_sqrtf+0x16>
 80085f4:	eea0 0a00 	vfma.f32	s0, s0, s0
 80085f8:	bd70      	pop	{r4, r5, r6, pc}
 80085fa:	2900      	cmp	r1, #0
 80085fc:	d039      	beq.n	8008672 <__ieee754_sqrtf+0x8e>
 80085fe:	2a00      	cmp	r2, #0
 8008600:	da04      	bge.n	800860c <__ieee754_sqrtf+0x28>
 8008602:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008606:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8008610:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8008614:	d207      	bcs.n	8008626 <__ieee754_sqrtf+0x42>
 8008616:	2100      	movs	r1, #0
 8008618:	0210      	lsls	r0, r2, #8
 800861a:	d402      	bmi.n	8008622 <__ieee754_sqrtf+0x3e>
 800861c:	0052      	lsls	r2, r2, #1
 800861e:	3101      	adds	r1, #1
 8008620:	e7fa      	b.n	8008618 <__ieee754_sqrtf+0x34>
 8008622:	3901      	subs	r1, #1
 8008624:	1a5b      	subs	r3, r3, r1
 8008626:	3b7f      	subs	r3, #127	; 0x7f
 8008628:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800862c:	07d9      	lsls	r1, r3, #31
 800862e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008632:	bf48      	it	mi
 8008634:	0052      	lslmi	r2, r2, #1
 8008636:	1059      	asrs	r1, r3, #1
 8008638:	2300      	movs	r3, #0
 800863a:	0052      	lsls	r2, r2, #1
 800863c:	2419      	movs	r4, #25
 800863e:	461e      	mov	r6, r3
 8008640:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8008644:	1835      	adds	r5, r6, r0
 8008646:	4295      	cmp	r5, r2
 8008648:	bfde      	ittt	le
 800864a:	182e      	addle	r6, r5, r0
 800864c:	1b52      	suble	r2, r2, r5
 800864e:	181b      	addle	r3, r3, r0
 8008650:	3c01      	subs	r4, #1
 8008652:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008656:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800865a:	d1f3      	bne.n	8008644 <__ieee754_sqrtf+0x60>
 800865c:	b112      	cbz	r2, 8008664 <__ieee754_sqrtf+0x80>
 800865e:	f003 0201 	and.w	r2, r3, #1
 8008662:	4413      	add	r3, r2
 8008664:	105b      	asrs	r3, r3, #1
 8008666:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 800866a:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 800866e:	ee00 3a10 	vmov	s0, r3
 8008672:	bd70      	pop	{r4, r5, r6, pc}
 8008674:	0000      	movs	r0, r0
	...

08008678 <__kernel_cos>:
 8008678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867c:	ec59 8b10 	vmov	r8, r9, d0
 8008680:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8008684:	b085      	sub	sp, #20
 8008686:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800868a:	ed8d 1b00 	vstr	d1, [sp]
 800868e:	da07      	bge.n	80086a0 <__kernel_cos+0x28>
 8008690:	ee10 0a10 	vmov	r0, s0
 8008694:	4649      	mov	r1, r9
 8008696:	f7f8 f9ff 	bl	8000a98 <__aeabi_d2iz>
 800869a:	2800      	cmp	r0, #0
 800869c:	f000 80a6 	beq.w	80087ec <__kernel_cos+0x174>
 80086a0:	4642      	mov	r2, r8
 80086a2:	464b      	mov	r3, r9
 80086a4:	4640      	mov	r0, r8
 80086a6:	4649      	mov	r1, r9
 80086a8:	f7f7 ff46 	bl	8000538 <__aeabi_dmul>
 80086ac:	a359      	add	r3, pc, #356	; (adr r3, 8008814 <__kernel_cos+0x19c>)
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	4604      	mov	r4, r0
 80086b4:	460d      	mov	r5, r1
 80086b6:	f7f7 ff3f 	bl	8000538 <__aeabi_dmul>
 80086ba:	a358      	add	r3, pc, #352	; (adr r3, 800881c <__kernel_cos+0x1a4>)
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	f7f7 fd88 	bl	80001d4 <__adddf3>
 80086c4:	4622      	mov	r2, r4
 80086c6:	462b      	mov	r3, r5
 80086c8:	f7f7 ff36 	bl	8000538 <__aeabi_dmul>
 80086cc:	a355      	add	r3, pc, #340	; (adr r3, 8008824 <__kernel_cos+0x1ac>)
 80086ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d2:	f7f7 fd7d 	bl	80001d0 <__aeabi_dsub>
 80086d6:	4622      	mov	r2, r4
 80086d8:	462b      	mov	r3, r5
 80086da:	f7f7 ff2d 	bl	8000538 <__aeabi_dmul>
 80086de:	a353      	add	r3, pc, #332	; (adr r3, 800882c <__kernel_cos+0x1b4>)
 80086e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e4:	f7f7 fd76 	bl	80001d4 <__adddf3>
 80086e8:	4622      	mov	r2, r4
 80086ea:	462b      	mov	r3, r5
 80086ec:	f7f7 ff24 	bl	8000538 <__aeabi_dmul>
 80086f0:	a350      	add	r3, pc, #320	; (adr r3, 8008834 <__kernel_cos+0x1bc>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f7f7 fd6b 	bl	80001d0 <__aeabi_dsub>
 80086fa:	4622      	mov	r2, r4
 80086fc:	462b      	mov	r3, r5
 80086fe:	f7f7 ff1b 	bl	8000538 <__aeabi_dmul>
 8008702:	a34e      	add	r3, pc, #312	; (adr r3, 800883c <__kernel_cos+0x1c4>)
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	f7f7 fd64 	bl	80001d4 <__adddf3>
 800870c:	462b      	mov	r3, r5
 800870e:	4622      	mov	r2, r4
 8008710:	f7f7 ff12 	bl	8000538 <__aeabi_dmul>
 8008714:	4b3a      	ldr	r3, [pc, #232]	; (8008800 <__kernel_cos+0x188>)
 8008716:	429f      	cmp	r7, r3
 8008718:	4682      	mov	sl, r0
 800871a:	468b      	mov	fp, r1
 800871c:	dc26      	bgt.n	800876c <__kernel_cos+0xf4>
 800871e:	2200      	movs	r2, #0
 8008720:	4b38      	ldr	r3, [pc, #224]	; (8008804 <__kernel_cos+0x18c>)
 8008722:	4620      	mov	r0, r4
 8008724:	4629      	mov	r1, r5
 8008726:	f7f7 ff07 	bl	8000538 <__aeabi_dmul>
 800872a:	4652      	mov	r2, sl
 800872c:	4606      	mov	r6, r0
 800872e:	460f      	mov	r7, r1
 8008730:	465b      	mov	r3, fp
 8008732:	4620      	mov	r0, r4
 8008734:	4629      	mov	r1, r5
 8008736:	f7f7 feff 	bl	8000538 <__aeabi_dmul>
 800873a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800873e:	4604      	mov	r4, r0
 8008740:	460d      	mov	r5, r1
 8008742:	4640      	mov	r0, r8
 8008744:	4649      	mov	r1, r9
 8008746:	f7f7 fef7 	bl	8000538 <__aeabi_dmul>
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	4620      	mov	r0, r4
 8008750:	4629      	mov	r1, r5
 8008752:	f7f7 fd3d 	bl	80001d0 <__aeabi_dsub>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4630      	mov	r0, r6
 800875c:	4639      	mov	r1, r7
 800875e:	f7f7 fd37 	bl	80001d0 <__aeabi_dsub>
 8008762:	4602      	mov	r2, r0
 8008764:	460b      	mov	r3, r1
 8008766:	2000      	movs	r0, #0
 8008768:	4927      	ldr	r1, [pc, #156]	; (8008808 <__kernel_cos+0x190>)
 800876a:	e03c      	b.n	80087e6 <__kernel_cos+0x16e>
 800876c:	4b27      	ldr	r3, [pc, #156]	; (800880c <__kernel_cos+0x194>)
 800876e:	4926      	ldr	r1, [pc, #152]	; (8008808 <__kernel_cos+0x190>)
 8008770:	429f      	cmp	r7, r3
 8008772:	bfd7      	itett	le
 8008774:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8008778:	4f25      	ldrgt	r7, [pc, #148]	; (8008810 <__kernel_cos+0x198>)
 800877a:	2200      	movle	r2, #0
 800877c:	4616      	movle	r6, r2
 800877e:	bfd4      	ite	le
 8008780:	461f      	movle	r7, r3
 8008782:	2600      	movgt	r6, #0
 8008784:	4632      	mov	r2, r6
 8008786:	463b      	mov	r3, r7
 8008788:	2000      	movs	r0, #0
 800878a:	f7f7 fd21 	bl	80001d0 <__aeabi_dsub>
 800878e:	2200      	movs	r2, #0
 8008790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008794:	4b1b      	ldr	r3, [pc, #108]	; (8008804 <__kernel_cos+0x18c>)
 8008796:	4620      	mov	r0, r4
 8008798:	4629      	mov	r1, r5
 800879a:	f7f7 fecd 	bl	8000538 <__aeabi_dmul>
 800879e:	4632      	mov	r2, r6
 80087a0:	463b      	mov	r3, r7
 80087a2:	f7f7 fd15 	bl	80001d0 <__aeabi_dsub>
 80087a6:	4652      	mov	r2, sl
 80087a8:	4606      	mov	r6, r0
 80087aa:	460f      	mov	r7, r1
 80087ac:	465b      	mov	r3, fp
 80087ae:	4620      	mov	r0, r4
 80087b0:	4629      	mov	r1, r5
 80087b2:	f7f7 fec1 	bl	8000538 <__aeabi_dmul>
 80087b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ba:	4604      	mov	r4, r0
 80087bc:	460d      	mov	r5, r1
 80087be:	4640      	mov	r0, r8
 80087c0:	4649      	mov	r1, r9
 80087c2:	f7f7 feb9 	bl	8000538 <__aeabi_dmul>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	4620      	mov	r0, r4
 80087cc:	4629      	mov	r1, r5
 80087ce:	f7f7 fcff 	bl	80001d0 <__aeabi_dsub>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4630      	mov	r0, r6
 80087d8:	4639      	mov	r1, r7
 80087da:	f7f7 fcf9 	bl	80001d0 <__aeabi_dsub>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087e6:	f7f7 fcf3 	bl	80001d0 <__aeabi_dsub>
 80087ea:	e001      	b.n	80087f0 <__kernel_cos+0x178>
 80087ec:	4906      	ldr	r1, [pc, #24]	; (8008808 <__kernel_cos+0x190>)
 80087ee:	2000      	movs	r0, #0
 80087f0:	ec41 0b10 	vmov	d0, r0, r1
 80087f4:	b005      	add	sp, #20
 80087f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fa:	bf00      	nop
 80087fc:	f3af 8000 	nop.w
 8008800:	3fd33332 	.word	0x3fd33332
 8008804:	3fe00000 	.word	0x3fe00000
 8008808:	3ff00000 	.word	0x3ff00000
 800880c:	3fe90000 	.word	0x3fe90000
 8008810:	3fd20000 	.word	0x3fd20000
 8008814:	be8838d4 	.word	0xbe8838d4
 8008818:	bda8fae9 	.word	0xbda8fae9
 800881c:	bdb4b1c4 	.word	0xbdb4b1c4
 8008820:	3e21ee9e 	.word	0x3e21ee9e
 8008824:	809c52ad 	.word	0x809c52ad
 8008828:	3e927e4f 	.word	0x3e927e4f
 800882c:	19cb1590 	.word	0x19cb1590
 8008830:	3efa01a0 	.word	0x3efa01a0
 8008834:	16c15177 	.word	0x16c15177
 8008838:	3f56c16c 	.word	0x3f56c16c
 800883c:	5555554c 	.word	0x5555554c
 8008840:	3fa55555 	.word	0x3fa55555
 8008844:	00000000 	.word	0x00000000

08008848 <__kernel_rem_pio2>:
 8008848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008850:	2418      	movs	r4, #24
 8008852:	9306      	str	r3, [sp, #24]
 8008854:	9101      	str	r1, [sp, #4]
 8008856:	4bba      	ldr	r3, [pc, #744]	; (8008b40 <__kernel_rem_pio2+0x2f8>)
 8008858:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800885a:	9009      	str	r0, [sp, #36]	; 0x24
 800885c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008860:	9302      	str	r3, [sp, #8]
 8008862:	9b06      	ldr	r3, [sp, #24]
 8008864:	3b01      	subs	r3, #1
 8008866:	9305      	str	r3, [sp, #20]
 8008868:	1ed3      	subs	r3, r2, #3
 800886a:	fb93 f4f4 	sdiv	r4, r3, r4
 800886e:	f06f 0317 	mvn.w	r3, #23
 8008872:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008876:	fb04 3303 	mla	r3, r4, r3, r3
 800887a:	eb03 0802 	add.w	r8, r3, r2
 800887e:	9b02      	ldr	r3, [sp, #8]
 8008880:	9a05      	ldr	r2, [sp, #20]
 8008882:	eb03 0a02 	add.w	sl, r3, r2
 8008886:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008888:	1aa7      	subs	r7, r4, r2
 800888a:	ae20      	add	r6, sp, #128	; 0x80
 800888c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008890:	2500      	movs	r5, #0
 8008892:	4555      	cmp	r5, sl
 8008894:	dc0c      	bgt.n	80088b0 <__kernel_rem_pio2+0x68>
 8008896:	42ef      	cmn	r7, r5
 8008898:	d404      	bmi.n	80088a4 <__kernel_rem_pio2+0x5c>
 800889a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800889e:	f7f7 fde5 	bl	800046c <__aeabi_i2d>
 80088a2:	e001      	b.n	80088a8 <__kernel_rem_pio2+0x60>
 80088a4:	2000      	movs	r0, #0
 80088a6:	2100      	movs	r1, #0
 80088a8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80088ac:	3501      	adds	r5, #1
 80088ae:	e7f0      	b.n	8008892 <__kernel_rem_pio2+0x4a>
 80088b0:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80088b4:	2600      	movs	r6, #0
 80088b6:	9b02      	ldr	r3, [sp, #8]
 80088b8:	429e      	cmp	r6, r3
 80088ba:	dc27      	bgt.n	800890c <__kernel_rem_pio2+0xc4>
 80088bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088be:	9304      	str	r3, [sp, #16]
 80088c0:	9b06      	ldr	r3, [sp, #24]
 80088c2:	199d      	adds	r5, r3, r6
 80088c4:	ab20      	add	r3, sp, #128	; 0x80
 80088c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80088ca:	9308      	str	r3, [sp, #32]
 80088cc:	f04f 0900 	mov.w	r9, #0
 80088d0:	f04f 0a00 	mov.w	sl, #0
 80088d4:	2700      	movs	r7, #0
 80088d6:	9b05      	ldr	r3, [sp, #20]
 80088d8:	429f      	cmp	r7, r3
 80088da:	dc13      	bgt.n	8008904 <__kernel_rem_pio2+0xbc>
 80088dc:	9908      	ldr	r1, [sp, #32]
 80088de:	9d04      	ldr	r5, [sp, #16]
 80088e0:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80088e4:	9108      	str	r1, [sp, #32]
 80088e6:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80088ea:	9504      	str	r5, [sp, #16]
 80088ec:	f7f7 fe24 	bl	8000538 <__aeabi_dmul>
 80088f0:	4602      	mov	r2, r0
 80088f2:	460b      	mov	r3, r1
 80088f4:	4648      	mov	r0, r9
 80088f6:	4651      	mov	r1, sl
 80088f8:	f7f7 fc6c 	bl	80001d4 <__adddf3>
 80088fc:	3701      	adds	r7, #1
 80088fe:	4681      	mov	r9, r0
 8008900:	468a      	mov	sl, r1
 8008902:	e7e8      	b.n	80088d6 <__kernel_rem_pio2+0x8e>
 8008904:	e8ab 0600 	stmia.w	fp!, {r9, sl}
 8008908:	3601      	adds	r6, #1
 800890a:	e7d4      	b.n	80088b6 <__kernel_rem_pio2+0x6e>
 800890c:	9b02      	ldr	r3, [sp, #8]
 800890e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008912:	aa0c      	add	r2, sp, #48	; 0x30
 8008914:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008918:	930a      	str	r3, [sp, #40]	; 0x28
 800891a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800891c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008920:	930b      	str	r3, [sp, #44]	; 0x2c
 8008922:	ab98      	add	r3, sp, #608	; 0x260
 8008924:	f10b 5a00 	add.w	sl, fp, #536870912	; 0x20000000
 8008928:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800892c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008930:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008934:	aa98      	add	r2, sp, #608	; 0x260
 8008936:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800893a:	eb02 0903 	add.w	r9, r2, r3
 800893e:	9308      	str	r3, [sp, #32]
 8008940:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8008944:	f04f 0a00 	mov.w	sl, #0
 8008948:	ebca 030b 	rsb	r3, sl, fp
 800894c:	2b00      	cmp	r3, #0
 800894e:	dd25      	ble.n	800899c <__kernel_rem_pio2+0x154>
 8008950:	2200      	movs	r2, #0
 8008952:	4b7c      	ldr	r3, [pc, #496]	; (8008b44 <__kernel_rem_pio2+0x2fc>)
 8008954:	4630      	mov	r0, r6
 8008956:	4639      	mov	r1, r7
 8008958:	f7f7 fdee 	bl	8000538 <__aeabi_dmul>
 800895c:	f7f8 f89c 	bl	8000a98 <__aeabi_d2iz>
 8008960:	f7f7 fd84 	bl	800046c <__aeabi_i2d>
 8008964:	2200      	movs	r2, #0
 8008966:	4b78      	ldr	r3, [pc, #480]	; (8008b48 <__kernel_rem_pio2+0x300>)
 8008968:	4604      	mov	r4, r0
 800896a:	460d      	mov	r5, r1
 800896c:	f7f7 fde4 	bl	8000538 <__aeabi_dmul>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4630      	mov	r0, r6
 8008976:	4639      	mov	r1, r7
 8008978:	f7f7 fc2a 	bl	80001d0 <__aeabi_dsub>
 800897c:	f7f8 f88c 	bl	8000a98 <__aeabi_d2iz>
 8008980:	ab0c      	add	r3, sp, #48	; 0x30
 8008982:	4629      	mov	r1, r5
 8008984:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8008988:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800898c:	4620      	mov	r0, r4
 800898e:	f7f7 fc21 	bl	80001d4 <__adddf3>
 8008992:	f10a 0a01 	add.w	sl, sl, #1
 8008996:	4606      	mov	r6, r0
 8008998:	460f      	mov	r7, r1
 800899a:	e7d5      	b.n	8008948 <__kernel_rem_pio2+0x100>
 800899c:	ec47 6b10 	vmov	d0, r6, r7
 80089a0:	4640      	mov	r0, r8
 80089a2:	f000 ff8d 	bl	80098c0 <scalbn>
 80089a6:	ec55 4b10 	vmov	r4, r5, d0
 80089aa:	2200      	movs	r2, #0
 80089ac:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80089b0:	ee10 0a10 	vmov	r0, s0
 80089b4:	4629      	mov	r1, r5
 80089b6:	f7f7 fdbf 	bl	8000538 <__aeabi_dmul>
 80089ba:	ec41 0b10 	vmov	d0, r0, r1
 80089be:	f000 fe63 	bl	8009688 <floor>
 80089c2:	2200      	movs	r2, #0
 80089c4:	ec51 0b10 	vmov	r0, r1, d0
 80089c8:	4b60      	ldr	r3, [pc, #384]	; (8008b4c <__kernel_rem_pio2+0x304>)
 80089ca:	f7f7 fdb5 	bl	8000538 <__aeabi_dmul>
 80089ce:	4602      	mov	r2, r0
 80089d0:	460b      	mov	r3, r1
 80089d2:	4620      	mov	r0, r4
 80089d4:	4629      	mov	r1, r5
 80089d6:	f7f7 fbfb 	bl	80001d0 <__aeabi_dsub>
 80089da:	460d      	mov	r5, r1
 80089dc:	4604      	mov	r4, r0
 80089de:	f7f8 f85b 	bl	8000a98 <__aeabi_d2iz>
 80089e2:	9004      	str	r0, [sp, #16]
 80089e4:	f7f7 fd42 	bl	800046c <__aeabi_i2d>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4620      	mov	r0, r4
 80089ee:	4629      	mov	r1, r5
 80089f0:	f7f7 fbee 	bl	80001d0 <__aeabi_dsub>
 80089f4:	f1b8 0f00 	cmp.w	r8, #0
 80089f8:	4606      	mov	r6, r0
 80089fa:	460f      	mov	r7, r1
 80089fc:	dd15      	ble.n	8008a2a <__kernel_rem_pio2+0x1e2>
 80089fe:	f10b 31ff 	add.w	r1, fp, #4294967295
 8008a02:	ab0c      	add	r3, sp, #48	; 0x30
 8008a04:	f1c8 0018 	rsb	r0, r8, #24
 8008a08:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8008a0c:	9c04      	ldr	r4, [sp, #16]
 8008a0e:	fa42 f300 	asr.w	r3, r2, r0
 8008a12:	441c      	add	r4, r3
 8008a14:	4083      	lsls	r3, r0
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	aa0c      	add	r2, sp, #48	; 0x30
 8008a1a:	f1c8 0017 	rsb	r0, r8, #23
 8008a1e:	9404      	str	r4, [sp, #16]
 8008a20:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008a24:	fa43 fa00 	asr.w	sl, r3, r0
 8008a28:	e00f      	b.n	8008a4a <__kernel_rem_pio2+0x202>
 8008a2a:	d107      	bne.n	8008a3c <__kernel_rem_pio2+0x1f4>
 8008a2c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008a30:	aa0c      	add	r2, sp, #48	; 0x30
 8008a32:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008a36:	ea4f 5ae0 	mov.w	sl, r0, asr #23
 8008a3a:	e006      	b.n	8008a4a <__kernel_rem_pio2+0x202>
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	4b44      	ldr	r3, [pc, #272]	; (8008b50 <__kernel_rem_pio2+0x308>)
 8008a40:	f7f8 f800 	bl	8000a44 <__aeabi_dcmpge>
 8008a44:	b928      	cbnz	r0, 8008a52 <__kernel_rem_pio2+0x20a>
 8008a46:	4682      	mov	sl, r0
 8008a48:	e052      	b.n	8008af0 <__kernel_rem_pio2+0x2a8>
 8008a4a:	f1ba 0f00 	cmp.w	sl, #0
 8008a4e:	dc02      	bgt.n	8008a56 <__kernel_rem_pio2+0x20e>
 8008a50:	e04e      	b.n	8008af0 <__kernel_rem_pio2+0x2a8>
 8008a52:	f04f 0a02 	mov.w	sl, #2
 8008a56:	9b04      	ldr	r3, [sp, #16]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	9304      	str	r3, [sp, #16]
 8008a5e:	4614      	mov	r4, r2
 8008a60:	4593      	cmp	fp, r2
 8008a62:	dd11      	ble.n	8008a88 <__kernel_rem_pio2+0x240>
 8008a64:	ab0c      	add	r3, sp, #48	; 0x30
 8008a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a6a:	b91c      	cbnz	r4, 8008a74 <__kernel_rem_pio2+0x22c>
 8008a6c:	b153      	cbz	r3, 8008a84 <__kernel_rem_pio2+0x23c>
 8008a6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008a72:	e003      	b.n	8008a7c <__kernel_rem_pio2+0x234>
 8008a74:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 8008a78:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8008a7c:	a90c      	add	r1, sp, #48	; 0x30
 8008a7e:	2401      	movs	r4, #1
 8008a80:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008a84:	3201      	adds	r2, #1
 8008a86:	e7eb      	b.n	8008a60 <__kernel_rem_pio2+0x218>
 8008a88:	f1b8 0f00 	cmp.w	r8, #0
 8008a8c:	dd17      	ble.n	8008abe <__kernel_rem_pio2+0x276>
 8008a8e:	f1b8 0f01 	cmp.w	r8, #1
 8008a92:	d00a      	beq.n	8008aaa <__kernel_rem_pio2+0x262>
 8008a94:	f1b8 0f02 	cmp.w	r8, #2
 8008a98:	d111      	bne.n	8008abe <__kernel_rem_pio2+0x276>
 8008a9a:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008a9e:	ab0c      	add	r3, sp, #48	; 0x30
 8008aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008aa8:	e006      	b.n	8008ab8 <__kernel_rem_pio2+0x270>
 8008aaa:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008aae:	ab0c      	add	r3, sp, #48	; 0x30
 8008ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008ab8:	a90c      	add	r1, sp, #48	; 0x30
 8008aba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008abe:	f1ba 0f02 	cmp.w	sl, #2
 8008ac2:	d115      	bne.n	8008af0 <__kernel_rem_pio2+0x2a8>
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	463b      	mov	r3, r7
 8008ac8:	2000      	movs	r0, #0
 8008aca:	4922      	ldr	r1, [pc, #136]	; (8008b54 <__kernel_rem_pio2+0x30c>)
 8008acc:	f7f7 fb80 	bl	80001d0 <__aeabi_dsub>
 8008ad0:	4606      	mov	r6, r0
 8008ad2:	460f      	mov	r7, r1
 8008ad4:	b164      	cbz	r4, 8008af0 <__kernel_rem_pio2+0x2a8>
 8008ad6:	4640      	mov	r0, r8
 8008ad8:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8008b38 <__kernel_rem_pio2+0x2f0>
 8008adc:	f000 fef0 	bl	80098c0 <scalbn>
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	ec53 2b10 	vmov	r2, r3, d0
 8008ae8:	f7f7 fb72 	bl	80001d0 <__aeabi_dsub>
 8008aec:	4606      	mov	r6, r0
 8008aee:	460f      	mov	r7, r1
 8008af0:	2200      	movs	r2, #0
 8008af2:	2300      	movs	r3, #0
 8008af4:	4630      	mov	r0, r6
 8008af6:	4639      	mov	r1, r7
 8008af8:	f7f7 ff86 	bl	8000a08 <__aeabi_dcmpeq>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d074      	beq.n	8008bea <__kernel_rem_pio2+0x3a2>
 8008b00:	f10b 31ff 	add.w	r1, fp, #4294967295
 8008b04:	460b      	mov	r3, r1
 8008b06:	2200      	movs	r2, #0
 8008b08:	9802      	ldr	r0, [sp, #8]
 8008b0a:	4283      	cmp	r3, r0
 8008b0c:	db05      	blt.n	8008b1a <__kernel_rem_pio2+0x2d2>
 8008b0e:	a80c      	add	r0, sp, #48	; 0x30
 8008b10:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	4302      	orrs	r2, r0
 8008b18:	e7f6      	b.n	8008b08 <__kernel_rem_pio2+0x2c0>
 8008b1a:	2a00      	cmp	r2, #0
 8008b1c:	d158      	bne.n	8008bd0 <__kernel_rem_pio2+0x388>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	f06f 0103 	mvn.w	r1, #3
 8008b24:	fb01 f203 	mul.w	r2, r1, r3
 8008b28:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b2a:	5882      	ldr	r2, [r0, r2]
 8008b2c:	b9a2      	cbnz	r2, 8008b58 <__kernel_rem_pio2+0x310>
 8008b2e:	3301      	adds	r3, #1
 8008b30:	e7f8      	b.n	8008b24 <__kernel_rem_pio2+0x2dc>
 8008b32:	bf00      	nop
 8008b34:	f3af 8000 	nop.w
 8008b38:	00000000 	.word	0x00000000
 8008b3c:	3ff00000 	.word	0x3ff00000
 8008b40:	0800a8ec 	.word	0x0800a8ec
 8008b44:	3e700000 	.word	0x3e700000
 8008b48:	41700000 	.word	0x41700000
 8008b4c:	40200000 	.word	0x40200000
 8008b50:	3fe00000 	.word	0x3fe00000
 8008b54:	3ff00000 	.word	0x3ff00000
 8008b58:	9a08      	ldr	r2, [sp, #32]
 8008b5a:	a998      	add	r1, sp, #608	; 0x260
 8008b5c:	440a      	add	r2, r1
 8008b5e:	3a98      	subs	r2, #152	; 0x98
 8008b60:	9204      	str	r2, [sp, #16]
 8008b62:	9a06      	ldr	r2, [sp, #24]
 8008b64:	445b      	add	r3, fp
 8008b66:	eb02 050b 	add.w	r5, r2, fp
 8008b6a:	aa20      	add	r2, sp, #128	; 0x80
 8008b6c:	f10b 0601 	add.w	r6, fp, #1
 8008b70:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008b74:	9308      	str	r3, [sp, #32]
 8008b76:	9b08      	ldr	r3, [sp, #32]
 8008b78:	429e      	cmp	r6, r3
 8008b7a:	dc27      	bgt.n	8008bcc <__kernel_rem_pio2+0x384>
 8008b7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b7e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b82:	f7f7 fc73 	bl	800046c <__aeabi_i2d>
 8008b86:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8c:	46a9      	mov	r9, r5
 8008b8e:	461c      	mov	r4, r3
 8008b90:	2700      	movs	r7, #0
 8008b92:	f04f 0a00 	mov.w	sl, #0
 8008b96:	f04f 0b00 	mov.w	fp, #0
 8008b9a:	9b05      	ldr	r3, [sp, #20]
 8008b9c:	429f      	cmp	r7, r3
 8008b9e:	dc0f      	bgt.n	8008bc0 <__kernel_rem_pio2+0x378>
 8008ba0:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8008ba4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008ba8:	f7f7 fcc6 	bl	8000538 <__aeabi_dmul>
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4650      	mov	r0, sl
 8008bb2:	4659      	mov	r1, fp
 8008bb4:	f7f7 fb0e 	bl	80001d4 <__adddf3>
 8008bb8:	3701      	adds	r7, #1
 8008bba:	4682      	mov	sl, r0
 8008bbc:	468b      	mov	fp, r1
 8008bbe:	e7ec      	b.n	8008b9a <__kernel_rem_pio2+0x352>
 8008bc0:	9b04      	ldr	r3, [sp, #16]
 8008bc2:	e9e3 ab02 	strd	sl, fp, [r3, #8]!
 8008bc6:	3601      	adds	r6, #1
 8008bc8:	9304      	str	r3, [sp, #16]
 8008bca:	e7d4      	b.n	8008b76 <__kernel_rem_pio2+0x32e>
 8008bcc:	469b      	mov	fp, r3
 8008bce:	e6a8      	b.n	8008922 <__kernel_rem_pio2+0xda>
 8008bd0:	f1a8 0818 	sub.w	r8, r8, #24
 8008bd4:	468b      	mov	fp, r1
 8008bd6:	ab0c      	add	r3, sp, #48	; 0x30
 8008bd8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d13c      	bne.n	8008c5a <__kernel_rem_pio2+0x412>
 8008be0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008be4:	f1a8 0818 	sub.w	r8, r8, #24
 8008be8:	e7f5      	b.n	8008bd6 <__kernel_rem_pio2+0x38e>
 8008bea:	f1c8 0000 	rsb	r0, r8, #0
 8008bee:	ec47 6b10 	vmov	d0, r6, r7
 8008bf2:	f000 fe65 	bl	80098c0 <scalbn>
 8008bf6:	ec55 4b10 	vmov	r4, r5, d0
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	4bb6      	ldr	r3, [pc, #728]	; (8008ed8 <__kernel_rem_pio2+0x690>)
 8008bfe:	ee10 0a10 	vmov	r0, s0
 8008c02:	4629      	mov	r1, r5
 8008c04:	f7f7 ff1e 	bl	8000a44 <__aeabi_dcmpge>
 8008c08:	b300      	cbz	r0, 8008c4c <__kernel_rem_pio2+0x404>
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	4bb3      	ldr	r3, [pc, #716]	; (8008edc <__kernel_rem_pio2+0x694>)
 8008c0e:	4620      	mov	r0, r4
 8008c10:	4629      	mov	r1, r5
 8008c12:	f7f7 fc91 	bl	8000538 <__aeabi_dmul>
 8008c16:	f7f7 ff3f 	bl	8000a98 <__aeabi_d2iz>
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	f7f7 fc26 	bl	800046c <__aeabi_i2d>
 8008c20:	2200      	movs	r2, #0
 8008c22:	4bad      	ldr	r3, [pc, #692]	; (8008ed8 <__kernel_rem_pio2+0x690>)
 8008c24:	f7f7 fc88 	bl	8000538 <__aeabi_dmul>
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f7f7 face 	bl	80001d0 <__aeabi_dsub>
 8008c34:	f7f7 ff30 	bl	8000a98 <__aeabi_d2iz>
 8008c38:	ab0c      	add	r3, sp, #48	; 0x30
 8008c3a:	f108 0818 	add.w	r8, r8, #24
 8008c3e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8008c42:	f10b 0b01 	add.w	fp, fp, #1
 8008c46:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8008c4a:	e006      	b.n	8008c5a <__kernel_rem_pio2+0x412>
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	4629      	mov	r1, r5
 8008c50:	f7f7 ff22 	bl	8000a98 <__aeabi_d2iz>
 8008c54:	ab0c      	add	r3, sp, #48	; 0x30
 8008c56:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8008c5a:	4640      	mov	r0, r8
 8008c5c:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 8008ec8 <__kernel_rem_pio2+0x680>
 8008c60:	f000 fe2e 	bl	80098c0 <scalbn>
 8008c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c68:	9305      	str	r3, [sp, #20]
 8008c6a:	9a05      	ldr	r2, [sp, #20]
 8008c6c:	ab98      	add	r3, sp, #608	; 0x260
 8008c6e:	189f      	adds	r7, r3, r2
 8008c70:	ec55 4b10 	vmov	r4, r5, d0
 8008c74:	3f98      	subs	r7, #152	; 0x98
 8008c76:	465e      	mov	r6, fp
 8008c78:	2e00      	cmp	r6, #0
 8008c7a:	db14      	blt.n	8008ca6 <__kernel_rem_pio2+0x45e>
 8008c7c:	ab0c      	add	r3, sp, #48	; 0x30
 8008c7e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008c82:	f7f7 fbf3 	bl	800046c <__aeabi_i2d>
 8008c86:	4622      	mov	r2, r4
 8008c88:	462b      	mov	r3, r5
 8008c8a:	f7f7 fc55 	bl	8000538 <__aeabi_dmul>
 8008c8e:	2200      	movs	r2, #0
 8008c90:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8008c94:	4b91      	ldr	r3, [pc, #580]	; (8008edc <__kernel_rem_pio2+0x694>)
 8008c96:	4620      	mov	r0, r4
 8008c98:	4629      	mov	r1, r5
 8008c9a:	f7f7 fc4d 	bl	8000538 <__aeabi_dmul>
 8008c9e:	3e01      	subs	r6, #1
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	460d      	mov	r5, r1
 8008ca4:	e7e8      	b.n	8008c78 <__kernel_rem_pio2+0x430>
 8008ca6:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 8008caa:	2400      	movs	r4, #0
 8008cac:	4645      	mov	r5, r8
 8008cae:	ebbb 0704 	subs.w	r7, fp, r4
 8008cb2:	d424      	bmi.n	8008cfe <__kernel_rem_pio2+0x4b6>
 8008cb4:	ed9f 7b86 	vldr	d7, [pc, #536]	; 8008ed0 <__kernel_rem_pio2+0x688>
 8008cb8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008cbc:	ab70      	add	r3, sp, #448	; 0x1c0
 8008cbe:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8008ee0 <__kernel_rem_pio2+0x698>
 8008cc2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008cc6:	2600      	movs	r6, #0
 8008cc8:	9b02      	ldr	r3, [sp, #8]
 8008cca:	429e      	cmp	r6, r3
 8008ccc:	dc11      	bgt.n	8008cf2 <__kernel_rem_pio2+0x4aa>
 8008cce:	42a6      	cmp	r6, r4
 8008cd0:	dc0f      	bgt.n	8008cf2 <__kernel_rem_pio2+0x4aa>
 8008cd2:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8008cd6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008cda:	f7f7 fc2d 	bl	8000538 <__aeabi_dmul>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ce6:	f7f7 fa75 	bl	80001d4 <__adddf3>
 8008cea:	3601      	adds	r6, #1
 8008cec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008cf0:	e7ea      	b.n	8008cc8 <__kernel_rem_pio2+0x480>
 8008cf2:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008cf6:	3401      	adds	r4, #1
 8008cf8:	eca8 7b02 	vstmia	r8!, {d7}
 8008cfc:	e7d7      	b.n	8008cae <__kernel_rem_pio2+0x466>
 8008cfe:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	f200 80d8 	bhi.w	8008eb6 <__kernel_rem_pio2+0x66e>
 8008d06:	e8df f003 	tbb	[pc, r3]
 8008d0a:	0810      	.short	0x0810
 8008d0c:	0208      	.short	0x0208
 8008d0e:	9a05      	ldr	r2, [sp, #20]
 8008d10:	ab48      	add	r3, sp, #288	; 0x120
 8008d12:	189c      	adds	r4, r3, r2
 8008d14:	46a0      	mov	r8, r4
 8008d16:	46d9      	mov	r9, fp
 8008d18:	e056      	b.n	8008dc8 <__kernel_rem_pio2+0x580>
 8008d1a:	9c05      	ldr	r4, [sp, #20]
 8008d1c:	ab48      	add	r3, sp, #288	; 0x120
 8008d1e:	3408      	adds	r4, #8
 8008d20:	441c      	add	r4, r3
 8008d22:	465d      	mov	r5, fp
 8008d24:	2000      	movs	r0, #0
 8008d26:	2100      	movs	r1, #0
 8008d28:	e01d      	b.n	8008d66 <__kernel_rem_pio2+0x51e>
 8008d2a:	9b05      	ldr	r3, [sp, #20]
 8008d2c:	aa98      	add	r2, sp, #608	; 0x260
 8008d2e:	4413      	add	r3, r2
 8008d30:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 8008d34:	2000      	movs	r0, #0
 8008d36:	2100      	movs	r1, #0
 8008d38:	f1bb 0f00 	cmp.w	fp, #0
 8008d3c:	db06      	blt.n	8008d4c <__kernel_rem_pio2+0x504>
 8008d3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008d42:	f7f7 fa47 	bl	80001d4 <__adddf3>
 8008d46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d4a:	e7f5      	b.n	8008d38 <__kernel_rem_pio2+0x4f0>
 8008d4c:	f1ba 0f00 	cmp.w	sl, #0
 8008d50:	d003      	beq.n	8008d5a <__kernel_rem_pio2+0x512>
 8008d52:	4602      	mov	r2, r0
 8008d54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d58:	e001      	b.n	8008d5e <__kernel_rem_pio2+0x516>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	9901      	ldr	r1, [sp, #4]
 8008d60:	e9c1 2300 	strd	r2, r3, [r1]
 8008d64:	e0a7      	b.n	8008eb6 <__kernel_rem_pio2+0x66e>
 8008d66:	2d00      	cmp	r5, #0
 8008d68:	db05      	blt.n	8008d76 <__kernel_rem_pio2+0x52e>
 8008d6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008d6e:	f7f7 fa31 	bl	80001d4 <__adddf3>
 8008d72:	3d01      	subs	r5, #1
 8008d74:	e7f7      	b.n	8008d66 <__kernel_rem_pio2+0x51e>
 8008d76:	f1ba 0f00 	cmp.w	sl, #0
 8008d7a:	d003      	beq.n	8008d84 <__kernel_rem_pio2+0x53c>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d82:	e001      	b.n	8008d88 <__kernel_rem_pio2+0x540>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	9c01      	ldr	r4, [sp, #4]
 8008d8a:	e9c4 2300 	strd	r2, r3, [r4]
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008d96:	f7f7 fa1b 	bl	80001d0 <__aeabi_dsub>
 8008d9a:	ad4a      	add	r5, sp, #296	; 0x128
 8008d9c:	2401      	movs	r4, #1
 8008d9e:	45a3      	cmp	fp, r4
 8008da0:	db05      	blt.n	8008dae <__kernel_rem_pio2+0x566>
 8008da2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008da6:	f7f7 fa15 	bl	80001d4 <__adddf3>
 8008daa:	3401      	adds	r4, #1
 8008dac:	e7f7      	b.n	8008d9e <__kernel_rem_pio2+0x556>
 8008dae:	f1ba 0f00 	cmp.w	sl, #0
 8008db2:	d003      	beq.n	8008dbc <__kernel_rem_pio2+0x574>
 8008db4:	4602      	mov	r2, r0
 8008db6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dba:	e001      	b.n	8008dc0 <__kernel_rem_pio2+0x578>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	9901      	ldr	r1, [sp, #4]
 8008dc2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008dc6:	e076      	b.n	8008eb6 <__kernel_rem_pio2+0x66e>
 8008dc8:	f1b9 0f00 	cmp.w	r9, #0
 8008dcc:	dd20      	ble.n	8008e10 <__kernel_rem_pio2+0x5c8>
 8008dce:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
 8008dd2:	ed98 7b02 	vldr	d7, [r8, #8]
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	ec53 2b17 	vmov	r2, r3, d7
 8008ddc:	4639      	mov	r1, r7
 8008dde:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008de2:	f7f7 f9f7 	bl	80001d4 <__adddf3>
 8008de6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4630      	mov	r0, r6
 8008df0:	4639      	mov	r1, r7
 8008df2:	f7f7 f9ed 	bl	80001d0 <__aeabi_dsub>
 8008df6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dfa:	f7f7 f9eb 	bl	80001d4 <__adddf3>
 8008dfe:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008e02:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e06:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8008e0a:	ed88 7b00 	vstr	d7, [r8]
 8008e0e:	e7db      	b.n	8008dc8 <__kernel_rem_pio2+0x580>
 8008e10:	465e      	mov	r6, fp
 8008e12:	2e01      	cmp	r6, #1
 8008e14:	dd1f      	ble.n	8008e56 <__kernel_rem_pio2+0x60e>
 8008e16:	e974 8902 	ldrd	r8, r9, [r4, #-8]!
 8008e1a:	ed94 7b02 	vldr	d7, [r4, #8]
 8008e1e:	4640      	mov	r0, r8
 8008e20:	ec53 2b17 	vmov	r2, r3, d7
 8008e24:	4649      	mov	r1, r9
 8008e26:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e2a:	f7f7 f9d3 	bl	80001d4 <__adddf3>
 8008e2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	4640      	mov	r0, r8
 8008e38:	4649      	mov	r1, r9
 8008e3a:	f7f7 f9c9 	bl	80001d0 <__aeabi_dsub>
 8008e3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e42:	f7f7 f9c7 	bl	80001d4 <__adddf3>
 8008e46:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008e4a:	3e01      	subs	r6, #1
 8008e4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008e50:	ed84 7b00 	vstr	d7, [r4]
 8008e54:	e7dd      	b.n	8008e12 <__kernel_rem_pio2+0x5ca>
 8008e56:	9c05      	ldr	r4, [sp, #20]
 8008e58:	ab48      	add	r3, sp, #288	; 0x120
 8008e5a:	3408      	adds	r4, #8
 8008e5c:	441c      	add	r4, r3
 8008e5e:	2000      	movs	r0, #0
 8008e60:	2100      	movs	r1, #0
 8008e62:	f1bb 0f01 	cmp.w	fp, #1
 8008e66:	dd06      	ble.n	8008e76 <__kernel_rem_pio2+0x62e>
 8008e68:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008e6c:	f7f7 f9b2 	bl	80001d4 <__adddf3>
 8008e70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e74:	e7f5      	b.n	8008e62 <__kernel_rem_pio2+0x61a>
 8008e76:	f1ba 0f00 	cmp.w	sl, #0
 8008e7a:	d10b      	bne.n	8008e94 <__kernel_rem_pio2+0x64c>
 8008e7c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8008e80:	9c01      	ldr	r4, [sp, #4]
 8008e82:	e9c4 2300 	strd	r2, r3, [r4]
 8008e86:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8008e8a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8008e8e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008e92:	e010      	b.n	8008eb6 <__kernel_rem_pio2+0x66e>
 8008e94:	9a01      	ldr	r2, [sp, #4]
 8008e96:	682b      	ldr	r3, [r5, #0]
 8008e98:	6013      	str	r3, [r2, #0]
 8008e9a:	686b      	ldr	r3, [r5, #4]
 8008e9c:	6110      	str	r0, [r2, #16]
 8008e9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008ea2:	6053      	str	r3, [r2, #4]
 8008ea4:	68ab      	ldr	r3, [r5, #8]
 8008ea6:	6093      	str	r3, [r2, #8]
 8008ea8:	68eb      	ldr	r3, [r5, #12]
 8008eaa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008eae:	60d3      	str	r3, [r2, #12]
 8008eb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008eb4:	6153      	str	r3, [r2, #20]
 8008eb6:	9b04      	ldr	r3, [sp, #16]
 8008eb8:	f003 0007 	and.w	r0, r3, #7
 8008ebc:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	f3af 8000 	nop.w
 8008ec8:	00000000 	.word	0x00000000
 8008ecc:	3ff00000 	.word	0x3ff00000
	...
 8008ed8:	41700000 	.word	0x41700000
 8008edc:	3e700000 	.word	0x3e700000
 8008ee0:	0800a900 	.word	0x0800a900
 8008ee4:	00000000 	.word	0x00000000

08008ee8 <__kernel_sin>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	ec55 4b10 	vmov	r4, r5, d0
 8008ef0:	b085      	sub	sp, #20
 8008ef2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008ef6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008efa:	ed8d 1b00 	vstr	d1, [sp]
 8008efe:	9002      	str	r0, [sp, #8]
 8008f00:	da07      	bge.n	8008f12 <__kernel_sin+0x2a>
 8008f02:	ee10 0a10 	vmov	r0, s0
 8008f06:	4629      	mov	r1, r5
 8008f08:	f7f7 fdc6 	bl	8000a98 <__aeabi_d2iz>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	f000 8081 	beq.w	8009014 <__kernel_sin+0x12c>
 8008f12:	4622      	mov	r2, r4
 8008f14:	462b      	mov	r3, r5
 8008f16:	4620      	mov	r0, r4
 8008f18:	4629      	mov	r1, r5
 8008f1a:	f7f7 fb0d 	bl	8000538 <__aeabi_dmul>
 8008f1e:	4682      	mov	sl, r0
 8008f20:	468b      	mov	fp, r1
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4620      	mov	r0, r4
 8008f28:	4629      	mov	r1, r5
 8008f2a:	f7f7 fb05 	bl	8000538 <__aeabi_dmul>
 8008f2e:	a341      	add	r3, pc, #260	; (adr r3, 8009034 <__kernel_sin+0x14c>)
 8008f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f34:	4680      	mov	r8, r0
 8008f36:	4689      	mov	r9, r1
 8008f38:	4650      	mov	r0, sl
 8008f3a:	4659      	mov	r1, fp
 8008f3c:	f7f7 fafc 	bl	8000538 <__aeabi_dmul>
 8008f40:	a33e      	add	r3, pc, #248	; (adr r3, 800903c <__kernel_sin+0x154>)
 8008f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f46:	f7f7 f943 	bl	80001d0 <__aeabi_dsub>
 8008f4a:	4652      	mov	r2, sl
 8008f4c:	465b      	mov	r3, fp
 8008f4e:	f7f7 faf3 	bl	8000538 <__aeabi_dmul>
 8008f52:	a33c      	add	r3, pc, #240	; (adr r3, 8009044 <__kernel_sin+0x15c>)
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	f7f7 f93c 	bl	80001d4 <__adddf3>
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	465b      	mov	r3, fp
 8008f60:	f7f7 faea 	bl	8000538 <__aeabi_dmul>
 8008f64:	a339      	add	r3, pc, #228	; (adr r3, 800904c <__kernel_sin+0x164>)
 8008f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6a:	f7f7 f931 	bl	80001d0 <__aeabi_dsub>
 8008f6e:	4652      	mov	r2, sl
 8008f70:	465b      	mov	r3, fp
 8008f72:	f7f7 fae1 	bl	8000538 <__aeabi_dmul>
 8008f76:	a337      	add	r3, pc, #220	; (adr r3, 8009054 <__kernel_sin+0x16c>)
 8008f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7c:	f7f7 f92a 	bl	80001d4 <__adddf3>
 8008f80:	9b02      	ldr	r3, [sp, #8]
 8008f82:	4606      	mov	r6, r0
 8008f84:	460f      	mov	r7, r1
 8008f86:	b99b      	cbnz	r3, 8008fb0 <__kernel_sin+0xc8>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4650      	mov	r0, sl
 8008f8e:	4659      	mov	r1, fp
 8008f90:	f7f7 fad2 	bl	8000538 <__aeabi_dmul>
 8008f94:	a324      	add	r3, pc, #144	; (adr r3, 8009028 <__kernel_sin+0x140>)
 8008f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9a:	f7f7 f919 	bl	80001d0 <__aeabi_dsub>
 8008f9e:	4642      	mov	r2, r8
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	f7f7 fac9 	bl	8000538 <__aeabi_dmul>
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	462b      	mov	r3, r5
 8008faa:	f7f7 f913 	bl	80001d4 <__adddf3>
 8008fae:	e033      	b.n	8009018 <__kernel_sin+0x130>
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	4b1f      	ldr	r3, [pc, #124]	; (8009030 <__kernel_sin+0x148>)
 8008fb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fb8:	f7f7 fabe 	bl	8000538 <__aeabi_dmul>
 8008fbc:	4632      	mov	r2, r6
 8008fbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fc2:	463b      	mov	r3, r7
 8008fc4:	4640      	mov	r0, r8
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	f7f7 fab6 	bl	8000538 <__aeabi_dmul>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fd4:	f7f7 f8fc 	bl	80001d0 <__aeabi_dsub>
 8008fd8:	4652      	mov	r2, sl
 8008fda:	465b      	mov	r3, fp
 8008fdc:	f7f7 faac 	bl	8000538 <__aeabi_dmul>
 8008fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fe4:	f7f7 f8f4 	bl	80001d0 <__aeabi_dsub>
 8008fe8:	a30f      	add	r3, pc, #60	; (adr r3, 8009028 <__kernel_sin+0x140>)
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	4606      	mov	r6, r0
 8008ff0:	460f      	mov	r7, r1
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	4649      	mov	r1, r9
 8008ff6:	f7f7 fa9f 	bl	8000538 <__aeabi_dmul>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4630      	mov	r0, r6
 8009000:	4639      	mov	r1, r7
 8009002:	f7f7 f8e7 	bl	80001d4 <__adddf3>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4620      	mov	r0, r4
 800900c:	4629      	mov	r1, r5
 800900e:	f7f7 f8df 	bl	80001d0 <__aeabi_dsub>
 8009012:	e001      	b.n	8009018 <__kernel_sin+0x130>
 8009014:	4620      	mov	r0, r4
 8009016:	4629      	mov	r1, r5
 8009018:	ec41 0b10 	vmov	d0, r0, r1
 800901c:	b005      	add	sp, #20
 800901e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009022:	bf00      	nop
 8009024:	f3af 8000 	nop.w
 8009028:	55555549 	.word	0x55555549
 800902c:	3fc55555 	.word	0x3fc55555
 8009030:	3fe00000 	.word	0x3fe00000
 8009034:	5acfd57c 	.word	0x5acfd57c
 8009038:	3de5d93a 	.word	0x3de5d93a
 800903c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009040:	3e5ae5e6 	.word	0x3e5ae5e6
 8009044:	57b1fe7d 	.word	0x57b1fe7d
 8009048:	3ec71de3 	.word	0x3ec71de3
 800904c:	19c161d5 	.word	0x19c161d5
 8009050:	3f2a01a0 	.word	0x3f2a01a0
 8009054:	1110f8a6 	.word	0x1110f8a6
 8009058:	3f811111 	.word	0x3f811111

0800905c <__kernel_cosf>:
 800905c:	ee10 3a10 	vmov	r3, s0
 8009060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009064:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800906c:	da05      	bge.n	800907a <__kernel_cosf+0x1e>
 800906e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009072:	ee17 2a90 	vmov	r2, s15
 8009076:	2a00      	cmp	r2, #0
 8009078:	d03b      	beq.n	80090f2 <__kernel_cosf+0x96>
 800907a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800907e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80090f8 <__kernel_cosf+0x9c>
 8009082:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80090fc <__kernel_cosf+0xa0>
 8009086:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8009100 <__kernel_cosf+0xa4>
 800908a:	4a1e      	ldr	r2, [pc, #120]	; (8009104 <__kernel_cosf+0xa8>)
 800908c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009090:	4293      	cmp	r3, r2
 8009092:	ee60 0a20 	vmul.f32	s1, s0, s1
 8009096:	eee7 5a06 	vfma.f32	s11, s14, s12
 800909a:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8009108 <__kernel_cosf+0xac>
 800909e:	eea7 6a25 	vfma.f32	s12, s14, s11
 80090a2:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800910c <__kernel_cosf+0xb0>
 80090a6:	eee7 5a06 	vfma.f32	s11, s14, s12
 80090aa:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8009110 <__kernel_cosf+0xb4>
 80090ae:	eea7 6a25 	vfma.f32	s12, s14, s11
 80090b2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80090b6:	ee26 6a07 	vmul.f32	s12, s12, s14
 80090ba:	dc06      	bgt.n	80090ca <__kernel_cosf+0x6e>
 80090bc:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80090c0:	eed7 0a25 	vfnms.f32	s1, s14, s11
 80090c4:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80090c8:	4770      	bx	lr
 80090ca:	4a12      	ldr	r2, [pc, #72]	; (8009114 <__kernel_cosf+0xb8>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	bfda      	itte	le
 80090d0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80090d4:	ee07 3a90 	vmovle	s15, r3
 80090d8:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
 80090dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80090e0:	eed7 0a06 	vfnms.f32	s1, s14, s12
 80090e4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80090e8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80090ec:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80090f0:	4770      	bx	lr
 80090f2:	eeb0 0a66 	vmov.f32	s0, s13
 80090f6:	4770      	bx	lr
 80090f8:	310f74f6 	.word	0x310f74f6
 80090fc:	ad47d74e 	.word	0xad47d74e
 8009100:	b493f27c 	.word	0xb493f27c
 8009104:	3e999999 	.word	0x3e999999
 8009108:	37d00d01 	.word	0x37d00d01
 800910c:	bab60b61 	.word	0xbab60b61
 8009110:	3d2aaaab 	.word	0x3d2aaaab
 8009114:	3f480000 	.word	0x3f480000

08009118 <__kernel_rem_pio2f>:
 8009118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	ed2d 8b04 	vpush	{d8-d9}
 8009120:	b0d5      	sub	sp, #340	; 0x154
 8009122:	460f      	mov	r7, r1
 8009124:	9000      	str	r0, [sp, #0]
 8009126:	49cf      	ldr	r1, [pc, #828]	; (8009464 <__kernel_rem_pio2f+0x34c>)
 8009128:	9862      	ldr	r0, [sp, #392]	; 0x188
 800912a:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 800912c:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8009130:	f103 3aff 	add.w	sl, r3, #4294967295
 8009134:	1ed0      	subs	r0, r2, #3
 8009136:	2408      	movs	r4, #8
 8009138:	fb90 f0f4 	sdiv	r0, r0, r4
 800913c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009140:	1c45      	adds	r5, r0, #1
 8009142:	ebca 0e00 	rsb	lr, sl, r0
 8009146:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800914a:	eb09 0c0a 	add.w	ip, r9, sl
 800914e:	ac18      	add	r4, sp, #96	; 0x60
 8009150:	eb06 088e 	add.w	r8, r6, lr, lsl #2
 8009154:	2200      	movs	r2, #0
 8009156:	4562      	cmp	r2, ip
 8009158:	dc0e      	bgt.n	8009178 <__kernel_rem_pio2f+0x60>
 800915a:	eb1e 0f02 	cmn.w	lr, r2
 800915e:	bf57      	itett	pl
 8009160:	f858 1022 	ldrpl.w	r1, [r8, r2, lsl #2]
 8009164:	eddf 7ac0 	vldrmi	s15, [pc, #768]	; 8009468 <__kernel_rem_pio2f+0x350>
 8009168:	ee07 1a90 	vmovpl	s15, r1
 800916c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009170:	3201      	adds	r2, #1
 8009172:	ece4 7a01 	vstmia	r4!, {s15}
 8009176:	e7ee      	b.n	8009156 <__kernel_rem_pio2f+0x3e>
 8009178:	f50d 7c80 	add.w	ip, sp, #256	; 0x100
 800917c:	2400      	movs	r4, #0
 800917e:	454c      	cmp	r4, r9
 8009180:	dc18      	bgt.n	80091b4 <__kernel_rem_pio2f+0x9c>
 8009182:	191a      	adds	r2, r3, r4
 8009184:	a918      	add	r1, sp, #96	; 0x60
 8009186:	f8dd e000 	ldr.w	lr, [sp]
 800918a:	eddf 7ab7 	vldr	s15, [pc, #732]	; 8009468 <__kernel_rem_pio2f+0x350>
 800918e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009192:	f04f 0800 	mov.w	r8, #0
 8009196:	45d0      	cmp	r8, sl
 8009198:	dc08      	bgt.n	80091ac <__kernel_rem_pio2f+0x94>
 800919a:	ecfe 6a01 	vldmia	lr!, {s13}
 800919e:	ed32 7a01 	vldmdb	r2!, {s14}
 80091a2:	f108 0801 	add.w	r8, r8, #1
 80091a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80091aa:	e7f4      	b.n	8009196 <__kernel_rem_pio2f+0x7e>
 80091ac:	ecec 7a01 	vstmia	ip!, {s15}
 80091b0:	3401      	adds	r4, #1
 80091b2:	e7e4      	b.n	800917e <__kernel_rem_pio2f+0x66>
 80091b4:	aa04      	add	r2, sp, #16
 80091b6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80091ba:	9201      	str	r2, [sp, #4]
 80091bc:	eddf 8aab 	vldr	s17, [pc, #684]	; 800946c <__kernel_rem_pio2f+0x354>
 80091c0:	ed9f 9aab 	vldr	s18, [pc, #684]	; 8009470 <__kernel_rem_pio2f+0x358>
 80091c4:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 80091c8:	9202      	str	r2, [sp, #8]
 80091ca:	464c      	mov	r4, r9
 80091cc:	aa54      	add	r2, sp, #336	; 0x150
 80091ce:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 80091d2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80091d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80091da:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
 80091de:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80091e2:	aa54      	add	r2, sp, #336	; 0x150
 80091e4:	eb02 0008 	add.w	r0, r2, r8
 80091e8:	384c      	subs	r0, #76	; 0x4c
 80091ea:	2200      	movs	r2, #0
 80091ec:	1aa6      	subs	r6, r4, r2
 80091ee:	2e00      	cmp	r6, #0
 80091f0:	dd14      	ble.n	800921c <__kernel_rem_pio2f+0x104>
 80091f2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80091f6:	ae04      	add	r6, sp, #16
 80091f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009200:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009204:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009208:	ee10 1a10 	vmov	r1, s0
 800920c:	ed30 0a01 	vldmdb	r0!, {s0}
 8009210:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8009214:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009218:	3201      	adds	r2, #1
 800921a:	e7e7      	b.n	80091ec <__kernel_rem_pio2f+0xd4>
 800921c:	4628      	mov	r0, r5
 800921e:	9303      	str	r3, [sp, #12]
 8009220:	f000 fc22 	bl	8009a68 <scalbnf>
 8009224:	eeb0 8a40 	vmov.f32	s16, s0
 8009228:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800922c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009230:	f000 fbd2 	bl	80099d8 <floorf>
 8009234:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009238:	eea0 8a67 	vfms.f32	s16, s0, s15
 800923c:	2d00      	cmp	r5, #0
 800923e:	9b03      	ldr	r3, [sp, #12]
 8009240:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009244:	ee17 ba90 	vmov	fp, s15
 8009248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800924c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009250:	dd14      	ble.n	800927c <__kernel_rem_pio2f+0x164>
 8009252:	f104 3eff 	add.w	lr, r4, #4294967295
 8009256:	aa04      	add	r2, sp, #16
 8009258:	f1c5 0608 	rsb	r6, r5, #8
 800925c:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8009260:	fa42 f006 	asr.w	r0, r2, r6
 8009264:	fa00 f606 	lsl.w	r6, r0, r6
 8009268:	a904      	add	r1, sp, #16
 800926a:	1b92      	subs	r2, r2, r6
 800926c:	f1c5 0607 	rsb	r6, r5, #7
 8009270:	4483      	add	fp, r0
 8009272:	f841 202e 	str.w	r2, [r1, lr, lsl #2]
 8009276:	fa42 f606 	asr.w	r6, r2, r6
 800927a:	e00f      	b.n	800929c <__kernel_rem_pio2f+0x184>
 800927c:	d105      	bne.n	800928a <__kernel_rem_pio2f+0x172>
 800927e:	1e62      	subs	r2, r4, #1
 8009280:	a904      	add	r1, sp, #16
 8009282:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8009286:	1236      	asrs	r6, r6, #8
 8009288:	e008      	b.n	800929c <__kernel_rem_pio2f+0x184>
 800928a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800928e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009296:	da04      	bge.n	80092a2 <__kernel_rem_pio2f+0x18a>
 8009298:	2600      	movs	r6, #0
 800929a:	e03f      	b.n	800931c <__kernel_rem_pio2f+0x204>
 800929c:	2e00      	cmp	r6, #0
 800929e:	dc01      	bgt.n	80092a4 <__kernel_rem_pio2f+0x18c>
 80092a0:	e03c      	b.n	800931c <__kernel_rem_pio2f+0x204>
 80092a2:	2602      	movs	r6, #2
 80092a4:	2200      	movs	r2, #0
 80092a6:	f10b 0b01 	add.w	fp, fp, #1
 80092aa:	4610      	mov	r0, r2
 80092ac:	4294      	cmp	r4, r2
 80092ae:	dd0f      	ble.n	80092d0 <__kernel_rem_pio2f+0x1b8>
 80092b0:	a904      	add	r1, sp, #16
 80092b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80092b6:	b918      	cbnz	r0, 80092c0 <__kernel_rem_pio2f+0x1a8>
 80092b8:	b141      	cbz	r1, 80092cc <__kernel_rem_pio2f+0x1b4>
 80092ba:	f5c1 7080 	rsb	r0, r1, #256	; 0x100
 80092be:	e001      	b.n	80092c4 <__kernel_rem_pio2f+0x1ac>
 80092c0:	f1c1 00ff 	rsb	r0, r1, #255	; 0xff
 80092c4:	a904      	add	r1, sp, #16
 80092c6:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 80092ca:	2001      	movs	r0, #1
 80092cc:	3201      	adds	r2, #1
 80092ce:	e7ed      	b.n	80092ac <__kernel_rem_pio2f+0x194>
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	dd15      	ble.n	8009300 <__kernel_rem_pio2f+0x1e8>
 80092d4:	2d01      	cmp	r5, #1
 80092d6:	d009      	beq.n	80092ec <__kernel_rem_pio2f+0x1d4>
 80092d8:	2d02      	cmp	r5, #2
 80092da:	d111      	bne.n	8009300 <__kernel_rem_pio2f+0x1e8>
 80092dc:	f104 3eff 	add.w	lr, r4, #4294967295
 80092e0:	aa04      	add	r2, sp, #16
 80092e2:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80092e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80092ea:	e006      	b.n	80092fa <__kernel_rem_pio2f+0x1e2>
 80092ec:	f104 3eff 	add.w	lr, r4, #4294967295
 80092f0:	aa04      	add	r2, sp, #16
 80092f2:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80092f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80092fa:	a904      	add	r1, sp, #16
 80092fc:	f841 202e 	str.w	r2, [r1, lr, lsl #2]
 8009300:	2e02      	cmp	r6, #2
 8009302:	d10b      	bne.n	800931c <__kernel_rem_pio2f+0x204>
 8009304:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009308:	ee30 8a48 	vsub.f32	s16, s0, s16
 800930c:	b130      	cbz	r0, 800931c <__kernel_rem_pio2f+0x204>
 800930e:	4628      	mov	r0, r5
 8009310:	9303      	str	r3, [sp, #12]
 8009312:	f000 fba9 	bl	8009a68 <scalbnf>
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	ee38 8a40 	vsub.f32	s16, s16, s0
 800931c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009324:	d154      	bne.n	80093d0 <__kernel_rem_pio2f+0x2b8>
 8009326:	f104 3cff 	add.w	ip, r4, #4294967295
 800932a:	4660      	mov	r0, ip
 800932c:	2200      	movs	r2, #0
 800932e:	4548      	cmp	r0, r9
 8009330:	db05      	blt.n	800933e <__kernel_rem_pio2f+0x226>
 8009332:	a904      	add	r1, sp, #16
 8009334:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009338:	3801      	subs	r0, #1
 800933a:	430a      	orrs	r2, r1
 800933c:	e7f7      	b.n	800932e <__kernel_rem_pio2f+0x216>
 800933e:	2a00      	cmp	r2, #0
 8009340:	d13d      	bne.n	80093be <__kernel_rem_pio2f+0x2a6>
 8009342:	2201      	movs	r2, #1
 8009344:	f06f 0603 	mvn.w	r6, #3
 8009348:	fb06 f002 	mul.w	r0, r6, r2
 800934c:	9901      	ldr	r1, [sp, #4]
 800934e:	5808      	ldr	r0, [r1, r0]
 8009350:	b908      	cbnz	r0, 8009356 <__kernel_rem_pio2f+0x23e>
 8009352:	3201      	adds	r2, #1
 8009354:	e7f8      	b.n	8009348 <__kernel_rem_pio2f+0x230>
 8009356:	eb03 0e04 	add.w	lr, r3, r4
 800935a:	1c60      	adds	r0, r4, #1
 800935c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8009360:	f108 0804 	add.w	r8, r8, #4
 8009364:	2600      	movs	r6, #0
 8009366:	4414      	add	r4, r2
 8009368:	42a0      	cmp	r0, r4
 800936a:	f73f af2f 	bgt.w	80091cc <__kernel_rem_pio2f+0xb4>
 800936e:	3604      	adds	r6, #4
 8009370:	a918      	add	r1, sp, #96	; 0x60
 8009372:	eb06 020e 	add.w	r2, r6, lr
 8009376:	440a      	add	r2, r1
 8009378:	9902      	ldr	r1, [sp, #8]
 800937a:	f8dd b000 	ldr.w	fp, [sp]
 800937e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009382:	9103      	str	r1, [sp, #12]
 8009384:	ee07 1a90 	vmov	s15, r1
 8009388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800938c:	f04f 0c00 	mov.w	ip, #0
 8009390:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009394:	eddf 7a34 	vldr	s15, [pc, #208]	; 8009468 <__kernel_rem_pio2f+0x350>
 8009398:	45d4      	cmp	ip, sl
 800939a:	dc08      	bgt.n	80093ae <__kernel_rem_pio2f+0x296>
 800939c:	ecfb 6a01 	vldmia	fp!, {s13}
 80093a0:	ed32 7a01 	vldmdb	r2!, {s14}
 80093a4:	f10c 0c01 	add.w	ip, ip, #1
 80093a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80093ac:	e7f4      	b.n	8009398 <__kernel_rem_pio2f+0x280>
 80093ae:	eb06 0208 	add.w	r2, r6, r8
 80093b2:	a940      	add	r1, sp, #256	; 0x100
 80093b4:	440a      	add	r2, r1
 80093b6:	edc2 7a00 	vstr	s15, [r2]
 80093ba:	3001      	adds	r0, #1
 80093bc:	e7d4      	b.n	8009368 <__kernel_rem_pio2f+0x250>
 80093be:	3d08      	subs	r5, #8
 80093c0:	4664      	mov	r4, ip
 80093c2:	ab04      	add	r3, sp, #16
 80093c4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80093c8:	bb6b      	cbnz	r3, 8009426 <__kernel_rem_pio2f+0x30e>
 80093ca:	3c01      	subs	r4, #1
 80093cc:	3d08      	subs	r5, #8
 80093ce:	e7f8      	b.n	80093c2 <__kernel_rem_pio2f+0x2aa>
 80093d0:	4268      	negs	r0, r5
 80093d2:	eeb0 0a48 	vmov.f32	s0, s16
 80093d6:	f000 fb47 	bl	8009a68 <scalbnf>
 80093da:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8009470 <__kernel_rem_pio2f+0x358>
 80093de:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80093e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e6:	db17      	blt.n	8009418 <__kernel_rem_pio2f+0x300>
 80093e8:	eddf 7a20 	vldr	s15, [pc, #128]	; 800946c <__kernel_rem_pio2f+0x354>
 80093ec:	ee60 7a27 	vmul.f32	s15, s0, s15
 80093f0:	aa04      	add	r2, sp, #16
 80093f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093f6:	3508      	adds	r5, #8
 80093f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093fc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009404:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009408:	ee10 3a10 	vmov	r3, s0
 800940c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009410:	3401      	adds	r4, #1
 8009412:	ee17 3a90 	vmov	r3, s15
 8009416:	e004      	b.n	8009422 <__kernel_rem_pio2f+0x30a>
 8009418:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800941c:	aa04      	add	r2, sp, #16
 800941e:	ee10 3a10 	vmov	r3, s0
 8009422:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009426:	4628      	mov	r0, r5
 8009428:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800942c:	f000 fb1c 	bl	8009a68 <scalbnf>
 8009430:	00a3      	lsls	r3, r4, #2
 8009432:	a940      	add	r1, sp, #256	; 0x100
 8009434:	1d1a      	adds	r2, r3, #4
 8009436:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800946c <__kernel_rem_pio2f+0x354>
 800943a:	1888      	adds	r0, r1, r2
 800943c:	4621      	mov	r1, r4
 800943e:	2900      	cmp	r1, #0
 8009440:	db18      	blt.n	8009474 <__kernel_rem_pio2f+0x35c>
 8009442:	ad04      	add	r5, sp, #16
 8009444:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8009448:	9500      	str	r5, [sp, #0]
 800944a:	ee07 5a90 	vmov	s15, r5
 800944e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009452:	3901      	subs	r1, #1
 8009454:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009458:	ee20 0a07 	vmul.f32	s0, s0, s14
 800945c:	ed60 7a01 	vstmdb	r0!, {s15}
 8009460:	e7ed      	b.n	800943e <__kernel_rem_pio2f+0x326>
 8009462:	bf00      	nop
 8009464:	0800a940 	.word	0x0800a940
 8009468:	00000000 	.word	0x00000000
 800946c:	3b800000 	.word	0x3b800000
 8009470:	43800000 	.word	0x43800000
 8009474:	f10d 0cb0 	add.w	ip, sp, #176	; 0xb0
 8009478:	2100      	movs	r1, #0
 800947a:	1a65      	subs	r5, r4, r1
 800947c:	d417      	bmi.n	80094ae <__kernel_rem_pio2f+0x396>
 800947e:	a840      	add	r0, sp, #256	; 0x100
 8009480:	f8df e15c 	ldr.w	lr, [pc, #348]	; 80095e0 <__kernel_rem_pio2f+0x4c8>
 8009484:	eddf 7a55 	vldr	s15, [pc, #340]	; 80095dc <__kernel_rem_pio2f+0x4c4>
 8009488:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800948c:	2000      	movs	r0, #0
 800948e:	4548      	cmp	r0, r9
 8009490:	dc09      	bgt.n	80094a6 <__kernel_rem_pio2f+0x38e>
 8009492:	4288      	cmp	r0, r1
 8009494:	dc07      	bgt.n	80094a6 <__kernel_rem_pio2f+0x38e>
 8009496:	ecfe 6a01 	vldmia	lr!, {s13}
 800949a:	ecb5 7a01 	vldmia	r5!, {s14}
 800949e:	3001      	adds	r0, #1
 80094a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80094a4:	e7f3      	b.n	800948e <__kernel_rem_pio2f+0x376>
 80094a6:	ecec 7a01 	vstmia	ip!, {s15}
 80094aa:	3101      	adds	r1, #1
 80094ac:	e7e5      	b.n	800947a <__kernel_rem_pio2f+0x362>
 80094ae:	9962      	ldr	r1, [sp, #392]	; 0x188
 80094b0:	2903      	cmp	r1, #3
 80094b2:	f200 808c 	bhi.w	80095ce <__kernel_rem_pio2f+0x4b6>
 80094b6:	e8df f001 	tbb	[pc, r1]
 80094ba:	070d      	.short	0x070d
 80094bc:	0207      	.short	0x0207
 80094be:	a92c      	add	r1, sp, #176	; 0xb0
 80094c0:	440b      	add	r3, r1
 80094c2:	4619      	mov	r1, r3
 80094c4:	4620      	mov	r0, r4
 80094c6:	e03b      	b.n	8009540 <__kernel_rem_pio2f+0x428>
 80094c8:	ab2c      	add	r3, sp, #176	; 0xb0
 80094ca:	441a      	add	r2, r3
 80094cc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80095dc <__kernel_rem_pio2f+0x4c4>
 80094d0:	4623      	mov	r3, r4
 80094d2:	e011      	b.n	80094f8 <__kernel_rem_pio2f+0x3e0>
 80094d4:	ab2c      	add	r3, sp, #176	; 0xb0
 80094d6:	eddf 7a41 	vldr	s15, [pc, #260]	; 80095dc <__kernel_rem_pio2f+0x4c4>
 80094da:	441a      	add	r2, r3
 80094dc:	2c00      	cmp	r4, #0
 80094de:	db05      	blt.n	80094ec <__kernel_rem_pio2f+0x3d4>
 80094e0:	ed32 7a01 	vldmdb	r2!, {s14}
 80094e4:	3c01      	subs	r4, #1
 80094e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80094ea:	e7f7      	b.n	80094dc <__kernel_rem_pio2f+0x3c4>
 80094ec:	b10e      	cbz	r6, 80094f2 <__kernel_rem_pio2f+0x3da>
 80094ee:	eef1 7a67 	vneg.f32	s15, s15
 80094f2:	edc7 7a00 	vstr	s15, [r7]
 80094f6:	e06a      	b.n	80095ce <__kernel_rem_pio2f+0x4b6>
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	db05      	blt.n	8009508 <__kernel_rem_pio2f+0x3f0>
 80094fc:	ed72 7a01 	vldmdb	r2!, {s15}
 8009500:	3b01      	subs	r3, #1
 8009502:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009506:	e7f7      	b.n	80094f8 <__kernel_rem_pio2f+0x3e0>
 8009508:	b116      	cbz	r6, 8009510 <__kernel_rem_pio2f+0x3f8>
 800950a:	eef1 7a47 	vneg.f32	s15, s14
 800950e:	e001      	b.n	8009514 <__kernel_rem_pio2f+0x3fc>
 8009510:	eef0 7a47 	vmov.f32	s15, s14
 8009514:	edc7 7a00 	vstr	s15, [r7]
 8009518:	eddd 7a2c 	vldr	s15, [sp, #176]	; 0xb0
 800951c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009520:	aa2d      	add	r2, sp, #180	; 0xb4
 8009522:	2301      	movs	r3, #1
 8009524:	429c      	cmp	r4, r3
 8009526:	db05      	blt.n	8009534 <__kernel_rem_pio2f+0x41c>
 8009528:	ecb2 7a01 	vldmia	r2!, {s14}
 800952c:	3301      	adds	r3, #1
 800952e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009532:	e7f7      	b.n	8009524 <__kernel_rem_pio2f+0x40c>
 8009534:	b10e      	cbz	r6, 800953a <__kernel_rem_pio2f+0x422>
 8009536:	eef1 7a67 	vneg.f32	s15, s15
 800953a:	edc7 7a01 	vstr	s15, [r7, #4]
 800953e:	e046      	b.n	80095ce <__kernel_rem_pio2f+0x4b6>
 8009540:	2800      	cmp	r0, #0
 8009542:	dd0f      	ble.n	8009564 <__kernel_rem_pio2f+0x44c>
 8009544:	ed71 7a01 	vldmdb	r1!, {s15}
 8009548:	edd1 6a01 	vldr	s13, [r1, #4]
 800954c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009550:	3801      	subs	r0, #1
 8009552:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009556:	ed81 7a00 	vstr	s14, [r1]
 800955a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800955e:	edc1 7a01 	vstr	s15, [r1, #4]
 8009562:	e7ed      	b.n	8009540 <__kernel_rem_pio2f+0x428>
 8009564:	4621      	mov	r1, r4
 8009566:	2901      	cmp	r1, #1
 8009568:	dd0f      	ble.n	800958a <__kernel_rem_pio2f+0x472>
 800956a:	ed73 7a01 	vldmdb	r3!, {s15}
 800956e:	edd3 6a01 	vldr	s13, [r3, #4]
 8009572:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009576:	3901      	subs	r1, #1
 8009578:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800957c:	ed83 7a00 	vstr	s14, [r3]
 8009580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009584:	edc3 7a01 	vstr	s15, [r3, #4]
 8009588:	e7ed      	b.n	8009566 <__kernel_rem_pio2f+0x44e>
 800958a:	ab2c      	add	r3, sp, #176	; 0xb0
 800958c:	eddf 7a13 	vldr	s15, [pc, #76]	; 80095dc <__kernel_rem_pio2f+0x4c4>
 8009590:	441a      	add	r2, r3
 8009592:	2c01      	cmp	r4, #1
 8009594:	dd05      	ble.n	80095a2 <__kernel_rem_pio2f+0x48a>
 8009596:	ed32 7a01 	vldmdb	r2!, {s14}
 800959a:	3c01      	subs	r4, #1
 800959c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095a0:	e7f7      	b.n	8009592 <__kernel_rem_pio2f+0x47a>
 80095a2:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 80095a6:	ed9d 7a2d 	vldr	s14, [sp, #180]	; 0xb4
 80095aa:	b926      	cbnz	r6, 80095b6 <__kernel_rem_pio2f+0x49e>
 80095ac:	edc7 6a00 	vstr	s13, [r7]
 80095b0:	ed87 7a01 	vstr	s14, [r7, #4]
 80095b4:	e009      	b.n	80095ca <__kernel_rem_pio2f+0x4b2>
 80095b6:	eef1 6a66 	vneg.f32	s13, s13
 80095ba:	eeb1 7a47 	vneg.f32	s14, s14
 80095be:	edc7 6a00 	vstr	s13, [r7]
 80095c2:	ed87 7a01 	vstr	s14, [r7, #4]
 80095c6:	eef1 7a67 	vneg.f32	s15, s15
 80095ca:	edc7 7a02 	vstr	s15, [r7, #8]
 80095ce:	f00b 0007 	and.w	r0, fp, #7
 80095d2:	b055      	add	sp, #340	; 0x154
 80095d4:	ecbd 8b04 	vpop	{d8-d9}
 80095d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095dc:	00000000 	.word	0x00000000
 80095e0:	0800a94c 	.word	0x0800a94c

080095e4 <__kernel_sinf>:
 80095e4:	ee10 3a10 	vmov	r3, s0
 80095e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095ec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80095f0:	da04      	bge.n	80095fc <__kernel_sinf+0x18>
 80095f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80095f6:	ee17 3a90 	vmov	r3, s15
 80095fa:	b35b      	cbz	r3, 8009654 <__kernel_sinf+0x70>
 80095fc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009600:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009658 <__kernel_sinf+0x74>
 8009604:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800965c <__kernel_sinf+0x78>
 8009608:	eea7 6a27 	vfma.f32	s12, s14, s15
 800960c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009660 <__kernel_sinf+0x7c>
 8009610:	eee7 7a06 	vfma.f32	s15, s14, s12
 8009614:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009664 <__kernel_sinf+0x80>
 8009618:	eea7 6a27 	vfma.f32	s12, s14, s15
 800961c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009668 <__kernel_sinf+0x84>
 8009620:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009624:	eee7 7a06 	vfma.f32	s15, s14, s12
 8009628:	b930      	cbnz	r0, 8009638 <__kernel_sinf+0x54>
 800962a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800966c <__kernel_sinf+0x88>
 800962e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009632:	eea6 0a86 	vfma.f32	s0, s13, s12
 8009636:	4770      	bx	lr
 8009638:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800963c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009640:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009644:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8009648:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009670 <__kernel_sinf+0x8c>
 800964c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009650:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	2f2ec9d3 	.word	0x2f2ec9d3
 800965c:	b2d72f34 	.word	0xb2d72f34
 8009660:	3638ef1b 	.word	0x3638ef1b
 8009664:	b9500d01 	.word	0xb9500d01
 8009668:	3c088889 	.word	0x3c088889
 800966c:	be2aaaab 	.word	0xbe2aaaab
 8009670:	3e2aaaab 	.word	0x3e2aaaab

08009674 <fabs>:
 8009674:	ec53 2b10 	vmov	r2, r3, d0
 8009678:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800967c:	ec43 2b10 	vmov	d0, r2, r3
 8009680:	4770      	bx	lr
 8009682:	0000      	movs	r0, r0
 8009684:	0000      	movs	r0, r0
	...

08009688 <floor>:
 8009688:	ec51 0b10 	vmov	r0, r1, d0
 800968c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009690:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009694:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009698:	2e13      	cmp	r6, #19
 800969a:	ee10 8a10 	vmov	r8, s0
 800969e:	460c      	mov	r4, r1
 80096a0:	ee10 5a10 	vmov	r5, s0
 80096a4:	dc33      	bgt.n	800970e <floor+0x86>
 80096a6:	2e00      	cmp	r6, #0
 80096a8:	da16      	bge.n	80096d8 <floor+0x50>
 80096aa:	a335      	add	r3, pc, #212	; (adr r3, 8009780 <floor+0xf8>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	f7f6 fd90 	bl	80001d4 <__adddf3>
 80096b4:	2200      	movs	r2, #0
 80096b6:	2300      	movs	r3, #0
 80096b8:	f7f7 f9ce 	bl	8000a58 <__aeabi_dcmpgt>
 80096bc:	2800      	cmp	r0, #0
 80096be:	d057      	beq.n	8009770 <floor+0xe8>
 80096c0:	2c00      	cmp	r4, #0
 80096c2:	da53      	bge.n	800976c <floor+0xe4>
 80096c4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80096c8:	ea53 0308 	orrs.w	r3, r3, r8
 80096cc:	4b2e      	ldr	r3, [pc, #184]	; (8009788 <floor+0x100>)
 80096ce:	f04f 0500 	mov.w	r5, #0
 80096d2:	bf18      	it	ne
 80096d4:	461c      	movne	r4, r3
 80096d6:	e04b      	b.n	8009770 <floor+0xe8>
 80096d8:	4f2c      	ldr	r7, [pc, #176]	; (800978c <floor+0x104>)
 80096da:	4137      	asrs	r7, r6
 80096dc:	ea01 0307 	and.w	r3, r1, r7
 80096e0:	4303      	orrs	r3, r0
 80096e2:	d047      	beq.n	8009774 <floor+0xec>
 80096e4:	a326      	add	r3, pc, #152	; (adr r3, 8009780 <floor+0xf8>)
 80096e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ea:	f7f6 fd73 	bl	80001d4 <__adddf3>
 80096ee:	2200      	movs	r2, #0
 80096f0:	2300      	movs	r3, #0
 80096f2:	f7f7 f9b1 	bl	8000a58 <__aeabi_dcmpgt>
 80096f6:	b3d8      	cbz	r0, 8009770 <floor+0xe8>
 80096f8:	2c00      	cmp	r4, #0
 80096fa:	bfbe      	ittt	lt
 80096fc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009700:	fa43 f606 	asrlt.w	r6, r3, r6
 8009704:	19a4      	addlt	r4, r4, r6
 8009706:	ea24 0407 	bic.w	r4, r4, r7
 800970a:	2500      	movs	r5, #0
 800970c:	e030      	b.n	8009770 <floor+0xe8>
 800970e:	2e33      	cmp	r6, #51	; 0x33
 8009710:	dd08      	ble.n	8009724 <floor+0x9c>
 8009712:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009716:	d12d      	bne.n	8009774 <floor+0xec>
 8009718:	ee10 2a10 	vmov	r2, s0
 800971c:	460b      	mov	r3, r1
 800971e:	f7f6 fd59 	bl	80001d4 <__adddf3>
 8009722:	e027      	b.n	8009774 <floor+0xec>
 8009724:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009728:	f04f 33ff 	mov.w	r3, #4294967295
 800972c:	fa23 f707 	lsr.w	r7, r3, r7
 8009730:	4238      	tst	r0, r7
 8009732:	d01f      	beq.n	8009774 <floor+0xec>
 8009734:	a312      	add	r3, pc, #72	; (adr r3, 8009780 <floor+0xf8>)
 8009736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973a:	f7f6 fd4b 	bl	80001d4 <__adddf3>
 800973e:	2200      	movs	r2, #0
 8009740:	2300      	movs	r3, #0
 8009742:	f7f7 f989 	bl	8000a58 <__aeabi_dcmpgt>
 8009746:	b198      	cbz	r0, 8009770 <floor+0xe8>
 8009748:	2c00      	cmp	r4, #0
 800974a:	da0c      	bge.n	8009766 <floor+0xde>
 800974c:	2e14      	cmp	r6, #20
 800974e:	d101      	bne.n	8009754 <floor+0xcc>
 8009750:	3401      	adds	r4, #1
 8009752:	e008      	b.n	8009766 <floor+0xde>
 8009754:	2301      	movs	r3, #1
 8009756:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800975a:	fa03 f606 	lsl.w	r6, r3, r6
 800975e:	4435      	add	r5, r6
 8009760:	45a8      	cmp	r8, r5
 8009762:	bf88      	it	hi
 8009764:	18e4      	addhi	r4, r4, r3
 8009766:	ea25 0507 	bic.w	r5, r5, r7
 800976a:	e001      	b.n	8009770 <floor+0xe8>
 800976c:	2500      	movs	r5, #0
 800976e:	462c      	mov	r4, r5
 8009770:	4621      	mov	r1, r4
 8009772:	4628      	mov	r0, r5
 8009774:	ec41 0b10 	vmov	d0, r0, r1
 8009778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800977c:	f3af 8000 	nop.w
 8009780:	8800759c 	.word	0x8800759c
 8009784:	7e37e43c 	.word	0x7e37e43c
 8009788:	bff00000 	.word	0xbff00000
 800978c:	000fffff 	.word	0x000fffff

08009790 <matherr>:
 8009790:	2000      	movs	r0, #0
 8009792:	4770      	bx	lr
 8009794:	0000      	movs	r0, r0
	...

08009798 <nan>:
 8009798:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80097a0 <nan+0x8>
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	00000000 	.word	0x00000000
 80097a4:	7ff80000 	.word	0x7ff80000

080097a8 <rint>:
 80097a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097aa:	ec53 2b10 	vmov	r2, r3, d0
 80097ae:	f3c3 570a 	ubfx	r7, r3, #20, #11
 80097b2:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80097b6:	2e13      	cmp	r6, #19
 80097b8:	461d      	mov	r5, r3
 80097ba:	4611      	mov	r1, r2
 80097bc:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 80097c0:	dc42      	bgt.n	8009848 <rint+0xa0>
 80097c2:	2e00      	cmp	r6, #0
 80097c4:	da28      	bge.n	8009818 <rint+0x70>
 80097c6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80097ca:	4311      	orrs	r1, r2
 80097cc:	d06b      	beq.n	80098a6 <rint+0xfe>
 80097ce:	f3c3 0613 	ubfx	r6, r3, #0, #20
 80097d2:	4316      	orrs	r6, r2
 80097d4:	4273      	negs	r3, r6
 80097d6:	431e      	orrs	r6, r3
 80097d8:	4b36      	ldr	r3, [pc, #216]	; (80098b4 <rint+0x10c>)
 80097da:	0b36      	lsrs	r6, r6, #12
 80097dc:	0c6d      	lsrs	r5, r5, #17
 80097de:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 80097e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097e6:	046d      	lsls	r5, r5, #17
 80097e8:	ea46 0105 	orr.w	r1, r6, r5
 80097ec:	e9d3 6700 	ldrd	r6, r7, [r3]
 80097f0:	ee10 0a10 	vmov	r0, s0
 80097f4:	4632      	mov	r2, r6
 80097f6:	463b      	mov	r3, r7
 80097f8:	f7f6 fcec 	bl	80001d4 <__adddf3>
 80097fc:	e9cd 0100 	strd	r0, r1, [sp]
 8009800:	4632      	mov	r2, r6
 8009802:	463b      	mov	r3, r7
 8009804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009808:	f7f6 fce2 	bl	80001d0 <__aeabi_dsub>
 800980c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009810:	4602      	mov	r2, r0
 8009812:	ea41 73c4 	orr.w	r3, r1, r4, lsl #31
 8009816:	e046      	b.n	80098a6 <rint+0xfe>
 8009818:	4827      	ldr	r0, [pc, #156]	; (80098b8 <rint+0x110>)
 800981a:	4130      	asrs	r0, r6
 800981c:	ea03 0700 	and.w	r7, r3, r0
 8009820:	4317      	orrs	r7, r2
 8009822:	d040      	beq.n	80098a6 <rint+0xfe>
 8009824:	0843      	lsrs	r3, r0, #1
 8009826:	ea05 0203 	and.w	r2, r5, r3
 800982a:	4311      	orrs	r1, r2
 800982c:	d027      	beq.n	800987e <rint+0xd6>
 800982e:	ea25 0303 	bic.w	r3, r5, r3
 8009832:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8009836:	2e13      	cmp	r6, #19
 8009838:	fa45 f506 	asr.w	r5, r5, r6
 800983c:	bf0c      	ite	eq
 800983e:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
 8009842:	2100      	movne	r1, #0
 8009844:	431d      	orrs	r5, r3
 8009846:	e01a      	b.n	800987e <rint+0xd6>
 8009848:	2e33      	cmp	r6, #51	; 0x33
 800984a:	dd08      	ble.n	800985e <rint+0xb6>
 800984c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009850:	ee10 0a10 	vmov	r0, s0
 8009854:	4619      	mov	r1, r3
 8009856:	d128      	bne.n	80098aa <rint+0x102>
 8009858:	f7f6 fcbc 	bl	80001d4 <__adddf3>
 800985c:	e025      	b.n	80098aa <rint+0x102>
 800985e:	f2a7 4613 	subw	r6, r7, #1043	; 0x413
 8009862:	f04f 30ff 	mov.w	r0, #4294967295
 8009866:	40f0      	lsrs	r0, r6
 8009868:	4202      	tst	r2, r0
 800986a:	d01c      	beq.n	80098a6 <rint+0xfe>
 800986c:	0843      	lsrs	r3, r0, #1
 800986e:	4219      	tst	r1, r3
 8009870:	bf1f      	itttt	ne
 8009872:	ea21 0303 	bicne.w	r3, r1, r3
 8009876:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000
 800987a:	4131      	asrne	r1, r6
 800987c:	4319      	orrne	r1, r3
 800987e:	4b0d      	ldr	r3, [pc, #52]	; (80098b4 <rint+0x10c>)
 8009880:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009884:	4608      	mov	r0, r1
 8009886:	4629      	mov	r1, r5
 8009888:	e9d4 4500 	ldrd	r4, r5, [r4]
 800988c:	4622      	mov	r2, r4
 800988e:	462b      	mov	r3, r5
 8009890:	f7f6 fca0 	bl	80001d4 <__adddf3>
 8009894:	e9cd 0100 	strd	r0, r1, [sp]
 8009898:	4622      	mov	r2, r4
 800989a:	462b      	mov	r3, r5
 800989c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098a0:	f7f6 fc96 	bl	80001d0 <__aeabi_dsub>
 80098a4:	e001      	b.n	80098aa <rint+0x102>
 80098a6:	4610      	mov	r0, r2
 80098a8:	4619      	mov	r1, r3
 80098aa:	ec41 0b10 	vmov	d0, r0, r1
 80098ae:	b003      	add	sp, #12
 80098b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098b2:	bf00      	nop
 80098b4:	0800a978 	.word	0x0800a978
 80098b8:	000fffff 	.word	0x000fffff
 80098bc:	00000000 	.word	0x00000000

080098c0 <scalbn>:
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	ec55 4b10 	vmov	r4, r5, d0
 80098c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80098ca:	4606      	mov	r6, r0
 80098cc:	462b      	mov	r3, r5
 80098ce:	b9a2      	cbnz	r2, 80098fa <scalbn+0x3a>
 80098d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80098d4:	4323      	orrs	r3, r4
 80098d6:	d059      	beq.n	800998c <scalbn+0xcc>
 80098d8:	2200      	movs	r2, #0
 80098da:	4b33      	ldr	r3, [pc, #204]	; (80099a8 <scalbn+0xe8>)
 80098dc:	4629      	mov	r1, r5
 80098de:	ee10 0a10 	vmov	r0, s0
 80098e2:	f7f6 fe29 	bl	8000538 <__aeabi_dmul>
 80098e6:	4a31      	ldr	r2, [pc, #196]	; (80099ac <scalbn+0xec>)
 80098e8:	4296      	cmp	r6, r2
 80098ea:	4604      	mov	r4, r0
 80098ec:	460d      	mov	r5, r1
 80098ee:	460b      	mov	r3, r1
 80098f0:	da0f      	bge.n	8009912 <scalbn+0x52>
 80098f2:	a329      	add	r3, pc, #164	; (adr r3, 8009998 <scalbn+0xd8>)
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	e045      	b.n	8009986 <scalbn+0xc6>
 80098fa:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80098fe:	428a      	cmp	r2, r1
 8009900:	d10a      	bne.n	8009918 <scalbn+0x58>
 8009902:	ee10 2a10 	vmov	r2, s0
 8009906:	462b      	mov	r3, r5
 8009908:	4620      	mov	r0, r4
 800990a:	4629      	mov	r1, r5
 800990c:	f7f6 fc62 	bl	80001d4 <__adddf3>
 8009910:	e03e      	b.n	8009990 <scalbn+0xd0>
 8009912:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009916:	3a36      	subs	r2, #54	; 0x36
 8009918:	4432      	add	r2, r6
 800991a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800991e:	428a      	cmp	r2, r1
 8009920:	dd02      	ble.n	8009928 <scalbn+0x68>
 8009922:	ec45 4b11 	vmov	d1, r4, r5
 8009926:	e011      	b.n	800994c <scalbn+0x8c>
 8009928:	2a00      	cmp	r2, #0
 800992a:	dd06      	ble.n	800993a <scalbn+0x7a>
 800992c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009930:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009934:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009938:	e028      	b.n	800998c <scalbn+0xcc>
 800993a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800993e:	da17      	bge.n	8009970 <scalbn+0xb0>
 8009940:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009944:	429e      	cmp	r6, r3
 8009946:	ec45 4b11 	vmov	d1, r4, r5
 800994a:	dd07      	ble.n	800995c <scalbn+0x9c>
 800994c:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80099a0 <scalbn+0xe0>
 8009950:	f000 f8e8 	bl	8009b24 <copysign>
 8009954:	a312      	add	r3, pc, #72	; (adr r3, 80099a0 <scalbn+0xe0>)
 8009956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995a:	e006      	b.n	800996a <scalbn+0xaa>
 800995c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009998 <scalbn+0xd8>
 8009960:	f000 f8e0 	bl	8009b24 <copysign>
 8009964:	a30c      	add	r3, pc, #48	; (adr r3, 8009998 <scalbn+0xd8>)
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	ec51 0b10 	vmov	r0, r1, d0
 800996e:	e00a      	b.n	8009986 <scalbn+0xc6>
 8009970:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009974:	3236      	adds	r2, #54	; 0x36
 8009976:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800997a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800997e:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <scalbn+0xf0>)
 8009980:	4620      	mov	r0, r4
 8009982:	4629      	mov	r1, r5
 8009984:	2200      	movs	r2, #0
 8009986:	f7f6 fdd7 	bl	8000538 <__aeabi_dmul>
 800998a:	e001      	b.n	8009990 <scalbn+0xd0>
 800998c:	4620      	mov	r0, r4
 800998e:	4629      	mov	r1, r5
 8009990:	ec41 0b10 	vmov	d0, r0, r1
 8009994:	bd70      	pop	{r4, r5, r6, pc}
 8009996:	bf00      	nop
 8009998:	c2f8f359 	.word	0xc2f8f359
 800999c:	01a56e1f 	.word	0x01a56e1f
 80099a0:	8800759c 	.word	0x8800759c
 80099a4:	7e37e43c 	.word	0x7e37e43c
 80099a8:	43500000 	.word	0x43500000
 80099ac:	ffff3cb0 	.word	0xffff3cb0
 80099b0:	3c900000 	.word	0x3c900000

080099b4 <fabsf>:
 80099b4:	ee10 3a10 	vmov	r3, s0
 80099b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099bc:	ee00 3a10 	vmov	s0, r3
 80099c0:	4770      	bx	lr

080099c2 <finitef>:
 80099c2:	ee10 3a10 	vmov	r3, s0
 80099c6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80099ca:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80099ce:	bfac      	ite	ge
 80099d0:	2000      	movge	r0, #0
 80099d2:	2001      	movlt	r0, #1
 80099d4:	4770      	bx	lr
	...

080099d8 <floorf>:
 80099d8:	ee10 3a10 	vmov	r3, s0
 80099dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80099e0:	0dca      	lsrs	r2, r1, #23
 80099e2:	3a7f      	subs	r2, #127	; 0x7f
 80099e4:	2a16      	cmp	r2, #22
 80099e6:	dc28      	bgt.n	8009a3a <floorf+0x62>
 80099e8:	2a00      	cmp	r2, #0
 80099ea:	da0f      	bge.n	8009a0c <floorf+0x34>
 80099ec:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009a50 <floorf+0x78>
 80099f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80099f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80099f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099fc:	dd24      	ble.n	8009a48 <floorf+0x70>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	da21      	bge.n	8009a46 <floorf+0x6e>
 8009a02:	4a14      	ldr	r2, [pc, #80]	; (8009a54 <floorf+0x7c>)
 8009a04:	2900      	cmp	r1, #0
 8009a06:	bf18      	it	ne
 8009a08:	4613      	movne	r3, r2
 8009a0a:	e01d      	b.n	8009a48 <floorf+0x70>
 8009a0c:	4912      	ldr	r1, [pc, #72]	; (8009a58 <floorf+0x80>)
 8009a0e:	4111      	asrs	r1, r2
 8009a10:	420b      	tst	r3, r1
 8009a12:	d01b      	beq.n	8009a4c <floorf+0x74>
 8009a14:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8009a50 <floorf+0x78>
 8009a18:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009a1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a24:	dd10      	ble.n	8009a48 <floorf+0x70>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	bfbe      	ittt	lt
 8009a2a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009a2e:	fa40 f202 	asrlt.w	r2, r0, r2
 8009a32:	189b      	addlt	r3, r3, r2
 8009a34:	ea23 0301 	bic.w	r3, r3, r1
 8009a38:	e006      	b.n	8009a48 <floorf+0x70>
 8009a3a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009a3e:	d305      	bcc.n	8009a4c <floorf+0x74>
 8009a40:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009a44:	4770      	bx	lr
 8009a46:	2300      	movs	r3, #0
 8009a48:	ee00 3a10 	vmov	s0, r3
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	7149f2ca 	.word	0x7149f2ca
 8009a54:	bf800000 	.word	0xbf800000
 8009a58:	007fffff 	.word	0x007fffff

08009a5c <nanf>:
 8009a5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009a64 <nanf+0x8>
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	7fc00000 	.word	0x7fc00000

08009a68 <scalbnf>:
 8009a68:	b508      	push	{r3, lr}
 8009a6a:	ee10 2a10 	vmov	r2, s0
 8009a6e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009a72:	ed2d 8b02 	vpush	{d8}
 8009a76:	eef0 0a40 	vmov.f32	s1, s0
 8009a7a:	d045      	beq.n	8009b08 <scalbnf+0xa0>
 8009a7c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009a80:	d302      	bcc.n	8009a88 <scalbnf+0x20>
 8009a82:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009a86:	e03f      	b.n	8009b08 <scalbnf+0xa0>
 8009a88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a8c:	d211      	bcs.n	8009ab2 <scalbnf+0x4a>
 8009a8e:	4b20      	ldr	r3, [pc, #128]	; (8009b10 <scalbnf+0xa8>)
 8009a90:	eddf 7a20 	vldr	s15, [pc, #128]	; 8009b14 <scalbnf+0xac>
 8009a94:	4298      	cmp	r0, r3
 8009a96:	ee60 0a27 	vmul.f32	s1, s0, s15
 8009a9a:	db05      	blt.n	8009aa8 <scalbnf+0x40>
 8009a9c:	ee10 2a90 	vmov	r2, s1
 8009aa0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8009aa4:	3b19      	subs	r3, #25
 8009aa6:	e005      	b.n	8009ab4 <scalbnf+0x4c>
 8009aa8:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8009b18 <scalbnf+0xb0>
 8009aac:	ee20 0a80 	vmul.f32	s0, s1, s0
 8009ab0:	e02a      	b.n	8009b08 <scalbnf+0xa0>
 8009ab2:	0ddb      	lsrs	r3, r3, #23
 8009ab4:	4403      	add	r3, r0
 8009ab6:	2bfe      	cmp	r3, #254	; 0xfe
 8009ab8:	dc0f      	bgt.n	8009ada <scalbnf+0x72>
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	dd06      	ble.n	8009acc <scalbnf+0x64>
 8009abe:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009ac2:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009ac6:	ee00 3a10 	vmov	s0, r3
 8009aca:	e01d      	b.n	8009b08 <scalbnf+0xa0>
 8009acc:	f113 0f16 	cmn.w	r3, #22
 8009ad0:	da0f      	bge.n	8009af2 <scalbnf+0x8a>
 8009ad2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009ad6:	4298      	cmp	r0, r3
 8009ad8:	dd02      	ble.n	8009ae0 <scalbnf+0x78>
 8009ada:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8009b1c <scalbnf+0xb4>
 8009ade:	e001      	b.n	8009ae4 <scalbnf+0x7c>
 8009ae0:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8009b18 <scalbnf+0xb0>
 8009ae4:	eeb0 0a48 	vmov.f32	s0, s16
 8009ae8:	f000 f829 	bl	8009b3e <copysignf>
 8009aec:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009af0:	e00a      	b.n	8009b08 <scalbnf+0xa0>
 8009af2:	3319      	adds	r3, #25
 8009af4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009af8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009afc:	ee00 3a90 	vmov	s1, r3
 8009b00:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009b20 <scalbnf+0xb8>
 8009b04:	ee20 0aa7 	vmul.f32	s0, s1, s15
 8009b08:	ecbd 8b02 	vpop	{d8}
 8009b0c:	bd08      	pop	{r3, pc}
 8009b0e:	bf00      	nop
 8009b10:	ffff3cb0 	.word	0xffff3cb0
 8009b14:	4c000000 	.word	0x4c000000
 8009b18:	0da24260 	.word	0x0da24260
 8009b1c:	7149f2ca 	.word	0x7149f2ca
 8009b20:	33000000 	.word	0x33000000

08009b24 <copysign>:
 8009b24:	ec53 2b10 	vmov	r2, r3, d0
 8009b28:	ee11 0a90 	vmov	r0, s3
 8009b2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009b30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009b34:	ea41 0300 	orr.w	r3, r1, r0
 8009b38:	ec43 2b10 	vmov	d0, r2, r3
 8009b3c:	4770      	bx	lr

08009b3e <copysignf>:
 8009b3e:	ee10 3a10 	vmov	r3, s0
 8009b42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009b46:	ee10 3a90 	vmov	r3, s1
 8009b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	ee00 3a10 	vmov	s0, r3
 8009b54:	4770      	bx	lr
	...

08009b58 <__errno>:
 8009b58:	4b01      	ldr	r3, [pc, #4]	; (8009b60 <__errno+0x8>)
 8009b5a:	6818      	ldr	r0, [r3, #0]
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	2000059c 	.word	0x2000059c

08009b64 <_sbrk>:
 8009b64:	4b04      	ldr	r3, [pc, #16]	; (8009b78 <_sbrk+0x14>)
 8009b66:	6819      	ldr	r1, [r3, #0]
 8009b68:	4602      	mov	r2, r0
 8009b6a:	b909      	cbnz	r1, 8009b70 <_sbrk+0xc>
 8009b6c:	4903      	ldr	r1, [pc, #12]	; (8009b7c <_sbrk+0x18>)
 8009b6e:	6019      	str	r1, [r3, #0]
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	4402      	add	r2, r0
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	4770      	bx	lr
 8009b78:	200049ac 	.word	0x200049ac
 8009b7c:	20004aac 	.word	0x20004aac

08009b80 <_init>:
 8009b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b82:	bf00      	nop
 8009b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b86:	bc08      	pop	{r3}
 8009b88:	469e      	mov	lr, r3
 8009b8a:	4770      	bx	lr

08009b8c <_fini>:
 8009b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8e:	bf00      	nop
 8009b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b92:	bc08      	pop	{r3}
 8009b94:	469e      	mov	lr, r3
 8009b96:	4770      	bx	lr
